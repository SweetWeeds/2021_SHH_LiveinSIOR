
wearable_for_bus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fcc4  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003420  0800fe88  0800fe88  0001fe88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080132a8  080132a8  000307f4  2**0
                  CONTENTS
  4 .ARM          00000008  080132a8  080132a8  000232a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080132b0  080132b0  000307f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080132b0  080132b0  000232b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080132b4  080132b4  000232b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000007f4  20000000  080132b8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001008  200007f4  08013aac  000307f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000a04  200017fc  08013aac  000317fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000307f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004bed4  00000000  00000000  00030824  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006337  00000000  00000000  0007c6f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002a68  00000000  00000000  00082a30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002768  00000000  00000000  00085498  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000377eb  00000000  00000000  00087c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00024e58  00000000  00000000  000bf3eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0013a8c3  00000000  00000000  000e4243  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0021eb06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bffc  00000000  00000000  0021eb84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200007f4 	.word	0x200007f4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800fe6c 	.word	0x0800fe6c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200007f8 	.word	0x200007f8
 80001fc:	0800fe6c 	.word	0x0800fe6c

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b972 	b.w	8000f74 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9e08      	ldr	r6, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	4688      	mov	r8, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d14b      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb6:	428a      	cmp	r2, r1
 8000cb8:	4615      	mov	r5, r2
 8000cba:	d967      	bls.n	8000d8c <__udivmoddi4+0xe4>
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	b14a      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc2:	f1c2 0720 	rsb	r7, r2, #32
 8000cc6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cca:	fa20 f707 	lsr.w	r7, r0, r7
 8000cce:	4095      	lsls	r5, r2
 8000cd0:	ea47 0803 	orr.w	r8, r7, r3
 8000cd4:	4094      	lsls	r4, r2
 8000cd6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ce0:	fa1f fc85 	uxth.w	ip, r5
 8000ce4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ce8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cec:	fb07 f10c 	mul.w	r1, r7, ip
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x60>
 8000cf4:	18eb      	adds	r3, r5, r3
 8000cf6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cfa:	f080 811b 	bcs.w	8000f34 <__udivmoddi4+0x28c>
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	f240 8118 	bls.w	8000f34 <__udivmoddi4+0x28c>
 8000d04:	3f02      	subs	r7, #2
 8000d06:	442b      	add	r3, r5
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d10:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d1c:	45a4      	cmp	ip, r4
 8000d1e:	d909      	bls.n	8000d34 <__udivmoddi4+0x8c>
 8000d20:	192c      	adds	r4, r5, r4
 8000d22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d26:	f080 8107 	bcs.w	8000f38 <__udivmoddi4+0x290>
 8000d2a:	45a4      	cmp	ip, r4
 8000d2c:	f240 8104 	bls.w	8000f38 <__udivmoddi4+0x290>
 8000d30:	3802      	subs	r0, #2
 8000d32:	442c      	add	r4, r5
 8000d34:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d38:	eba4 040c 	sub.w	r4, r4, ip
 8000d3c:	2700      	movs	r7, #0
 8000d3e:	b11e      	cbz	r6, 8000d48 <__udivmoddi4+0xa0>
 8000d40:	40d4      	lsrs	r4, r2
 8000d42:	2300      	movs	r3, #0
 8000d44:	e9c6 4300 	strd	r4, r3, [r6]
 8000d48:	4639      	mov	r1, r7
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0xbe>
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	f000 80eb 	beq.w	8000f2e <__udivmoddi4+0x286>
 8000d58:	2700      	movs	r7, #0
 8000d5a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d5e:	4638      	mov	r0, r7
 8000d60:	4639      	mov	r1, r7
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	fab3 f783 	clz	r7, r3
 8000d6a:	2f00      	cmp	r7, #0
 8000d6c:	d147      	bne.n	8000dfe <__udivmoddi4+0x156>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d302      	bcc.n	8000d78 <__udivmoddi4+0xd0>
 8000d72:	4282      	cmp	r2, r0
 8000d74:	f200 80fa 	bhi.w	8000f6c <__udivmoddi4+0x2c4>
 8000d78:	1a84      	subs	r4, r0, r2
 8000d7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d7e:	2001      	movs	r0, #1
 8000d80:	4698      	mov	r8, r3
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	d0e0      	beq.n	8000d48 <__udivmoddi4+0xa0>
 8000d86:	e9c6 4800 	strd	r4, r8, [r6]
 8000d8a:	e7dd      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000d8c:	b902      	cbnz	r2, 8000d90 <__udivmoddi4+0xe8>
 8000d8e:	deff      	udf	#255	; 0xff
 8000d90:	fab2 f282 	clz	r2, r2
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f040 808f 	bne.w	8000eb8 <__udivmoddi4+0x210>
 8000d9a:	1b49      	subs	r1, r1, r5
 8000d9c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000da0:	fa1f f885 	uxth.w	r8, r5
 8000da4:	2701      	movs	r7, #1
 8000da6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000daa:	0c23      	lsrs	r3, r4, #16
 8000dac:	fb0e 111c 	mls	r1, lr, ip, r1
 8000db0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db4:	fb08 f10c 	mul.w	r1, r8, ip
 8000db8:	4299      	cmp	r1, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x124>
 8000dbc:	18eb      	adds	r3, r5, r3
 8000dbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x122>
 8000dc4:	4299      	cmp	r1, r3
 8000dc6:	f200 80cd 	bhi.w	8000f64 <__udivmoddi4+0x2bc>
 8000dca:	4684      	mov	ip, r0
 8000dcc:	1a59      	subs	r1, r3, r1
 8000dce:	b2a3      	uxth	r3, r4
 8000dd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dd4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dd8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ddc:	fb08 f800 	mul.w	r8, r8, r0
 8000de0:	45a0      	cmp	r8, r4
 8000de2:	d907      	bls.n	8000df4 <__udivmoddi4+0x14c>
 8000de4:	192c      	adds	r4, r5, r4
 8000de6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x14a>
 8000dec:	45a0      	cmp	r8, r4
 8000dee:	f200 80b6 	bhi.w	8000f5e <__udivmoddi4+0x2b6>
 8000df2:	4618      	mov	r0, r3
 8000df4:	eba4 0408 	sub.w	r4, r4, r8
 8000df8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dfc:	e79f      	b.n	8000d3e <__udivmoddi4+0x96>
 8000dfe:	f1c7 0c20 	rsb	ip, r7, #32
 8000e02:	40bb      	lsls	r3, r7
 8000e04:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e08:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e0c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e10:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e14:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e18:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e1c:	4325      	orrs	r5, r4
 8000e1e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e22:	0c2c      	lsrs	r4, r5, #16
 8000e24:	fb08 3319 	mls	r3, r8, r9, r3
 8000e28:	fa1f fa8e 	uxth.w	sl, lr
 8000e2c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e30:	fb09 f40a 	mul.w	r4, r9, sl
 8000e34:	429c      	cmp	r4, r3
 8000e36:	fa02 f207 	lsl.w	r2, r2, r7
 8000e3a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e3e:	d90b      	bls.n	8000e58 <__udivmoddi4+0x1b0>
 8000e40:	eb1e 0303 	adds.w	r3, lr, r3
 8000e44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e48:	f080 8087 	bcs.w	8000f5a <__udivmoddi4+0x2b2>
 8000e4c:	429c      	cmp	r4, r3
 8000e4e:	f240 8084 	bls.w	8000f5a <__udivmoddi4+0x2b2>
 8000e52:	f1a9 0902 	sub.w	r9, r9, #2
 8000e56:	4473      	add	r3, lr
 8000e58:	1b1b      	subs	r3, r3, r4
 8000e5a:	b2ad      	uxth	r5, r5
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3310 	mls	r3, r8, r0, r3
 8000e64:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e68:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e6c:	45a2      	cmp	sl, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x1da>
 8000e70:	eb1e 0404 	adds.w	r4, lr, r4
 8000e74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e78:	d26b      	bcs.n	8000f52 <__udivmoddi4+0x2aa>
 8000e7a:	45a2      	cmp	sl, r4
 8000e7c:	d969      	bls.n	8000f52 <__udivmoddi4+0x2aa>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	4474      	add	r4, lr
 8000e82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e86:	fba0 8902 	umull	r8, r9, r0, r2
 8000e8a:	eba4 040a 	sub.w	r4, r4, sl
 8000e8e:	454c      	cmp	r4, r9
 8000e90:	46c2      	mov	sl, r8
 8000e92:	464b      	mov	r3, r9
 8000e94:	d354      	bcc.n	8000f40 <__udivmoddi4+0x298>
 8000e96:	d051      	beq.n	8000f3c <__udivmoddi4+0x294>
 8000e98:	2e00      	cmp	r6, #0
 8000e9a:	d069      	beq.n	8000f70 <__udivmoddi4+0x2c8>
 8000e9c:	ebb1 050a 	subs.w	r5, r1, sl
 8000ea0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ea4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ea8:	40fd      	lsrs	r5, r7
 8000eaa:	40fc      	lsrs	r4, r7
 8000eac:	ea4c 0505 	orr.w	r5, ip, r5
 8000eb0:	e9c6 5400 	strd	r5, r4, [r6]
 8000eb4:	2700      	movs	r7, #0
 8000eb6:	e747      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ec0:	4095      	lsls	r5, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ece:	4338      	orrs	r0, r7
 8000ed0:	0c01      	lsrs	r1, r0, #16
 8000ed2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ed6:	fa1f f885 	uxth.w	r8, r5
 8000eda:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb07 f308 	mul.w	r3, r7, r8
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eec:	d907      	bls.n	8000efe <__udivmoddi4+0x256>
 8000eee:	1869      	adds	r1, r5, r1
 8000ef0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ef4:	d22f      	bcs.n	8000f56 <__udivmoddi4+0x2ae>
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	d92d      	bls.n	8000f56 <__udivmoddi4+0x2ae>
 8000efa:	3f02      	subs	r7, #2
 8000efc:	4429      	add	r1, r5
 8000efe:	1acb      	subs	r3, r1, r3
 8000f00:	b281      	uxth	r1, r0
 8000f02:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f06:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f0e:	fb00 f308 	mul.w	r3, r0, r8
 8000f12:	428b      	cmp	r3, r1
 8000f14:	d907      	bls.n	8000f26 <__udivmoddi4+0x27e>
 8000f16:	1869      	adds	r1, r5, r1
 8000f18:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1c:	d217      	bcs.n	8000f4e <__udivmoddi4+0x2a6>
 8000f1e:	428b      	cmp	r3, r1
 8000f20:	d915      	bls.n	8000f4e <__udivmoddi4+0x2a6>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4429      	add	r1, r5
 8000f26:	1ac9      	subs	r1, r1, r3
 8000f28:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f2c:	e73b      	b.n	8000da6 <__udivmoddi4+0xfe>
 8000f2e:	4637      	mov	r7, r6
 8000f30:	4630      	mov	r0, r6
 8000f32:	e709      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000f34:	4607      	mov	r7, r0
 8000f36:	e6e7      	b.n	8000d08 <__udivmoddi4+0x60>
 8000f38:	4618      	mov	r0, r3
 8000f3a:	e6fb      	b.n	8000d34 <__udivmoddi4+0x8c>
 8000f3c:	4541      	cmp	r1, r8
 8000f3e:	d2ab      	bcs.n	8000e98 <__udivmoddi4+0x1f0>
 8000f40:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f44:	eb69 020e 	sbc.w	r2, r9, lr
 8000f48:	3801      	subs	r0, #1
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	e7a4      	b.n	8000e98 <__udivmoddi4+0x1f0>
 8000f4e:	4660      	mov	r0, ip
 8000f50:	e7e9      	b.n	8000f26 <__udivmoddi4+0x27e>
 8000f52:	4618      	mov	r0, r3
 8000f54:	e795      	b.n	8000e82 <__udivmoddi4+0x1da>
 8000f56:	4667      	mov	r7, ip
 8000f58:	e7d1      	b.n	8000efe <__udivmoddi4+0x256>
 8000f5a:	4681      	mov	r9, r0
 8000f5c:	e77c      	b.n	8000e58 <__udivmoddi4+0x1b0>
 8000f5e:	3802      	subs	r0, #2
 8000f60:	442c      	add	r4, r5
 8000f62:	e747      	b.n	8000df4 <__udivmoddi4+0x14c>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	442b      	add	r3, r5
 8000f6a:	e72f      	b.n	8000dcc <__udivmoddi4+0x124>
 8000f6c:	4638      	mov	r0, r7
 8000f6e:	e708      	b.n	8000d82 <__udivmoddi4+0xda>
 8000f70:	4637      	mov	r7, r6
 8000f72:	e6e9      	b.n	8000d48 <__udivmoddi4+0xa0>

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <MX_BlueNRG_MS_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", ms/(60*60*1000)%24, ms/(60*1000)%60, (ms/1000)%60, ms%1000);
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b088      	sub	sp, #32
 8000f7c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN BlueNRG_MS_Init_PreTreatment */

  /* USER CODE END BlueNRG_MS_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  tBleStatus ret = BLE_STATUS_SUCCESS;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	75fb      	strb	r3, [r7, #23]

  uint16_t service_handle, dev_name_char_handle, appearance_char_handle;
  uint8_t SERVER_BDADDR[] = { MAC_ADDRESS };
 8000f82:	4a33      	ldr	r2, [pc, #204]	; (8001050 <MX_BlueNRG_MS_Init+0xd8>)
 8000f84:	f107 0308 	add.w	r3, r7, #8
 8000f88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f8c:	6018      	str	r0, [r3, #0]
 8000f8e:	3304      	adds	r3, #4
 8000f90:	8019      	strh	r1, [r3, #0]

  uint8_t  hwVersion;
  uint16_t fwVersion;
  uint8_t bnrg_expansion_board = IDB04A1; /* at startup, suppose the X-NUCLEO-IDB04A1 is used */
 8000f92:	2300      	movs	r3, #0
 8000f94:	75bb      	strb	r3, [r7, #22]

  User_Init();
 8000f96:	f000 f85f 	bl	8001058 <User_Init>

  hci_init(user_notify, NULL);
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	482d      	ldr	r0, [pc, #180]	; (8001054 <MX_BlueNRG_MS_Init+0xdc>)
 8000f9e:	f009 faa1 	bl	800a4e4 <hci_init>

  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 8000fa2:	1d3a      	adds	r2, r7, #4
 8000fa4:	1dfb      	adds	r3, r7, #7
 8000fa6:	4611      	mov	r1, r2
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f009 f912 	bl	800a1d2 <getBlueNRGVersion>
   * Reset BlueNRG again otherwise we won't
   * be able to change its MAC address.
   * aci_hal_write_config_data() must be the first
   * command after reset otherwise it will fail.
   */
  hci_reset();
 8000fae:	f009 f954 	bl	800a25a <hci_reset>

  HAL_Delay(100);
 8000fb2:	2064      	movs	r0, #100	; 0x64
 8000fb4:	f002 ff34 	bl	8003e20 <HAL_Delay>

  if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	2b30      	cmp	r3, #48	; 0x30
 8000fbc:	d901      	bls.n	8000fc2 <MX_BlueNRG_MS_Init+0x4a>
    bnrg_expansion_board = IDB05A1;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	75bb      	strb	r3, [r7, #22]
  }

  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8000fc2:	f107 0308 	add.w	r3, r7, #8
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	2106      	movs	r1, #6
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f009 f868 	bl	800a0a0 <aci_hal_write_config_data>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	75fb      	strb	r3, [r7, #23]
                                  CONFIG_DATA_PUBADDR_LEN,
                                  SERVER_BDADDR);

  if (ret != BLE_STATUS_SUCCESS)
 8000fd4:	7dfb      	ldrb	r3, [r7, #23]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d000      	beq.n	8000fdc <MX_BlueNRG_MS_Init+0x64>
  {
    __asm("nop");
 8000fda:	bf00      	nop
  }

  ret = aci_gatt_init();
 8000fdc:	f009 f83d 	bl	800a05a <aci_gatt_init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	75fb      	strb	r3, [r7, #23]

  if (ret != BLE_STATUS_SUCCESS)
 8000fe4:	7dfb      	ldrb	r3, [r7, #23]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d000      	beq.n	8000fec <MX_BlueNRG_MS_Init+0x74>
  {
    __asm("nop");
 8000fea:	bf00      	nop
  }

  if (bnrg_expansion_board == IDB05A1) {
 8000fec:	7dbb      	ldrb	r3, [r7, #22]
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d110      	bne.n	8001014 <MX_BlueNRG_MS_Init+0x9c>
    ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000ff2:	f107 0214 	add.w	r2, r7, #20
 8000ff6:	f107 0310 	add.w	r3, r7, #16
 8000ffa:	9301      	str	r3, [sp, #4]
 8000ffc:	f107 0312 	add.w	r3, r7, #18
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	4613      	mov	r3, r2
 8001004:	2207      	movs	r2, #7
 8001006:	2100      	movs	r1, #0
 8001008:	2001      	movs	r0, #1
 800100a:	f008 fe1f 	bl	8009c4c <aci_gap_init_IDB05A1>
 800100e:	4603      	mov	r3, r0
 8001010:	75fb      	strb	r3, [r7, #23]
 8001012:	e00a      	b.n	800102a <MX_BlueNRG_MS_Init+0xb2>
  }
  else {
    ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8001014:	f107 0310 	add.w	r3, r7, #16
 8001018:	f107 0212 	add.w	r2, r7, #18
 800101c:	f107 0114 	add.w	r1, r7, #20
 8001020:	2001      	movs	r0, #1
 8001022:	f008 fe63 	bl	8009cec <aci_gap_init_IDB04A1>
 8001026:	4603      	mov	r3, r0
 8001028:	75fb      	strb	r3, [r7, #23]
  }

  if (ret != BLE_STATUS_SUCCESS)
 800102a:	7dfb      	ldrb	r3, [r7, #23]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d000      	beq.n	8001032 <MX_BlueNRG_MS_Init+0xba>
  {
    __asm("nop");
 8001030:	bf00      	nop
  }

  ret = aci_hal_set_tx_power_level(1,4);
 8001032:	2104      	movs	r1, #4
 8001034:	2001      	movs	r0, #1
 8001036:	f009 f89b 	bl	800a170 <aci_hal_set_tx_power_level>
 800103a:	4603      	mov	r3, r0
 800103c:	75fb      	strb	r3, [r7, #23]

  if (ret != BLE_STATUS_SUCCESS)
 800103e:	7dfb      	ldrb	r3, [r7, #23]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d000      	beq.n	8001046 <MX_BlueNRG_MS_Init+0xce>
  {
    __asm("nop");
 8001044:	bf00      	nop
  }*/

  /* USER CODE BEGIN BlueNRG_MS_Init_PostTreatment */

  /* USER CODE END BlueNRG_MS_Init_PostTreatment */
}
 8001046:	bf00      	nop
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	0800fe88 	.word	0x0800fe88
 8001054:	0800127d 	.word	0x0800127d

08001058 <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  BSP_COM_Init(COM1);
 800105c:	2000      	movs	r0, #0
 800105e:	f001 fbad 	bl	80027bc <BSP_COM_Init>
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <EddystoneUID_Start>:
  * @brief  This function starts the Eddystone UID device
  * @param  None
  * @retval None
  */
void EddystoneUID_Start(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08a      	sub	sp, #40	; 0x28
 800106c:	af00      	add	r7, sp, #0
  uint8_t NamespaceID[] = { NAMESPACE_ID };
 800106e:	4a14      	ldr	r2, [pc, #80]	; (80010c0 <EddystoneUID_Start+0x58>)
 8001070:	f107 031c 	add.w	r3, r7, #28
 8001074:	ca07      	ldmia	r2, {r0, r1, r2}
 8001076:	c303      	stmia	r3!, {r0, r1}
 8001078:	801a      	strh	r2, [r3, #0]
  uint8_t BeaconID[] = { BEACON_ID };
 800107a:	2300      	movs	r3, #0
 800107c:	753b      	strb	r3, [r7, #20]
 800107e:	2300      	movs	r3, #0
 8001080:	757b      	strb	r3, [r7, #21]
 8001082:	2300      	movs	r3, #0
 8001084:	75bb      	strb	r3, [r7, #22]
 8001086:	2300      	movs	r3, #0
 8001088:	75fb      	strb	r3, [r7, #23]
 800108a:	2300      	movs	r3, #0
 800108c:	763b      	strb	r3, [r7, #24]
 800108e:	2301      	movs	r3, #1
 8001090:	767b      	strb	r3, [r7, #25]

  EddystoneUID_InitTypeDef EddystoneUID_InitStruct =
 8001092:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8001096:	80bb      	strh	r3, [r7, #4]
 8001098:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800109c:	80fb      	strh	r3, [r7, #6]
 800109e:	23ea      	movs	r3, #234	; 0xea
 80010a0:	723b      	strb	r3, [r7, #8]
 80010a2:	f107 031c 	add.w	r3, r7, #28
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	613b      	str	r3, [r7, #16]
    .CalibratedTxPower = CALIBRATED_TX_POWER_AT_0_M,
    .NamespaceID = NamespaceID,
    .BeaconID = BeaconID
  };

  EddystoneUID_Init(&EddystoneUID_InitStruct);
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	4618      	mov	r0, r3
 80010b2:	f000 f807 	bl	80010c4 <EddystoneUID_Init>
}
 80010b6:	bf00      	nop
 80010b8:	3728      	adds	r7, #40	; 0x28
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	0800fe90 	.word	0x0800fe90

080010c4 <EddystoneUID_Init>:
  * @brief  This function initializes the Eddystone UID Bluetooth services
  * @param  EddystoneUID_Init pointer to initialization structure
  * @retval None
  */
tBleStatus EddystoneUID_Init(EddystoneUID_InitTypeDef *EddystoneUID_Init)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b094      	sub	sp, #80	; 0x50
 80010c8:	af08      	add	r7, sp, #32
 80010ca:	6078      	str	r0, [r7, #4]
  tBleStatus ret = BLE_STATUS_SUCCESS;
 80010cc:	2300      	movs	r3, #0
 80010ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Disable scan response. */
  hci_le_set_scan_resp_data(0, NULL);
 80010d2:	2100      	movs	r1, #0
 80010d4:	2000      	movs	r0, #0
 80010d6:	f009 f92c 	bl	800a332 <hci_le_set_scan_resp_data>

  /* Put the device in a non-connectable mode. */
  ret = aci_gap_set_discoverable(ADVERTISING_DATA_TYPE,           /*< Advertise as non-connectable, undirected. */
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	8819      	ldrh	r1, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	885a      	ldrh	r2, [r3, #2]
 80010e2:	2300      	movs	r3, #0
 80010e4:	9306      	str	r3, [sp, #24]
 80010e6:	2300      	movs	r3, #0
 80010e8:	9305      	str	r3, [sp, #20]
 80010ea:	2300      	movs	r3, #0
 80010ec:	9304      	str	r3, [sp, #16]
 80010ee:	2300      	movs	r3, #0
 80010f0:	9303      	str	r3, [sp, #12]
 80010f2:	2300      	movs	r3, #0
 80010f4:	9302      	str	r3, [sp, #8]
 80010f6:	2300      	movs	r3, #0
 80010f8:	9301      	str	r3, [sp, #4]
 80010fa:	2300      	movs	r3, #0
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	2300      	movs	r3, #0
 8001100:	2003      	movs	r0, #3
 8001102:	f008 fe3d 	bl	8009d80 <aci_gap_set_discoverable>
 8001106:	4603      	mov	r3, r0
 8001108:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                 PUBLIC_ADDR, NO_WHITE_LIST_USE,  /*< Use the public address, with no white list. */
                                 0, NULL,                         /*< Do not use a local name. */
                                 0, NULL,                         /*< Do not include the service UUID list. */
                                 0, 0);                           /*< Do not set a slave connection interval. */

  if (ret != BLE_STATUS_SUCCESS)
 800110c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001110:	2b00      	cmp	r3, #0
 8001112:	d002      	beq.n	800111a <EddystoneUID_Init+0x56>
  {
    return ret;
 8001114:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001118:	e0a7      	b.n	800126a <EddystoneUID_Init+0x1a6>
  }

  /* Remove the TX power level advertisement (this is done to decrease the packet size). */
  ret = aci_gap_delete_ad_type(AD_TYPE_TX_POWER_LEVEL);
 800111a:	200a      	movs	r0, #10
 800111c:	f008 ff71 	bl	800a002 <aci_gap_delete_ad_type>
 8001120:	4603      	mov	r3, r0
 8001122:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (ret != BLE_STATUS_SUCCESS)
 8001126:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800112a:	2b00      	cmp	r3, #0
 800112c:	d002      	beq.n	8001134 <EddystoneUID_Init+0x70>
  {
    return ret;
 800112e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001132:	e09a      	b.n	800126a <EddystoneUID_Init+0x1a6>
  }

  uint8_t service_data[] =
 8001134:	2317      	movs	r3, #23
 8001136:	753b      	strb	r3, [r7, #20]
 8001138:	2316      	movs	r3, #22
 800113a:	757b      	strb	r3, [r7, #21]
 800113c:	23aa      	movs	r3, #170	; 0xaa
 800113e:	75bb      	strb	r3, [r7, #22]
 8001140:	23fe      	movs	r3, #254	; 0xfe
 8001142:	75fb      	strb	r3, [r7, #23]
 8001144:	2300      	movs	r3, #0
 8001146:	763b      	strb	r3, [r7, #24]
  {
    23,                                                                      /*< Length. */
    AD_TYPE_SERVICE_DATA,                                                    /*< Service Data data type value. */
    0xAA, 0xFE,                                                              /*< 16-bit Eddystone UUID. */
    0x00,                                                                    /*< UID frame type. */
    EddystoneUID_Init->CalibratedTxPower,                                    /*< Ranging data. */
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	791b      	ldrb	r3, [r3, #4]
  uint8_t service_data[] =
 800114c:	767b      	strb	r3, [r7, #25]
    EddystoneUID_Init->NamespaceID[0],                                       /*< 10-byte ID Namespace. */
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	781b      	ldrb	r3, [r3, #0]
  uint8_t service_data[] =
 8001154:	76bb      	strb	r3, [r7, #26]
    EddystoneUID_Init->NamespaceID[1],
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	689b      	ldr	r3, [r3, #8]
  uint8_t service_data[] =
 800115a:	785b      	ldrb	r3, [r3, #1]
 800115c:	76fb      	strb	r3, [r7, #27]
    EddystoneUID_Init->NamespaceID[2],
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	689b      	ldr	r3, [r3, #8]
  uint8_t service_data[] =
 8001162:	789b      	ldrb	r3, [r3, #2]
 8001164:	773b      	strb	r3, [r7, #28]
    EddystoneUID_Init->NamespaceID[3],
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	689b      	ldr	r3, [r3, #8]
  uint8_t service_data[] =
 800116a:	78db      	ldrb	r3, [r3, #3]
 800116c:	777b      	strb	r3, [r7, #29]
    EddystoneUID_Init->NamespaceID[4],
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	689b      	ldr	r3, [r3, #8]
  uint8_t service_data[] =
 8001172:	791b      	ldrb	r3, [r3, #4]
 8001174:	77bb      	strb	r3, [r7, #30]
    EddystoneUID_Init->NamespaceID[5],
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	689b      	ldr	r3, [r3, #8]
  uint8_t service_data[] =
 800117a:	795b      	ldrb	r3, [r3, #5]
 800117c:	77fb      	strb	r3, [r7, #31]
    EddystoneUID_Init->NamespaceID[6],
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	689b      	ldr	r3, [r3, #8]
  uint8_t service_data[] =
 8001182:	799b      	ldrb	r3, [r3, #6]
 8001184:	f887 3020 	strb.w	r3, [r7, #32]
    EddystoneUID_Init->NamespaceID[7],
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	689b      	ldr	r3, [r3, #8]
  uint8_t service_data[] =
 800118c:	79db      	ldrb	r3, [r3, #7]
 800118e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    EddystoneUID_Init->NamespaceID[8],
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	689b      	ldr	r3, [r3, #8]
  uint8_t service_data[] =
 8001196:	7a1b      	ldrb	r3, [r3, #8]
 8001198:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    EddystoneUID_Init->NamespaceID[9],
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	689b      	ldr	r3, [r3, #8]
  uint8_t service_data[] =
 80011a0:	7a5b      	ldrb	r3, [r3, #9]
 80011a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    EddystoneUID_Init->BeaconID[0],                                         /*< 6-byte ID Instance. */
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	781b      	ldrb	r3, [r3, #0]
  uint8_t service_data[] =
 80011ac:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    EddystoneUID_Init->BeaconID[1],
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	68db      	ldr	r3, [r3, #12]
  uint8_t service_data[] =
 80011b4:	785b      	ldrb	r3, [r3, #1]
 80011b6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    EddystoneUID_Init->BeaconID[2],
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	68db      	ldr	r3, [r3, #12]
  uint8_t service_data[] =
 80011be:	789b      	ldrb	r3, [r3, #2]
 80011c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    EddystoneUID_Init->BeaconID[3],
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	68db      	ldr	r3, [r3, #12]
  uint8_t service_data[] =
 80011c8:	78db      	ldrb	r3, [r3, #3]
 80011ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    EddystoneUID_Init->BeaconID[4],
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	68db      	ldr	r3, [r3, #12]
  uint8_t service_data[] =
 80011d2:	791b      	ldrb	r3, [r3, #4]
 80011d4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    EddystoneUID_Init->BeaconID[5],
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	68db      	ldr	r3, [r3, #12]
  uint8_t service_data[] =
 80011dc:	795b      	ldrb	r3, [r3, #5]
 80011de:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80011e2:	2300      	movs	r3, #0
 80011e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80011e8:	2300      	movs	r3, #0
 80011ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    0x00,                                                                   /*< Reserved. */
    0x00                                                                    /*< Reserved. */
  };

  uint8_t service_uuid_list[] =
 80011ee:	4b21      	ldr	r3, [pc, #132]	; (8001274 <EddystoneUID_Init+0x1b0>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	613b      	str	r3, [r7, #16]
    3,                                                                      /*< Length. */
    AD_TYPE_16_BIT_SERV_UUID_CMPLT_LIST,                                    /*< Complete list of 16-bit Service UUIDs data type value. */
    0xAA, 0xFE                                                              /*< 16-bit Eddystone UUID. */
  };

  uint8_t flags[] =
 80011f4:	4a20      	ldr	r2, [pc, #128]	; (8001278 <EddystoneUID_Init+0x1b4>)
 80011f6:	f107 030c 	add.w	r3, r7, #12
 80011fa:	6812      	ldr	r2, [r2, #0]
 80011fc:	4611      	mov	r1, r2
 80011fe:	8019      	strh	r1, [r3, #0]
 8001200:	3302      	adds	r3, #2
 8001202:	0c12      	lsrs	r2, r2, #16
 8001204:	701a      	strb	r2, [r3, #0]
    AD_TYPE_FLAGS,                                                          /*< Flags data type value. */
    (FLAG_BIT_LE_GENERAL_DISCOVERABLE_MODE | FLAG_BIT_BR_EDR_NOT_SUPPORTED) /*< BLE general discoverable, without BR/EDR support. */
  };

  /* Update the service data. */
  ret = aci_gap_update_adv_data(sizeof(service_data), service_data);
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	4619      	mov	r1, r3
 800120c:	2018      	movs	r0, #24
 800120e:	f008 fea6 	bl	8009f5e <aci_gap_update_adv_data>
 8001212:	4603      	mov	r3, r0
 8001214:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (ret != BLE_STATUS_SUCCESS)
 8001218:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800121c:	2b00      	cmp	r3, #0
 800121e:	d002      	beq.n	8001226 <EddystoneUID_Init+0x162>
  {
    return ret;
 8001220:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001224:	e021      	b.n	800126a <EddystoneUID_Init+0x1a6>
  }

  /* Update the service UUID list. */
  ret = aci_gap_update_adv_data(sizeof(service_uuid_list), service_uuid_list);
 8001226:	f107 0310 	add.w	r3, r7, #16
 800122a:	4619      	mov	r1, r3
 800122c:	2004      	movs	r0, #4
 800122e:	f008 fe96 	bl	8009f5e <aci_gap_update_adv_data>
 8001232:	4603      	mov	r3, r0
 8001234:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (ret != BLE_STATUS_SUCCESS)
 8001238:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800123c:	2b00      	cmp	r3, #0
 800123e:	d002      	beq.n	8001246 <EddystoneUID_Init+0x182>
  {
    return ret;
 8001240:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001244:	e011      	b.n	800126a <EddystoneUID_Init+0x1a6>
  }

  /* Update the adverstising flags. */
  ret = aci_gap_update_adv_data(sizeof(flags), flags);
 8001246:	f107 030c 	add.w	r3, r7, #12
 800124a:	4619      	mov	r1, r3
 800124c:	2003      	movs	r0, #3
 800124e:	f008 fe86 	bl	8009f5e <aci_gap_update_adv_data>
 8001252:	4603      	mov	r3, r0
 8001254:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (ret != BLE_STATUS_SUCCESS)
 8001258:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800125c:	2b00      	cmp	r3, #0
 800125e:	d002      	beq.n	8001266 <EddystoneUID_Init+0x1a2>
  {
    return ret;
 8001260:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001264:	e001      	b.n	800126a <EddystoneUID_Init+0x1a6>
  }

  return ret;
 8001266:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800126a:	4618      	mov	r0, r3
 800126c:	3730      	adds	r7, #48	; 0x30
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	0800feac 	.word	0x0800feac
 8001278:	0800feb0 	.word	0x0800feb0

0800127c <user_notify>:
 *         parsed.
 * @param  void* Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 800127c:	b480      	push	{r7}
 800127e:	b087      	sub	sp, #28
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pData;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	617b      	str	r3, [r7, #20]

  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	3301      	adds	r3, #1
 800128c:	613b      	str	r3, [r7, #16]

  if(hci_pckt->type != HCI_EVENT_PKT)
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b04      	cmp	r3, #4
 8001294:	d10f      	bne.n	80012b6 <user_notify+0x3a>
  {
    return;
  }

  switch(event_pckt->evt)
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b3e      	cmp	r3, #62	; 0x3e
 800129c:	d003      	beq.n	80012a6 <user_notify+0x2a>
 800129e:	2bff      	cmp	r3, #255	; 0xff
 80012a0:	d00b      	beq.n	80012ba <user_notify+0x3e>
 80012a2:	2b05      	cmp	r3, #5

  case EVT_DISCONN_COMPLETE:
    {
      ;
    }
    break;
 80012a4:	e00a      	b.n	80012bc <user_notify+0x40>

  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	3302      	adds	r3, #2
 80012aa:	60fb      	str	r3, [r7, #12]

      switch(evt->subevent)
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b01      	cmp	r3, #1
      {
      case EVT_LE_CONN_COMPLETE:
        {
          ;
        }
        break;
 80012b2:	bf00      	nop
      }
    }
    break;
 80012b4:	e002      	b.n	80012bc <user_notify+0x40>
    return;
 80012b6:	bf00      	nop
 80012b8:	e000      	b.n	80012bc <user_notify+0x40>

  case EVT_VENDOR:
    {
      ;
    }
    break;
 80012ba:	bf00      	nop
  }
}
 80012bc:	371c      	adds	r7, #28
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
	...

080012c8 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b088      	sub	sp, #32
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d0:	4b1e      	ldr	r3, [pc, #120]	; (800134c <HCI_TL_SPI_Init+0x84>)
 80012d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d4:	4a1d      	ldr	r2, [pc, #116]	; (800134c <HCI_TL_SPI_Init+0x84>)
 80012d6:	f043 0301 	orr.w	r3, r3, #1
 80012da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012dc:	4b1b      	ldr	r3, [pc, #108]	; (800134c <HCI_TL_SPI_Init+0x84>)
 80012de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	60bb      	str	r3, [r7, #8]
 80012e6:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 80012e8:	2340      	movs	r3, #64	; 0x40
 80012ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012ec:	4b18      	ldr	r3, [pc, #96]	; (8001350 <HCI_TL_SPI_Init+0x88>)
 80012ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	4619      	mov	r1, r3
 80012fa:	4816      	ldr	r0, [pc, #88]	; (8001354 <HCI_TL_SPI_Init+0x8c>)
 80012fc:	f003 fffc 	bl	80052f8 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8001300:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001304:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001306:	2301      	movs	r3, #1
 8001308:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130e:	2300      	movs	r3, #0
 8001310:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8001312:	f107 030c 	add.w	r3, r7, #12
 8001316:	4619      	mov	r1, r3
 8001318:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800131c:	f003 ffec 	bl	80052f8 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8001320:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001324:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001326:	2301      	movs	r3, #1
 8001328:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132e:	2300      	movs	r3, #0
 8001330:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8001332:	f107 030c 	add.w	r3, r7, #12
 8001336:	4619      	mov	r1, r3
 8001338:	4807      	ldr	r0, [pc, #28]	; (8001358 <HCI_TL_SPI_Init+0x90>)
 800133a:	f003 ffdd 	bl	80052f8 <HAL_GPIO_Init>

  return BSP_SPI3_Init();
 800133e:	f001 fb29 	bl	8002994 <BSP_SPI3_Init>
 8001342:	4603      	mov	r3, r0
}
 8001344:	4618      	mov	r0, r3
 8001346:	3720      	adds	r7, #32
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40021000 	.word	0x40021000
 8001350:	10110000 	.word	0x10110000
 8001354:	48001000 	.word	0x48001000
 8001358:	48000c00 	.word	0x48000c00

0800135c <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8001360:	2140      	movs	r1, #64	; 0x40
 8001362:	4808      	ldr	r0, [pc, #32]	; (8001384 <HCI_TL_SPI_DeInit+0x28>)
 8001364:	f004 f95a 	bl	800561c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8001368:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800136c:	4806      	ldr	r0, [pc, #24]	; (8001388 <HCI_TL_SPI_DeInit+0x2c>)
 800136e:	f004 f955 	bl	800561c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8001372:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001376:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800137a:	f004 f94f 	bl	800561c <HAL_GPIO_DeInit>
  return 0;
 800137e:	2300      	movs	r3, #0
}
 8001380:	4618      	mov	r0, r3
 8001382:	bd80      	pop	{r7, pc}
 8001384:	48001000 	.word	0x48001000
 8001388:	48000c00 	.word	0x48000c00

0800138c <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001390:	2201      	movs	r2, #1
 8001392:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001396:	480d      	ldr	r0, [pc, #52]	; (80013cc <HCI_TL_SPI_Reset+0x40>)
 8001398:	f004 fa4a 	bl	8005830 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 800139c:	2200      	movs	r2, #0
 800139e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013a6:	f004 fa43 	bl	8005830 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80013aa:	2005      	movs	r0, #5
 80013ac:	f002 fd38 	bl	8003e20 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 80013b0:	2201      	movs	r2, #1
 80013b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ba:	f004 fa39 	bl	8005830 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80013be:	2005      	movs	r0, #5
 80013c0:	f002 fd2e 	bl	8003e20 <HAL_Delay>
  return 0;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	48000c00 	.word	0x48000c00

080013d0 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b088      	sub	sp, #32
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	460b      	mov	r3, r1
 80013da:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 80013e0:	23ff      	movs	r3, #255	; 0xff
 80013e2:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80013e4:	230b      	movs	r3, #11
 80013e6:	753b      	strb	r3, [r7, #20]
 80013e8:	2300      	movs	r3, #0
 80013ea:	757b      	strb	r3, [r7, #21]
 80013ec:	2300      	movs	r3, #0
 80013ee:	75bb      	strb	r3, [r7, #22]
 80013f0:	2300      	movs	r3, #0
 80013f2:	75fb      	strb	r3, [r7, #23]
 80013f4:	2300      	movs	r3, #0
 80013f6:	763b      	strb	r3, [r7, #24]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80013f8:	2200      	movs	r2, #0
 80013fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013fe:	4821      	ldr	r0, [pc, #132]	; (8001484 <HCI_TL_SPI_Receive+0xb4>)
 8001400:	f004 fa16 	bl	8005830 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 8001404:	f107 010c 	add.w	r1, r7, #12
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	2205      	movs	r2, #5
 800140e:	4618      	mov	r0, r3
 8001410:	f001 faf0 	bl	80029f4 <BSP_SPI3_SendRecv>

  if(header_slave[0] == 0x02)
 8001414:	7b3b      	ldrb	r3, [r7, #12]
 8001416:	2b02      	cmp	r3, #2
 8001418:	d129      	bne.n	800146e <HCI_TL_SPI_Receive+0x9e>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 800141a:	7c3b      	ldrb	r3, [r7, #16]
 800141c:	021b      	lsls	r3, r3, #8
 800141e:	b21a      	sxth	r2, r3
 8001420:	7bfb      	ldrb	r3, [r7, #15]
 8001422:	b21b      	sxth	r3, r3
 8001424:	4313      	orrs	r3, r2
 8001426:	b21b      	sxth	r3, r3
 8001428:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 800142a:	8bfb      	ldrh	r3, [r7, #30]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d01e      	beq.n	800146e <HCI_TL_SPI_Receive+0x9e>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 8001430:	8bfa      	ldrh	r2, [r7, #30]
 8001432:	887b      	ldrh	r3, [r7, #2]
 8001434:	429a      	cmp	r2, r3
 8001436:	d901      	bls.n	800143c <HCI_TL_SPI_Receive+0x6c>
        byte_count = size;
 8001438:	887b      	ldrh	r3, [r7, #2]
 800143a:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 800143c:	2300      	movs	r3, #0
 800143e:	777b      	strb	r3, [r7, #29]
 8001440:	e010      	b.n	8001464 <HCI_TL_SPI_Receive+0x94>
      {
        BSP_SPI3_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 8001442:	f107 011b 	add.w	r1, r7, #27
 8001446:	f107 031c 	add.w	r3, r7, #28
 800144a:	2201      	movs	r2, #1
 800144c:	4618      	mov	r0, r3
 800144e:	f001 fad1 	bl	80029f4 <BSP_SPI3_SendRecv>
        buffer[len] = read_char;
 8001452:	7f7b      	ldrb	r3, [r7, #29]
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	4413      	add	r3, r2
 8001458:	7efa      	ldrb	r2, [r7, #27]
 800145a:	b2d2      	uxtb	r2, r2
 800145c:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 800145e:	7f7b      	ldrb	r3, [r7, #29]
 8001460:	3301      	adds	r3, #1
 8001462:	777b      	strb	r3, [r7, #29]
 8001464:	7f7b      	ldrb	r3, [r7, #29]
 8001466:	b29b      	uxth	r3, r3
 8001468:	8bfa      	ldrh	r2, [r7, #30]
 800146a:	429a      	cmp	r2, r3
 800146c:	d8e9      	bhi.n	8001442 <HCI_TL_SPI_Receive+0x72>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800146e:	2201      	movs	r2, #1
 8001470:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001474:	4803      	ldr	r0, [pc, #12]	; (8001484 <HCI_TL_SPI_Receive+0xb4>)
 8001476:	f004 f9db 	bl	8005830 <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 800147a:	7f7b      	ldrb	r3, [r7, #29]
}
 800147c:	4618      	mov	r0, r3
 800147e:	3720      	adds	r7, #32
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	48000c00 	.word	0x48000c00

08001488 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b088      	sub	sp, #32
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	460b      	mov	r3, r1
 8001492:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8001494:	230a      	movs	r3, #10
 8001496:	743b      	strb	r3, [r7, #16]
 8001498:	2300      	movs	r3, #0
 800149a:	747b      	strb	r3, [r7, #17]
 800149c:	2300      	movs	r3, #0
 800149e:	74bb      	strb	r3, [r7, #18]
 80014a0:	2300      	movs	r3, #0
 80014a2:	74fb      	strb	r3, [r7, #19]
 80014a4:	2300      	movs	r3, #0
 80014a6:	753b      	strb	r3, [r7, #20]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 80014a8:	f002 fcae 	bl	8003e08 <HAL_GetTick>
 80014ac:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80014b2:	2200      	movs	r2, #0
 80014b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014b8:	481c      	ldr	r0, [pc, #112]	; (800152c <HCI_TL_SPI_Send+0xa4>)
 80014ba:	f004 f9b9 	bl	8005830 <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 80014be:	f107 0108 	add.w	r1, r7, #8
 80014c2:	f107 0310 	add.w	r3, r7, #16
 80014c6:	2205      	movs	r2, #5
 80014c8:	4618      	mov	r0, r3
 80014ca:	f001 fa93 	bl	80029f4 <BSP_SPI3_SendRecv>

    if(header_slave[0] == 0x02)
 80014ce:	7a3b      	ldrb	r3, [r7, #8]
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d10f      	bne.n	80014f4 <HCI_TL_SPI_Send+0x6c>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 80014d4:	7a7b      	ldrb	r3, [r7, #9]
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	887a      	ldrh	r2, [r7, #2]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d806      	bhi.n	80014ec <HCI_TL_SPI_Send+0x64>
      {
        BSP_SPI3_SendRecv(buffer, read_char_buf, size);
 80014de:	887b      	ldrh	r3, [r7, #2]
 80014e0:	461a      	mov	r2, r3
 80014e2:	4913      	ldr	r1, [pc, #76]	; (8001530 <HCI_TL_SPI_Send+0xa8>)
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f001 fa85 	bl	80029f4 <BSP_SPI3_SendRecv>
 80014ea:	e006      	b.n	80014fa <HCI_TL_SPI_Send+0x72>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 80014ec:	f06f 0301 	mvn.w	r3, #1
 80014f0:	61fb      	str	r3, [r7, #28]
 80014f2:	e002      	b.n	80014fa <HCI_TL_SPI_Send+0x72>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 80014f4:	f04f 33ff 	mov.w	r3, #4294967295
 80014f8:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80014fa:	2201      	movs	r2, #1
 80014fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001500:	480a      	ldr	r0, [pc, #40]	; (800152c <HCI_TL_SPI_Send+0xa4>)
 8001502:	f004 f995 	bl	8005830 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8001506:	f002 fc7f 	bl	8003e08 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b0f      	cmp	r3, #15
 8001512:	d903      	bls.n	800151c <HCI_TL_SPI_Send+0x94>
    {
      result = -3;
 8001514:	f06f 0302 	mvn.w	r3, #2
 8001518:	61fb      	str	r3, [r7, #28]
      break;
 800151a:	e002      	b.n	8001522 <HCI_TL_SPI_Send+0x9a>
    }
  } while(result < 0);
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	2b00      	cmp	r3, #0
 8001520:	dbc5      	blt.n	80014ae <HCI_TL_SPI_Send+0x26>

  return result;
 8001522:	69fb      	ldr	r3, [r7, #28]
}
 8001524:	4618      	mov	r0, r3
 8001526:	3720      	adds	r7, #32
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	48000c00 	.word	0x48000c00
 8001530:	20000810 	.word	0x20000810

08001534 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8001538:	2140      	movs	r1, #64	; 0x40
 800153a:	4805      	ldr	r0, [pc, #20]	; (8001550 <IsDataAvailable+0x1c>)
 800153c:	f004 f960 	bl	8005800 <HAL_GPIO_ReadPin>
 8001540:	4603      	mov	r3, r0
 8001542:	2b01      	cmp	r3, #1
 8001544:	bf0c      	ite	eq
 8001546:	2301      	moveq	r3, #1
 8001548:	2300      	movne	r3, #0
 800154a:	b2db      	uxtb	r3, r3
}
 800154c:	4618      	mov	r0, r3
 800154e:	bd80      	pop	{r7, pc}
 8001550:	48001000 	.word	0x48001000

08001554 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b088      	sub	sp, #32
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 800155a:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <hci_tl_lowlevel_init+0x50>)
 800155c:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 800155e:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <hci_tl_lowlevel_init+0x54>)
 8001560:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8001562:	4b12      	ldr	r3, [pc, #72]	; (80015ac <hci_tl_lowlevel_init+0x58>)
 8001564:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8001566:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <hci_tl_lowlevel_init+0x5c>)
 8001568:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 800156a:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <hci_tl_lowlevel_init+0x60>)
 800156c:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 800156e:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <hci_tl_lowlevel_init+0x64>)
 8001570:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 8001572:	1d3b      	adds	r3, r7, #4
 8001574:	4618      	mov	r0, r3
 8001576:	f008 fff7 	bl	800a568 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti6, EXTI_LINE_6);
 800157a:	4910      	ldr	r1, [pc, #64]	; (80015bc <hci_tl_lowlevel_init+0x68>)
 800157c:	4810      	ldr	r0, [pc, #64]	; (80015c0 <hci_tl_lowlevel_init+0x6c>)
 800157e:	f003 fe77 	bl	8005270 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti6, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8001582:	4a10      	ldr	r2, [pc, #64]	; (80015c4 <hci_tl_lowlevel_init+0x70>)
 8001584:	2100      	movs	r1, #0
 8001586:	480e      	ldr	r0, [pc, #56]	; (80015c0 <hci_tl_lowlevel_init+0x6c>)
 8001588:	f003 fe58 	bl	800523c <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800158c:	2200      	movs	r2, #0
 800158e:	2100      	movs	r1, #0
 8001590:	2017      	movs	r0, #23
 8001592:	f003 fc26 	bl	8004de2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001596:	2017      	movs	r0, #23
 8001598:	f003 fc3f 	bl	8004e1a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 800159c:	bf00      	nop
 800159e:	3720      	adds	r7, #32
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	080012c9 	.word	0x080012c9
 80015a8:	0800135d 	.word	0x0800135d
 80015ac:	08001489 	.word	0x08001489
 80015b0:	080013d1 	.word	0x080013d1
 80015b4:	0800138d 	.word	0x0800138d
 80015b8:	08002bc9 	.word	0x08002bc9
 80015bc:	16000006 	.word	0x16000006
 80015c0:	20000cbc 	.word	0x20000cbc
 80015c4:	080015c9 	.word	0x080015c9

080015c8 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 80015cc:	e005      	b.n	80015da <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 80015ce:	2000      	movs	r0, #0
 80015d0:	f009 f902 	bl	800a7d8 <hci_notify_asynch_evt>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d105      	bne.n	80015e6 <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 80015da:	f7ff ffab 	bl	8001534 <IsDataAvailable>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1f4      	bne.n	80015ce <hci_tl_lowlevel_isr+0x6>
 80015e4:	e000      	b.n	80015e8 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 80015e6:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 80015e8:	bd80      	pop	{r7, pc}
	...

080015ec <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80015f2:	463b      	mov	r3, r7
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]
 8001600:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001602:	4b29      	ldr	r3, [pc, #164]	; (80016a8 <MX_ADC1_Init+0xbc>)
 8001604:	4a29      	ldr	r2, [pc, #164]	; (80016ac <MX_ADC1_Init+0xc0>)
 8001606:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001608:	4b27      	ldr	r3, [pc, #156]	; (80016a8 <MX_ADC1_Init+0xbc>)
 800160a:	2200      	movs	r2, #0
 800160c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800160e:	4b26      	ldr	r3, [pc, #152]	; (80016a8 <MX_ADC1_Init+0xbc>)
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001614:	4b24      	ldr	r3, [pc, #144]	; (80016a8 <MX_ADC1_Init+0xbc>)
 8001616:	2200      	movs	r2, #0
 8001618:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800161a:	4b23      	ldr	r3, [pc, #140]	; (80016a8 <MX_ADC1_Init+0xbc>)
 800161c:	2200      	movs	r2, #0
 800161e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001620:	4b21      	ldr	r3, [pc, #132]	; (80016a8 <MX_ADC1_Init+0xbc>)
 8001622:	2204      	movs	r2, #4
 8001624:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001626:	4b20      	ldr	r3, [pc, #128]	; (80016a8 <MX_ADC1_Init+0xbc>)
 8001628:	2200      	movs	r2, #0
 800162a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800162c:	4b1e      	ldr	r3, [pc, #120]	; (80016a8 <MX_ADC1_Init+0xbc>)
 800162e:	2200      	movs	r2, #0
 8001630:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001632:	4b1d      	ldr	r3, [pc, #116]	; (80016a8 <MX_ADC1_Init+0xbc>)
 8001634:	2201      	movs	r2, #1
 8001636:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001638:	4b1b      	ldr	r3, [pc, #108]	; (80016a8 <MX_ADC1_Init+0xbc>)
 800163a:	2200      	movs	r2, #0
 800163c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001640:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <MX_ADC1_Init+0xbc>)
 8001642:	2200      	movs	r2, #0
 8001644:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001646:	4b18      	ldr	r3, [pc, #96]	; (80016a8 <MX_ADC1_Init+0xbc>)
 8001648:	2200      	movs	r2, #0
 800164a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800164c:	4b16      	ldr	r3, [pc, #88]	; (80016a8 <MX_ADC1_Init+0xbc>)
 800164e:	2200      	movs	r2, #0
 8001650:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001654:	4b14      	ldr	r3, [pc, #80]	; (80016a8 <MX_ADC1_Init+0xbc>)
 8001656:	2200      	movs	r2, #0
 8001658:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800165a:	4b13      	ldr	r3, [pc, #76]	; (80016a8 <MX_ADC1_Init+0xbc>)
 800165c:	2200      	movs	r2, #0
 800165e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001662:	4811      	ldr	r0, [pc, #68]	; (80016a8 <MX_ADC1_Init+0xbc>)
 8001664:	f002 fd9e 	bl	80041a4 <HAL_ADC_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800166e:	f000 fdf1 	bl	8002254 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001672:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <MX_ADC1_Init+0xc4>)
 8001674:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001676:	2306      	movs	r3, #6
 8001678:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800167a:	2300      	movs	r3, #0
 800167c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800167e:	237f      	movs	r3, #127	; 0x7f
 8001680:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001682:	2304      	movs	r3, #4
 8001684:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800168a:	463b      	mov	r3, r7
 800168c:	4619      	mov	r1, r3
 800168e:	4806      	ldr	r0, [pc, #24]	; (80016a8 <MX_ADC1_Init+0xbc>)
 8001690:	f002 fed2 	bl	8004438 <HAL_ADC_ConfigChannel>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800169a:	f000 fddb 	bl	8002254 <Error_Handler>
  }

}
 800169e:	bf00      	nop
 80016a0:	3718      	adds	r7, #24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000cc4 	.word	0x20000cc4
 80016ac:	50040000 	.word	0x50040000
 80016b0:	04300002 	.word	0x04300002

080016b4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08a      	sub	sp, #40	; 0x28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a15      	ldr	r2, [pc, #84]	; (8001728 <HAL_ADC_MspInit+0x74>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d123      	bne.n	800171e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80016d6:	4b15      	ldr	r3, [pc, #84]	; (800172c <HAL_ADC_MspInit+0x78>)
 80016d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016da:	4a14      	ldr	r2, [pc, #80]	; (800172c <HAL_ADC_MspInit+0x78>)
 80016dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016e2:	4b12      	ldr	r3, [pc, #72]	; (800172c <HAL_ADC_MspInit+0x78>)
 80016e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016ea:	613b      	str	r3, [r7, #16]
 80016ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ee:	4b0f      	ldr	r3, [pc, #60]	; (800172c <HAL_ADC_MspInit+0x78>)
 80016f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f2:	4a0e      	ldr	r2, [pc, #56]	; (800172c <HAL_ADC_MspInit+0x78>)
 80016f4:	f043 0304 	orr.w	r3, r3, #4
 80016f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016fa:	4b0c      	ldr	r3, [pc, #48]	; (800172c <HAL_ADC_MspInit+0x78>)
 80016fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fe:	f003 0304 	and.w	r3, r3, #4
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001706:	233f      	movs	r3, #63	; 0x3f
 8001708:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800170a:	230b      	movs	r3, #11
 800170c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001712:	f107 0314 	add.w	r3, r7, #20
 8001716:	4619      	mov	r1, r3
 8001718:	4805      	ldr	r0, [pc, #20]	; (8001730 <HAL_ADC_MspInit+0x7c>)
 800171a:	f003 fded 	bl	80052f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800171e:	bf00      	nop
 8001720:	3728      	adds	r7, #40	; 0x28
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	50040000 	.word	0x50040000
 800172c:	40021000 	.word	0x40021000
 8001730:	48000800 	.word	0x48000800

08001734 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8001738:	4b0d      	ldr	r3, [pc, #52]	; (8001770 <MX_CRC_Init+0x3c>)
 800173a:	4a0e      	ldr	r2, [pc, #56]	; (8001774 <MX_CRC_Init+0x40>)
 800173c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800173e:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <MX_CRC_Init+0x3c>)
 8001740:	2200      	movs	r2, #0
 8001742:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001744:	4b0a      	ldr	r3, [pc, #40]	; (8001770 <MX_CRC_Init+0x3c>)
 8001746:	2200      	movs	r2, #0
 8001748:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800174a:	4b09      	ldr	r3, [pc, #36]	; (8001770 <MX_CRC_Init+0x3c>)
 800174c:	2200      	movs	r2, #0
 800174e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001750:	4b07      	ldr	r3, [pc, #28]	; (8001770 <MX_CRC_Init+0x3c>)
 8001752:	2200      	movs	r2, #0
 8001754:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <MX_CRC_Init+0x3c>)
 8001758:	2201      	movs	r2, #1
 800175a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800175c:	4804      	ldr	r0, [pc, #16]	; (8001770 <MX_CRC_Init+0x3c>)
 800175e:	f003 fb77 	bl	8004e50 <HAL_CRC_Init>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001768:	f000 fd74 	bl	8002254 <Error_Handler>
  }

}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20000d2c 	.word	0x20000d2c
 8001774:	40023000 	.word	0x40023000

08001778 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a0a      	ldr	r2, [pc, #40]	; (80017b0 <HAL_CRC_MspInit+0x38>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d10b      	bne.n	80017a2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800178a:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <HAL_CRC_MspInit+0x3c>)
 800178c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800178e:	4a09      	ldr	r2, [pc, #36]	; (80017b4 <HAL_CRC_MspInit+0x3c>)
 8001790:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001794:	6493      	str	r3, [r2, #72]	; 0x48
 8001796:	4b07      	ldr	r3, [pc, #28]	; (80017b4 <HAL_CRC_MspInit+0x3c>)
 8001798:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800179a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80017a2:	bf00      	nop
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	40023000 	.word	0x40023000
 80017b4:	40021000 	.word	0x40021000

080017b8 <MX_DFSDM1_Init>:

DFSDM_Channel_HandleTypeDef hdfsdm1_channel2;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0

  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 80017bc:	4b18      	ldr	r3, [pc, #96]	; (8001820 <MX_DFSDM1_Init+0x68>)
 80017be:	4a19      	ldr	r2, [pc, #100]	; (8001824 <MX_DFSDM1_Init+0x6c>)
 80017c0:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 80017c2:	4b17      	ldr	r3, [pc, #92]	; (8001820 <MX_DFSDM1_Init+0x68>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80017c8:	4b15      	ldr	r3, [pc, #84]	; (8001820 <MX_DFSDM1_Init+0x68>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 80017ce:	4b14      	ldr	r3, [pc, #80]	; (8001820 <MX_DFSDM1_Init+0x68>)
 80017d0:	2202      	movs	r2, #2
 80017d2:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80017d4:	4b12      	ldr	r3, [pc, #72]	; (8001820 <MX_DFSDM1_Init+0x68>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80017da:	4b11      	ldr	r3, [pc, #68]	; (8001820 <MX_DFSDM1_Init+0x68>)
 80017dc:	2200      	movs	r2, #0
 80017de:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80017e0:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <MX_DFSDM1_Init+0x68>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80017e6:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <MX_DFSDM1_Init+0x68>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80017ec:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <MX_DFSDM1_Init+0x68>)
 80017ee:	2204      	movs	r2, #4
 80017f0:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80017f2:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <MX_DFSDM1_Init+0x68>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 80017f8:	4b09      	ldr	r3, [pc, #36]	; (8001820 <MX_DFSDM1_Init+0x68>)
 80017fa:	2201      	movs	r2, #1
 80017fc:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 80017fe:	4b08      	ldr	r3, [pc, #32]	; (8001820 <MX_DFSDM1_Init+0x68>)
 8001800:	2200      	movs	r2, #0
 8001802:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <MX_DFSDM1_Init+0x68>)
 8001806:	2200      	movs	r2, #0
 8001808:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 800180a:	4805      	ldr	r0, [pc, #20]	; (8001820 <MX_DFSDM1_Init+0x68>)
 800180c:	f003 fc0a 	bl	8005024 <HAL_DFSDM_ChannelInit>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8001816:	f000 fd1d 	bl	8002254 <Error_Handler>
  }

}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000d50 	.word	0x20000d50
 8001824:	40016040 	.word	0x40016040

08001828 <HAL_DFSDM_ChannelMspInit>:

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08a      	sub	sp, #40	; 0x28
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8001840:	4b1a      	ldr	r3, [pc, #104]	; (80018ac <HAL_DFSDM_ChannelMspInit+0x84>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d12d      	bne.n	80018a4 <HAL_DFSDM_ChannelMspInit+0x7c>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001848:	4b19      	ldr	r3, [pc, #100]	; (80018b0 <HAL_DFSDM_ChannelMspInit+0x88>)
 800184a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800184c:	4a18      	ldr	r2, [pc, #96]	; (80018b0 <HAL_DFSDM_ChannelMspInit+0x88>)
 800184e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001852:	6613      	str	r3, [r2, #96]	; 0x60
 8001854:	4b16      	ldr	r3, [pc, #88]	; (80018b0 <HAL_DFSDM_ChannelMspInit+0x88>)
 8001856:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001858:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800185c:	613b      	str	r3, [r7, #16]
 800185e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001860:	4b13      	ldr	r3, [pc, #76]	; (80018b0 <HAL_DFSDM_ChannelMspInit+0x88>)
 8001862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001864:	4a12      	ldr	r2, [pc, #72]	; (80018b0 <HAL_DFSDM_ChannelMspInit+0x88>)
 8001866:	f043 0310 	orr.w	r3, r3, #16
 800186a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800186c:	4b10      	ldr	r3, [pc, #64]	; (80018b0 <HAL_DFSDM_ChannelMspInit+0x88>)
 800186e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001870:	f003 0310 	and.w	r3, r3, #16
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001878:	f44f 7320 	mov.w	r3, #640	; 0x280
 800187c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187e:	2302      	movs	r3, #2
 8001880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001886:	2300      	movs	r3, #0
 8001888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800188a:	2306      	movs	r3, #6
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800188e:	f107 0314 	add.w	r3, r7, #20
 8001892:	4619      	mov	r1, r3
 8001894:	4807      	ldr	r0, [pc, #28]	; (80018b4 <HAL_DFSDM_ChannelMspInit+0x8c>)
 8001896:	f003 fd2f 	bl	80052f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800189a:	4b04      	ldr	r3, [pc, #16]	; (80018ac <HAL_DFSDM_ChannelMspInit+0x84>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	3301      	adds	r3, #1
 80018a0:	4a02      	ldr	r2, [pc, #8]	; (80018ac <HAL_DFSDM_ChannelMspInit+0x84>)
 80018a2:	6013      	str	r3, [r2, #0]
  }
}
 80018a4:	bf00      	nop
 80018a6:	3728      	adds	r7, #40	; 0x28
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20000910 	.word	0x20000910
 80018b0:	40021000 	.word	0x40021000
 80018b4:	48001000 	.word	0x48001000

080018b8 <MX_GPIO_Init>:
     PD4   ------> USART2_RTS
     PD5   ------> USART2_TX
     PD6   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08c      	sub	sp, #48	; 0x30
 80018bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018be:	f107 031c 	add.w	r3, r7, #28
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	609a      	str	r2, [r3, #8]
 80018ca:	60da      	str	r2, [r3, #12]
 80018cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018ce:	4bad      	ldr	r3, [pc, #692]	; (8001b84 <MX_GPIO_Init+0x2cc>)
 80018d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d2:	4aac      	ldr	r2, [pc, #688]	; (8001b84 <MX_GPIO_Init+0x2cc>)
 80018d4:	f043 0310 	orr.w	r3, r3, #16
 80018d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018da:	4baa      	ldr	r3, [pc, #680]	; (8001b84 <MX_GPIO_Init+0x2cc>)
 80018dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018de:	f003 0310 	and.w	r3, r3, #16
 80018e2:	61bb      	str	r3, [r7, #24]
 80018e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018e6:	4ba7      	ldr	r3, [pc, #668]	; (8001b84 <MX_GPIO_Init+0x2cc>)
 80018e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ea:	4aa6      	ldr	r2, [pc, #664]	; (8001b84 <MX_GPIO_Init+0x2cc>)
 80018ec:	f043 0304 	orr.w	r3, r3, #4
 80018f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018f2:	4ba4      	ldr	r3, [pc, #656]	; (8001b84 <MX_GPIO_Init+0x2cc>)
 80018f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f6:	f003 0304 	and.w	r3, r3, #4
 80018fa:	617b      	str	r3, [r7, #20]
 80018fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018fe:	4ba1      	ldr	r3, [pc, #644]	; (8001b84 <MX_GPIO_Init+0x2cc>)
 8001900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001902:	4aa0      	ldr	r2, [pc, #640]	; (8001b84 <MX_GPIO_Init+0x2cc>)
 8001904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001908:	64d3      	str	r3, [r2, #76]	; 0x4c
 800190a:	4b9e      	ldr	r3, [pc, #632]	; (8001b84 <MX_GPIO_Init+0x2cc>)
 800190c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001912:	613b      	str	r3, [r7, #16]
 8001914:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001916:	4b9b      	ldr	r3, [pc, #620]	; (8001b84 <MX_GPIO_Init+0x2cc>)
 8001918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191a:	4a9a      	ldr	r2, [pc, #616]	; (8001b84 <MX_GPIO_Init+0x2cc>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001922:	4b98      	ldr	r3, [pc, #608]	; (8001b84 <MX_GPIO_Init+0x2cc>)
 8001924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800192e:	4b95      	ldr	r3, [pc, #596]	; (8001b84 <MX_GPIO_Init+0x2cc>)
 8001930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001932:	4a94      	ldr	r2, [pc, #592]	; (8001b84 <MX_GPIO_Init+0x2cc>)
 8001934:	f043 0302 	orr.w	r3, r3, #2
 8001938:	64d3      	str	r3, [r2, #76]	; 0x4c
 800193a:	4b92      	ldr	r3, [pc, #584]	; (8001b84 <MX_GPIO_Init+0x2cc>)
 800193c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001946:	4b8f      	ldr	r3, [pc, #572]	; (8001b84 <MX_GPIO_Init+0x2cc>)
 8001948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194a:	4a8e      	ldr	r2, [pc, #568]	; (8001b84 <MX_GPIO_Init+0x2cc>)
 800194c:	f043 0308 	orr.w	r3, r3, #8
 8001950:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001952:	4b8c      	ldr	r3, [pc, #560]	; (8001b84 <MX_GPIO_Init+0x2cc>)
 8001954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001956:	f003 0308 	and.w	r3, r3, #8
 800195a:	607b      	str	r3, [r7, #4]
 800195c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 800195e:	2200      	movs	r2, #0
 8001960:	f240 1105 	movw	r1, #261	; 0x105
 8001964:	4888      	ldr	r0, [pc, #544]	; (8001b88 <MX_GPIO_Init+0x2d0>)
 8001966:	f003 ff63 	bl	8005830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 800196a:	2200      	movs	r2, #0
 800196c:	f248 111c 	movw	r1, #33052	; 0x811c
 8001970:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001974:	f003 ff5c 	bl	8005830 <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001978:	2200      	movs	r2, #0
 800197a:	f24f 0134 	movw	r1, #61492	; 0xf034
 800197e:	4883      	ldr	r0, [pc, #524]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 8001980:	f003 ff56 	bl	8005830 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8001984:	2200      	movs	r2, #0
 8001986:	f242 0183 	movw	r1, #8323	; 0x2083
 800198a:	4881      	ldr	r0, [pc, #516]	; (8001b90 <MX_GPIO_Init+0x2d8>)
 800198c:	f003 ff50 	bl	8005830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001990:	2200      	movs	r2, #0
 8001992:	f44f 7110 	mov.w	r1, #576	; 0x240
 8001996:	487f      	ldr	r0, [pc, #508]	; (8001b94 <MX_GPIO_Init+0x2dc>)
 8001998:	f003 ff4a 	bl	8005830 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 800199c:	f240 1305 	movw	r3, #261	; 0x105
 80019a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a2:	2301      	movs	r3, #1
 80019a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019aa:	2300      	movs	r3, #0
 80019ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019ae:	f107 031c 	add.w	r3, r7, #28
 80019b2:	4619      	mov	r1, r3
 80019b4:	4874      	ldr	r0, [pc, #464]	; (8001b88 <MX_GPIO_Init+0x2d0>)
 80019b6:	f003 fc9f 	bl	80052f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 80019ba:	237a      	movs	r3, #122	; 0x7a
 80019bc:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019be:	4b76      	ldr	r3, [pc, #472]	; (8001b98 <MX_GPIO_Init+0x2e0>)
 80019c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019c6:	f107 031c 	add.w	r3, r7, #28
 80019ca:	4619      	mov	r1, r3
 80019cc:	486e      	ldr	r0, [pc, #440]	; (8001b88 <MX_GPIO_Init+0x2d0>)
 80019ce:	f003 fc93 	bl	80052f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80019d2:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 80019d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019d8:	4b6f      	ldr	r3, [pc, #444]	; (8001b98 <MX_GPIO_Init+0x2e0>)
 80019da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e0:	f107 031c 	add.w	r3, r7, #28
 80019e4:	4619      	mov	r1, r3
 80019e6:	486b      	ldr	r0, [pc, #428]	; (8001b94 <MX_GPIO_Init+0x2dc>)
 80019e8:	f003 fc86 	bl	80052f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80019ec:	2303      	movs	r3, #3
 80019ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f0:	2302      	movs	r3, #2
 80019f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f8:	2303      	movs	r3, #3
 80019fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80019fc:	2308      	movs	r3, #8
 80019fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a00:	f107 031c 	add.w	r3, r7, #28
 8001a04:	4619      	mov	r1, r3
 8001a06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a0a:	f003 fc75 	bl	80052f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8001a0e:	f248 131c 	movw	r3, #33052	; 0x811c
 8001a12:	61fb      	str	r3, [r7, #28]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a14:	2301      	movs	r3, #1
 8001a16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a20:	f107 031c 	add.w	r3, r7, #28
 8001a24:	4619      	mov	r1, r3
 8001a26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a2a:	f003 fc65 	bl	80052f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a32:	4b59      	ldr	r3, [pc, #356]	; (8001b98 <MX_GPIO_Init+0x2e0>)
 8001a34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001a3a:	f107 031c 	add.w	r3, r7, #28
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4852      	ldr	r0, [pc, #328]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 8001a42:	f003 fc59 	bl	80052f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001a46:	2302      	movs	r3, #2
 8001a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a52:	2300      	movs	r3, #0
 8001a54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a56:	2302      	movs	r3, #2
 8001a58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001a5a:	f107 031c 	add.w	r3, r7, #28
 8001a5e:	4619      	mov	r1, r3
 8001a60:	484a      	ldr	r0, [pc, #296]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 8001a62:	f003 fc49 	bl	80052f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001a66:	f24f 0334 	movw	r3, #61492	; 0xf034
 8001a6a:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a74:	2300      	movs	r3, #0
 8001a76:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a78:	f107 031c 	add.w	r3, r7, #28
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4843      	ldr	r0, [pc, #268]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 8001a80:	f003 fc3a 	bl	80052f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001a84:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a92:	2303      	movs	r3, #3
 8001a94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a96:	2307      	movs	r3, #7
 8001a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a9a:	f107 031c 	add.w	r3, r7, #28
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	483b      	ldr	r0, [pc, #236]	; (8001b90 <MX_GPIO_Init+0x2d8>)
 8001aa2:	f003 fc29 	bl	80052f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 8001aa6:	f64d 4304 	movw	r3, #56324	; 0xdc04
 8001aaa:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001aac:	4b3a      	ldr	r3, [pc, #232]	; (8001b98 <MX_GPIO_Init+0x2e0>)
 8001aae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ab4:	f107 031c 	add.w	r3, r7, #28
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4835      	ldr	r0, [pc, #212]	; (8001b90 <MX_GPIO_Init+0x2d8>)
 8001abc:	f003 fc1c 	bl	80052f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8001ac0:	f242 0383 	movw	r3, #8323	; 0x2083
 8001ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ad2:	f107 031c 	add.w	r3, r7, #28
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	482d      	ldr	r0, [pc, #180]	; (8001b90 <MX_GPIO_Init+0x2d8>)
 8001ada:	f003 fc0d 	bl	80052f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001ade:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aec:	2300      	movs	r3, #0
 8001aee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001af0:	f107 031c 	add.w	r3, r7, #28
 8001af4:	4619      	mov	r1, r3
 8001af6:	4827      	ldr	r0, [pc, #156]	; (8001b94 <MX_GPIO_Init+0x2dc>)
 8001af8:	f003 fbfe 	bl	80052f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001afc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b02:	2300      	movs	r3, #0
 8001b04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001b0a:	f107 031c 	add.w	r3, r7, #28
 8001b0e:	4619      	mov	r1, r3
 8001b10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b14:	f003 fbf0 	bl	80052f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001b18:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001b1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b26:	2303      	movs	r3, #3
 8001b28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001b2a:	230a      	movs	r3, #10
 8001b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b2e:	f107 031c 	add.w	r3, r7, #28
 8001b32:	4619      	mov	r1, r3
 8001b34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b38:	f003 fbde 	bl	80052f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001b3c:	2378      	movs	r3, #120	; 0x78
 8001b3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b40:	2302      	movs	r3, #2
 8001b42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b4c:	2307      	movs	r3, #7
 8001b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b50:	f107 031c 	add.w	r3, r7, #28
 8001b54:	4619      	mov	r1, r3
 8001b56:	480e      	ldr	r0, [pc, #56]	; (8001b90 <MX_GPIO_Init+0x2d8>)
 8001b58:	f003 fbce 	bl	80052f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	2101      	movs	r1, #1
 8001b60:	2017      	movs	r0, #23
 8001b62:	f003 f93e 	bl	8004de2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b66:	2017      	movs	r0, #23
 8001b68:	f003 f957 	bl	8004e1a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2101      	movs	r1, #1
 8001b70:	2028      	movs	r0, #40	; 0x28
 8001b72:	f003 f936 	bl	8004de2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b76:	2028      	movs	r0, #40	; 0x28
 8001b78:	f003 f94f 	bl	8004e1a <HAL_NVIC_EnableIRQ>

}
 8001b7c:	bf00      	nop
 8001b7e:	3730      	adds	r7, #48	; 0x30
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40021000 	.word	0x40021000
 8001b88:	48001000 	.word	0x48001000
 8001b8c:	48000400 	.word	0x48000400
 8001b90:	48000c00 	.word	0x48000c00
 8001b94:	48000800 	.word	0x48000800
 8001b98:	10110000 	.word	0x10110000

08001b9c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001ba0:	4b1b      	ldr	r3, [pc, #108]	; (8001c10 <MX_I2C1_Init+0x74>)
 8001ba2:	4a1c      	ldr	r2, [pc, #112]	; (8001c14 <MX_I2C1_Init+0x78>)
 8001ba4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8001ba6:	4b1a      	ldr	r3, [pc, #104]	; (8001c10 <MX_I2C1_Init+0x74>)
 8001ba8:	4a1b      	ldr	r2, [pc, #108]	; (8001c18 <MX_I2C1_Init+0x7c>)
 8001baa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001bac:	4b18      	ldr	r3, [pc, #96]	; (8001c10 <MX_I2C1_Init+0x74>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bb2:	4b17      	ldr	r3, [pc, #92]	; (8001c10 <MX_I2C1_Init+0x74>)
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bb8:	4b15      	ldr	r3, [pc, #84]	; (8001c10 <MX_I2C1_Init+0x74>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001bbe:	4b14      	ldr	r3, [pc, #80]	; (8001c10 <MX_I2C1_Init+0x74>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001bc4:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <MX_I2C1_Init+0x74>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bca:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <MX_I2C1_Init+0x74>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bd0:	4b0f      	ldr	r3, [pc, #60]	; (8001c10 <MX_I2C1_Init+0x74>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bd6:	480e      	ldr	r0, [pc, #56]	; (8001c10 <MX_I2C1_Init+0x74>)
 8001bd8:	f003 fe5a 	bl	8005890 <HAL_I2C_Init>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001be2:	f000 fb37 	bl	8002254 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001be6:	2100      	movs	r1, #0
 8001be8:	4809      	ldr	r0, [pc, #36]	; (8001c10 <MX_I2C1_Init+0x74>)
 8001bea:	f004 fb73 	bl	80062d4 <HAL_I2CEx_ConfigAnalogFilter>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001bf4:	f000 fb2e 	bl	8002254 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	4805      	ldr	r0, [pc, #20]	; (8001c10 <MX_I2C1_Init+0x74>)
 8001bfc:	f004 fbb5 	bl	800636a <HAL_I2CEx_ConfigDigitalFilter>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001c06:	f000 fb25 	bl	8002254 <Error_Handler>
  }

}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	20000d88 	.word	0x20000d88
 8001c14:	40005400 	.word	0x40005400
 8001c18:	307075b1 	.word	0x307075b1

08001c1c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b08a      	sub	sp, #40	; 0x28
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c24:	f107 0314 	add.w	r3, r7, #20
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	60da      	str	r2, [r3, #12]
 8001c32:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a17      	ldr	r2, [pc, #92]	; (8001c98 <HAL_I2C_MspInit+0x7c>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d128      	bne.n	8001c90 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c3e:	4b17      	ldr	r3, [pc, #92]	; (8001c9c <HAL_I2C_MspInit+0x80>)
 8001c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c42:	4a16      	ldr	r2, [pc, #88]	; (8001c9c <HAL_I2C_MspInit+0x80>)
 8001c44:	f043 0302 	orr.w	r3, r3, #2
 8001c48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c4a:	4b14      	ldr	r3, [pc, #80]	; (8001c9c <HAL_I2C_MspInit+0x80>)
 8001c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001c56:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c5c:	2312      	movs	r3, #18
 8001c5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c60:	2301      	movs	r3, #1
 8001c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c64:	2303      	movs	r3, #3
 8001c66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c68:	2304      	movs	r3, #4
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	4619      	mov	r1, r3
 8001c72:	480b      	ldr	r0, [pc, #44]	; (8001ca0 <HAL_I2C_MspInit+0x84>)
 8001c74:	f003 fb40 	bl	80052f8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c78:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <HAL_I2C_MspInit+0x80>)
 8001c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c7c:	4a07      	ldr	r2, [pc, #28]	; (8001c9c <HAL_I2C_MspInit+0x80>)
 8001c7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c82:	6593      	str	r3, [r2, #88]	; 0x58
 8001c84:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <HAL_I2C_MspInit+0x80>)
 8001c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001c90:	bf00      	nop
 8001c92:	3728      	adds	r7, #40	; 0x28
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40005400 	.word	0x40005400
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	48000400 	.word	0x48000400

08001ca4 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a0b      	ldr	r2, [pc, #44]	; (8001ce0 <HAL_I2C_MspDeInit+0x3c>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d10f      	bne.n	8001cd6 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001cb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <HAL_I2C_MspDeInit+0x40>)
 8001cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cba:	4a0a      	ldr	r2, [pc, #40]	; (8001ce4 <HAL_I2C_MspDeInit+0x40>)
 8001cbc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001cc0:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARD_D15_GPIO_Port, ARD_D15_Pin);
 8001cc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cc6:	4808      	ldr	r0, [pc, #32]	; (8001ce8 <HAL_I2C_MspDeInit+0x44>)
 8001cc8:	f003 fca8 	bl	800561c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARD_D14_GPIO_Port, ARD_D14_Pin);
 8001ccc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cd0:	4805      	ldr	r0, [pc, #20]	; (8001ce8 <HAL_I2C_MspDeInit+0x44>)
 8001cd2:	f003 fca3 	bl	800561c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40005400 	.word	0x40005400
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	48000400 	.word	0x48000400

08001cec <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001cec:	b590      	push	{r4, r7, lr}
 8001cee:	b087      	sub	sp, #28
 8001cf0:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8001cf2:	f002 f820 	bl	8003d36 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8001cf6:	f000 f89b 	bl	8001e30 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8001cfa:	f7ff fddd 	bl	80018b8 <MX_GPIO_Init>
    MX_ADC1_Init();
 8001cfe:	f7ff fc75 	bl	80015ec <MX_ADC1_Init>
    MX_DFSDM1_Init();
 8001d02:	f7ff fd59 	bl	80017b8 <MX_DFSDM1_Init>
    MX_I2C1_Init();
 8001d06:	f7ff ff49 	bl	8001b9c <MX_I2C1_Init>
    MX_OCTOSPI1_Init();
 8001d0a:	f000 faa7 	bl	800225c <MX_OCTOSPI1_Init>
    MX_SPI1_Init();
 8001d0e:	f000 fb4b 	bl	80023a8 <MX_SPI1_Init>
    MX_USB_OTG_FS_USB_Init();
 8001d12:	f000 fd21 	bl	8002758 <MX_USB_OTG_FS_USB_Init>
    MX_CRC_Init();
 8001d16:	f7ff fd0d 	bl	8001734 <MX_CRC_Init>
    AI_Init(ai_network_data_weights_get(), activations);
 8001d1a:	f008 ffeb 	bl	800acf4 <ai_network_data_weights_get>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	493a      	ldr	r1, [pc, #232]	; (8001e0c <main+0x120>)
 8001d22:	4618      	mov	r0, r3
 8001d24:	f000 f9b0 	bl	8002088 <AI_Init>
    MX_BlueNRG_MS_Init();
 8001d28:	f7ff f926 	bl	8000f78 <MX_BlueNRG_MS_Init>
    /* USER CODE BEGIN 2 */
    MEMS_Init();
 8001d2c:	f000 f962 	bl	8001ff4 <MEMS_Init>

    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    uint32_t write_index = 0;
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]
    while (1) {
        //transmit zyro sensor coordinates by UART.
        if (dataRdyIntReceived != 0) {
 8001d34:	4b36      	ldr	r3, [pc, #216]	; (8001e10 <main+0x124>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0fb      	beq.n	8001d34 <main+0x48>
            dataRdyIntReceived = 0;
 8001d3c:	4b34      	ldr	r3, [pc, #208]	; (8001e10 <main+0x124>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
            LSM6DSL_Axes_t acc_axes;
            LSM6DSL_ACC_GetAxes(&MotionSensor, &acc_axes);
 8001d42:	463b      	mov	r3, r7
 8001d44:	4619      	mov	r1, r3
 8001d46:	4833      	ldr	r0, [pc, #204]	; (8001e14 <main+0x128>)
 8001d48:	f001 fa3e 	bl	80031c8 <LSM6DSL_ACC_GetAxes>
            //printf("%5d, %5d, %5d\r\n", (int) acc_axes.x, (int) acc_axes.y, (int) acc_axes.z);

            aiInData[write_index + 0] = (float) acc_axes.x;
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	ee07 3a90 	vmov	s15, r3
 8001d52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d56:	4a30      	ldr	r2, [pc, #192]	; (8001e18 <main+0x12c>)
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	4413      	add	r3, r2
 8001d5e:	edc3 7a00 	vstr	s15, [r3]
            aiInData[write_index + 1] = (float) acc_axes.y;
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	3301      	adds	r3, #1
 8001d68:	ee07 2a90 	vmov	s15, r2
 8001d6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d70:	4a29      	ldr	r2, [pc, #164]	; (8001e18 <main+0x12c>)
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	4413      	add	r3, r2
 8001d76:	edc3 7a00 	vstr	s15, [r3]
            aiInData[write_index + 2] = (float) acc_axes.z;
 8001d7a:	68ba      	ldr	r2, [r7, #8]
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	3302      	adds	r3, #2
 8001d80:	ee07 2a90 	vmov	s15, r2
 8001d84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d88:	4a23      	ldr	r2, [pc, #140]	; (8001e18 <main+0x12c>)
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	edc3 7a00 	vstr	s15, [r3]

            write_index += 3;
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	3303      	adds	r3, #3
 8001d96:	617b      	str	r3, [r7, #20]
            if (write_index == AI_NETWORK_IN_1_SIZE)
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	2b48      	cmp	r3, #72	; 0x48
 8001d9c:	d1ca      	bne.n	8001d34 <main+0x48>
            {
                write_index = 0;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	617b      	str	r3, [r7, #20]

                printf("Running inference\r\n");
 8001da2:	481e      	ldr	r0, [pc, #120]	; (8001e1c <main+0x130>)
 8001da4:	f00c f906 	bl	800dfb4 <puts>
                AI_Run(aiInData, aiOutData);
 8001da8:	491d      	ldr	r1, [pc, #116]	; (8001e20 <main+0x134>)
 8001daa:	481b      	ldr	r0, [pc, #108]	; (8001e18 <main+0x12c>)
 8001dac:	f000 f9d4 	bl	8002158 <AI_Run>

                for (uint32_t i = 0; i < AI_NETWORK_OUT_1_SIZE; i++)
 8001db0:	2300      	movs	r3, #0
 8001db2:	613b      	str	r3, [r7, #16]
 8001db4:	e011      	b.n	8001dda <main+0xee>
                {
                    printf("%8.6f ", aiOutData[i]);
 8001db6:	4a1a      	ldr	r2, [pc, #104]	; (8001e20 <main+0x134>)
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	4413      	add	r3, r2
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7fe fbd9 	bl	8000578 <__aeabi_f2d>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	460c      	mov	r4, r1
 8001dca:	461a      	mov	r2, r3
 8001dcc:	4623      	mov	r3, r4
 8001dce:	4815      	ldr	r0, [pc, #84]	; (8001e24 <main+0x138>)
 8001dd0:	f00c f87c 	bl	800decc <iprintf>
                for (uint32_t i = 0; i < AI_NETWORK_OUT_1_SIZE; i++)
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	613b      	str	r3, [r7, #16]
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d9ea      	bls.n	8001db6 <main+0xca>
                }
                uint32_t class = argmax(aiOutData, AI_NETWORK_OUT_1_SIZE);
 8001de0:	2102      	movs	r1, #2
 8001de2:	480f      	ldr	r0, [pc, #60]	; (8001e20 <main+0x134>)
 8001de4:	f000 fa06 	bl	80021f4 <argmax>
 8001de8:	60f8      	str	r0, [r7, #12]
                printf(": %d - %s\r\n", (int)class, activities[class]);
 8001dea:	68f9      	ldr	r1, [r7, #12]
 8001dec:	4a0e      	ldr	r2, [pc, #56]	; (8001e28 <main+0x13c>)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df4:	461a      	mov	r2, r3
 8001df6:	480d      	ldr	r0, [pc, #52]	; (8001e2c <main+0x140>)
 8001df8:	f00c f868 	bl	800decc <iprintf>
                if (class == 0) {
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d198      	bne.n	8001d34 <main+0x48>
                    BLE_UID_ON(1000);
 8001e02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e06:	f000 f8bd 	bl	8001f84 <BLE_UID_ON>
        if (dataRdyIntReceived != 0) {
 8001e0a:	e793      	b.n	8001d34 <main+0x48>
 8001e0c:	20000de0 	.word	0x20000de0
 8001e10:	20000ddc 	.word	0x20000ddc
 8001e14:	200014a0 	.word	0x200014a0
 8001e18:	200014d0 	.word	0x200014d0
 8001e1c:	0800fec8 	.word	0x0800fec8
 8001e20:	20000dd4 	.word	0x20000dd4
 8001e24:	0800fedc 	.word	0x0800fedc
 8001e28:	20000000 	.word	0x20000000
 8001e2c:	0800fee4 	.word	0x0800fee4

08001e30 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b0bc      	sub	sp, #240	; 0xf0
 8001e34:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e36:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001e3a:	2244      	movs	r2, #68	; 0x44
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f00b fb37 	bl	800d4b2 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e44:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	60da      	str	r2, [r3, #12]
 8001e52:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e54:	1d3b      	adds	r3, r7, #4
 8001e56:	2294      	movs	r2, #148	; 0x94
 8001e58:	2100      	movs	r1, #0
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f00b fb29 	bl	800d4b2 <memset>

    /** Configure the main internal regulator output voltage
     */
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001e60:	2000      	movs	r0, #0
 8001e62:	f004 fff5 	bl	8006e50 <HAL_PWREx_ControlVoltageScaling>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <SystemClock_Config+0x40>
    {
        Error_Handler();
 8001e6c:	f000 f9f2 	bl	8002254 <Error_Handler>
    }
    /** Configure LSE Drive Capability
     */
    HAL_PWR_EnableBkUpAccess();
 8001e70:	f004 ffbe 	bl	8006df0 <HAL_PWR_EnableBkUpAccess>
    __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001e74:	4b41      	ldr	r3, [pc, #260]	; (8001f7c <SystemClock_Config+0x14c>)
 8001e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e7a:	4a40      	ldr	r2, [pc, #256]	; (8001f7c <SystemClock_Config+0x14c>)
 8001e7c:	f023 0318 	bic.w	r3, r3, #24
 8001e80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001e84:	2314      	movs	r3, #20
 8001e86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001e90:	2301      	movs	r3, #1
 8001e92:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    RCC_OscInitStruct.MSICalibrationValue = 0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001e9c:	2360      	movs	r3, #96	; 0x60
 8001e9e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    RCC_OscInitStruct.PLL.PLLM = 1;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    RCC_OscInitStruct.PLL.PLLN = 60;
 8001eb4:	233c      	movs	r3, #60	; 0x3c
 8001eb6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ecc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f005 f861 	bl	8006f98 <HAL_RCC_OscConfig>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <SystemClock_Config+0xb0>
    {
        Error_Handler();
 8001edc:	f000 f9ba 	bl	8002254 <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ee0:	230f      	movs	r3, #15
 8001ee2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
            |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eec:	2300      	movs	r3, #0
 8001eee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001efe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001f02:	2105      	movs	r1, #5
 8001f04:	4618      	mov	r0, r3
 8001f06:	f005 fc6d 	bl	80077e4 <HAL_RCC_ClockConfig>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <SystemClock_Config+0xe4>
    {
        Error_Handler();
 8001f10:	f000 f9a0 	bl	8002254 <Error_Handler>
    }
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8001f14:	4b1a      	ldr	r3, [pc, #104]	; (8001f80 <SystemClock_Config+0x150>)
 8001f16:	607b      	str	r3, [r7, #4]
            |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1
            |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC
            |RCC_PERIPHCLK_OSPI;
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001f20:	2300      	movs	r3, #0
 8001f22:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001f24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001f28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8001f32:	2300      	movs	r3, #0
 8001f34:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001f38:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001f3c:	67bb      	str	r3, [r7, #120]	; 0x78
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001f42:	2301      	movs	r3, #1
 8001f44:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001f46:	2318      	movs	r3, #24
 8001f48:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001f52:	2302      	movs	r3, #2
 8001f54:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8001f56:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8001f5a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f5c:	1d3b      	adds	r3, r7, #4
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f005 fef0 	bl	8007d44 <HAL_RCCEx_PeriphCLKConfig>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <SystemClock_Config+0x13e>
    {
        Error_Handler();
 8001f6a:	f000 f973 	bl	8002254 <Error_Handler>
    }
    /** Enable MSI Auto calibration
     */
    HAL_RCCEx_EnableMSIPLLMode();
 8001f6e:	f006 fa11 	bl	8008394 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001f72:	bf00      	nop
 8001f74:	37f0      	adds	r7, #240	; 0xf0
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	010160c1 	.word	0x010160c1

08001f84 <BLE_UID_ON>:

/* USER CODE BEGIN 4 */
void BLE_UID_ON(uint32_t Delay) {
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
    printf("BLE ON\r\n");
 8001f8c:	4809      	ldr	r0, [pc, #36]	; (8001fb4 <BLE_UID_ON+0x30>)
 8001f8e:	f00c f811 	bl	800dfb4 <puts>
    EddystoneUID_Start();
 8001f92:	f7ff f869 	bl	8001068 <EddystoneUID_Start>
    HAL_Delay(Delay);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f001 ff42 	bl	8003e20 <HAL_Delay>
    HCI_TL_SPI_Reset();
 8001f9c:	f7ff f9f6 	bl	800138c <HCI_TL_SPI_Reset>
    MX_BlueNRG_MS_Init();
 8001fa0:	f7fe ffea 	bl	8000f78 <MX_BlueNRG_MS_Init>
    printf("BLE OFF\r\n");
 8001fa4:	4804      	ldr	r0, [pc, #16]	; (8001fb8 <BLE_UID_ON+0x34>)
 8001fa6:	f00c f805 	bl	800dfb4 <puts>
}
 8001faa:	bf00      	nop
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	0800fef0 	.word	0x0800fef0
 8001fb8:	0800fef8 	.word	0x0800fef8

08001fbc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == BUTTON_EXTI13_Pin) {
 8001fc6:	88fb      	ldrh	r3, [r7, #6]
 8001fc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fcc:	d103      	bne.n	8001fd6 <HAL_GPIO_EXTI_Callback+0x1a>
        BLE_UID_ON(5000);
 8001fce:	f241 3088 	movw	r0, #5000	; 0x1388
 8001fd2:	f7ff ffd7 	bl	8001f84 <BLE_UID_ON>
    }
    if (GPIO_Pin == LSM6DSL_INT1_EXTI11_Pin) {
 8001fd6:	88fb      	ldrh	r3, [r7, #6]
 8001fd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fdc:	d104      	bne.n	8001fe8 <HAL_GPIO_EXTI_Callback+0x2c>
        dataRdyIntReceived++;
 8001fde:	4b04      	ldr	r3, [pc, #16]	; (8001ff0 <HAL_GPIO_EXTI_Callback+0x34>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	4a02      	ldr	r2, [pc, #8]	; (8001ff0 <HAL_GPIO_EXTI_Callback+0x34>)
 8001fe6:	6013      	str	r3, [r2, #0]
    }
}
 8001fe8:	bf00      	nop
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	20000ddc 	.word	0x20000ddc

08001ff4 <MEMS_Init>:

static void MEMS_Init(void) {
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b08a      	sub	sp, #40	; 0x28
 8001ff8:	af00      	add	r7, sp, #0
    LSM6DSL_IO_t io_ctx;
    uint8_t id;
    LSM6DSL_AxesRaw_t axes;

    /* Link I2C functions to the LSM6DSL driver */
    io_ctx.BusType = LSM6DSL_I2C_BUS;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	617b      	str	r3, [r7, #20]
    io_ctx.Address = LSM6DSL_I2C_ADD_L;
 8001ffe:	23d5      	movs	r3, #213	; 0xd5
 8002000:	763b      	strb	r3, [r7, #24]
    io_ctx.Init = BSP_I2C2_Init;
 8002002:	4b1b      	ldr	r3, [pc, #108]	; (8002070 <MEMS_Init+0x7c>)
 8002004:	60fb      	str	r3, [r7, #12]
    io_ctx.DeInit = BSP_I2C2_DeInit;
 8002006:	4b1b      	ldr	r3, [pc, #108]	; (8002074 <MEMS_Init+0x80>)
 8002008:	613b      	str	r3, [r7, #16]
    io_ctx.ReadReg = BSP_I2C2_ReadReg;
 800200a:	4b1b      	ldr	r3, [pc, #108]	; (8002078 <MEMS_Init+0x84>)
 800200c:	623b      	str	r3, [r7, #32]
    io_ctx.WriteReg = BSP_I2C2_WriteReg;
 800200e:	4b1b      	ldr	r3, [pc, #108]	; (800207c <MEMS_Init+0x88>)
 8002010:	61fb      	str	r3, [r7, #28]
    io_ctx.GetTick = BSP_GetTick;
 8002012:	4b1b      	ldr	r3, [pc, #108]	; (8002080 <MEMS_Init+0x8c>)
 8002014:	627b      	str	r3, [r7, #36]	; 0x24
    LSM6DSL_RegisterBusIO(&MotionSensor, &io_ctx);
 8002016:	f107 030c 	add.w	r3, r7, #12
 800201a:	4619      	mov	r1, r3
 800201c:	4819      	ldr	r0, [pc, #100]	; (8002084 <MEMS_Init+0x90>)
 800201e:	f000 ff1b 	bl	8002e58 <LSM6DSL_RegisterBusIO>

    /* Read the LSM6DSL WHO_AM_I register */
    LSM6DSL_ReadID(&MotionSensor, &id);
 8002022:	f107 030b 	add.w	r3, r7, #11
 8002026:	4619      	mov	r1, r3
 8002028:	4816      	ldr	r0, [pc, #88]	; (8002084 <MEMS_Init+0x90>)
 800202a:	f000 ffe4 	bl	8002ff6 <LSM6DSL_ReadID>
    if (id != LSM6DSL_ID) {
 800202e:	7afb      	ldrb	r3, [r7, #11]
 8002030:	2b6a      	cmp	r3, #106	; 0x6a
 8002032:	d001      	beq.n	8002038 <MEMS_Init+0x44>
        Error_Handler();
 8002034:	f000 f90e 	bl	8002254 <Error_Handler>
    }

    /* Initialize the LSM6DSL sensor */
    LSM6DSL_Init(&MotionSensor);
 8002038:	4812      	ldr	r0, [pc, #72]	; (8002084 <MEMS_Init+0x90>)
 800203a:	f000 ff73 	bl	8002f24 <LSM6DSL_Init>

    /* Configure the LSM6DSL accelerometer (ODR, scale and interrupt) */
    LSM6DSL_ACC_SetOutputDataRate(&MotionSensor, 26.0f); /* 26 Hz */
 800203e:	eeb3 0a0a 	vmov.f32	s0, #58	; 0x41d00000  26.0
 8002042:	4810      	ldr	r0, [pc, #64]	; (8002084 <MEMS_Init+0x90>)
 8002044:	f001 f858 	bl	80030f8 <LSM6DSL_ACC_SetOutputDataRate>
    LSM6DSL_ACC_SetFullScale(&MotionSensor, 4); /* [-4000mg; +4000mg] */
 8002048:	2104      	movs	r1, #4
 800204a:	480e      	ldr	r0, [pc, #56]	; (8002084 <MEMS_Init+0x90>)
 800204c:	f001 f870 	bl	8003130 <LSM6DSL_ACC_SetFullScale>
    LSM6DSL_ACC_Set_INT1_DRDY(&MotionSensor, ENABLE); /* Enable DRDY */
 8002050:	2101      	movs	r1, #1
 8002052:	480c      	ldr	r0, [pc, #48]	; (8002084 <MEMS_Init+0x90>)
 8002054:	f001 f92a 	bl	80032ac <LSM6DSL_ACC_Set_INT1_DRDY>
    LSM6DSL_ACC_GetAxesRaw(&MotionSensor, &axes); /* Clear DRDY */
 8002058:	1d3b      	adds	r3, r7, #4
 800205a:	4619      	mov	r1, r3
 800205c:	4809      	ldr	r0, [pc, #36]	; (8002084 <MEMS_Init+0x90>)
 800205e:	f001 f88f 	bl	8003180 <LSM6DSL_ACC_GetAxesRaw>

    /* Start the LSM6DSL accelerometer */
    LSM6DSL_ACC_Enable(&MotionSensor);
 8002062:	4808      	ldr	r0, [pc, #32]	; (8002084 <MEMS_Init+0x90>)
 8002064:	f000 ffdd 	bl	8003022 <LSM6DSL_ACC_Enable>
}
 8002068:	bf00      	nop
 800206a:	3728      	adds	r7, #40	; 0x28
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	08002a35 	.word	0x08002a35
 8002074:	08002ab1 	.word	0x08002ab1
 8002078:	08002b65 	.word	0x08002b65
 800207c:	08002b01 	.word	0x08002b01
 8002080:	08002bc9 	.word	0x08002bc9
 8002084:	200014a0 	.word	0x200014a0

08002088 <AI_Init>:

static void AI_Init(ai_handle w_addr, ai_handle act_addr)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b090      	sub	sp, #64	; 0x40
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
    ai_error err;

    err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 8002092:	2100      	movs	r1, #0
 8002094:	482b      	ldr	r0, [pc, #172]	; (8002144 <AI_Init+0xbc>)
 8002096:	f008 fdc7 	bl	800ac28 <ai_network_create>
 800209a:	4603      	mov	r3, r0
 800209c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (err.type != AI_ERROR_NONE)
 800209e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d00b      	beq.n	80020be <AI_Init+0x36>
    {
        printf("ai_network_create error - type=%d code=%d\r\n", err.type, err.code);
 80020a6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80020aa:	4619      	mov	r1, r3
 80020ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020ae:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80020b2:	461a      	mov	r2, r3
 80020b4:	4824      	ldr	r0, [pc, #144]	; (8002148 <AI_Init+0xc0>)
 80020b6:	f00b ff09 	bl	800decc <iprintf>
        Error_Handler();
 80020ba:	f000 f8cb 	bl	8002254 <Error_Handler>
    }
    const ai_network_params params =
 80020be:	4b23      	ldr	r3, [pc, #140]	; (800214c <AI_Init+0xc4>)
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	2301      	movs	r3, #1
 80020c4:	823b      	strh	r3, [r7, #16]
 80020c6:	2301      	movs	r3, #1
 80020c8:	827b      	strh	r3, [r7, #18]
 80020ca:	2301      	movs	r3, #1
 80020cc:	82bb      	strh	r3, [r7, #20]
 80020ce:	f642 7378 	movw	r3, #12152	; 0x2f78
 80020d2:	61bb      	str	r3, [r7, #24]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	61fb      	str	r3, [r7, #28]
 80020d8:	2300      	movs	r3, #0
 80020da:	623b      	str	r3, [r7, #32]
 80020dc:	4b1c      	ldr	r3, [pc, #112]	; (8002150 <AI_Init+0xc8>)
 80020de:	627b      	str	r3, [r7, #36]	; 0x24
 80020e0:	2301      	movs	r3, #1
 80020e2:	853b      	strh	r3, [r7, #40]	; 0x28
 80020e4:	2301      	movs	r3, #1
 80020e6:	857b      	strh	r3, [r7, #42]	; 0x2a
 80020e8:	2301      	movs	r3, #1
 80020ea:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80020ec:	f44f 63d8 	mov.w	r3, #1728	; 0x6c0
 80020f0:	633b      	str	r3, [r7, #48]	; 0x30
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	637b      	str	r3, [r7, #52]	; 0x34
 80020f6:	2300      	movs	r3, #0
 80020f8:	63bb      	str	r3, [r7, #56]	; 0x38
    {
            AI_NETWORK_DATA_WEIGHTS(w_addr),
            AI_NETWORK_DATA_ACTIVATIONS(act_addr)
    };

    if(!ai_network_init(network, &params))
 80020fa:	4b12      	ldr	r3, [pc, #72]	; (8002144 <AI_Init+0xbc>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f107 020c 	add.w	r2, r7, #12
 8002102:	4611      	mov	r1, r2
 8002104:	4618      	mov	r0, r3
 8002106:	f008 fda5 	bl	800ac54 <ai_network_init>
 800210a:	4603      	mov	r3, r0
 800210c:	f083 0301 	eor.w	r3, r3, #1
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d012      	beq.n	800213c <AI_Init+0xb4>
    {
        err = ai_network_get_error(network);
 8002116:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <AI_Init+0xbc>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f008 fd78 	bl	800ac10 <ai_network_get_error>
 8002120:	4603      	mov	r3, r0
 8002122:	63fb      	str	r3, [r7, #60]	; 0x3c
        printf("ai_network_init error - type=%d code=%d\r\n", err.type, err.code);
 8002124:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002128:	4619      	mov	r1, r3
 800212a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800212c:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8002130:	461a      	mov	r2, r3
 8002132:	4808      	ldr	r0, [pc, #32]	; (8002154 <AI_Init+0xcc>)
 8002134:	f00b feca 	bl	800decc <iprintf>
        Error_Handler();
 8002138:	f000 f88c 	bl	8002254 <Error_Handler>
    }
}
 800213c:	bf00      	nop
 800213e:	3740      	adds	r7, #64	; 0x40
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	200015f0 	.word	0x200015f0
 8002148:	0800ff04 	.word	0x0800ff04
 800214c:	40040440 	.word	0x40040440
 8002150:	00040440 	.word	0x00040440
 8002154:	0800ff30 	.word	0x0800ff30

08002158 <AI_Run>:

static void AI_Run(float *pIn, float *pOut)
{
 8002158:	b5b0      	push	{r4, r5, r7, lr}
 800215a:	b090      	sub	sp, #64	; 0x40
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
    ai_i32 batch;
    ai_error err;

    ai_buffer ai_input[AI_NETWORK_IN_NUM] = AI_NETWORK_IN;
 8002162:	4b20      	ldr	r3, [pc, #128]	; (80021e4 <AI_Run+0x8c>)
 8002164:	f107 0420 	add.w	r4, r7, #32
 8002168:	461d      	mov	r5, r3
 800216a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800216c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800216e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002172:	e884 0003 	stmia.w	r4, {r0, r1}
    ai_buffer ai_output[AI_NETWORK_OUT_NUM] = AI_NETWORK_OUT;
 8002176:	4b1c      	ldr	r3, [pc, #112]	; (80021e8 <AI_Run+0x90>)
 8002178:	f107 0408 	add.w	r4, r7, #8
 800217c:	461d      	mov	r5, r3
 800217e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002180:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002182:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002186:	e884 0003 	stmia.w	r4, {r0, r1}

    ai_input[0].n_batches = 1;
 800218a:	2301      	movs	r3, #1
 800218c:	84bb      	strh	r3, [r7, #36]	; 0x24
    ai_input[0].data = AI_HANDLE_PTR(pIn);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	633b      	str	r3, [r7, #48]	; 0x30
    ai_output[0].n_batches = 1;
 8002192:	2301      	movs	r3, #1
 8002194:	81bb      	strh	r3, [r7, #12]
    ai_output[0].data = AI_HANDLE_PTR(pOut);
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	61bb      	str	r3, [r7, #24]

    batch = ai_network_run(network, ai_input, ai_output);
 800219a:	4b14      	ldr	r3, [pc, #80]	; (80021ec <AI_Run+0x94>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f107 0208 	add.w	r2, r7, #8
 80021a2:	f107 0120 	add.w	r1, r7, #32
 80021a6:	4618      	mov	r0, r3
 80021a8:	f008 fd93 	bl	800acd2 <ai_network_run>
 80021ac:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (batch != 1)
 80021ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d012      	beq.n	80021da <AI_Run+0x82>
    {
        err = ai_network_get_error(network);
 80021b4:	4b0d      	ldr	r3, [pc, #52]	; (80021ec <AI_Run+0x94>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f008 fd29 	bl	800ac10 <ai_network_get_error>
 80021be:	4603      	mov	r3, r0
 80021c0:	63bb      	str	r3, [r7, #56]	; 0x38
        printf("AI ai_network_run error - type%d code=%d\r\n", err.type, err.code);
 80021c2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80021c6:	4619      	mov	r1, r3
 80021c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ca:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80021ce:	461a      	mov	r2, r3
 80021d0:	4807      	ldr	r0, [pc, #28]	; (80021f0 <AI_Run+0x98>)
 80021d2:	f00b fe7b 	bl	800decc <iprintf>
        Error_Handler();
 80021d6:	f000 f83d 	bl	8002254 <Error_Handler>
    }
}
 80021da:	bf00      	nop
 80021dc:	3740      	adds	r7, #64	; 0x40
 80021de:	46bd      	mov	sp, r7
 80021e0:	bdb0      	pop	{r4, r5, r7, pc}
 80021e2:	bf00      	nop
 80021e4:	0800ff88 	.word	0x0800ff88
 80021e8:	0800ffa0 	.word	0x0800ffa0
 80021ec:	200015f0 	.word	0x200015f0
 80021f0:	0800ff5c 	.word	0x0800ff5c

080021f4 <argmax>:

static uint32_t argmax(const float *values, uint32_t len)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b087      	sub	sp, #28
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
    float max_value = values[0];
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	617b      	str	r3, [r7, #20]
    uint32_t max_index = 0;
 8002204:	2300      	movs	r3, #0
 8002206:	613b      	str	r3, [r7, #16]
    for (uint32_t i = 1; i < len ; i++)
 8002208:	2301      	movs	r3, #1
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	e017      	b.n	800223e <argmax+0x4a>
    {
        if (values[i] > max_value)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	4413      	add	r3, r2
 8002216:	edd3 7a00 	vldr	s15, [r3]
 800221a:	ed97 7a05 	vldr	s14, [r7, #20]
 800221e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002226:	d507      	bpl.n	8002238 <argmax+0x44>
        {
            max_value = values[i];
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	4413      	add	r3, r2
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	617b      	str	r3, [r7, #20]
            max_index = i;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	613b      	str	r3, [r7, #16]
    for (uint32_t i = 1; i < len ; i++)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	3301      	adds	r3, #1
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	429a      	cmp	r2, r3
 8002244:	d3e3      	bcc.n	800220e <argmax+0x1a>
        }
    }
    return max_index;
 8002246:	693b      	ldr	r3, [r7, #16]
}
 8002248:	4618      	mov	r0, r3
 800224a:	371c      	adds	r7, #28
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002258:	b672      	cpsid	i
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 800225a:	e7fe      	b.n	800225a <Error_Handler+0x6>

0800225c <MX_OCTOSPI1_Init>:

OSPI_HandleTypeDef hospi1;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8002262:	1d3b      	adds	r3, r7, #4
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	605a      	str	r2, [r3, #4]
 800226a:	609a      	str	r2, [r3, #8]
 800226c:	60da      	str	r2, [r3, #12]
 800226e:	611a      	str	r2, [r3, #16]

  hospi1.Instance = OCTOSPI1;
 8002270:	4b23      	ldr	r3, [pc, #140]	; (8002300 <MX_OCTOSPI1_Init+0xa4>)
 8002272:	4a24      	ldr	r2, [pc, #144]	; (8002304 <MX_OCTOSPI1_Init+0xa8>)
 8002274:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8002276:	4b22      	ldr	r3, [pc, #136]	; (8002300 <MX_OCTOSPI1_Init+0xa4>)
 8002278:	2201      	movs	r2, #1
 800227a:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 800227c:	4b20      	ldr	r3, [pc, #128]	; (8002300 <MX_OCTOSPI1_Init+0xa4>)
 800227e:	2200      	movs	r2, #0
 8002280:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8002282:	4b1f      	ldr	r3, [pc, #124]	; (8002300 <MX_OCTOSPI1_Init+0xa4>)
 8002284:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002288:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 800228a:	4b1d      	ldr	r3, [pc, #116]	; (8002300 <MX_OCTOSPI1_Init+0xa4>)
 800228c:	2220      	movs	r2, #32
 800228e:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8002290:	4b1b      	ldr	r3, [pc, #108]	; (8002300 <MX_OCTOSPI1_Init+0xa4>)
 8002292:	2201      	movs	r2, #1
 8002294:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8002296:	4b1a      	ldr	r3, [pc, #104]	; (8002300 <MX_OCTOSPI1_Init+0xa4>)
 8002298:	2200      	movs	r2, #0
 800229a:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 800229c:	4b18      	ldr	r3, [pc, #96]	; (8002300 <MX_OCTOSPI1_Init+0xa4>)
 800229e:	2200      	movs	r2, #0
 80022a0:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 80022a2:	4b17      	ldr	r3, [pc, #92]	; (8002300 <MX_OCTOSPI1_Init+0xa4>)
 80022a4:	2201      	movs	r2, #1
 80022a6:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80022a8:	4b15      	ldr	r3, [pc, #84]	; (8002300 <MX_OCTOSPI1_Init+0xa4>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80022ae:	4b14      	ldr	r3, [pc, #80]	; (8002300 <MX_OCTOSPI1_Init+0xa4>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 80022b4:	4b12      	ldr	r3, [pc, #72]	; (8002300 <MX_OCTOSPI1_Init+0xa4>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 80022ba:	4b11      	ldr	r3, [pc, #68]	; (8002300 <MX_OCTOSPI1_Init+0xa4>)
 80022bc:	2208      	movs	r2, #8
 80022be:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 80022c0:	480f      	ldr	r0, [pc, #60]	; (8002300 <MX_OCTOSPI1_Init+0xa4>)
 80022c2:	f004 f89f 	bl	8006404 <HAL_OSPI_Init>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 80022cc:	f7ff ffc2 	bl	8002254 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 80022d0:	2301      	movs	r3, #1
 80022d2:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 80022d4:	2301      	movs	r3, #1
 80022d6:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 80022d8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80022dc:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80022de:	1d3b      	adds	r3, r7, #4
 80022e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e4:	4619      	mov	r1, r3
 80022e6:	4806      	ldr	r0, [pc, #24]	; (8002300 <MX_OCTOSPI1_Init+0xa4>)
 80022e8:	f004 f946 	bl	8006578 <HAL_OSPIM_Config>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 80022f2:	f7ff ffaf 	bl	8002254 <Error_Handler>
  }

}
 80022f6:	bf00      	nop
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	200015f4 	.word	0x200015f4
 8002304:	a0001000 	.word	0xa0001000

08002308 <HAL_OSPI_MspInit>:

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b08a      	sub	sp, #40	; 0x28
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002310:	f107 0314 	add.w	r3, r7, #20
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	605a      	str	r2, [r3, #4]
 800231a:	609a      	str	r2, [r3, #8]
 800231c:	60da      	str	r2, [r3, #12]
 800231e:	611a      	str	r2, [r3, #16]
  if(ospiHandle->Instance==OCTOSPI1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a1d      	ldr	r2, [pc, #116]	; (800239c <HAL_OSPI_MspInit+0x94>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d134      	bne.n	8002394 <HAL_OSPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
    /* OCTOSPI1 clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 800232a:	4b1d      	ldr	r3, [pc, #116]	; (80023a0 <HAL_OSPI_MspInit+0x98>)
 800232c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232e:	4a1c      	ldr	r2, [pc, #112]	; (80023a0 <HAL_OSPI_MspInit+0x98>)
 8002330:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002334:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002336:	4b1a      	ldr	r3, [pc, #104]	; (80023a0 <HAL_OSPI_MspInit+0x98>)
 8002338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800233a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800233e:	613b      	str	r3, [r7, #16]
 8002340:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8002342:	4b17      	ldr	r3, [pc, #92]	; (80023a0 <HAL_OSPI_MspInit+0x98>)
 8002344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002346:	4a16      	ldr	r2, [pc, #88]	; (80023a0 <HAL_OSPI_MspInit+0x98>)
 8002348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800234c:	6513      	str	r3, [r2, #80]	; 0x50
 800234e:	4b14      	ldr	r3, [pc, #80]	; (80023a0 <HAL_OSPI_MspInit+0x98>)
 8002350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800235a:	4b11      	ldr	r3, [pc, #68]	; (80023a0 <HAL_OSPI_MspInit+0x98>)
 800235c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800235e:	4a10      	ldr	r2, [pc, #64]	; (80023a0 <HAL_OSPI_MspInit+0x98>)
 8002360:	f043 0310 	orr.w	r3, r3, #16
 8002364:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002366:	4b0e      	ldr	r3, [pc, #56]	; (80023a0 <HAL_OSPI_MspInit+0x98>)
 8002368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800236a:	f003 0310 	and.w	r3, r3, #16
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	68bb      	ldr	r3, [r7, #8]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8002372:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8002376:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002378:	2302      	movs	r3, #2
 800237a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237c:	2300      	movs	r3, #0
 800237e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002380:	2303      	movs	r3, #3
 8002382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8002384:	230a      	movs	r3, #10
 8002386:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002388:	f107 0314 	add.w	r3, r7, #20
 800238c:	4619      	mov	r1, r3
 800238e:	4805      	ldr	r0, [pc, #20]	; (80023a4 <HAL_OSPI_MspInit+0x9c>)
 8002390:	f002 ffb2 	bl	80052f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}
 8002394:	bf00      	nop
 8002396:	3728      	adds	r7, #40	; 0x28
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	a0001000 	.word	0xa0001000
 80023a0:	40021000 	.word	0x40021000
 80023a4:	48001000 	.word	0x48001000

080023a8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80023ac:	4b1b      	ldr	r3, [pc, #108]	; (800241c <MX_SPI1_Init+0x74>)
 80023ae:	4a1c      	ldr	r2, [pc, #112]	; (8002420 <MX_SPI1_Init+0x78>)
 80023b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80023b2:	4b1a      	ldr	r3, [pc, #104]	; (800241c <MX_SPI1_Init+0x74>)
 80023b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80023ba:	4b18      	ldr	r3, [pc, #96]	; (800241c <MX_SPI1_Init+0x74>)
 80023bc:	2200      	movs	r2, #0
 80023be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80023c0:	4b16      	ldr	r3, [pc, #88]	; (800241c <MX_SPI1_Init+0x74>)
 80023c2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80023c6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023c8:	4b14      	ldr	r3, [pc, #80]	; (800241c <MX_SPI1_Init+0x74>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023ce:	4b13      	ldr	r3, [pc, #76]	; (800241c <MX_SPI1_Init+0x74>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80023d4:	4b11      	ldr	r3, [pc, #68]	; (800241c <MX_SPI1_Init+0x74>)
 80023d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023da:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80023dc:	4b0f      	ldr	r3, [pc, #60]	; (800241c <MX_SPI1_Init+0x74>)
 80023de:	2208      	movs	r2, #8
 80023e0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023e2:	4b0e      	ldr	r3, [pc, #56]	; (800241c <MX_SPI1_Init+0x74>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80023e8:	4b0c      	ldr	r3, [pc, #48]	; (800241c <MX_SPI1_Init+0x74>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023ee:	4b0b      	ldr	r3, [pc, #44]	; (800241c <MX_SPI1_Init+0x74>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80023f4:	4b09      	ldr	r3, [pc, #36]	; (800241c <MX_SPI1_Init+0x74>)
 80023f6:	2207      	movs	r2, #7
 80023f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80023fa:	4b08      	ldr	r3, [pc, #32]	; (800241c <MX_SPI1_Init+0x74>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002400:	4b06      	ldr	r3, [pc, #24]	; (800241c <MX_SPI1_Init+0x74>)
 8002402:	2208      	movs	r2, #8
 8002404:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002406:	4805      	ldr	r0, [pc, #20]	; (800241c <MX_SPI1_Init+0x74>)
 8002408:	f006 f9b4 	bl	8008774 <HAL_SPI_Init>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002412:	f7ff ff1f 	bl	8002254 <Error_Handler>
  }

}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	20001644 	.word	0x20001644
 8002420:	40013000 	.word	0x40013000

08002424 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b08a      	sub	sp, #40	; 0x28
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800242c:	f107 0314 	add.w	r3, r7, #20
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	605a      	str	r2, [r3, #4]
 8002436:	609a      	str	r2, [r3, #8]
 8002438:	60da      	str	r2, [r3, #12]
 800243a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a17      	ldr	r2, [pc, #92]	; (80024a0 <HAL_SPI_MspInit+0x7c>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d128      	bne.n	8002498 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002446:	4b17      	ldr	r3, [pc, #92]	; (80024a4 <HAL_SPI_MspInit+0x80>)
 8002448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800244a:	4a16      	ldr	r2, [pc, #88]	; (80024a4 <HAL_SPI_MspInit+0x80>)
 800244c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002450:	6613      	str	r3, [r2, #96]	; 0x60
 8002452:	4b14      	ldr	r3, [pc, #80]	; (80024a4 <HAL_SPI_MspInit+0x80>)
 8002454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002456:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800245a:	613b      	str	r3, [r7, #16]
 800245c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800245e:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <HAL_SPI_MspInit+0x80>)
 8002460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002462:	4a10      	ldr	r2, [pc, #64]	; (80024a4 <HAL_SPI_MspInit+0x80>)
 8002464:	f043 0301 	orr.w	r3, r3, #1
 8002468:	64d3      	str	r3, [r2, #76]	; 0x4c
 800246a:	4b0e      	ldr	r3, [pc, #56]	; (80024a4 <HAL_SPI_MspInit+0x80>)
 800246c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8002476:	23e0      	movs	r3, #224	; 0xe0
 8002478:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247a:	2302      	movs	r3, #2
 800247c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247e:	2300      	movs	r3, #0
 8002480:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002482:	2303      	movs	r3, #3
 8002484:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002486:	2305      	movs	r3, #5
 8002488:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800248a:	f107 0314 	add.w	r3, r7, #20
 800248e:	4619      	mov	r1, r3
 8002490:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002494:	f002 ff30 	bl	80052f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002498:	bf00      	nop
 800249a:	3728      	adds	r7, #40	; 0x28
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40013000 	.word	0x40013000
 80024a4:	40021000 	.word	0x40021000

080024a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ae:	4b0f      	ldr	r3, [pc, #60]	; (80024ec <HAL_MspInit+0x44>)
 80024b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024b2:	4a0e      	ldr	r2, [pc, #56]	; (80024ec <HAL_MspInit+0x44>)
 80024b4:	f043 0301 	orr.w	r3, r3, #1
 80024b8:	6613      	str	r3, [r2, #96]	; 0x60
 80024ba:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <HAL_MspInit+0x44>)
 80024bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	607b      	str	r3, [r7, #4]
 80024c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024c6:	4b09      	ldr	r3, [pc, #36]	; (80024ec <HAL_MspInit+0x44>)
 80024c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ca:	4a08      	ldr	r2, [pc, #32]	; (80024ec <HAL_MspInit+0x44>)
 80024cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d0:	6593      	str	r3, [r2, #88]	; 0x58
 80024d2:	4b06      	ldr	r3, [pc, #24]	; (80024ec <HAL_MspInit+0x44>)
 80024d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024da:	603b      	str	r3, [r7, #0]
 80024dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	40021000 	.word	0x40021000

080024f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024f4:	e7fe      	b.n	80024f4 <NMI_Handler+0x4>

080024f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024f6:	b480      	push	{r7}
 80024f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024fa:	e7fe      	b.n	80024fa <HardFault_Handler+0x4>

080024fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002500:	e7fe      	b.n	8002500 <MemManage_Handler+0x4>

08002502 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002502:	b480      	push	{r7}
 8002504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002506:	e7fe      	b.n	8002506 <BusFault_Handler+0x4>

08002508 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800250c:	e7fe      	b.n	800250c <UsageFault_Handler+0x4>

0800250e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800250e:	b480      	push	{r7}
 8002510:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002512:	bf00      	nop
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002520:	bf00      	nop
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800252a:	b480      	push	{r7}
 800252c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800252e:	bf00      	nop
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800253c:	f001 fc50 	bl	8003de0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002540:	bf00      	nop
 8002542:	bd80      	pop	{r7, pc}

08002544 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002548:	2020      	movs	r0, #32
 800254a:	f003 f989 	bl	8005860 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_6);
 800254e:	4806      	ldr	r0, [pc, #24]	; (8002568 <EXTI9_5_IRQHandler+0x24>)
 8002550:	f002 fea2 	bl	8005298 <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002554:	2080      	movs	r0, #128	; 0x80
 8002556:	f003 f983 	bl	8005860 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800255a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800255e:	f003 f97f 	bl	8005860 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002562:	bf00      	nop
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	20000cbc 	.word	0x20000cbc

0800256c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002570:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002574:	f003 f974 	bl	8005860 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002578:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800257c:	f003 f970 	bl	8005860 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002580:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002584:	f003 f96c 	bl	8005860 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002588:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800258c:	f003 f968 	bl	8005860 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002590:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002594:	f003 f964 	bl	8005860 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002598:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800259c:	f003 f960 	bl	8005860 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80025a0:	bf00      	nop
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025b0:	2300      	movs	r3, #0
 80025b2:	617b      	str	r3, [r7, #20]
 80025b4:	e00a      	b.n	80025cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025b6:	f3af 8000 	nop.w
 80025ba:	4601      	mov	r1, r0
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	1c5a      	adds	r2, r3, #1
 80025c0:	60ba      	str	r2, [r7, #8]
 80025c2:	b2ca      	uxtb	r2, r1
 80025c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	3301      	adds	r3, #1
 80025ca:	617b      	str	r3, [r7, #20]
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	dbf0      	blt.n	80025b6 <_read+0x12>
	}

return len;
 80025d4:	687b      	ldr	r3, [r7, #4]
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3718      	adds	r7, #24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b086      	sub	sp, #24
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	60f8      	str	r0, [r7, #12]
 80025e6:	60b9      	str	r1, [r7, #8]
 80025e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ea:	2300      	movs	r3, #0
 80025ec:	617b      	str	r3, [r7, #20]
 80025ee:	e009      	b.n	8002604 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	1c5a      	adds	r2, r3, #1
 80025f4:	60ba      	str	r2, [r7, #8]
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f000 f96b 	bl	80028d4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	3301      	adds	r3, #1
 8002602:	617b      	str	r3, [r7, #20]
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	429a      	cmp	r2, r3
 800260a:	dbf1      	blt.n	80025f0 <_write+0x12>
	}
	return len;
 800260c:	687b      	ldr	r3, [r7, #4]
}
 800260e:	4618      	mov	r0, r3
 8002610:	3718      	adds	r7, #24
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <_close>:

int _close(int file)
{
 8002616:	b480      	push	{r7}
 8002618:	b083      	sub	sp, #12
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
	return -1;
 800261e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002622:	4618      	mov	r0, r3
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr

0800262e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800262e:	b480      	push	{r7}
 8002630:	b083      	sub	sp, #12
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
 8002636:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800263e:	605a      	str	r2, [r3, #4]
	return 0;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <_isatty>:

int _isatty(int file)
{
 800264e:	b480      	push	{r7}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
	return 1;
 8002656:	2301      	movs	r3, #1
}
 8002658:	4618      	mov	r0, r3
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
	return 0;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3714      	adds	r7, #20
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
	...

08002680 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002688:	4a14      	ldr	r2, [pc, #80]	; (80026dc <_sbrk+0x5c>)
 800268a:	4b15      	ldr	r3, [pc, #84]	; (80026e0 <_sbrk+0x60>)
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002694:	4b13      	ldr	r3, [pc, #76]	; (80026e4 <_sbrk+0x64>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d102      	bne.n	80026a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800269c:	4b11      	ldr	r3, [pc, #68]	; (80026e4 <_sbrk+0x64>)
 800269e:	4a12      	ldr	r2, [pc, #72]	; (80026e8 <_sbrk+0x68>)
 80026a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026a2:	4b10      	ldr	r3, [pc, #64]	; (80026e4 <_sbrk+0x64>)
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4413      	add	r3, r2
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d207      	bcs.n	80026c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026b0:	f00a fec2 	bl	800d438 <__errno>
 80026b4:	4602      	mov	r2, r0
 80026b6:	230c      	movs	r3, #12
 80026b8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80026ba:	f04f 33ff 	mov.w	r3, #4294967295
 80026be:	e009      	b.n	80026d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026c0:	4b08      	ldr	r3, [pc, #32]	; (80026e4 <_sbrk+0x64>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026c6:	4b07      	ldr	r3, [pc, #28]	; (80026e4 <_sbrk+0x64>)
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4413      	add	r3, r2
 80026ce:	4a05      	ldr	r2, [pc, #20]	; (80026e4 <_sbrk+0x64>)
 80026d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026d2:	68fb      	ldr	r3, [r7, #12]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3718      	adds	r7, #24
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	200a0000 	.word	0x200a0000
 80026e0:	00000800 	.word	0x00000800
 80026e4:	20000914 	.word	0x20000914
 80026e8:	20001800 	.word	0x20001800

080026ec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026f0:	4b17      	ldr	r3, [pc, #92]	; (8002750 <SystemInit+0x64>)
 80026f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f6:	4a16      	ldr	r2, [pc, #88]	; (8002750 <SystemInit+0x64>)
 80026f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002700:	4b14      	ldr	r3, [pc, #80]	; (8002754 <SystemInit+0x68>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a13      	ldr	r2, [pc, #76]	; (8002754 <SystemInit+0x68>)
 8002706:	f043 0301 	orr.w	r3, r3, #1
 800270a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800270c:	4b11      	ldr	r3, [pc, #68]	; (8002754 <SystemInit+0x68>)
 800270e:	2200      	movs	r2, #0
 8002710:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002712:	4b10      	ldr	r3, [pc, #64]	; (8002754 <SystemInit+0x68>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a0f      	ldr	r2, [pc, #60]	; (8002754 <SystemInit+0x68>)
 8002718:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800271c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002720:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002722:	4b0c      	ldr	r3, [pc, #48]	; (8002754 <SystemInit+0x68>)
 8002724:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002728:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800272a:	4b0a      	ldr	r3, [pc, #40]	; (8002754 <SystemInit+0x68>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a09      	ldr	r2, [pc, #36]	; (8002754 <SystemInit+0x68>)
 8002730:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002734:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002736:	4b07      	ldr	r3, [pc, #28]	; (8002754 <SystemInit+0x68>)
 8002738:	2200      	movs	r2, #0
 800273a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800273c:	4b04      	ldr	r3, [pc, #16]	; (8002750 <SystemInit+0x64>)
 800273e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002742:	609a      	str	r2, [r3, #8]
#endif
}
 8002744:	bf00      	nop
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	e000ed00 	.word	0xe000ed00
 8002754:	40021000 	.word	0x40021000

08002758 <MX_USB_OTG_FS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_USB_Init(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0

}
 800275c:	bf00      	nop
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
	...

08002768 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002768:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027a0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800276c:	f7ff ffbe 	bl	80026ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002770:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002772:	e003      	b.n	800277c <LoopCopyDataInit>

08002774 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002774:	4b0b      	ldr	r3, [pc, #44]	; (80027a4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002776:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002778:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800277a:	3104      	adds	r1, #4

0800277c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800277c:	480a      	ldr	r0, [pc, #40]	; (80027a8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800277e:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <LoopForever+0xe>)
	adds	r2, r0, r1
 8002780:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002782:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002784:	d3f6      	bcc.n	8002774 <CopyDataInit>
	ldr	r2, =_sbss
 8002786:	4a0a      	ldr	r2, [pc, #40]	; (80027b0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002788:	e002      	b.n	8002790 <LoopFillZerobss>

0800278a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800278a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800278c:	f842 3b04 	str.w	r3, [r2], #4

08002790 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002790:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <LoopForever+0x16>)
	cmp	r2, r3
 8002792:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002794:	d3f9      	bcc.n	800278a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002796:	f00a fe55 	bl	800d444 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800279a:	f7ff faa7 	bl	8001cec <main>

0800279e <LoopForever>:

LoopForever:
    b LoopForever
 800279e:	e7fe      	b.n	800279e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80027a0:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 80027a4:	080132b8 	.word	0x080132b8
	ldr	r0, =_sdata
 80027a8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80027ac:	200007f4 	.word	0x200007f4
	ldr	r2, =_sbss
 80027b0:	200007f4 	.word	0x200007f4
	ldr	r3, = _ebss
 80027b4:	200017fc 	.word	0x200017fc

080027b8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80027b8:	e7fe      	b.n	80027b8 <ADC1_IRQHandler>
	...

080027bc <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	4603      	mov	r3, r0
 80027c4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80027c6:	2300      	movs	r3, #0
 80027c8:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 80027ca:	79fb      	ldrb	r3, [r7, #7]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d903      	bls.n	80027d8 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80027d0:	f06f 0301 	mvn.w	r3, #1
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	e022      	b.n	800281e <BSP_COM_Init+0x62>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 80027d8:	79fa      	ldrb	r2, [r7, #7]
 80027da:	79fb      	ldrb	r3, [r7, #7]
 80027dc:	4912      	ldr	r1, [pc, #72]	; (8002828 <BSP_COM_Init+0x6c>)
 80027de:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80027e2:	4912      	ldr	r1, [pc, #72]	; (800282c <BSP_COM_Init+0x70>)
 80027e4:	208c      	movs	r0, #140	; 0x8c
 80027e6:	fb00 f303 	mul.w	r3, r0, r3
 80027ea:	440b      	add	r3, r1
 80027ec:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART1_MspInit(&hcom_uart[COM]);
 80027ee:	79fb      	ldrb	r3, [r7, #7]
 80027f0:	228c      	movs	r2, #140	; 0x8c
 80027f2:	fb02 f303 	mul.w	r3, r2, r3
 80027f6:	4a0d      	ldr	r2, [pc, #52]	; (800282c <BSP_COM_Init+0x70>)
 80027f8:	4413      	add	r3, r2
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 f886 	bl	800290c <USART1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (MX_USART1_UART_Init(&hcom_uart[COM]))
 8002800:	79fb      	ldrb	r3, [r7, #7]
 8002802:	228c      	movs	r2, #140	; 0x8c
 8002804:	fb02 f303 	mul.w	r3, r2, r3
 8002808:	4a08      	ldr	r2, [pc, #32]	; (800282c <BSP_COM_Init+0x70>)
 800280a:	4413      	add	r3, r2
 800280c:	4618      	mov	r0, r3
 800280e:	f000 f80f 	bl	8002830 <MX_USART1_UART_Init>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d002      	beq.n	800281e <BSP_COM_Init+0x62>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002818:	f06f 0303 	mvn.w	r3, #3
 800281c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800281e:	68fb      	ldr	r3, [r7, #12]
}
 8002820:	4618      	mov	r0, r3
 8002822:	3710      	adds	r7, #16
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	2000000c 	.word	0x2000000c
 800282c:	200016a8 	.word	0x200016a8

08002830 <MX_USART1_UART_Init>:
 */

/* USART1 init function */

__weak HAL_StatusTypeDef MX_USART1_UART_Init(UART_HandleTypeDef* huart)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002838:	2300      	movs	r3, #0
 800283a:	73fb      	strb	r3, [r7, #15]
  huart->Instance = USART1;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a24      	ldr	r2, [pc, #144]	; (80028d0 <MX_USART1_UART_Init+0xa0>)
 8002840:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002848:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	220c      	movs	r2, #12
 8002860:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	625a      	str	r2, [r3, #36]	; 0x24
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(huart) != HAL_OK)
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f006 fb97 	bl	8008fb4 <HAL_UART_Init>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <MX_USART1_UART_Init+0x60>
  {
    ret = HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetTxFifoThreshold(huart, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002890:	2100      	movs	r1, #0
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f007 f8f5 	bl	8009a82 <HAL_UARTEx_SetTxFifoThreshold>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <MX_USART1_UART_Init+0x72>
  {
    ret = HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetRxFifoThreshold(huart, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028a2:	2100      	movs	r1, #0
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f007 f92a 	bl	8009afe <HAL_UARTEx_SetRxFifoThreshold>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <MX_USART1_UART_Init+0x84>
  {
    ret = HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_DisableFifoMode(huart) != HAL_OK)
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f007 f8ab 	bl	8009a10 <HAL_UARTEx_DisableFifoMode>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <MX_USART1_UART_Init+0x94>
  {
    ret = HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80028c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	40013800 	.word	0x40013800

080028d4 <__io_putchar>:
#if defined(__ICCARM__) || defined(__CC_ARM) /* For IAR and MDK-ARM */
 int fputc (int ch, FILE *f)
#else /* For GCC Toolchains */
 int __io_putchar (int ch)
#endif /* __GNUC__ */
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 80028dc:	4b09      	ldr	r3, [pc, #36]	; (8002904 <__io_putchar+0x30>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	461a      	mov	r2, r3
 80028e2:	238c      	movs	r3, #140	; 0x8c
 80028e4:	fb03 f302 	mul.w	r3, r3, r2
 80028e8:	4a07      	ldr	r2, [pc, #28]	; (8002908 <__io_putchar+0x34>)
 80028ea:	1898      	adds	r0, r3, r2
 80028ec:	1d39      	adds	r1, r7, #4
 80028ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028f2:	2201      	movs	r2, #1
 80028f4:	f006 fbb8 	bl	8009068 <HAL_UART_Transmit>
  return ch;
 80028f8:	687b      	ldr	r3, [r7, #4]
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	20000918 	.word	0x20000918
 8002908:	200016a8 	.word	0x200016a8

0800290c <USART1_MspInit>:
 * @param  huart USART1 handle
 * @retval None
 */

static void USART1_MspInit(UART_HandleTypeDef* uartHandle)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b08a      	sub	sp, #40	; 0x28
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002914:	4b1d      	ldr	r3, [pc, #116]	; (800298c <USART1_MspInit+0x80>)
 8002916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002918:	4a1c      	ldr	r2, [pc, #112]	; (800298c <USART1_MspInit+0x80>)
 800291a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800291e:	6613      	str	r3, [r2, #96]	; 0x60
 8002920:	4b1a      	ldr	r3, [pc, #104]	; (800298c <USART1_MspInit+0x80>)
 8002922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002924:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002928:	613b      	str	r3, [r7, #16]
 800292a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800292c:	4b17      	ldr	r3, [pc, #92]	; (800298c <USART1_MspInit+0x80>)
 800292e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002930:	4a16      	ldr	r2, [pc, #88]	; (800298c <USART1_MspInit+0x80>)
 8002932:	f043 0302 	orr.w	r3, r3, #2
 8002936:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002938:	4b14      	ldr	r3, [pc, #80]	; (800298c <USART1_MspInit+0x80>)
 800293a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BUS_USART1_TX_GPIO_PIN;
 8002944:	2340      	movs	r3, #64	; 0x40
 8002946:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002948:	2302      	movs	r3, #2
 800294a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294c:	2300      	movs	r3, #0
 800294e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002950:	2303      	movs	r3, #3
 8002952:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART1_TX_GPIO_AF;
 8002954:	2307      	movs	r3, #7
 8002956:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART1_TX_GPIO_PORT, &GPIO_InitStruct);
 8002958:	f107 0314 	add.w	r3, r7, #20
 800295c:	4619      	mov	r1, r3
 800295e:	480c      	ldr	r0, [pc, #48]	; (8002990 <USART1_MspInit+0x84>)
 8002960:	f002 fcca 	bl	80052f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART1_RX_GPIO_PIN;
 8002964:	2380      	movs	r3, #128	; 0x80
 8002966:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002968:	2302      	movs	r3, #2
 800296a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296c:	2300      	movs	r3, #0
 800296e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002970:	2303      	movs	r3, #3
 8002972:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART1_RX_GPIO_AF;
 8002974:	2307      	movs	r3, #7
 8002976:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART1_RX_GPIO_PORT, &GPIO_InitStruct);
 8002978:	f107 0314 	add.w	r3, r7, #20
 800297c:	4619      	mov	r1, r3
 800297e:	4804      	ldr	r0, [pc, #16]	; (8002990 <USART1_MspInit+0x84>)
 8002980:	f002 fcba 	bl	80052f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
}
 8002984:	bf00      	nop
 8002986:	3728      	adds	r7, #40	; 0x28
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40021000 	.word	0x40021000
 8002990:	48000400 	.word	0x48000400

08002994 <BSP_SPI3_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI3_Init(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800299a:	2300      	movs	r3, #0
 800299c:	607b      	str	r3, [r7, #4]

  hspi3.Instance  = SPI3;
 800299e:	4b12      	ldr	r3, [pc, #72]	; (80029e8 <BSP_SPI3_Init+0x54>)
 80029a0:	4a12      	ldr	r2, [pc, #72]	; (80029ec <BSP_SPI3_Init+0x58>)
 80029a2:	601a      	str	r2, [r3, #0]

  if(SPI3InitCounter++ == 0)
 80029a4:	4b12      	ldr	r3, [pc, #72]	; (80029f0 <BSP_SPI3_Init+0x5c>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	1c5a      	adds	r2, r3, #1
 80029aa:	4911      	ldr	r1, [pc, #68]	; (80029f0 <BSP_SPI3_Init+0x5c>)
 80029ac:	600a      	str	r2, [r1, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d114      	bne.n	80029dc <BSP_SPI3_Init+0x48>
  {
	if (HAL_SPI_GetState(&hspi3) == HAL_SPI_STATE_RESET)
 80029b2:	480d      	ldr	r0, [pc, #52]	; (80029e8 <BSP_SPI3_Init+0x54>)
 80029b4:	f006 f994 	bl	8008ce0 <HAL_SPI_GetState>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10e      	bne.n	80029dc <BSP_SPI3_Init+0x48>
	{
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
		/* Init the SPI Msp */
		SPI3_MspInit(&hspi3);
 80029be:	480a      	ldr	r0, [pc, #40]	; (80029e8 <BSP_SPI3_Init+0x54>)
 80029c0:	f000 f94c 	bl	8002c5c <SPI3_MspInit>
			{
				return BSP_ERROR_MSP_FAILURE;
			}
		}
#endif
		if(ret == BSP_ERROR_NONE)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d108      	bne.n	80029dc <BSP_SPI3_Init+0x48>
		{
			/* Init the SPI */
			if (MX_SPI3_Init(&hspi3) != HAL_OK)
 80029ca:	4807      	ldr	r0, [pc, #28]	; (80029e8 <BSP_SPI3_Init+0x54>)
 80029cc:	f000 f904 	bl	8002bd8 <MX_SPI3_Init>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d002      	beq.n	80029dc <BSP_SPI3_Init+0x48>
			{
				ret = BSP_ERROR_BUS_FAILURE;
 80029d6:	f06f 0307 	mvn.w	r3, #7
 80029da:	607b      	str	r3, [r7, #4]
			}
		}
	}
  }

  return ret;
 80029dc:	687b      	ldr	r3, [r7, #4]
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	20001780 	.word	0x20001780
 80029ec:	40003c00 	.word	0x40003c00
 80029f0:	2000091c 	.word	0x2000091c

080029f4 <BSP_SPI3_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI3_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b088      	sub	sp, #32
 80029f8:	af02      	add	r7, sp, #8
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	4613      	mov	r3, r2
 8002a00:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002a02:	2300      	movs	r3, #0
 8002a04:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi3, pTxData, pRxData, Length, BUS_SPI3_POLL_TIMEOUT) != HAL_OK)
 8002a06:	88fa      	ldrh	r2, [r7, #6]
 8002a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	68ba      	ldr	r2, [r7, #8]
 8002a12:	68f9      	ldr	r1, [r7, #12]
 8002a14:	4806      	ldr	r0, [pc, #24]	; (8002a30 <BSP_SPI3_SendRecv+0x3c>)
 8002a16:	f005 ff50 	bl	80088ba <HAL_SPI_TransmitReceive>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d002      	beq.n	8002a26 <BSP_SPI3_SendRecv+0x32>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8002a20:	f06f 0305 	mvn.w	r3, #5
 8002a24:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8002a26:	697b      	ldr	r3, [r7, #20]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3718      	adds	r7, #24
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	20001780 	.word	0x20001780

08002a34 <BSP_I2C2_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	607b      	str	r3, [r7, #4]

  hi2c2.Instance  = I2C2;
 8002a3e:	4b19      	ldr	r3, [pc, #100]	; (8002aa4 <BSP_I2C2_Init+0x70>)
 8002a40:	4a19      	ldr	r2, [pc, #100]	; (8002aa8 <BSP_I2C2_Init+0x74>)
 8002a42:	601a      	str	r2, [r3, #0]

  if(I2C2InitCounter++ == 0)
 8002a44:	4b19      	ldr	r3, [pc, #100]	; (8002aac <BSP_I2C2_Init+0x78>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	1c5a      	adds	r2, r3, #1
 8002a4a:	4918      	ldr	r1, [pc, #96]	; (8002aac <BSP_I2C2_Init+0x78>)
 8002a4c:	600a      	str	r2, [r1, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d122      	bne.n	8002a98 <BSP_I2C2_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 8002a52:	4814      	ldr	r0, [pc, #80]	; (8002aa4 <BSP_I2C2_Init+0x70>)
 8002a54:	f003 fa08 	bl	8005e68 <HAL_I2C_GetState>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d11c      	bne.n	8002a98 <BSP_I2C2_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C2_MspInit(&hi2c2);
 8002a5e:	4811      	ldr	r0, [pc, #68]	; (8002aa4 <BSP_I2C2_Init+0x70>)
 8002a60:	f000 f998 	bl	8002d94 <I2C2_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d116      	bne.n	8002a98 <BSP_I2C2_Init+0x64>
	  {
    	/* Init the I2C */
    	if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 8002a6a:	480e      	ldr	r0, [pc, #56]	; (8002aa4 <BSP_I2C2_Init+0x70>)
 8002a6c:	f000 f94e 	bl	8002d0c <MX_I2C2_Init>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <BSP_I2C2_Init+0x4a>
    	{
      	  ret = BSP_ERROR_BUS_FAILURE;
 8002a76:	f06f 0307 	mvn.w	r3, #7
 8002a7a:	607b      	str	r3, [r7, #4]
 8002a7c:	e00c      	b.n	8002a98 <BSP_I2C2_Init+0x64>
    	}
    	else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002a7e:	2100      	movs	r1, #0
 8002a80:	4808      	ldr	r0, [pc, #32]	; (8002aa4 <BSP_I2C2_Init+0x70>)
 8002a82:	f003 fc27 	bl	80062d4 <HAL_I2CEx_ConfigAnalogFilter>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d003      	beq.n	8002a94 <BSP_I2C2_Init+0x60>
    	{
      	  ret = BSP_ERROR_BUS_FAILURE;
 8002a8c:	f06f 0307 	mvn.w	r3, #7
 8002a90:	607b      	str	r3, [r7, #4]
 8002a92:	e001      	b.n	8002a98 <BSP_I2C2_Init+0x64>
    	}
        else
        {
      	  ret = BSP_ERROR_NONE;
 8002a94:	2300      	movs	r3, #0
 8002a96:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8002a98:	687b      	ldr	r3, [r7, #4]
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	20001734 	.word	0x20001734
 8002aa8:	40005800 	.word	0x40005800
 8002aac:	20000920 	.word	0x20000920

08002ab0 <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_DeInit(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	607b      	str	r3, [r7, #4]

  if (I2C2InitCounter > 0)
 8002aba:	4b0f      	ldr	r3, [pc, #60]	; (8002af8 <BSP_I2C2_DeInit+0x48>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d014      	beq.n	8002aec <BSP_I2C2_DeInit+0x3c>
  {
    if (--I2C2InitCounter == 0)
 8002ac2:	4b0d      	ldr	r3, [pc, #52]	; (8002af8 <BSP_I2C2_DeInit+0x48>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	4a0b      	ldr	r2, [pc, #44]	; (8002af8 <BSP_I2C2_DeInit+0x48>)
 8002aca:	6013      	str	r3, [r2, #0]
 8002acc:	4b0a      	ldr	r3, [pc, #40]	; (8002af8 <BSP_I2C2_DeInit+0x48>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d10b      	bne.n	8002aec <BSP_I2C2_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C2_MspDeInit(&hi2c2);
 8002ad4:	4809      	ldr	r0, [pc, #36]	; (8002afc <BSP_I2C2_DeInit+0x4c>)
 8002ad6:	f000 f9a3 	bl	8002e20 <I2C2_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c2) != HAL_OK)
 8002ada:	4808      	ldr	r0, [pc, #32]	; (8002afc <BSP_I2C2_DeInit+0x4c>)
 8002adc:	f002 ff67 	bl	80059ae <HAL_I2C_DeInit>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d002      	beq.n	8002aec <BSP_I2C2_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8002ae6:	f06f 0307 	mvn.w	r3, #7
 8002aea:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8002aec:	687b      	ldr	r3, [r7, #4]
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20000920 	.word	0x20000920
 8002afc:	20001734 	.word	0x20001734

08002b00 <BSP_I2C2_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b08a      	sub	sp, #40	; 0x28
 8002b04:	af04      	add	r7, sp, #16
 8002b06:	60ba      	str	r2, [r7, #8]
 8002b08:	461a      	mov	r2, r3
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	81fb      	strh	r3, [r7, #14]
 8002b0e:	460b      	mov	r3, r1
 8002b10:	81bb      	strh	r3, [r7, #12]
 8002b12:	4613      	mov	r3, r2
 8002b14:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002b16:	2300      	movs	r3, #0
 8002b18:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c2, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 8002b1a:	89ba      	ldrh	r2, [r7, #12]
 8002b1c:	89f9      	ldrh	r1, [r7, #14]
 8002b1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b22:	9302      	str	r3, [sp, #8]
 8002b24:	88fb      	ldrh	r3, [r7, #6]
 8002b26:	9301      	str	r3, [sp, #4]
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	480c      	ldr	r0, [pc, #48]	; (8002b60 <BSP_I2C2_WriteReg+0x60>)
 8002b30:	f002 ff6c 	bl	8005a0c <HAL_I2C_Mem_Write>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00c      	beq.n	8002b54 <BSP_I2C2_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 8002b3a:	4809      	ldr	r0, [pc, #36]	; (8002b60 <BSP_I2C2_WriteReg+0x60>)
 8002b3c:	f003 f9a2 	bl	8005e84 <HAL_I2C_GetError>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	d103      	bne.n	8002b4e <BSP_I2C2_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002b46:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002b4a:	617b      	str	r3, [r7, #20]
 8002b4c:	e002      	b.n	8002b54 <BSP_I2C2_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002b4e:	f06f 0303 	mvn.w	r3, #3
 8002b52:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002b54:	697b      	ldr	r3, [r7, #20]
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3718      	adds	r7, #24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	20001734 	.word	0x20001734

08002b64 <BSP_I2C2_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b08a      	sub	sp, #40	; 0x28
 8002b68:	af04      	add	r7, sp, #16
 8002b6a:	60ba      	str	r2, [r7, #8]
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	4603      	mov	r3, r0
 8002b70:	81fb      	strh	r3, [r7, #14]
 8002b72:	460b      	mov	r3, r1
 8002b74:	81bb      	strh	r3, [r7, #12]
 8002b76:	4613      	mov	r3, r2
 8002b78:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c2, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 8002b7e:	89ba      	ldrh	r2, [r7, #12]
 8002b80:	89f9      	ldrh	r1, [r7, #14]
 8002b82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b86:	9302      	str	r3, [sp, #8]
 8002b88:	88fb      	ldrh	r3, [r7, #6]
 8002b8a:	9301      	str	r3, [sp, #4]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	9300      	str	r3, [sp, #0]
 8002b90:	2301      	movs	r3, #1
 8002b92:	480c      	ldr	r0, [pc, #48]	; (8002bc4 <BSP_I2C2_ReadReg+0x60>)
 8002b94:	f003 f84e 	bl	8005c34 <HAL_I2C_Mem_Read>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00c      	beq.n	8002bb8 <BSP_I2C2_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 8002b9e:	4809      	ldr	r0, [pc, #36]	; (8002bc4 <BSP_I2C2_ReadReg+0x60>)
 8002ba0:	f003 f970 	bl	8005e84 <HAL_I2C_GetError>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	d103      	bne.n	8002bb2 <BSP_I2C2_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002baa:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002bae:	617b      	str	r3, [r7, #20]
 8002bb0:	e002      	b.n	8002bb8 <BSP_I2C2_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002bb2:	f06f 0303 	mvn.w	r3, #3
 8002bb6:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002bb8:	697b      	ldr	r3, [r7, #20]
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3718      	adds	r7, #24
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	20001734 	.word	0x20001734

08002bc8 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002bcc:	f001 f91c 	bl	8003e08 <HAL_GetTick>
 8002bd0:	4603      	mov	r3, r0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	bd80      	pop	{r7, pc}
	...

08002bd8 <MX_SPI3_Init>:

/* SPI3 init function */

__weak HAL_StatusTypeDef MX_SPI3_Init(SPI_HandleTypeDef* hspi)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002be0:	2300      	movs	r3, #0
 8002be2:	73fb      	strb	r3, [r7, #15]
  hspi->Instance = SPI3;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a1c      	ldr	r2, [pc, #112]	; (8002c58 <MX_SPI3_Init+0x80>)
 8002be8:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002bf0:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002bfe:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c12:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2218      	movs	r2, #24
 8002c18:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2207      	movs	r2, #7
 8002c30:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2208      	movs	r2, #8
 8002c3c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f005 fd98 	bl	8008774 <HAL_SPI_Init>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <MX_SPI3_Init+0x76>
  {
    ret = HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3710      	adds	r7, #16
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40003c00 	.word	0x40003c00

08002c5c <SPI3_MspInit>:

static void SPI3_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b08a      	sub	sp, #40	; 0x28
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002c64:	4b27      	ldr	r3, [pc, #156]	; (8002d04 <SPI3_MspInit+0xa8>)
 8002c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c68:	4a26      	ldr	r2, [pc, #152]	; (8002d04 <SPI3_MspInit+0xa8>)
 8002c6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c6e:	6593      	str	r3, [r2, #88]	; 0x58
 8002c70:	4b24      	ldr	r3, [pc, #144]	; (8002d04 <SPI3_MspInit+0xa8>)
 8002c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c78:	613b      	str	r3, [r7, #16]
 8002c7a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c7c:	4b21      	ldr	r3, [pc, #132]	; (8002d04 <SPI3_MspInit+0xa8>)
 8002c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c80:	4a20      	ldr	r2, [pc, #128]	; (8002d04 <SPI3_MspInit+0xa8>)
 8002c82:	f043 0304 	orr.w	r3, r3, #4
 8002c86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c88:	4b1e      	ldr	r3, [pc, #120]	; (8002d04 <SPI3_MspInit+0xa8>)
 8002c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c8c:	f003 0304 	and.w	r3, r3, #4
 8002c90:	60fb      	str	r3, [r7, #12]
 8002c92:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI3_SCK_GPIO_PIN;
 8002c94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_SCK_GPIO_AF;
 8002ca6:	2306      	movs	r3, #6
 8002ca8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI3_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002caa:	f107 0314 	add.w	r3, r7, #20
 8002cae:	4619      	mov	r1, r3
 8002cb0:	4815      	ldr	r0, [pc, #84]	; (8002d08 <SPI3_MspInit+0xac>)
 8002cb2:	f002 fb21 	bl	80052f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MISO_GPIO_PIN;
 8002cb6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002cba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MISO_GPIO_AF;
 8002cc8:	2306      	movs	r3, #6
 8002cca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI3_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002ccc:	f107 0314 	add.w	r3, r7, #20
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	480d      	ldr	r0, [pc, #52]	; (8002d08 <SPI3_MspInit+0xac>)
 8002cd4:	f002 fb10 	bl	80052f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MOSI_GPIO_PIN;
 8002cd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cde:	2302      	movs	r3, #2
 8002ce0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MOSI_GPIO_AF;
 8002cea:	2306      	movs	r3, #6
 8002cec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI3_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002cee:	f107 0314 	add.w	r3, r7, #20
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4804      	ldr	r0, [pc, #16]	; (8002d08 <SPI3_MspInit+0xac>)
 8002cf6:	f002 faff 	bl	80052f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
}
 8002cfa:	bf00      	nop
 8002cfc:	3728      	adds	r7, #40	; 0x28
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40021000 	.word	0x40021000
 8002d08:	48000800 	.word	0x48000800

08002d0c <MX_I2C2_Init>:
}

/* I2C2 init function */

__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002d14:	2300      	movs	r3, #0
 8002d16:	73fb      	strb	r3, [r7, #15]
  hi2c->Instance = I2C2;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a1c      	ldr	r2, [pc, #112]	; (8002d8c <MX_I2C2_Init+0x80>)
 8002d1c:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x307075B1;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a1b      	ldr	r2, [pc, #108]	; (8002d90 <MX_I2C2_Init+0x84>)
 8002d22:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f002 fd9e 	bl	8005890 <HAL_I2C_Init>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <MX_I2C2_Init+0x52>
  {
    ret = HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002d5e:	2100      	movs	r1, #0
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f003 fab7 	bl	80062d4 <HAL_I2CEx_ConfigAnalogFilter>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <MX_I2C2_Init+0x64>
  {
    ret = HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8002d70:	2100      	movs	r1, #0
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f003 faf9 	bl	800636a <HAL_I2CEx_ConfigDigitalFilter>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <MX_I2C2_Init+0x76>
  {
    ret = HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3710      	adds	r7, #16
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	40005800 	.word	0x40005800
 8002d90:	307075b1 	.word	0x307075b1

08002d94 <I2C2_MspInit>:

static void I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b08a      	sub	sp, #40	; 0x28
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d9c:	4b1e      	ldr	r3, [pc, #120]	; (8002e18 <I2C2_MspInit+0x84>)
 8002d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da0:	4a1d      	ldr	r2, [pc, #116]	; (8002e18 <I2C2_MspInit+0x84>)
 8002da2:	f043 0302 	orr.w	r3, r3, #2
 8002da6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002da8:	4b1b      	ldr	r3, [pc, #108]	; (8002e18 <I2C2_MspInit+0x84>)
 8002daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	613b      	str	r3, [r7, #16]
 8002db2:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C2_SCL_GPIO_PIN;
 8002db4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002db8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dba:	2312      	movs	r3, #18
 8002dbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C2_SCL_GPIO_AF;
 8002dc6:	2304      	movs	r3, #4
 8002dc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002dca:	f107 0314 	add.w	r3, r7, #20
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4812      	ldr	r0, [pc, #72]	; (8002e1c <I2C2_MspInit+0x88>)
 8002dd2:	f002 fa91 	bl	80052f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SDA_GPIO_PIN;
 8002dd6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002dda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ddc:	2312      	movs	r3, #18
 8002dde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002de0:	2301      	movs	r3, #1
 8002de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002de4:	2303      	movs	r3, #3
 8002de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C2_SDA_GPIO_AF;
 8002de8:	2304      	movs	r3, #4
 8002dea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002dec:	f107 0314 	add.w	r3, r7, #20
 8002df0:	4619      	mov	r1, r3
 8002df2:	480a      	ldr	r0, [pc, #40]	; (8002e1c <I2C2_MspInit+0x88>)
 8002df4:	f002 fa80 	bl	80052f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002df8:	4b07      	ldr	r3, [pc, #28]	; (8002e18 <I2C2_MspInit+0x84>)
 8002dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dfc:	4a06      	ldr	r2, [pc, #24]	; (8002e18 <I2C2_MspInit+0x84>)
 8002dfe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e02:	6593      	str	r3, [r2, #88]	; 0x58
 8002e04:	4b04      	ldr	r3, [pc, #16]	; (8002e18 <I2C2_MspInit+0x84>)
 8002e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e0c:	60fb      	str	r3, [r7, #12]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
}
 8002e10:	bf00      	nop
 8002e12:	3728      	adds	r7, #40	; 0x28
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	48000400 	.word	0x48000400

08002e20 <I2C2_MspDeInit>:

static void I2C2_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002e28:	4b09      	ldr	r3, [pc, #36]	; (8002e50 <I2C2_MspDeInit+0x30>)
 8002e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e2c:	4a08      	ldr	r2, [pc, #32]	; (8002e50 <I2C2_MspDeInit+0x30>)
 8002e2e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002e32:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, BUS_I2C2_SCL_GPIO_PIN);
 8002e34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e38:	4806      	ldr	r0, [pc, #24]	; (8002e54 <I2C2_MspDeInit+0x34>)
 8002e3a:	f002 fbef 	bl	800561c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, BUS_I2C2_SDA_GPIO_PIN);
 8002e3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002e42:	4804      	ldr	r0, [pc, #16]	; (8002e54 <I2C2_MspDeInit+0x34>)
 8002e44:	f002 fbea 	bl	800561c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
}
 8002e48:	bf00      	nop
 8002e4a:	3708      	adds	r7, #8
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	40021000 	.word	0x40021000
 8002e54:	48000400 	.word	0x48000400

08002e58 <LSM6DSL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8002e62:	2300      	movs	r3, #0
 8002e64:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d103      	bne.n	8002e74 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 8002e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e70:	60fb      	str	r3, [r7, #12]
 8002e72:	e04d      	b.n	8002f10 <LSM6DSL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	7b1a      	ldrb	r2, [r3, #12]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	691a      	ldr	r2, [r3, #16]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	695a      	ldr	r2, [r3, #20]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	699a      	ldr	r2, [r3, #24]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a1b      	ldr	r2, [pc, #108]	; (8002f1c <LSM6DSL_RegisterBusIO+0xc4>)
 8002eb0:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a1a      	ldr	r2, [pc, #104]	; (8002f20 <LSM6DSL_RegisterBusIO+0xc8>)
 8002eb6:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d103      	bne.n	8002ece <LSM6DSL_RegisterBusIO+0x76>
    {
      ret = LSM6DSL_ERROR;
 8002ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8002eca:	60fb      	str	r3, [r7, #12]
 8002ecc:	e020      	b.n	8002f10 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4798      	blx	r3
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <LSM6DSL_RegisterBusIO+0x8a>
    {
      ret = LSM6DSL_ERROR;
 8002eda:	f04f 33ff 	mov.w	r3, #4294967295
 8002ede:	60fb      	str	r3, [r7, #12]
 8002ee0:	e016      	b.n	8002f10 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d112      	bne.n	8002f10 <LSM6DSL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d10d      	bne.n	8002f10 <LSM6DSL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8002ef4:	230c      	movs	r3, #12
 8002ef6:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 8002ef8:	7afb      	ldrb	r3, [r7, #11]
 8002efa:	461a      	mov	r2, r3
 8002efc:	2112      	movs	r1, #18
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 f9b9 	bl	8003276 <LSM6DSL_Write_Reg>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d002      	beq.n	8002f10 <LSM6DSL_RegisterBusIO+0xb8>
          {
            ret = LSM6DSL_ERROR;
 8002f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f0e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8002f10:	68fb      	ldr	r3, [r7, #12]
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	08003531 	.word	0x08003531
 8002f20:	08003567 	.word	0x08003567

08002f24 <LSM6DSL_Init>:
 * @brief  Initialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	331c      	adds	r3, #28
 8002f30:	2101      	movs	r1, #1
 8002f32:	4618      	mov	r0, r3
 8002f34:	f000 fc7a 	bl	800382c <lsm6dsl_auto_increment_set>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d002      	beq.n	8002f44 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 8002f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f42:	e054      	b.n	8002fee <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	331c      	adds	r3, #28
 8002f48:	2101      	movs	r1, #1
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f000 fc26 	bl	800379c <lsm6dsl_block_data_update_set>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d002      	beq.n	8002f5c <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 8002f56:	f04f 33ff 	mov.w	r3, #4294967295
 8002f5a:	e048      	b.n	8002fee <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	331c      	adds	r3, #28
 8002f60:	2100      	movs	r1, #0
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 fec1 	bl	8003cea <lsm6dsl_fifo_mode_set>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d002      	beq.n	8002f74 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 8002f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f72:	e03c      	b.n	8002fee <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2204      	movs	r2, #4
 8002f78:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	331c      	adds	r3, #28
 8002f80:	2100      	movs	r1, #0
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 fb98 	bl	80036b8 <lsm6dsl_xl_data_rate_set>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d002      	beq.n	8002f94 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 8002f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f92:	e02c      	b.n	8002fee <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	331c      	adds	r3, #28
 8002f98:	2100      	movs	r1, #0
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f000 fb2e 	bl	80035fc <lsm6dsl_xl_full_scale_set>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d002      	beq.n	8002fac <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 8002fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8002faa:	e020      	b.n	8002fee <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2204      	movs	r2, #4
 8002fb0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	331c      	adds	r3, #28
 8002fb8:	2100      	movs	r1, #0
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f000 fbc8 	bl	8003750 <lsm6dsl_gy_data_rate_set>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d002      	beq.n	8002fcc <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 8002fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8002fca:	e010      	b.n	8002fee <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	331c      	adds	r3, #28
 8002fd0:	2106      	movs	r1, #6
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f000 fb96 	bl	8003704 <lsm6dsl_gy_full_scale_set>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d002      	beq.n	8002fe4 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 8002fde:	f04f 33ff 	mov.w	r3, #4294967295
 8002fe2:	e004      	b.n	8002fee <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <LSM6DSL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b082      	sub	sp, #8
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
 8002ffe:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	331c      	adds	r3, #28
 8003004:	6839      	ldr	r1, [r7, #0]
 8003006:	4618      	mov	r0, r3
 8003008:	f000 fbff 	bl	800380a <lsm6dsl_device_id_get>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d002      	beq.n	8003018 <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 8003012:	f04f 33ff 	mov.w	r3, #4294967295
 8003016:	e000      	b.n	800301a <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <LSM6DSL_ACC_Enable>:
 * @brief  Enable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b082      	sub	sp, #8
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003030:	2b01      	cmp	r3, #1
 8003032:	d101      	bne.n	8003038 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8003034:	2300      	movs	r3, #0
 8003036:	e014      	b.n	8003062 <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f103 021c 	add.w	r2, r3, #28
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003044:	4619      	mov	r1, r3
 8003046:	4610      	mov	r0, r2
 8003048:	f000 fb36 	bl	80036b8 <lsm6dsl_xl_data_rate_set>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d002      	beq.n	8003058 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8003052:	f04f 33ff 	mov.w	r3, #4294967295
 8003056:	e004      	b.n	8003062 <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
	...

0800306c <LSM6DSL_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8003076:	2300      	movs	r3, #0
 8003078:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	331c      	adds	r3, #28
 800307e:	f107 020b 	add.w	r2, r7, #11
 8003082:	4611      	mov	r1, r2
 8003084:	4618      	mov	r0, r3
 8003086:	f000 fadf 	bl	8003648 <lsm6dsl_xl_full_scale_get>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d002      	beq.n	8003096 <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8003090:	f04f 33ff 	mov.w	r3, #4294967295
 8003094:	e023      	b.n	80030de <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8003096:	7afb      	ldrb	r3, [r7, #11]
 8003098:	2b03      	cmp	r3, #3
 800309a:	d81b      	bhi.n	80030d4 <LSM6DSL_ACC_GetSensitivity+0x68>
 800309c:	a201      	add	r2, pc, #4	; (adr r2, 80030a4 <LSM6DSL_ACC_GetSensitivity+0x38>)
 800309e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030a2:	bf00      	nop
 80030a4:	080030b5 	.word	0x080030b5
 80030a8:	080030cd 	.word	0x080030cd
 80030ac:	080030bd 	.word	0x080030bd
 80030b0:	080030c5 	.word	0x080030c5
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	4a0c      	ldr	r2, [pc, #48]	; (80030e8 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 80030b8:	601a      	str	r2, [r3, #0]
      break;
 80030ba:	e00f      	b.n	80030dc <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	4a0b      	ldr	r2, [pc, #44]	; (80030ec <LSM6DSL_ACC_GetSensitivity+0x80>)
 80030c0:	601a      	str	r2, [r3, #0]
      break;
 80030c2:	e00b      	b.n	80030dc <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	4a0a      	ldr	r2, [pc, #40]	; (80030f0 <LSM6DSL_ACC_GetSensitivity+0x84>)
 80030c8:	601a      	str	r2, [r3, #0]
      break;
 80030ca:	e007      	b.n	80030dc <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	4a09      	ldr	r2, [pc, #36]	; (80030f4 <LSM6DSL_ACC_GetSensitivity+0x88>)
 80030d0:	601a      	str	r2, [r3, #0]
      break;
 80030d2:	e003      	b.n	80030dc <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 80030d4:	f04f 33ff 	mov.w	r3, #4294967295
 80030d8:	60fb      	str	r3, [r7, #12]
      break;
 80030da:	bf00      	nop
  }

  return ret;
 80030dc:	68fb      	ldr	r3, [r7, #12]
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	3d79db23 	.word	0x3d79db23
 80030ec:	3df9db23 	.word	0x3df9db23
 80030f0:	3e79db23 	.word	0x3e79db23
 80030f4:	3ef9db23 	.word	0x3ef9db23

080030f8 <LSM6DSL_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800310a:	2b01      	cmp	r3, #1
 800310c:	d106      	bne.n	800311c <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 800310e:	ed97 0a00 	vldr	s0, [r7]
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f8fe 	bl	8003314 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 8003118:	4603      	mov	r3, r0
 800311a:	e005      	b.n	8003128 <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 800311c:	ed97 0a00 	vldr	s0, [r7]
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 f983 	bl	800342c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 8003126:	4603      	mov	r3, r0
  }
}
 8003128:	4618      	mov	r0, r3
 800312a:	3708      	adds	r7, #8
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <LSM6DSL_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	2b02      	cmp	r3, #2
 800313e:	dd0b      	ble.n	8003158 <LSM6DSL_ACC_SetFullScale+0x28>
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	2b04      	cmp	r3, #4
 8003144:	dd06      	ble.n	8003154 <LSM6DSL_ACC_SetFullScale+0x24>
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	2b08      	cmp	r3, #8
 800314a:	dc01      	bgt.n	8003150 <LSM6DSL_ACC_SetFullScale+0x20>
 800314c:	2303      	movs	r3, #3
 800314e:	e004      	b.n	800315a <LSM6DSL_ACC_SetFullScale+0x2a>
 8003150:	2301      	movs	r3, #1
 8003152:	e002      	b.n	800315a <LSM6DSL_ACC_SetFullScale+0x2a>
 8003154:	2302      	movs	r3, #2
 8003156:	e000      	b.n	800315a <LSM6DSL_ACC_SetFullScale+0x2a>
 8003158:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 800315a:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	331c      	adds	r3, #28
 8003160:	7bfa      	ldrb	r2, [r7, #15]
 8003162:	4611      	mov	r1, r2
 8003164:	4618      	mov	r0, r3
 8003166:	f000 fa49 	bl	80035fc <lsm6dsl_xl_full_scale_set>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d002      	beq.n	8003176 <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 8003170:	f04f 33ff 	mov.w	r3, #4294967295
 8003174:	e000      	b.n	8003178 <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <LSM6DSL_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	331c      	adds	r3, #28
 800318e:	f107 0208 	add.w	r2, r7, #8
 8003192:	4611      	mov	r1, r2
 8003194:	4618      	mov	r0, r3
 8003196:	f000 fb27 	bl	80037e8 <lsm6dsl_acceleration_raw_get>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d002      	beq.n	80031a6 <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 80031a0:	f04f 33ff 	mov.w	r3, #4294967295
 80031a4:	e00c      	b.n	80031c0 <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80031a6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80031ae:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80031b6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <LSM6DSL_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 80031d2:	f04f 0300 	mov.w	r3, #0
 80031d6:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	331c      	adds	r3, #28
 80031dc:	f107 0210 	add.w	r2, r7, #16
 80031e0:	4611      	mov	r1, r2
 80031e2:	4618      	mov	r0, r3
 80031e4:	f000 fb00 	bl	80037e8 <lsm6dsl_acceleration_raw_get>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d002      	beq.n	80031f4 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 80031ee:	f04f 33ff 	mov.w	r3, #4294967295
 80031f2:	e03c      	b.n	800326e <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 80031f4:	f107 030c 	add.w	r3, r7, #12
 80031f8:	4619      	mov	r1, r3
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f7ff ff36 	bl	800306c <LSM6DSL_ACC_GetSensitivity>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d002      	beq.n	800320c <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 8003206:	f04f 33ff 	mov.w	r3, #4294967295
 800320a:	e030      	b.n	800326e <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800320c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003210:	ee07 3a90 	vmov	s15, r3
 8003214:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003218:	edd7 7a03 	vldr	s15, [r7, #12]
 800321c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003220:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003224:	ee17 2a90 	vmov	r2, s15
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800322c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003230:	ee07 3a90 	vmov	s15, r3
 8003234:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003238:	edd7 7a03 	vldr	s15, [r7, #12]
 800323c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003240:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003244:	ee17 2a90 	vmov	r2, s15
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800324c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003250:	ee07 3a90 	vmov	s15, r3
 8003254:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003258:	edd7 7a03 	vldr	s15, [r7, #12]
 800325c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003260:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003264:	ee17 2a90 	vmov	r2, s15
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3718      	adds	r7, #24
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <LSM6DSL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b082      	sub	sp, #8
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
 800327e:	460b      	mov	r3, r1
 8003280:	70fb      	strb	r3, [r7, #3]
 8003282:	4613      	mov	r3, r2
 8003284:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f103 001c 	add.w	r0, r3, #28
 800328c:	1cba      	adds	r2, r7, #2
 800328e:	78f9      	ldrb	r1, [r7, #3]
 8003290:	2301      	movs	r3, #1
 8003292:	f000 f99b 	bl	80035cc <lsm6dsl_write_reg>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d002      	beq.n	80032a2 <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 800329c:	f04f 33ff 	mov.w	r3, #4294967295
 80032a0:	e000      	b.n	80032a4 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3708      	adds	r7, #8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <LSM6DSL_ACC_Set_INT1_DRDY>:
 * @param  pObj the device pObj
 * @param  Val the value of int1_drdy_xl in reg INT1_CTRL
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Set_INT1_DRDY(LSM6DSL_Object_t *pObj, uint8_t Val)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	460b      	mov	r3, r1
 80032b6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_int1_route_t reg;

  if (lsm6dsl_pin_int1_route_get(&(pObj->Ctx), &reg) != LSM6DSL_OK)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	331c      	adds	r3, #28
 80032bc:	f107 020c 	add.w	r2, r7, #12
 80032c0:	4611      	mov	r1, r2
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 fc3b 	bl	8003b3e <lsm6dsl_pin_int1_route_get>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d002      	beq.n	80032d4 <LSM6DSL_ACC_Set_INT1_DRDY+0x28>
  {
    return LSM6DSL_ERROR;
 80032ce:	f04f 33ff 	mov.w	r3, #4294967295
 80032d2:	e01b      	b.n	800330c <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  }

  if (Val <= 1)
 80032d4:	78fb      	ldrb	r3, [r7, #3]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d811      	bhi.n	80032fe <LSM6DSL_ACC_Set_INT1_DRDY+0x52>
  {
    reg.int1_drdy_xl = Val;
 80032da:	78fb      	ldrb	r3, [r7, #3]
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	7b3b      	ldrb	r3, [r7, #12]
 80032e4:	f362 0300 	bfi	r3, r2, #0, #1
 80032e8:	733b      	strb	r3, [r7, #12]
  else
  {
    return LSM6DSL_ERROR;
  }

  if (lsm6dsl_pin_int1_route_set(&(pObj->Ctx), reg) != LSM6DSL_OK)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	331c      	adds	r3, #28
 80032ee:	68f9      	ldr	r1, [r7, #12]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f000 fac1 	bl	8003878 <lsm6dsl_pin_int1_route_set>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d006      	beq.n	800330a <LSM6DSL_ACC_Set_INT1_DRDY+0x5e>
 80032fc:	e002      	b.n	8003304 <LSM6DSL_ACC_Set_INT1_DRDY+0x58>
    return LSM6DSL_ERROR;
 80032fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003302:	e003      	b.n	800330c <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  {
    return LSM6DSL_ERROR;
 8003304:	f04f 33ff 	mov.w	r3, #4294967295
 8003308:	e000      	b.n	800330c <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  }

  return LSM6DSL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3710      	adds	r7, #16
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8003320:	edd7 7a00 	vldr	s15, [r7]
 8003324:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003328:	eef4 7ac7 	vcmpe.f32	s15, s14
 800332c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003330:	d801      	bhi.n	8003336 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 8003332:	2301      	movs	r3, #1
 8003334:	e058      	b.n	80033e8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003336:	edd7 7a00 	vldr	s15, [r7]
 800333a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800333e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003346:	d801      	bhi.n	800334c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 8003348:	2302      	movs	r3, #2
 800334a:	e04d      	b.n	80033e8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800334c:	edd7 7a00 	vldr	s15, [r7]
 8003350:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003410 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8003354:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800335c:	d801      	bhi.n	8003362 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 800335e:	2303      	movs	r3, #3
 8003360:	e042      	b.n	80033e8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003362:	edd7 7a00 	vldr	s15, [r7]
 8003366:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003414 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 800336a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800336e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003372:	d801      	bhi.n	8003378 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 8003374:	2304      	movs	r3, #4
 8003376:	e037      	b.n	80033e8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003378:	edd7 7a00 	vldr	s15, [r7]
 800337c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003418 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 8003380:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003388:	d801      	bhi.n	800338e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 800338a:	2305      	movs	r3, #5
 800338c:	e02c      	b.n	80033e8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800338e:	edd7 7a00 	vldr	s15, [r7]
 8003392:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800341c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 8003396:	eef4 7ac7 	vcmpe.f32	s15, s14
 800339a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800339e:	d801      	bhi.n	80033a4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 80033a0:	2306      	movs	r3, #6
 80033a2:	e021      	b.n	80033e8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80033a4:	edd7 7a00 	vldr	s15, [r7]
 80033a8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003420 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 80033ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033b4:	d801      	bhi.n	80033ba <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 80033b6:	2307      	movs	r3, #7
 80033b8:	e016      	b.n	80033e8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80033ba:	edd7 7a00 	vldr	s15, [r7]
 80033be:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003424 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 80033c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ca:	d801      	bhi.n	80033d0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80033cc:	2308      	movs	r3, #8
 80033ce:	e00b      	b.n	80033e8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80033d0:	edd7 7a00 	vldr	s15, [r7]
 80033d4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003428 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 80033d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033e0:	d801      	bhi.n	80033e6 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80033e2:	2309      	movs	r3, #9
 80033e4:	e000      	b.n	80033e8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80033e6:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 80033e8:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
          :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	331c      	adds	r3, #28
 80033ee:	7bfa      	ldrb	r2, [r7, #15]
 80033f0:	4611      	mov	r1, r2
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 f960 	bl	80036b8 <lsm6dsl_xl_data_rate_set>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d002      	beq.n	8003404 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 80033fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003402:	e000      	b.n	8003406 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	42500000 	.word	0x42500000
 8003414:	42d00000 	.word	0x42d00000
 8003418:	43500000 	.word	0x43500000
 800341c:	43d00000 	.word	0x43d00000
 8003420:	44504000 	.word	0x44504000
 8003424:	44cf8000 	.word	0x44cf8000
 8003428:	45502000 	.word	0x45502000

0800342c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8003438:	edd7 7a00 	vldr	s15, [r7]
 800343c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003440:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003448:	d801      	bhi.n	800344e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 800344a:	2301      	movs	r3, #1
 800344c:	e058      	b.n	8003500 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800344e:	edd7 7a00 	vldr	s15, [r7]
 8003452:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8003456:	eef4 7ac7 	vcmpe.f32	s15, s14
 800345a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800345e:	d801      	bhi.n	8003464 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 8003460:	2302      	movs	r3, #2
 8003462:	e04d      	b.n	8003500 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003464:	edd7 7a00 	vldr	s15, [r7]
 8003468:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003514 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 800346c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003474:	d801      	bhi.n	800347a <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8003476:	2303      	movs	r3, #3
 8003478:	e042      	b.n	8003500 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800347a:	edd7 7a00 	vldr	s15, [r7]
 800347e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003518 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 8003482:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800348a:	d801      	bhi.n	8003490 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 800348c:	2304      	movs	r3, #4
 800348e:	e037      	b.n	8003500 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003490:	edd7 7a00 	vldr	s15, [r7]
 8003494:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800351c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8003498:	eef4 7ac7 	vcmpe.f32	s15, s14
 800349c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034a0:	d801      	bhi.n	80034a6 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80034a2:	2305      	movs	r3, #5
 80034a4:	e02c      	b.n	8003500 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80034a6:	edd7 7a00 	vldr	s15, [r7]
 80034aa:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003520 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 80034ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034b6:	d801      	bhi.n	80034bc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 80034b8:	2306      	movs	r3, #6
 80034ba:	e021      	b.n	8003500 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80034bc:	edd7 7a00 	vldr	s15, [r7]
 80034c0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003524 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 80034c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034cc:	d801      	bhi.n	80034d2 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 80034ce:	2307      	movs	r3, #7
 80034d0:	e016      	b.n	8003500 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80034d2:	edd7 7a00 	vldr	s15, [r7]
 80034d6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003528 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 80034da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034e2:	d801      	bhi.n	80034e8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 80034e4:	2308      	movs	r3, #8
 80034e6:	e00b      	b.n	8003500 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80034e8:	edd7 7a00 	vldr	s15, [r7]
 80034ec:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800352c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 80034f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034f8:	d801      	bhi.n	80034fe <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80034fa:	2309      	movs	r3, #9
 80034fc:	e000      	b.n	8003500 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80034fe:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr
 8003514:	42500000 	.word	0x42500000
 8003518:	42d00000 	.word	0x42d00000
 800351c:	43500000 	.word	0x43500000
 8003520:	43d00000 	.word	0x43d00000
 8003524:	44504000 	.word	0x44504000
 8003528:	44cf8000 	.word	0x44cf8000
 800352c:	45502000 	.word	0x45502000

08003530 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003530:	b590      	push	{r4, r7, lr}
 8003532:	b087      	sub	sp, #28
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	607a      	str	r2, [r7, #4]
 800353a:	461a      	mov	r2, r3
 800353c:	460b      	mov	r3, r1
 800353e:	72fb      	strb	r3, [r7, #11]
 8003540:	4613      	mov	r3, r2
 8003542:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	695c      	ldr	r4, [r3, #20]
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	7b1b      	ldrb	r3, [r3, #12]
 8003550:	b298      	uxth	r0, r3
 8003552:	7afb      	ldrb	r3, [r7, #11]
 8003554:	b299      	uxth	r1, r3
 8003556:	893b      	ldrh	r3, [r7, #8]
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	47a0      	blx	r4
 800355c:	4603      	mov	r3, r0
}
 800355e:	4618      	mov	r0, r3
 8003560:	371c      	adds	r7, #28
 8003562:	46bd      	mov	sp, r7
 8003564:	bd90      	pop	{r4, r7, pc}

08003566 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003566:	b590      	push	{r4, r7, lr}
 8003568:	b087      	sub	sp, #28
 800356a:	af00      	add	r7, sp, #0
 800356c:	60f8      	str	r0, [r7, #12]
 800356e:	607a      	str	r2, [r7, #4]
 8003570:	461a      	mov	r2, r3
 8003572:	460b      	mov	r3, r1
 8003574:	72fb      	strb	r3, [r7, #11]
 8003576:	4613      	mov	r3, r2
 8003578:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	691c      	ldr	r4, [r3, #16]
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	7b1b      	ldrb	r3, [r3, #12]
 8003586:	b298      	uxth	r0, r3
 8003588:	7afb      	ldrb	r3, [r7, #11]
 800358a:	b299      	uxth	r1, r3
 800358c:	893b      	ldrh	r3, [r7, #8]
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	47a0      	blx	r4
 8003592:	4603      	mov	r3, r0
}
 8003594:	4618      	mov	r0, r3
 8003596:	371c      	adds	r7, #28
 8003598:	46bd      	mov	sp, r7
 800359a:	bd90      	pop	{r4, r7, pc}

0800359c <lsm6dsl_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 800359c:	b590      	push	{r4, r7, lr}
 800359e:	b087      	sub	sp, #28
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	607a      	str	r2, [r7, #4]
 80035a6:	461a      	mov	r2, r3
 80035a8:	460b      	mov	r3, r1
 80035aa:	72fb      	strb	r3, [r7, #11]
 80035ac:	4613      	mov	r3, r2
 80035ae:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	685c      	ldr	r4, [r3, #4]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6898      	ldr	r0, [r3, #8]
 80035b8:	893b      	ldrh	r3, [r7, #8]
 80035ba:	7af9      	ldrb	r1, [r7, #11]
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	47a0      	blx	r4
 80035c0:	6178      	str	r0, [r7, #20]
  return ret;
 80035c2:	697b      	ldr	r3, [r7, #20]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	371c      	adds	r7, #28
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd90      	pop	{r4, r7, pc}

080035cc <lsm6dsl_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 80035cc:	b590      	push	{r4, r7, lr}
 80035ce:	b087      	sub	sp, #28
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	607a      	str	r2, [r7, #4]
 80035d6:	461a      	mov	r2, r3
 80035d8:	460b      	mov	r3, r1
 80035da:	72fb      	strb	r3, [r7, #11]
 80035dc:	4613      	mov	r3, r2
 80035de:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681c      	ldr	r4, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6898      	ldr	r0, [r3, #8]
 80035e8:	893b      	ldrh	r3, [r7, #8]
 80035ea:	7af9      	ldrb	r1, [r7, #11]
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	47a0      	blx	r4
 80035f0:	6178      	str	r0, [r7, #20]
  return ret;
 80035f2:	697b      	ldr	r3, [r7, #20]
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	371c      	adds	r7, #28
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd90      	pop	{r4, r7, pc}

080035fc <lsm6dsl_xl_full_scale_set>:
  * @param  val    Change the values of fs_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_xl_t val)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	460b      	mov	r3, r1
 8003606:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8003608:	f107 0208 	add.w	r2, r7, #8
 800360c:	2301      	movs	r3, #1
 800360e:	2110      	movs	r1, #16
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f7ff ffc3 	bl	800359c <lsm6dsl_read_reg>
 8003616:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10f      	bne.n	800363e <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 800361e:	78fb      	ldrb	r3, [r7, #3]
 8003620:	f003 0303 	and.w	r3, r3, #3
 8003624:	b2da      	uxtb	r2, r3
 8003626:	7a3b      	ldrb	r3, [r7, #8]
 8003628:	f362 0383 	bfi	r3, r2, #2, #2
 800362c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 800362e:	f107 0208 	add.w	r2, r7, #8
 8003632:	2301      	movs	r3, #1
 8003634:	2110      	movs	r1, #16
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f7ff ffc8 	bl	80035cc <lsm6dsl_write_reg>
 800363c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800363e:	68fb      	ldr	r3, [r7, #12]
}
 8003640:	4618      	mov	r0, r3
 8003642:	3710      	adds	r7, #16
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <lsm6dsl_xl_full_scale_get>:
  * @param  val    Get the values of fs_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx, lsm6dsl_fs_xl_t *val)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8003652:	f107 0208 	add.w	r2, r7, #8
 8003656:	2301      	movs	r3, #1
 8003658:	2110      	movs	r1, #16
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f7ff ff9e 	bl	800359c <lsm6dsl_read_reg>
 8003660:	60f8      	str	r0, [r7, #12]
  switch (ctrl1_xl.fs_xl) {
 8003662:	7a3b      	ldrb	r3, [r7, #8]
 8003664:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b03      	cmp	r3, #3
 800366c:	d81a      	bhi.n	80036a4 <lsm6dsl_xl_full_scale_get+0x5c>
 800366e:	a201      	add	r2, pc, #4	; (adr r2, 8003674 <lsm6dsl_xl_full_scale_get+0x2c>)
 8003670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003674:	08003685 	.word	0x08003685
 8003678:	0800368d 	.word	0x0800368d
 800367c:	08003695 	.word	0x08003695
 8003680:	0800369d 	.word	0x0800369d
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	2200      	movs	r2, #0
 8003688:	701a      	strb	r2, [r3, #0]
      break;
 800368a:	e00f      	b.n	80036ac <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	2201      	movs	r2, #1
 8003690:	701a      	strb	r2, [r3, #0]
      break;
 8003692:	e00b      	b.n	80036ac <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	2202      	movs	r2, #2
 8003698:	701a      	strb	r2, [r3, #0]
      break;
 800369a:	e007      	b.n	80036ac <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	2203      	movs	r2, #3
 80036a0:	701a      	strb	r2, [r3, #0]
      break;
 80036a2:	e003      	b.n	80036ac <lsm6dsl_xl_full_scale_get+0x64>
    default:
      *val = LSM6DSL_XL_FS_ND;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	2204      	movs	r2, #4
 80036a8:	701a      	strb	r2, [r3, #0]
      break;
 80036aa:	bf00      	nop
  }

  return ret;
 80036ac:	68fb      	ldr	r3, [r7, #12]
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop

080036b8 <lsm6dsl_xl_data_rate_set>:
  * @param  val    Change the values of odr_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_xl_t val)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	460b      	mov	r3, r1
 80036c2:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80036c4:	f107 0208 	add.w	r2, r7, #8
 80036c8:	2301      	movs	r3, #1
 80036ca:	2110      	movs	r1, #16
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f7ff ff65 	bl	800359c <lsm6dsl_read_reg>
 80036d2:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10f      	bne.n	80036fa <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 80036da:	78fb      	ldrb	r3, [r7, #3]
 80036dc:	f003 030f 	and.w	r3, r3, #15
 80036e0:	b2da      	uxtb	r2, r3
 80036e2:	7a3b      	ldrb	r3, [r7, #8]
 80036e4:	f362 1307 	bfi	r3, r2, #4, #4
 80036e8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80036ea:	f107 0208 	add.w	r2, r7, #8
 80036ee:	2301      	movs	r3, #1
 80036f0:	2110      	movs	r1, #16
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7ff ff6a 	bl	80035cc <lsm6dsl_write_reg>
 80036f8:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80036fa:	68fb      	ldr	r3, [r7, #12]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <lsm6dsl_gy_full_scale_set>:
  * @param  val    Change the values of fs_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_g_t val)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	460b      	mov	r3, r1
 800370e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8003710:	f107 0208 	add.w	r2, r7, #8
 8003714:	2301      	movs	r3, #1
 8003716:	2111      	movs	r1, #17
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f7ff ff3f 	bl	800359c <lsm6dsl_read_reg>
 800371e:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10f      	bne.n	8003746 <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 8003726:	78fb      	ldrb	r3, [r7, #3]
 8003728:	f003 0307 	and.w	r3, r3, #7
 800372c:	b2da      	uxtb	r2, r3
 800372e:	7a3b      	ldrb	r3, [r7, #8]
 8003730:	f362 0343 	bfi	r3, r2, #1, #3
 8003734:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8003736:	f107 0208 	add.w	r2, r7, #8
 800373a:	2301      	movs	r3, #1
 800373c:	2111      	movs	r1, #17
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7ff ff44 	bl	80035cc <lsm6dsl_write_reg>
 8003744:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8003746:	68fb      	ldr	r3, [r7, #12]
}
 8003748:	4618      	mov	r0, r3
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <lsm6dsl_gy_data_rate_set>:
  * @param  val    Change the values of odr_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_g_t val)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	460b      	mov	r3, r1
 800375a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 800375c:	f107 0208 	add.w	r2, r7, #8
 8003760:	2301      	movs	r3, #1
 8003762:	2111      	movs	r1, #17
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f7ff ff19 	bl	800359c <lsm6dsl_read_reg>
 800376a:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10f      	bne.n	8003792 <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 8003772:	78fb      	ldrb	r3, [r7, #3]
 8003774:	f003 030f 	and.w	r3, r3, #15
 8003778:	b2da      	uxtb	r2, r3
 800377a:	7a3b      	ldrb	r3, [r7, #8]
 800377c:	f362 1307 	bfi	r3, r2, #4, #4
 8003780:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8003782:	f107 0208 	add.w	r2, r7, #8
 8003786:	2301      	movs	r3, #1
 8003788:	2111      	movs	r1, #17
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7ff ff1e 	bl	80035cc <lsm6dsl_write_reg>
 8003790:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8003792:	68fb      	ldr	r3, [r7, #12]
}
 8003794:	4618      	mov	r0, r3
 8003796:	3710      	adds	r7, #16
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	460b      	mov	r3, r1
 80037a6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 80037a8:	f107 0208 	add.w	r2, r7, #8
 80037ac:	2301      	movs	r3, #1
 80037ae:	2112      	movs	r1, #18
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f7ff fef3 	bl	800359c <lsm6dsl_read_reg>
 80037b6:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10f      	bne.n	80037de <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 80037be:	78fb      	ldrb	r3, [r7, #3]
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	b2da      	uxtb	r2, r3
 80037c6:	7a3b      	ldrb	r3, [r7, #8]
 80037c8:	f362 1386 	bfi	r3, r2, #6, #1
 80037cc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 80037ce:	f107 0208 	add.w	r2, r7, #8
 80037d2:	2301      	movs	r3, #1
 80037d4:	2112      	movs	r1, #18
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f7ff fef8 	bl	80035cc <lsm6dsl_write_reg>
 80037dc:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80037de:	68fb      	ldr	r3, [r7, #12]
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 80037f2:	2306      	movs	r3, #6
 80037f4:	683a      	ldr	r2, [r7, #0]
 80037f6:	2128      	movs	r1, #40	; 0x28
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f7ff fecf 	bl	800359c <lsm6dsl_read_reg>
 80037fe:	60f8      	str	r0, [r7, #12]
  return ret;
 8003800:	68fb      	ldr	r3, [r7, #12]
}
 8003802:	4618      	mov	r0, r3
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800380a:	b580      	push	{r7, lr}
 800380c:	b084      	sub	sp, #16
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
 8003812:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8003814:	2301      	movs	r3, #1
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	210f      	movs	r1, #15
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7ff febe 	bl	800359c <lsm6dsl_read_reg>
 8003820:	60f8      	str	r0, [r7, #12]
  return ret;
 8003822:	68fb      	ldr	r3, [r7, #12]
}
 8003824:	4618      	mov	r0, r3
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	460b      	mov	r3, r1
 8003836:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8003838:	f107 0208 	add.w	r2, r7, #8
 800383c:	2301      	movs	r3, #1
 800383e:	2112      	movs	r1, #18
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f7ff feab 	bl	800359c <lsm6dsl_read_reg>
 8003846:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10f      	bne.n	800386e <lsm6dsl_auto_increment_set+0x42>
    ctrl3_c.if_inc = val;
 800384e:	78fb      	ldrb	r3, [r7, #3]
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	b2da      	uxtb	r2, r3
 8003856:	7a3b      	ldrb	r3, [r7, #8]
 8003858:	f362 0382 	bfi	r3, r2, #2, #1
 800385c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 800385e:	f107 0208 	add.w	r2, r7, #8
 8003862:	2301      	movs	r3, #1
 8003864:	2112      	movs	r1, #18
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f7ff feb0 	bl	80035cc <lsm6dsl_write_reg>
 800386c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800386e:	68fb      	ldr	r3, [r7, #12]
}
 8003870:	4618      	mov	r0, r3
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <lsm6dsl_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_set(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t val)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b08a      	sub	sp, #40	; 0x28
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  lsm6dsl_md2_cfg_t md2_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_tap_cfg_t tap_cfg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t*)&int1_ctrl, 1);
 8003882:	f107 021c 	add.w	r2, r7, #28
 8003886:	2301      	movs	r3, #1
 8003888:	210d      	movs	r1, #13
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7ff fe86 	bl	800359c <lsm6dsl_read_reg>
 8003890:	6278      	str	r0, [r7, #36]	; 0x24
  if(ret == 0){
 8003892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003894:	2b00      	cmp	r3, #0
 8003896:	d147      	bne.n	8003928 <lsm6dsl_pin_int1_route_set+0xb0>
    int1_ctrl.int1_drdy_xl        = val.int1_drdy_xl;
 8003898:	783b      	ldrb	r3, [r7, #0]
 800389a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800389e:	b2da      	uxtb	r2, r3
 80038a0:	7f3b      	ldrb	r3, [r7, #28]
 80038a2:	f362 0300 	bfi	r3, r2, #0, #1
 80038a6:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_drdy_g         = val.int1_drdy_g;
 80038a8:	783b      	ldrb	r3, [r7, #0]
 80038aa:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80038ae:	b2da      	uxtb	r2, r3
 80038b0:	7f3b      	ldrb	r3, [r7, #28]
 80038b2:	f362 0341 	bfi	r3, r2, #1, #1
 80038b6:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_boot           = val.int1_boot;
 80038b8:	783b      	ldrb	r3, [r7, #0]
 80038ba:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80038be:	b2da      	uxtb	r2, r3
 80038c0:	7f3b      	ldrb	r3, [r7, #28]
 80038c2:	f362 0382 	bfi	r3, r2, #2, #1
 80038c6:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fth            = val.int1_fth;
 80038c8:	783b      	ldrb	r3, [r7, #0]
 80038ca:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80038ce:	b2da      	uxtb	r2, r3
 80038d0:	7f3b      	ldrb	r3, [r7, #28]
 80038d2:	f362 03c3 	bfi	r3, r2, #3, #1
 80038d6:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fifo_ovr       = val.int1_fifo_ovr;
 80038d8:	783b      	ldrb	r3, [r7, #0]
 80038da:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80038de:	b2da      	uxtb	r2, r3
 80038e0:	7f3b      	ldrb	r3, [r7, #28]
 80038e2:	f362 1304 	bfi	r3, r2, #4, #1
 80038e6:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_full_flag      = val.int1_full_flag;
 80038e8:	783b      	ldrb	r3, [r7, #0]
 80038ea:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80038ee:	b2da      	uxtb	r2, r3
 80038f0:	7f3b      	ldrb	r3, [r7, #28]
 80038f2:	f362 1345 	bfi	r3, r2, #5, #1
 80038f6:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_sign_mot       = val.int1_sign_mot;
 80038f8:	783b      	ldrb	r3, [r7, #0]
 80038fa:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80038fe:	b2da      	uxtb	r2, r3
 8003900:	7f3b      	ldrb	r3, [r7, #28]
 8003902:	f362 1386 	bfi	r3, r2, #6, #1
 8003906:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_step_detector  = val.int1_step_detector;
 8003908:	783b      	ldrb	r3, [r7, #0]
 800390a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800390e:	b2da      	uxtb	r2, r3
 8003910:	7f3b      	ldrb	r3, [r7, #28]
 8003912:	f362 13c7 	bfi	r3, r2, #7, #1
 8003916:	773b      	strb	r3, [r7, #28]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t*)&int1_ctrl, 1);
 8003918:	f107 021c 	add.w	r2, r7, #28
 800391c:	2301      	movs	r3, #1
 800391e:	210d      	movs	r1, #13
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f7ff fe53 	bl	80035cc <lsm6dsl_write_reg>
 8003926:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 8003928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392a:	2b00      	cmp	r3, #0
 800392c:	d107      	bne.n	800393e <lsm6dsl_pin_int1_route_set+0xc6>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t*)&md1_cfg, 1);
 800392e:	f107 0218 	add.w	r2, r7, #24
 8003932:	2301      	movs	r3, #1
 8003934:	215e      	movs	r1, #94	; 0x5e
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7ff fe30 	bl	800359c <lsm6dsl_read_reg>
 800393c:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 800393e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003940:	2b00      	cmp	r3, #0
 8003942:	d107      	bne.n	8003954 <lsm6dsl_pin_int1_route_set+0xdc>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD2_CFG, (uint8_t*)&md2_cfg, 1);
 8003944:	f107 0214 	add.w	r2, r7, #20
 8003948:	2301      	movs	r3, #1
 800394a:	215f      	movs	r1, #95	; 0x5f
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f7ff fe25 	bl	800359c <lsm6dsl_read_reg>
 8003952:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 8003954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003956:	2b00      	cmp	r3, #0
 8003958:	d147      	bne.n	80039ea <lsm6dsl_pin_int1_route_set+0x172>
        md1_cfg.int1_timer           = val.int1_timer;
 800395a:	787b      	ldrb	r3, [r7, #1]
 800395c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003960:	b2da      	uxtb	r2, r3
 8003962:	7e3b      	ldrb	r3, [r7, #24]
 8003964:	f362 0300 	bfi	r3, r2, #0, #1
 8003968:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_tilt            = val.int1_tilt;
 800396a:	787b      	ldrb	r3, [r7, #1]
 800396c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003970:	b2da      	uxtb	r2, r3
 8003972:	7e3b      	ldrb	r3, [r7, #24]
 8003974:	f362 0341 	bfi	r3, r2, #1, #1
 8003978:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_6d              = val.int1_6d;
 800397a:	787b      	ldrb	r3, [r7, #1]
 800397c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003980:	b2da      	uxtb	r2, r3
 8003982:	7e3b      	ldrb	r3, [r7, #24]
 8003984:	f362 0382 	bfi	r3, r2, #2, #1
 8003988:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_double_tap      = val.int1_double_tap;
 800398a:	787b      	ldrb	r3, [r7, #1]
 800398c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003990:	b2da      	uxtb	r2, r3
 8003992:	7e3b      	ldrb	r3, [r7, #24]
 8003994:	f362 03c3 	bfi	r3, r2, #3, #1
 8003998:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_ff              = val.int1_ff;
 800399a:	787b      	ldrb	r3, [r7, #1]
 800399c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80039a0:	b2da      	uxtb	r2, r3
 80039a2:	7e3b      	ldrb	r3, [r7, #24]
 80039a4:	f362 1304 	bfi	r3, r2, #4, #1
 80039a8:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_wu              = val.int1_wu;
 80039aa:	787b      	ldrb	r3, [r7, #1]
 80039ac:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80039b0:	b2da      	uxtb	r2, r3
 80039b2:	7e3b      	ldrb	r3, [r7, #24]
 80039b4:	f362 1345 	bfi	r3, r2, #5, #1
 80039b8:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_single_tap      = val.int1_single_tap;
 80039ba:	787b      	ldrb	r3, [r7, #1]
 80039bc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80039c0:	b2da      	uxtb	r2, r3
 80039c2:	7e3b      	ldrb	r3, [r7, #24]
 80039c4:	f362 1386 	bfi	r3, r2, #6, #1
 80039c8:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_inact_state     = val.int1_inact_state;
 80039ca:	787b      	ldrb	r3, [r7, #1]
 80039cc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80039d0:	b2da      	uxtb	r2, r3
 80039d2:	7e3b      	ldrb	r3, [r7, #24]
 80039d4:	f362 13c7 	bfi	r3, r2, #7, #1
 80039d8:	763b      	strb	r3, [r7, #24]
        ret = lsm6dsl_write_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t*)&md1_cfg, 1);
 80039da:	f107 0218 	add.w	r2, r7, #24
 80039de:	2301      	movs	r3, #1
 80039e0:	215e      	movs	r1, #94	; 0x5e
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f7ff fdf2 	bl	80035cc <lsm6dsl_write_reg>
 80039e8:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 80039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d107      	bne.n	8003a00 <lsm6dsl_pin_int1_route_set+0x188>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 80039f0:	f107 0210 	add.w	r2, r7, #16
 80039f4:	2301      	movs	r3, #1
 80039f6:	2113      	movs	r1, #19
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f7ff fdcf 	bl	800359c <lsm6dsl_read_reg>
 80039fe:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 8003a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10f      	bne.n	8003a26 <lsm6dsl_pin_int1_route_set+0x1ae>
    ctrl4_c.den_drdy_int1 = val.den_drdy_int1;
 8003a06:	78bb      	ldrb	r3, [r7, #2]
 8003a08:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	7c3b      	ldrb	r3, [r7, #16]
 8003a10:	f362 1304 	bfi	r3, r2, #4, #1
 8003a14:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 8003a16:	f107 0210 	add.w	r2, r7, #16
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	2113      	movs	r1, #19
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7ff fdd4 	bl	80035cc <lsm6dsl_write_reg>
 8003a24:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 8003a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d107      	bne.n	8003a3c <lsm6dsl_pin_int1_route_set+0x1c4>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8003a2c:	f107 0220 	add.w	r2, r7, #32
 8003a30:	2301      	movs	r3, #1
 8003a32:	211a      	movs	r1, #26
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f7ff fdb1 	bl	800359c <lsm6dsl_read_reg>
 8003a3a:	6278      	str	r0, [r7, #36]	; 0x24
                           (uint8_t*)&master_config, 1);
  }
  if(ret == 0){
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d111      	bne.n	8003a66 <lsm6dsl_pin_int1_route_set+0x1ee>
     master_config.drdy_on_int1   = val.den_drdy_int1;
 8003a42:	78bb      	ldrb	r3, [r7, #2]
 8003a44:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003a48:	b2da      	uxtb	r2, r3
 8003a4a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003a4e:	f362 13c7 	bfi	r3, r2, #7, #1
 8003a52:	f887 3020 	strb.w	r3, [r7, #32]
     ret = lsm6dsl_write_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8003a56:	f107 0220 	add.w	r2, r7, #32
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	211a      	movs	r1, #26
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7ff fdb4 	bl	80035cc <lsm6dsl_write_reg>
 8003a64:	6278      	str	r0, [r7, #36]	; 0x24
                             (uint8_t*)&master_config, 1);
  }
  if(ret == 0){
 8003a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d158      	bne.n	8003b1e <lsm6dsl_pin_int1_route_set+0x2a6>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
 8003a6c:	f107 020c 	add.w	r2, r7, #12
 8003a70:	2301      	movs	r3, #1
 8003a72:	2158      	movs	r1, #88	; 0x58
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f7ff fd91 	bl	800359c <lsm6dsl_read_reg>
 8003a7a:	6278      	str	r0, [r7, #36]	; 0x24
    if ((val.int1_6d != 0x00U) ||
 8003a7c:	787b      	ldrb	r3, [r7, #1]
 8003a7e:	f003 0304 	and.w	r3, r3, #4
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d141      	bne.n	8003b0c <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_ff != 0x00U) ||
 8003a88:	787b      	ldrb	r3, [r7, #1]
 8003a8a:	f003 0310 	and.w	r3, r3, #16
 8003a8e:	b2db      	uxtb	r3, r3
    if ((val.int1_6d != 0x00U) ||
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d13b      	bne.n	8003b0c <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_wu != 0x00U) ||
 8003a94:	787b      	ldrb	r3, [r7, #1]
 8003a96:	f003 0320 	and.w	r3, r3, #32
 8003a9a:	b2db      	uxtb	r3, r3
        (val.int1_ff != 0x00U) ||
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d135      	bne.n	8003b0c <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_single_tap != 0x00U) ||
 8003aa0:	787b      	ldrb	r3, [r7, #1]
 8003aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa6:	b2db      	uxtb	r3, r3
        (val.int1_wu != 0x00U) ||
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d12f      	bne.n	8003b0c <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_double_tap != 0x00U) ||
 8003aac:	787b      	ldrb	r3, [r7, #1]
 8003aae:	f003 0308 	and.w	r3, r3, #8
 8003ab2:	b2db      	uxtb	r3, r3
        (val.int1_single_tap != 0x00U) ||
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d129      	bne.n	8003b0c <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_inact_state != 0x00U)||
 8003ab8:	787b      	ldrb	r3, [r7, #1]
 8003aba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003abe:	b2db      	uxtb	r3, r3
        (val.int1_double_tap != 0x00U) ||
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d123      	bne.n	8003b0c <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_6d != 0x00U) ||
 8003ac4:	7d3b      	ldrb	r3, [r7, #20]
 8003ac6:	f003 0304 	and.w	r3, r3, #4
 8003aca:	b2db      	uxtb	r3, r3
        (val.int1_inact_state != 0x00U)||
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d11d      	bne.n	8003b0c <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_ff != 0x00U) ||
 8003ad0:	7d3b      	ldrb	r3, [r7, #20]
 8003ad2:	f003 0310 	and.w	r3, r3, #16
 8003ad6:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_6d != 0x00U) ||
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d117      	bne.n	8003b0c <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_wu != 0x00U) ||
 8003adc:	7d3b      	ldrb	r3, [r7, #20]
 8003ade:	f003 0320 	and.w	r3, r3, #32
 8003ae2:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_ff != 0x00U) ||
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d111      	bne.n	8003b0c <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_single_tap != 0x00U) ||
 8003ae8:	7d3b      	ldrb	r3, [r7, #20]
 8003aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aee:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_wu != 0x00U) ||
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d10b      	bne.n	8003b0c <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_double_tap != 0x00U) ||
 8003af4:	7d3b      	ldrb	r3, [r7, #20]
 8003af6:	f003 0308 	and.w	r3, r3, #8
 8003afa:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_single_tap != 0x00U) ||
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d105      	bne.n	8003b0c <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_inact_state!= 0x00U) ){
 8003b00:	7d3b      	ldrb	r3, [r7, #20]
 8003b02:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003b06:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_double_tap != 0x00U) ||
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d004      	beq.n	8003b16 <lsm6dsl_pin_int1_route_set+0x29e>
      tap_cfg.interrupts_enable = PROPERTY_ENABLE;
 8003b0c:	7b3b      	ldrb	r3, [r7, #12]
 8003b0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b12:	733b      	strb	r3, [r7, #12]
 8003b14:	e003      	b.n	8003b1e <lsm6dsl_pin_int1_route_set+0x2a6>
    }
    else{
      tap_cfg.interrupts_enable = PROPERTY_DISABLE;
 8003b16:	7b3b      	ldrb	r3, [r7, #12]
 8003b18:	f36f 13c7 	bfc	r3, #7, #1
 8003b1c:	733b      	strb	r3, [r7, #12]
    }
  }
  if(ret == 0){    
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d107      	bne.n	8003b34 <lsm6dsl_pin_int1_route_set+0x2bc>
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
 8003b24:	f107 020c 	add.w	r2, r7, #12
 8003b28:	2301      	movs	r3, #1
 8003b2a:	2158      	movs	r1, #88	; 0x58
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f7ff fd4d 	bl	80035cc <lsm6dsl_write_reg>
 8003b32:	6278      	str	r0, [r7, #36]	; 0x24
  }
  return ret;
 8003b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3728      	adds	r7, #40	; 0x28
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <lsm6dsl_pin_int1_route_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_get(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t *val)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b088      	sub	sp, #32
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
 8003b46:	6039      	str	r1, [r7, #0]
  lsm6dsl_md1_cfg_t md1_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;

  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t*)&int1_ctrl, 1);
 8003b48:	f107 0214 	add.w	r2, r7, #20
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	210d      	movs	r1, #13
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f7ff fd23 	bl	800359c <lsm6dsl_read_reg>
 8003b56:	61f8      	str	r0, [r7, #28]
  if(ret == 0){
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f040 80c0 	bne.w	8003ce0 <lsm6dsl_pin_int1_route_get+0x1a2>
    val->int1_drdy_xl       = int1_ctrl.int1_drdy_xl;
 8003b60:	7d3b      	ldrb	r3, [r7, #20]
 8003b62:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003b66:	b2d9      	uxtb	r1, r3
 8003b68:	683a      	ldr	r2, [r7, #0]
 8003b6a:	7813      	ldrb	r3, [r2, #0]
 8003b6c:	f361 0300 	bfi	r3, r1, #0, #1
 8003b70:	7013      	strb	r3, [r2, #0]
    val->int1_drdy_g        = int1_ctrl.int1_drdy_g;
 8003b72:	7d3b      	ldrb	r3, [r7, #20]
 8003b74:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003b78:	b2d9      	uxtb	r1, r3
 8003b7a:	683a      	ldr	r2, [r7, #0]
 8003b7c:	7813      	ldrb	r3, [r2, #0]
 8003b7e:	f361 0341 	bfi	r3, r1, #1, #1
 8003b82:	7013      	strb	r3, [r2, #0]
    val->int1_boot          = int1_ctrl.int1_boot;
 8003b84:	7d3b      	ldrb	r3, [r7, #20]
 8003b86:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003b8a:	b2d9      	uxtb	r1, r3
 8003b8c:	683a      	ldr	r2, [r7, #0]
 8003b8e:	7813      	ldrb	r3, [r2, #0]
 8003b90:	f361 0382 	bfi	r3, r1, #2, #1
 8003b94:	7013      	strb	r3, [r2, #0]
    val->int1_fth           = int1_ctrl.int1_fth;
 8003b96:	7d3b      	ldrb	r3, [r7, #20]
 8003b98:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003b9c:	b2d9      	uxtb	r1, r3
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	7813      	ldrb	r3, [r2, #0]
 8003ba2:	f361 03c3 	bfi	r3, r1, #3, #1
 8003ba6:	7013      	strb	r3, [r2, #0]
    val->int1_fifo_ovr      = int1_ctrl.int1_fifo_ovr;
 8003ba8:	7d3b      	ldrb	r3, [r7, #20]
 8003baa:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003bae:	b2d9      	uxtb	r1, r3
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	7813      	ldrb	r3, [r2, #0]
 8003bb4:	f361 1304 	bfi	r3, r1, #4, #1
 8003bb8:	7013      	strb	r3, [r2, #0]
    val->int1_full_flag     = int1_ctrl.int1_full_flag;
 8003bba:	7d3b      	ldrb	r3, [r7, #20]
 8003bbc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003bc0:	b2d9      	uxtb	r1, r3
 8003bc2:	683a      	ldr	r2, [r7, #0]
 8003bc4:	7813      	ldrb	r3, [r2, #0]
 8003bc6:	f361 1345 	bfi	r3, r1, #5, #1
 8003bca:	7013      	strb	r3, [r2, #0]
    val->int1_sign_mot      = int1_ctrl.int1_sign_mot;
 8003bcc:	7d3b      	ldrb	r3, [r7, #20]
 8003bce:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003bd2:	b2d9      	uxtb	r1, r3
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	7813      	ldrb	r3, [r2, #0]
 8003bd8:	f361 1386 	bfi	r3, r1, #6, #1
 8003bdc:	7013      	strb	r3, [r2, #0]
    val->int1_step_detector = int1_ctrl.int1_step_detector ;
 8003bde:	7d3b      	ldrb	r3, [r7, #20]
 8003be0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003be4:	b2d9      	uxtb	r1, r3
 8003be6:	683a      	ldr	r2, [r7, #0]
 8003be8:	7813      	ldrb	r3, [r2, #0]
 8003bea:	f361 13c7 	bfi	r3, r1, #7, #1
 8003bee:	7013      	strb	r3, [r2, #0]

    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t*)&md1_cfg, 1);
 8003bf0:	f107 0210 	add.w	r2, r7, #16
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	215e      	movs	r1, #94	; 0x5e
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f7ff fccf 	bl	800359c <lsm6dsl_read_reg>
 8003bfe:	61f8      	str	r0, [r7, #28]
    if(ret == 0){
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d16c      	bne.n	8003ce0 <lsm6dsl_pin_int1_route_get+0x1a2>
    val->int1_timer       = md1_cfg.int1_timer;
 8003c06:	7c3b      	ldrb	r3, [r7, #16]
 8003c08:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003c0c:	b2d9      	uxtb	r1, r3
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	7853      	ldrb	r3, [r2, #1]
 8003c12:	f361 0300 	bfi	r3, r1, #0, #1
 8003c16:	7053      	strb	r3, [r2, #1]
    val->int1_tilt        = md1_cfg.int1_tilt;
 8003c18:	7c3b      	ldrb	r3, [r7, #16]
 8003c1a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003c1e:	b2d9      	uxtb	r1, r3
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	7853      	ldrb	r3, [r2, #1]
 8003c24:	f361 0341 	bfi	r3, r1, #1, #1
 8003c28:	7053      	strb	r3, [r2, #1]
    val->int1_6d          = md1_cfg.int1_6d;
 8003c2a:	7c3b      	ldrb	r3, [r7, #16]
 8003c2c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003c30:	b2d9      	uxtb	r1, r3
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	7853      	ldrb	r3, [r2, #1]
 8003c36:	f361 0382 	bfi	r3, r1, #2, #1
 8003c3a:	7053      	strb	r3, [r2, #1]
    val->int1_double_tap  = md1_cfg.int1_double_tap;
 8003c3c:	7c3b      	ldrb	r3, [r7, #16]
 8003c3e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003c42:	b2d9      	uxtb	r1, r3
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	7853      	ldrb	r3, [r2, #1]
 8003c48:	f361 03c3 	bfi	r3, r1, #3, #1
 8003c4c:	7053      	strb	r3, [r2, #1]
    val->int1_ff          = md1_cfg.int1_ff;
 8003c4e:	7c3b      	ldrb	r3, [r7, #16]
 8003c50:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003c54:	b2d9      	uxtb	r1, r3
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	7853      	ldrb	r3, [r2, #1]
 8003c5a:	f361 1304 	bfi	r3, r1, #4, #1
 8003c5e:	7053      	strb	r3, [r2, #1]
    val->int1_wu          = md1_cfg.int1_wu;
 8003c60:	7c3b      	ldrb	r3, [r7, #16]
 8003c62:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003c66:	b2d9      	uxtb	r1, r3
 8003c68:	683a      	ldr	r2, [r7, #0]
 8003c6a:	7853      	ldrb	r3, [r2, #1]
 8003c6c:	f361 1345 	bfi	r3, r1, #5, #1
 8003c70:	7053      	strb	r3, [r2, #1]
    val->int1_single_tap  = md1_cfg.int1_single_tap;
 8003c72:	7c3b      	ldrb	r3, [r7, #16]
 8003c74:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003c78:	b2d9      	uxtb	r1, r3
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	7853      	ldrb	r3, [r2, #1]
 8003c7e:	f361 1386 	bfi	r3, r1, #6, #1
 8003c82:	7053      	strb	r3, [r2, #1]
    val->int1_inact_state = md1_cfg.int1_inact_state;
 8003c84:	7c3b      	ldrb	r3, [r7, #16]
 8003c86:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003c8a:	b2d9      	uxtb	r1, r3
 8003c8c:	683a      	ldr	r2, [r7, #0]
 8003c8e:	7853      	ldrb	r3, [r2, #1]
 8003c90:	f361 13c7 	bfi	r3, r1, #7, #1
 8003c94:	7053      	strb	r3, [r2, #1]

    ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 8003c96:	f107 020c 	add.w	r2, r7, #12
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	2113      	movs	r1, #19
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f7ff fc7c 	bl	800359c <lsm6dsl_read_reg>
 8003ca4:	61f8      	str	r0, [r7, #28]
      if(ret == 0){
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d119      	bne.n	8003ce0 <lsm6dsl_pin_int1_route_get+0x1a2>
        val->den_drdy_int1 = ctrl4_c.den_drdy_int1;
 8003cac:	7b3b      	ldrb	r3, [r7, #12]
 8003cae:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003cb2:	b2d9      	uxtb	r1, r3
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	7893      	ldrb	r3, [r2, #2]
 8003cb8:	f361 0300 	bfi	r3, r1, #0, #1
 8003cbc:	7093      	strb	r3, [r2, #2]
        ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8003cbe:	f107 0218 	add.w	r2, r7, #24
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	211a      	movs	r1, #26
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f7ff fc68 	bl	800359c <lsm6dsl_read_reg>
 8003ccc:	61f8      	str	r0, [r7, #28]
                               (uint8_t*)&master_config, 1);
        val->den_drdy_int1 = master_config.drdy_on_int1;
 8003cce:	7e3b      	ldrb	r3, [r7, #24]
 8003cd0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003cd4:	b2d9      	uxtb	r1, r3
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	7893      	ldrb	r3, [r2, #2]
 8003cda:	f361 0300 	bfi	r3, r1, #0, #1
 8003cde:	7093      	strb	r3, [r2, #2]
      }
    }
  }
  return ret;
 8003ce0:	69fb      	ldr	r3, [r7, #28]
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3720      	adds	r7, #32
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <lsm6dsl_fifo_mode_set>:
  * @param  val    Change the values of fifo_mode in reg FIFO_CTRL5
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dsl_fifo_mode_t val)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b084      	sub	sp, #16
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 8003cf6:	f107 0208 	add.w	r2, r7, #8
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	210a      	movs	r1, #10
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7ff fc4c 	bl	800359c <lsm6dsl_read_reg>
 8003d04:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d10f      	bne.n	8003d2c <lsm6dsl_fifo_mode_set+0x42>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8003d0c:	78fb      	ldrb	r3, [r7, #3]
 8003d0e:	f003 0307 	and.w	r3, r3, #7
 8003d12:	b2da      	uxtb	r2, r3
 8003d14:	7a3b      	ldrb	r3, [r7, #8]
 8003d16:	f362 0302 	bfi	r3, r2, #0, #3
 8003d1a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 8003d1c:	f107 0208 	add.w	r2, r7, #8
 8003d20:	2301      	movs	r3, #1
 8003d22:	210a      	movs	r1, #10
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f7ff fc51 	bl	80035cc <lsm6dsl_write_reg>
 8003d2a:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3710      	adds	r7, #16
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b082      	sub	sp, #8
 8003d3a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d40:	2003      	movs	r0, #3
 8003d42:	f001 f843 	bl	8004dcc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003d46:	2000      	movs	r0, #0
 8003d48:	f000 f80e 	bl	8003d68 <HAL_InitTick>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d002      	beq.n	8003d58 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	71fb      	strb	r3, [r7, #7]
 8003d56:	e001      	b.n	8003d5c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003d58:	f7fe fba6 	bl	80024a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003d5c:	79fb      	ldrb	r3, [r7, #7]
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3708      	adds	r7, #8
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
	...

08003d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003d70:	2300      	movs	r3, #0
 8003d72:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003d74:	4b17      	ldr	r3, [pc, #92]	; (8003dd4 <HAL_InitTick+0x6c>)
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d023      	beq.n	8003dc4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003d7c:	4b16      	ldr	r3, [pc, #88]	; (8003dd8 <HAL_InitTick+0x70>)
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	4b14      	ldr	r3, [pc, #80]	; (8003dd4 <HAL_InitTick+0x6c>)
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	4619      	mov	r1, r3
 8003d86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d92:	4618      	mov	r0, r3
 8003d94:	f001 f84f 	bl	8004e36 <HAL_SYSTICK_Config>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10f      	bne.n	8003dbe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2b0f      	cmp	r3, #15
 8003da2:	d809      	bhi.n	8003db8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003da4:	2200      	movs	r2, #0
 8003da6:	6879      	ldr	r1, [r7, #4]
 8003da8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dac:	f001 f819 	bl	8004de2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003db0:	4a0a      	ldr	r2, [pc, #40]	; (8003ddc <HAL_InitTick+0x74>)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6013      	str	r3, [r2, #0]
 8003db6:	e007      	b.n	8003dc8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	73fb      	strb	r3, [r7, #15]
 8003dbc:	e004      	b.n	8003dc8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	73fb      	strb	r3, [r7, #15]
 8003dc2:	e001      	b.n	8003dc8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	20000014 	.word	0x20000014
 8003dd8:	20000008 	.word	0x20000008
 8003ddc:	20000010 	.word	0x20000010

08003de0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003de0:	b480      	push	{r7}
 8003de2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003de4:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <HAL_IncTick+0x20>)
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	461a      	mov	r2, r3
 8003dea:	4b06      	ldr	r3, [pc, #24]	; (8003e04 <HAL_IncTick+0x24>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4413      	add	r3, r2
 8003df0:	4a04      	ldr	r2, [pc, #16]	; (8003e04 <HAL_IncTick+0x24>)
 8003df2:	6013      	str	r3, [r2, #0]
}
 8003df4:	bf00      	nop
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	20000014 	.word	0x20000014
 8003e04:	200017e4 	.word	0x200017e4

08003e08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	af00      	add	r7, sp, #0
  return uwTick;
 8003e0c:	4b03      	ldr	r3, [pc, #12]	; (8003e1c <HAL_GetTick+0x14>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	200017e4 	.word	0x200017e4

08003e20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e28:	f7ff ffee 	bl	8003e08 <HAL_GetTick>
 8003e2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e38:	d005      	beq.n	8003e46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003e3a:	4b09      	ldr	r3, [pc, #36]	; (8003e60 <HAL_Delay+0x40>)
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	461a      	mov	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	4413      	add	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003e46:	bf00      	nop
 8003e48:	f7ff ffde 	bl	8003e08 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d8f7      	bhi.n	8003e48 <HAL_Delay+0x28>
  {
  }
}
 8003e58:	bf00      	nop
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	20000014 	.word	0x20000014

08003e64 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	431a      	orrs	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	609a      	str	r2, [r3, #8]
}
 8003e7e:	bf00      	nop
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b083      	sub	sp, #12
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
 8003e92:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	609a      	str	r2, [r3, #8]
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b087      	sub	sp, #28
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
 8003ed8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	3360      	adds	r3, #96	; 0x60
 8003ede:	461a      	mov	r2, r3
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	4413      	add	r3, r2
 8003ee6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	4b08      	ldr	r3, [pc, #32]	; (8003f10 <LL_ADC_SetOffset+0x44>)
 8003eee:	4013      	ands	r3, r2
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	4313      	orrs	r3, r2
 8003efc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003f04:	bf00      	nop
 8003f06:	371c      	adds	r7, #28
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr
 8003f10:	03fff000 	.word	0x03fff000

08003f14 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	3360      	adds	r3, #96	; 0x60
 8003f22:	461a      	mov	r2, r3
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	4413      	add	r3, r2
 8003f2a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3714      	adds	r7, #20
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b087      	sub	sp, #28
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	3360      	adds	r3, #96	; 0x60
 8003f50:	461a      	mov	r2, r3
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4413      	add	r3, r2
 8003f58:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	431a      	orrs	r2, r3
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003f6a:	bf00      	nop
 8003f6c:	371c      	adds	r7, #28
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003f76:	b480      	push	{r7}
 8003f78:	b083      	sub	sp, #12
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
 8003f7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	431a      	orrs	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	615a      	str	r2, [r3, #20]
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b087      	sub	sp, #28
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	3330      	adds	r3, #48	; 0x30
 8003fac:	461a      	mov	r2, r3
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	0a1b      	lsrs	r3, r3, #8
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	f003 030c 	and.w	r3, r3, #12
 8003fb8:	4413      	add	r3, r2
 8003fba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	f003 031f 	and.w	r3, r3, #31
 8003fc6:	211f      	movs	r1, #31
 8003fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8003fcc:	43db      	mvns	r3, r3
 8003fce:	401a      	ands	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	0e9b      	lsrs	r3, r3, #26
 8003fd4:	f003 011f 	and.w	r1, r3, #31
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	f003 031f 	and.w	r3, r3, #31
 8003fde:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003fe8:	bf00      	nop
 8003fea:	371c      	adds	r7, #28
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b087      	sub	sp, #28
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	3314      	adds	r3, #20
 8004004:	461a      	mov	r2, r3
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	0e5b      	lsrs	r3, r3, #25
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	f003 0304 	and.w	r3, r3, #4
 8004010:	4413      	add	r3, r2
 8004012:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	0d1b      	lsrs	r3, r3, #20
 800401c:	f003 031f 	and.w	r3, r3, #31
 8004020:	2107      	movs	r1, #7
 8004022:	fa01 f303 	lsl.w	r3, r1, r3
 8004026:	43db      	mvns	r3, r3
 8004028:	401a      	ands	r2, r3
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	0d1b      	lsrs	r3, r3, #20
 800402e:	f003 031f 	and.w	r3, r3, #31
 8004032:	6879      	ldr	r1, [r7, #4]
 8004034:	fa01 f303 	lsl.w	r3, r1, r3
 8004038:	431a      	orrs	r2, r3
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800403e:	bf00      	nop
 8004040:	371c      	adds	r7, #28
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
	...

0800404c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004064:	43db      	mvns	r3, r3
 8004066:	401a      	ands	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f003 0318 	and.w	r3, r3, #24
 800406e:	4908      	ldr	r1, [pc, #32]	; (8004090 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004070:	40d9      	lsrs	r1, r3
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	400b      	ands	r3, r1
 8004076:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800407a:	431a      	orrs	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004082:	bf00      	nop
 8004084:	3714      	adds	r7, #20
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	0007ffff 	.word	0x0007ffff

08004094 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80040a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	6093      	str	r3, [r2, #8]
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040cc:	d101      	bne.n	80040d2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80040ce:	2301      	movs	r3, #1
 80040d0:	e000      	b.n	80040d4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80040f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80040f4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004118:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800411c:	d101      	bne.n	8004122 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800411e:	2301      	movs	r3, #1
 8004120:	e000      	b.n	8004124 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f003 0301 	and.w	r3, r3, #1
 8004140:	2b01      	cmp	r3, #1
 8004142:	d101      	bne.n	8004148 <LL_ADC_IsEnabled+0x18>
 8004144:	2301      	movs	r3, #1
 8004146:	e000      	b.n	800414a <LL_ADC_IsEnabled+0x1a>
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004156:	b480      	push	{r7}
 8004158:	b083      	sub	sp, #12
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f003 0304 	and.w	r3, r3, #4
 8004166:	2b04      	cmp	r3, #4
 8004168:	d101      	bne.n	800416e <LL_ADC_REG_IsConversionOngoing+0x18>
 800416a:	2301      	movs	r3, #1
 800416c:	e000      	b.n	8004170 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f003 0308 	and.w	r3, r3, #8
 800418c:	2b08      	cmp	r3, #8
 800418e:	d101      	bne.n	8004194 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004190:	2301      	movs	r3, #1
 8004192:	e000      	b.n	8004196 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
	...

080041a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b088      	sub	sp, #32
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041ac:	2300      	movs	r3, #0
 80041ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80041b0:	2300      	movs	r3, #0
 80041b2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e12d      	b.n	800441a <HAL_ADC_Init+0x276>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d109      	bne.n	80041e0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f7fd fa71 	bl	80016b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7ff ff67 	bl	80040b8 <LL_ADC_IsDeepPowerDownEnabled>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d004      	beq.n	80041fa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7ff ff4d 	bl	8004094 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4618      	mov	r0, r3
 8004200:	f7ff ff82 	bl	8004108 <LL_ADC_IsInternalRegulatorEnabled>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d113      	bne.n	8004232 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4618      	mov	r0, r3
 8004210:	f7ff ff66 	bl	80040e0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004214:	4b83      	ldr	r3, [pc, #524]	; (8004424 <HAL_ADC_Init+0x280>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	099b      	lsrs	r3, r3, #6
 800421a:	4a83      	ldr	r2, [pc, #524]	; (8004428 <HAL_ADC_Init+0x284>)
 800421c:	fba2 2303 	umull	r2, r3, r2, r3
 8004220:	099b      	lsrs	r3, r3, #6
 8004222:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004224:	e002      	b.n	800422c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	3b01      	subs	r3, #1
 800422a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1f9      	bne.n	8004226 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4618      	mov	r0, r3
 8004238:	f7ff ff66 	bl	8004108 <LL_ADC_IsInternalRegulatorEnabled>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d10d      	bne.n	800425e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004246:	f043 0210 	orr.w	r2, r3, #16
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004252:	f043 0201 	orr.w	r2, r3, #1
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4618      	mov	r0, r3
 8004264:	f7ff ff77 	bl	8004156 <LL_ADC_REG_IsConversionOngoing>
 8004268:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800426e:	f003 0310 	and.w	r3, r3, #16
 8004272:	2b00      	cmp	r3, #0
 8004274:	f040 80c8 	bne.w	8004408 <HAL_ADC_Init+0x264>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	2b00      	cmp	r3, #0
 800427c:	f040 80c4 	bne.w	8004408 <HAL_ADC_Init+0x264>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004284:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004288:	f043 0202 	orr.w	r2, r3, #2
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4618      	mov	r0, r3
 8004296:	f7ff ff4b 	bl	8004130 <LL_ADC_IsEnabled>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d10b      	bne.n	80042b8 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80042a0:	4862      	ldr	r0, [pc, #392]	; (800442c <HAL_ADC_Init+0x288>)
 80042a2:	f7ff ff45 	bl	8004130 <LL_ADC_IsEnabled>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d105      	bne.n	80042b8 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	4619      	mov	r1, r3
 80042b2:	485f      	ldr	r0, [pc, #380]	; (8004430 <HAL_ADC_Init+0x28c>)
 80042b4:	f7ff fdd6 	bl	8003e64 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	7e5b      	ldrb	r3, [r3, #25]
 80042bc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80042c2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80042c8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80042ce:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042d6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80042d8:	4313      	orrs	r3, r2
 80042da:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d106      	bne.n	80042f4 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ea:	3b01      	subs	r3, #1
 80042ec:	045b      	lsls	r3, r3, #17
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d009      	beq.n	8004310 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004300:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004308:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800430a:	69ba      	ldr	r2, [r7, #24]
 800430c:	4313      	orrs	r3, r2
 800430e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68da      	ldr	r2, [r3, #12]
 8004316:	4b47      	ldr	r3, [pc, #284]	; (8004434 <HAL_ADC_Init+0x290>)
 8004318:	4013      	ands	r3, r2
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	6812      	ldr	r2, [r2, #0]
 800431e:	69b9      	ldr	r1, [r7, #24]
 8004320:	430b      	orrs	r3, r1
 8004322:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4618      	mov	r0, r3
 800432a:	f7ff ff14 	bl	8004156 <LL_ADC_REG_IsConversionOngoing>
 800432e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4618      	mov	r0, r3
 8004336:	f7ff ff21 	bl	800417c <LL_ADC_INJ_IsConversionOngoing>
 800433a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d140      	bne.n	80043c4 <HAL_ADC_Init+0x220>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d13d      	bne.n	80043c4 <HAL_ADC_Init+0x220>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	7e1b      	ldrb	r3, [r3, #24]
 8004350:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004352:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800435a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800435c:	4313      	orrs	r3, r2
 800435e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800436a:	f023 0306 	bic.w	r3, r3, #6
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	6812      	ldr	r2, [r2, #0]
 8004372:	69b9      	ldr	r1, [r7, #24]
 8004374:	430b      	orrs	r3, r1
 8004376:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800437e:	2b01      	cmp	r3, #1
 8004380:	d118      	bne.n	80043b4 <HAL_ADC_Init+0x210>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800438c:	f023 0304 	bic.w	r3, r3, #4
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004398:	4311      	orrs	r1, r2
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800439e:	4311      	orrs	r1, r2
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80043a4:	430a      	orrs	r2, r1
 80043a6:	431a      	orrs	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f042 0201 	orr.w	r2, r2, #1
 80043b0:	611a      	str	r2, [r3, #16]
 80043b2:	e007      	b.n	80043c4 <HAL_ADC_Init+0x220>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	691a      	ldr	r2, [r3, #16]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f022 0201 	bic.w	r2, r2, #1
 80043c2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d10c      	bne.n	80043e6 <HAL_ADC_Init+0x242>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d2:	f023 010f 	bic.w	r1, r3, #15
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	1e5a      	subs	r2, r3, #1
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	430a      	orrs	r2, r1
 80043e2:	631a      	str	r2, [r3, #48]	; 0x30
 80043e4:	e007      	b.n	80043f6 <HAL_ADC_Init+0x252>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f022 020f 	bic.w	r2, r2, #15
 80043f4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043fa:	f023 0303 	bic.w	r3, r3, #3
 80043fe:	f043 0201 	orr.w	r2, r3, #1
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	659a      	str	r2, [r3, #88]	; 0x58
 8004406:	e007      	b.n	8004418 <HAL_ADC_Init+0x274>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800440c:	f043 0210 	orr.w	r2, r3, #16
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004418:	7ffb      	ldrb	r3, [r7, #31]
}
 800441a:	4618      	mov	r0, r3
 800441c:	3720      	adds	r7, #32
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	20000008 	.word	0x20000008
 8004428:	053e2d63 	.word	0x053e2d63
 800442c:	50040000 	.word	0x50040000
 8004430:	50040300 	.word	0x50040300
 8004434:	fff0c007 	.word	0xfff0c007

08004438 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b0b6      	sub	sp, #216	; 0xd8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004442:	2300      	movs	r3, #0
 8004444:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004448:	2300      	movs	r3, #0
 800444a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004452:	2b01      	cmp	r3, #1
 8004454:	d101      	bne.n	800445a <HAL_ADC_ConfigChannel+0x22>
 8004456:	2302      	movs	r3, #2
 8004458:	e3d4      	b.n	8004c04 <HAL_ADC_ConfigChannel+0x7cc>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2201      	movs	r2, #1
 800445e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4618      	mov	r0, r3
 8004468:	f7ff fe75 	bl	8004156 <LL_ADC_REG_IsConversionOngoing>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	f040 83b9 	bne.w	8004be6 <HAL_ADC_ConfigChannel+0x7ae>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	2b05      	cmp	r3, #5
 800447a:	d824      	bhi.n	80044c6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	3b02      	subs	r3, #2
 8004482:	2b03      	cmp	r3, #3
 8004484:	d81b      	bhi.n	80044be <HAL_ADC_ConfigChannel+0x86>
 8004486:	a201      	add	r2, pc, #4	; (adr r2, 800448c <HAL_ADC_ConfigChannel+0x54>)
 8004488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800448c:	0800449d 	.word	0x0800449d
 8004490:	080044a5 	.word	0x080044a5
 8004494:	080044ad 	.word	0x080044ad
 8004498:	080044b5 	.word	0x080044b5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	220c      	movs	r2, #12
 80044a0:	605a      	str	r2, [r3, #4]
          break;
 80044a2:	e011      	b.n	80044c8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	2212      	movs	r2, #18
 80044a8:	605a      	str	r2, [r3, #4]
          break;
 80044aa:	e00d      	b.n	80044c8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	2218      	movs	r2, #24
 80044b0:	605a      	str	r2, [r3, #4]
          break;
 80044b2:	e009      	b.n	80044c8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044ba:	605a      	str	r2, [r3, #4]
          break;
 80044bc:	e004      	b.n	80044c8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	2206      	movs	r2, #6
 80044c2:	605a      	str	r2, [r3, #4]
          break;
 80044c4:	e000      	b.n	80044c8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80044c6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6818      	ldr	r0, [r3, #0]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	6859      	ldr	r1, [r3, #4]
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	461a      	mov	r2, r3
 80044d6:	f7ff fd61 	bl	8003f9c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4618      	mov	r0, r3
 80044e0:	f7ff fe39 	bl	8004156 <LL_ADC_REG_IsConversionOngoing>
 80044e4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7ff fe45 	bl	800417c <LL_ADC_INJ_IsConversionOngoing>
 80044f2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80044f6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	f040 81c1 	bne.w	8004882 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004500:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004504:	2b00      	cmp	r3, #0
 8004506:	f040 81bc 	bne.w	8004882 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004512:	d10f      	bne.n	8004534 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6818      	ldr	r0, [r3, #0]
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2200      	movs	r2, #0
 800451e:	4619      	mov	r1, r3
 8004520:	f7ff fd68 	bl	8003ff4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800452c:	4618      	mov	r0, r3
 800452e:	f7ff fd22 	bl	8003f76 <LL_ADC_SetSamplingTimeCommonConfig>
 8004532:	e00e      	b.n	8004552 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6818      	ldr	r0, [r3, #0]
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	6819      	ldr	r1, [r3, #0]
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	461a      	mov	r2, r3
 8004542:	f7ff fd57 	bl	8003ff4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2100      	movs	r1, #0
 800454c:	4618      	mov	r0, r3
 800454e:	f7ff fd12 	bl	8003f76 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	695a      	ldr	r2, [r3, #20]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	08db      	lsrs	r3, r3, #3
 800455e:	f003 0303 	and.w	r3, r3, #3
 8004562:	005b      	lsls	r3, r3, #1
 8004564:	fa02 f303 	lsl.w	r3, r2, r3
 8004568:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	2b04      	cmp	r3, #4
 8004572:	d00a      	beq.n	800458a <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6818      	ldr	r0, [r3, #0]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	6919      	ldr	r1, [r3, #16]
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004584:	f7ff fca2 	bl	8003ecc <LL_ADC_SetOffset>
 8004588:	e17b      	b.n	8004882 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2100      	movs	r1, #0
 8004590:	4618      	mov	r0, r3
 8004592:	f7ff fcbf 	bl	8003f14 <LL_ADC_GetOffsetChannel>
 8004596:	4603      	mov	r3, r0
 8004598:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800459c:	2b00      	cmp	r3, #0
 800459e:	d10a      	bne.n	80045b6 <HAL_ADC_ConfigChannel+0x17e>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2100      	movs	r1, #0
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7ff fcb4 	bl	8003f14 <LL_ADC_GetOffsetChannel>
 80045ac:	4603      	mov	r3, r0
 80045ae:	0e9b      	lsrs	r3, r3, #26
 80045b0:	f003 021f 	and.w	r2, r3, #31
 80045b4:	e01e      	b.n	80045f4 <HAL_ADC_ConfigChannel+0x1bc>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2100      	movs	r1, #0
 80045bc:	4618      	mov	r0, r3
 80045be:	f7ff fca9 	bl	8003f14 <LL_ADC_GetOffsetChannel>
 80045c2:	4603      	mov	r3, r0
 80045c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80045cc:	fa93 f3a3 	rbit	r3, r3
 80045d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80045d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80045d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80045dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d101      	bne.n	80045e8 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 80045e4:	2320      	movs	r3, #32
 80045e6:	e004      	b.n	80045f2 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 80045e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80045ec:	fab3 f383 	clz	r3, r3
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d105      	bne.n	800460c <HAL_ADC_ConfigChannel+0x1d4>
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	0e9b      	lsrs	r3, r3, #26
 8004606:	f003 031f 	and.w	r3, r3, #31
 800460a:	e018      	b.n	800463e <HAL_ADC_ConfigChannel+0x206>
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004614:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004618:	fa93 f3a3 	rbit	r3, r3
 800461c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004620:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004624:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004628:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800462c:	2b00      	cmp	r3, #0
 800462e:	d101      	bne.n	8004634 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8004630:	2320      	movs	r3, #32
 8004632:	e004      	b.n	800463e <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8004634:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004638:	fab3 f383 	clz	r3, r3
 800463c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800463e:	429a      	cmp	r2, r3
 8004640:	d106      	bne.n	8004650 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2200      	movs	r2, #0
 8004648:	2100      	movs	r1, #0
 800464a:	4618      	mov	r0, r3
 800464c:	f7ff fc78 	bl	8003f40 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2101      	movs	r1, #1
 8004656:	4618      	mov	r0, r3
 8004658:	f7ff fc5c 	bl	8003f14 <LL_ADC_GetOffsetChannel>
 800465c:	4603      	mov	r3, r0
 800465e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10a      	bne.n	800467c <HAL_ADC_ConfigChannel+0x244>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2101      	movs	r1, #1
 800466c:	4618      	mov	r0, r3
 800466e:	f7ff fc51 	bl	8003f14 <LL_ADC_GetOffsetChannel>
 8004672:	4603      	mov	r3, r0
 8004674:	0e9b      	lsrs	r3, r3, #26
 8004676:	f003 021f 	and.w	r2, r3, #31
 800467a:	e01e      	b.n	80046ba <HAL_ADC_ConfigChannel+0x282>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2101      	movs	r1, #1
 8004682:	4618      	mov	r0, r3
 8004684:	f7ff fc46 	bl	8003f14 <LL_ADC_GetOffsetChannel>
 8004688:	4603      	mov	r3, r0
 800468a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800468e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004692:	fa93 f3a3 	rbit	r3, r3
 8004696:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800469a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800469e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80046a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80046aa:	2320      	movs	r3, #32
 80046ac:	e004      	b.n	80046b8 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80046ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80046b2:	fab3 f383 	clz	r3, r3
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d105      	bne.n	80046d2 <HAL_ADC_ConfigChannel+0x29a>
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	0e9b      	lsrs	r3, r3, #26
 80046cc:	f003 031f 	and.w	r3, r3, #31
 80046d0:	e018      	b.n	8004704 <HAL_ADC_ConfigChannel+0x2cc>
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046de:	fa93 f3a3 	rbit	r3, r3
 80046e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80046e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80046ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80046ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80046f6:	2320      	movs	r3, #32
 80046f8:	e004      	b.n	8004704 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80046fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046fe:	fab3 f383 	clz	r3, r3
 8004702:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004704:	429a      	cmp	r2, r3
 8004706:	d106      	bne.n	8004716 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2200      	movs	r2, #0
 800470e:	2101      	movs	r1, #1
 8004710:	4618      	mov	r0, r3
 8004712:	f7ff fc15 	bl	8003f40 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2102      	movs	r1, #2
 800471c:	4618      	mov	r0, r3
 800471e:	f7ff fbf9 	bl	8003f14 <LL_ADC_GetOffsetChannel>
 8004722:	4603      	mov	r3, r0
 8004724:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10a      	bne.n	8004742 <HAL_ADC_ConfigChannel+0x30a>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2102      	movs	r1, #2
 8004732:	4618      	mov	r0, r3
 8004734:	f7ff fbee 	bl	8003f14 <LL_ADC_GetOffsetChannel>
 8004738:	4603      	mov	r3, r0
 800473a:	0e9b      	lsrs	r3, r3, #26
 800473c:	f003 021f 	and.w	r2, r3, #31
 8004740:	e01e      	b.n	8004780 <HAL_ADC_ConfigChannel+0x348>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2102      	movs	r1, #2
 8004748:	4618      	mov	r0, r3
 800474a:	f7ff fbe3 	bl	8003f14 <LL_ADC_GetOffsetChannel>
 800474e:	4603      	mov	r3, r0
 8004750:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004754:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004758:	fa93 f3a3 	rbit	r3, r3
 800475c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004760:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004764:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004768:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800476c:	2b00      	cmp	r3, #0
 800476e:	d101      	bne.n	8004774 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8004770:	2320      	movs	r3, #32
 8004772:	e004      	b.n	800477e <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8004774:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004778:	fab3 f383 	clz	r3, r3
 800477c:	b2db      	uxtb	r3, r3
 800477e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004788:	2b00      	cmp	r3, #0
 800478a:	d105      	bne.n	8004798 <HAL_ADC_ConfigChannel+0x360>
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	0e9b      	lsrs	r3, r3, #26
 8004792:	f003 031f 	and.w	r3, r3, #31
 8004796:	e016      	b.n	80047c6 <HAL_ADC_ConfigChannel+0x38e>
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80047a4:	fa93 f3a3 	rbit	r3, r3
 80047a8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80047aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80047ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80047b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d101      	bne.n	80047bc <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80047b8:	2320      	movs	r3, #32
 80047ba:	e004      	b.n	80047c6 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80047bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047c0:	fab3 f383 	clz	r3, r3
 80047c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d106      	bne.n	80047d8 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2200      	movs	r2, #0
 80047d0:	2102      	movs	r1, #2
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7ff fbb4 	bl	8003f40 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2103      	movs	r1, #3
 80047de:	4618      	mov	r0, r3
 80047e0:	f7ff fb98 	bl	8003f14 <LL_ADC_GetOffsetChannel>
 80047e4:	4603      	mov	r3, r0
 80047e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d10a      	bne.n	8004804 <HAL_ADC_ConfigChannel+0x3cc>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2103      	movs	r1, #3
 80047f4:	4618      	mov	r0, r3
 80047f6:	f7ff fb8d 	bl	8003f14 <LL_ADC_GetOffsetChannel>
 80047fa:	4603      	mov	r3, r0
 80047fc:	0e9b      	lsrs	r3, r3, #26
 80047fe:	f003 021f 	and.w	r2, r3, #31
 8004802:	e017      	b.n	8004834 <HAL_ADC_ConfigChannel+0x3fc>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2103      	movs	r1, #3
 800480a:	4618      	mov	r0, r3
 800480c:	f7ff fb82 	bl	8003f14 <LL_ADC_GetOffsetChannel>
 8004810:	4603      	mov	r3, r0
 8004812:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004814:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004816:	fa93 f3a3 	rbit	r3, r3
 800481a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800481c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800481e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004820:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8004826:	2320      	movs	r3, #32
 8004828:	e003      	b.n	8004832 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800482a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800482c:	fab3 f383 	clz	r3, r3
 8004830:	b2db      	uxtb	r3, r3
 8004832:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800483c:	2b00      	cmp	r3, #0
 800483e:	d105      	bne.n	800484c <HAL_ADC_ConfigChannel+0x414>
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	0e9b      	lsrs	r3, r3, #26
 8004846:	f003 031f 	and.w	r3, r3, #31
 800484a:	e011      	b.n	8004870 <HAL_ADC_ConfigChannel+0x438>
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004852:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004854:	fa93 f3a3 	rbit	r3, r3
 8004858:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800485a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800485c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800485e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004860:	2b00      	cmp	r3, #0
 8004862:	d101      	bne.n	8004868 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8004864:	2320      	movs	r3, #32
 8004866:	e003      	b.n	8004870 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8004868:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800486a:	fab3 f383 	clz	r3, r3
 800486e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004870:	429a      	cmp	r2, r3
 8004872:	d106      	bne.n	8004882 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2200      	movs	r2, #0
 800487a:	2103      	movs	r1, #3
 800487c:	4618      	mov	r0, r3
 800487e:	f7ff fb5f 	bl	8003f40 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4618      	mov	r0, r3
 8004888:	f7ff fc52 	bl	8004130 <LL_ADC_IsEnabled>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	f040 8140 	bne.w	8004b14 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6818      	ldr	r0, [r3, #0]
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	6819      	ldr	r1, [r3, #0]
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	461a      	mov	r2, r3
 80048a2:	f7ff fbd3 	bl	800404c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	4a8f      	ldr	r2, [pc, #572]	; (8004ae8 <HAL_ADC_ConfigChannel+0x6b0>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	f040 8131 	bne.w	8004b14 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10b      	bne.n	80048da <HAL_ADC_ConfigChannel+0x4a2>
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	0e9b      	lsrs	r3, r3, #26
 80048c8:	3301      	adds	r3, #1
 80048ca:	f003 031f 	and.w	r3, r3, #31
 80048ce:	2b09      	cmp	r3, #9
 80048d0:	bf94      	ite	ls
 80048d2:	2301      	movls	r3, #1
 80048d4:	2300      	movhi	r3, #0
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	e019      	b.n	800490e <HAL_ADC_ConfigChannel+0x4d6>
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048e2:	fa93 f3a3 	rbit	r3, r3
 80048e6:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80048e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048ea:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80048ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d101      	bne.n	80048f6 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80048f2:	2320      	movs	r3, #32
 80048f4:	e003      	b.n	80048fe <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80048f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048f8:	fab3 f383 	clz	r3, r3
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	3301      	adds	r3, #1
 8004900:	f003 031f 	and.w	r3, r3, #31
 8004904:	2b09      	cmp	r3, #9
 8004906:	bf94      	ite	ls
 8004908:	2301      	movls	r3, #1
 800490a:	2300      	movhi	r3, #0
 800490c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800490e:	2b00      	cmp	r3, #0
 8004910:	d079      	beq.n	8004a06 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800491a:	2b00      	cmp	r3, #0
 800491c:	d107      	bne.n	800492e <HAL_ADC_ConfigChannel+0x4f6>
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	0e9b      	lsrs	r3, r3, #26
 8004924:	3301      	adds	r3, #1
 8004926:	069b      	lsls	r3, r3, #26
 8004928:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800492c:	e015      	b.n	800495a <HAL_ADC_ConfigChannel+0x522>
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004934:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004936:	fa93 f3a3 	rbit	r3, r3
 800493a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800493c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800493e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004940:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004942:	2b00      	cmp	r3, #0
 8004944:	d101      	bne.n	800494a <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8004946:	2320      	movs	r3, #32
 8004948:	e003      	b.n	8004952 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800494a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800494c:	fab3 f383 	clz	r3, r3
 8004950:	b2db      	uxtb	r3, r3
 8004952:	3301      	adds	r3, #1
 8004954:	069b      	lsls	r3, r3, #26
 8004956:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004962:	2b00      	cmp	r3, #0
 8004964:	d109      	bne.n	800497a <HAL_ADC_ConfigChannel+0x542>
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	0e9b      	lsrs	r3, r3, #26
 800496c:	3301      	adds	r3, #1
 800496e:	f003 031f 	and.w	r3, r3, #31
 8004972:	2101      	movs	r1, #1
 8004974:	fa01 f303 	lsl.w	r3, r1, r3
 8004978:	e017      	b.n	80049aa <HAL_ADC_ConfigChannel+0x572>
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004982:	fa93 f3a3 	rbit	r3, r3
 8004986:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004988:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800498a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800498c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800498e:	2b00      	cmp	r3, #0
 8004990:	d101      	bne.n	8004996 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8004992:	2320      	movs	r3, #32
 8004994:	e003      	b.n	800499e <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8004996:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004998:	fab3 f383 	clz	r3, r3
 800499c:	b2db      	uxtb	r3, r3
 800499e:	3301      	adds	r3, #1
 80049a0:	f003 031f 	and.w	r3, r3, #31
 80049a4:	2101      	movs	r1, #1
 80049a6:	fa01 f303 	lsl.w	r3, r1, r3
 80049aa:	ea42 0103 	orr.w	r1, r2, r3
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10a      	bne.n	80049d0 <HAL_ADC_ConfigChannel+0x598>
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	0e9b      	lsrs	r3, r3, #26
 80049c0:	3301      	adds	r3, #1
 80049c2:	f003 021f 	and.w	r2, r3, #31
 80049c6:	4613      	mov	r3, r2
 80049c8:	005b      	lsls	r3, r3, #1
 80049ca:	4413      	add	r3, r2
 80049cc:	051b      	lsls	r3, r3, #20
 80049ce:	e018      	b.n	8004a02 <HAL_ADC_ConfigChannel+0x5ca>
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d8:	fa93 f3a3 	rbit	r3, r3
 80049dc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80049de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80049e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d101      	bne.n	80049ec <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80049e8:	2320      	movs	r3, #32
 80049ea:	e003      	b.n	80049f4 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80049ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049ee:	fab3 f383 	clz	r3, r3
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	3301      	adds	r3, #1
 80049f6:	f003 021f 	and.w	r2, r3, #31
 80049fa:	4613      	mov	r3, r2
 80049fc:	005b      	lsls	r3, r3, #1
 80049fe:	4413      	add	r3, r2
 8004a00:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a02:	430b      	orrs	r3, r1
 8004a04:	e081      	b.n	8004b0a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d107      	bne.n	8004a22 <HAL_ADC_ConfigChannel+0x5ea>
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	0e9b      	lsrs	r3, r3, #26
 8004a18:	3301      	adds	r3, #1
 8004a1a:	069b      	lsls	r3, r3, #26
 8004a1c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a20:	e015      	b.n	8004a4e <HAL_ADC_ConfigChannel+0x616>
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a2a:	fa93 f3a3 	rbit	r3, r3
 8004a2e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a32:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d101      	bne.n	8004a3e <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8004a3a:	2320      	movs	r3, #32
 8004a3c:	e003      	b.n	8004a46 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8004a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a40:	fab3 f383 	clz	r3, r3
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	3301      	adds	r3, #1
 8004a48:	069b      	lsls	r3, r3, #26
 8004a4a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d109      	bne.n	8004a6e <HAL_ADC_ConfigChannel+0x636>
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	0e9b      	lsrs	r3, r3, #26
 8004a60:	3301      	adds	r3, #1
 8004a62:	f003 031f 	and.w	r3, r3, #31
 8004a66:	2101      	movs	r1, #1
 8004a68:	fa01 f303 	lsl.w	r3, r1, r3
 8004a6c:	e017      	b.n	8004a9e <HAL_ADC_ConfigChannel+0x666>
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a74:	6a3b      	ldr	r3, [r7, #32]
 8004a76:	fa93 f3a3 	rbit	r3, r3
 8004a7a:	61fb      	str	r3, [r7, #28]
  return result;
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d101      	bne.n	8004a8a <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8004a86:	2320      	movs	r3, #32
 8004a88:	e003      	b.n	8004a92 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8c:	fab3 f383 	clz	r3, r3
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	3301      	adds	r3, #1
 8004a94:	f003 031f 	and.w	r3, r3, #31
 8004a98:	2101      	movs	r1, #1
 8004a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a9e:	ea42 0103 	orr.w	r1, r2, r3
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d10d      	bne.n	8004aca <HAL_ADC_ConfigChannel+0x692>
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	0e9b      	lsrs	r3, r3, #26
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	f003 021f 	and.w	r2, r3, #31
 8004aba:	4613      	mov	r3, r2
 8004abc:	005b      	lsls	r3, r3, #1
 8004abe:	4413      	add	r3, r2
 8004ac0:	3b1e      	subs	r3, #30
 8004ac2:	051b      	lsls	r3, r3, #20
 8004ac4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004ac8:	e01e      	b.n	8004b08 <HAL_ADC_ConfigChannel+0x6d0>
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	fa93 f3a3 	rbit	r3, r3
 8004ad6:	613b      	str	r3, [r7, #16]
  return result;
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d104      	bne.n	8004aec <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8004ae2:	2320      	movs	r3, #32
 8004ae4:	e006      	b.n	8004af4 <HAL_ADC_ConfigChannel+0x6bc>
 8004ae6:	bf00      	nop
 8004ae8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	fab3 f383 	clz	r3, r3
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	3301      	adds	r3, #1
 8004af6:	f003 021f 	and.w	r2, r3, #31
 8004afa:	4613      	mov	r3, r2
 8004afc:	005b      	lsls	r3, r3, #1
 8004afe:	4413      	add	r3, r2
 8004b00:	3b1e      	subs	r3, #30
 8004b02:	051b      	lsls	r3, r3, #20
 8004b04:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b08:	430b      	orrs	r3, r1
 8004b0a:	683a      	ldr	r2, [r7, #0]
 8004b0c:	6892      	ldr	r2, [r2, #8]
 8004b0e:	4619      	mov	r1, r3
 8004b10:	f7ff fa70 	bl	8003ff4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	4b3c      	ldr	r3, [pc, #240]	; (8004c0c <HAL_ADC_ConfigChannel+0x7d4>)
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d06b      	beq.n	8004bf8 <HAL_ADC_ConfigChannel+0x7c0>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b20:	483b      	ldr	r0, [pc, #236]	; (8004c10 <HAL_ADC_ConfigChannel+0x7d8>)
 8004b22:	f7ff f9c5 	bl	8003eb0 <LL_ADC_GetCommonPathInternalCh>
 8004b26:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a39      	ldr	r2, [pc, #228]	; (8004c14 <HAL_ADC_ConfigChannel+0x7dc>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d126      	bne.n	8004b82 <HAL_ADC_ConfigChannel+0x74a>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004b34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d120      	bne.n	8004b82 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a34      	ldr	r2, [pc, #208]	; (8004c18 <HAL_ADC_ConfigChannel+0x7e0>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d156      	bne.n	8004bf8 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b4e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004b52:	4619      	mov	r1, r3
 8004b54:	482e      	ldr	r0, [pc, #184]	; (8004c10 <HAL_ADC_ConfigChannel+0x7d8>)
 8004b56:	f7ff f998 	bl	8003e8a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004b5a:	4b30      	ldr	r3, [pc, #192]	; (8004c1c <HAL_ADC_ConfigChannel+0x7e4>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	099b      	lsrs	r3, r3, #6
 8004b60:	4a2f      	ldr	r2, [pc, #188]	; (8004c20 <HAL_ADC_ConfigChannel+0x7e8>)
 8004b62:	fba2 2303 	umull	r2, r3, r2, r3
 8004b66:	099a      	lsrs	r2, r3, #6
 8004b68:	4613      	mov	r3, r2
 8004b6a:	005b      	lsls	r3, r3, #1
 8004b6c:	4413      	add	r3, r2
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004b72:	e002      	b.n	8004b7a <HAL_ADC_ConfigChannel+0x742>
          {
            wait_loop_index--;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	3b01      	subs	r3, #1
 8004b78:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1f9      	bne.n	8004b74 <HAL_ADC_ConfigChannel+0x73c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004b80:	e03a      	b.n	8004bf8 <HAL_ADC_ConfigChannel+0x7c0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a27      	ldr	r2, [pc, #156]	; (8004c24 <HAL_ADC_ConfigChannel+0x7ec>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d113      	bne.n	8004bb4 <HAL_ADC_ConfigChannel+0x77c>
 8004b8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d10d      	bne.n	8004bb4 <HAL_ADC_ConfigChannel+0x77c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a1e      	ldr	r2, [pc, #120]	; (8004c18 <HAL_ADC_ConfigChannel+0x7e0>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d12a      	bne.n	8004bf8 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ba2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004ba6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004baa:	4619      	mov	r1, r3
 8004bac:	4818      	ldr	r0, [pc, #96]	; (8004c10 <HAL_ADC_ConfigChannel+0x7d8>)
 8004bae:	f7ff f96c 	bl	8003e8a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004bb2:	e021      	b.n	8004bf8 <HAL_ADC_ConfigChannel+0x7c0>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a1b      	ldr	r2, [pc, #108]	; (8004c28 <HAL_ADC_ConfigChannel+0x7f0>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d11c      	bne.n	8004bf8 <HAL_ADC_ConfigChannel+0x7c0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004bbe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004bc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d116      	bne.n	8004bf8 <HAL_ADC_ConfigChannel+0x7c0>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a12      	ldr	r2, [pc, #72]	; (8004c18 <HAL_ADC_ConfigChannel+0x7e0>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d111      	bne.n	8004bf8 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004bd4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004bd8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004bdc:	4619      	mov	r1, r3
 8004bde:	480c      	ldr	r0, [pc, #48]	; (8004c10 <HAL_ADC_ConfigChannel+0x7d8>)
 8004be0:	f7ff f953 	bl	8003e8a <LL_ADC_SetCommonPathInternalCh>
 8004be4:	e008      	b.n	8004bf8 <HAL_ADC_ConfigChannel+0x7c0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bea:	f043 0220 	orr.w	r2, r3, #32
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8004c00:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	37d8      	adds	r7, #216	; 0xd8
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	80080000 	.word	0x80080000
 8004c10:	50040300 	.word	0x50040300
 8004c14:	c7520000 	.word	0xc7520000
 8004c18:	50040000 	.word	0x50040000
 8004c1c:	20000008 	.word	0x20000008
 8004c20:	053e2d63 	.word	0x053e2d63
 8004c24:	cb840000 	.word	0xcb840000
 8004c28:	80000001 	.word	0x80000001

08004c2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f003 0307 	and.w	r3, r3, #7
 8004c3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c3c:	4b0c      	ldr	r3, [pc, #48]	; (8004c70 <__NVIC_SetPriorityGrouping+0x44>)
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c42:	68ba      	ldr	r2, [r7, #8]
 8004c44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004c48:	4013      	ands	r3, r2
 8004c4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c5e:	4a04      	ldr	r2, [pc, #16]	; (8004c70 <__NVIC_SetPriorityGrouping+0x44>)
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	60d3      	str	r3, [r2, #12]
}
 8004c64:	bf00      	nop
 8004c66:	3714      	adds	r7, #20
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr
 8004c70:	e000ed00 	.word	0xe000ed00

08004c74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c74:	b480      	push	{r7}
 8004c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c78:	4b04      	ldr	r3, [pc, #16]	; (8004c8c <__NVIC_GetPriorityGrouping+0x18>)
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	0a1b      	lsrs	r3, r3, #8
 8004c7e:	f003 0307 	and.w	r3, r3, #7
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr
 8004c8c:	e000ed00 	.word	0xe000ed00

08004c90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	4603      	mov	r3, r0
 8004c98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	db0b      	blt.n	8004cba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ca2:	79fb      	ldrb	r3, [r7, #7]
 8004ca4:	f003 021f 	and.w	r2, r3, #31
 8004ca8:	4907      	ldr	r1, [pc, #28]	; (8004cc8 <__NVIC_EnableIRQ+0x38>)
 8004caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cae:	095b      	lsrs	r3, r3, #5
 8004cb0:	2001      	movs	r0, #1
 8004cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8004cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004cba:	bf00      	nop
 8004cbc:	370c      	adds	r7, #12
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	e000e100 	.word	0xe000e100

08004ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	6039      	str	r1, [r7, #0]
 8004cd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	db0a      	blt.n	8004cf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	b2da      	uxtb	r2, r3
 8004ce4:	490c      	ldr	r1, [pc, #48]	; (8004d18 <__NVIC_SetPriority+0x4c>)
 8004ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cea:	0112      	lsls	r2, r2, #4
 8004cec:	b2d2      	uxtb	r2, r2
 8004cee:	440b      	add	r3, r1
 8004cf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004cf4:	e00a      	b.n	8004d0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	b2da      	uxtb	r2, r3
 8004cfa:	4908      	ldr	r1, [pc, #32]	; (8004d1c <__NVIC_SetPriority+0x50>)
 8004cfc:	79fb      	ldrb	r3, [r7, #7]
 8004cfe:	f003 030f 	and.w	r3, r3, #15
 8004d02:	3b04      	subs	r3, #4
 8004d04:	0112      	lsls	r2, r2, #4
 8004d06:	b2d2      	uxtb	r2, r2
 8004d08:	440b      	add	r3, r1
 8004d0a:	761a      	strb	r2, [r3, #24]
}
 8004d0c:	bf00      	nop
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr
 8004d18:	e000e100 	.word	0xe000e100
 8004d1c:	e000ed00 	.word	0xe000ed00

08004d20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b089      	sub	sp, #36	; 0x24
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f003 0307 	and.w	r3, r3, #7
 8004d32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	f1c3 0307 	rsb	r3, r3, #7
 8004d3a:	2b04      	cmp	r3, #4
 8004d3c:	bf28      	it	cs
 8004d3e:	2304      	movcs	r3, #4
 8004d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	3304      	adds	r3, #4
 8004d46:	2b06      	cmp	r3, #6
 8004d48:	d902      	bls.n	8004d50 <NVIC_EncodePriority+0x30>
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	3b03      	subs	r3, #3
 8004d4e:	e000      	b.n	8004d52 <NVIC_EncodePriority+0x32>
 8004d50:	2300      	movs	r3, #0
 8004d52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d54:	f04f 32ff 	mov.w	r2, #4294967295
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5e:	43da      	mvns	r2, r3
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	401a      	ands	r2, r3
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d68:	f04f 31ff 	mov.w	r1, #4294967295
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d72:	43d9      	mvns	r1, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d78:	4313      	orrs	r3, r2
         );
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3724      	adds	r7, #36	; 0x24
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
	...

08004d88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	3b01      	subs	r3, #1
 8004d94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d98:	d301      	bcc.n	8004d9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e00f      	b.n	8004dbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d9e:	4a0a      	ldr	r2, [pc, #40]	; (8004dc8 <SysTick_Config+0x40>)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	3b01      	subs	r3, #1
 8004da4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004da6:	210f      	movs	r1, #15
 8004da8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dac:	f7ff ff8e 	bl	8004ccc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004db0:	4b05      	ldr	r3, [pc, #20]	; (8004dc8 <SysTick_Config+0x40>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004db6:	4b04      	ldr	r3, [pc, #16]	; (8004dc8 <SysTick_Config+0x40>)
 8004db8:	2207      	movs	r2, #7
 8004dba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3708      	adds	r7, #8
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	e000e010 	.word	0xe000e010

08004dcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f7ff ff29 	bl	8004c2c <__NVIC_SetPriorityGrouping>
}
 8004dda:	bf00      	nop
 8004ddc:	3708      	adds	r7, #8
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b086      	sub	sp, #24
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	4603      	mov	r3, r0
 8004dea:	60b9      	str	r1, [r7, #8]
 8004dec:	607a      	str	r2, [r7, #4]
 8004dee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004df0:	2300      	movs	r3, #0
 8004df2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004df4:	f7ff ff3e 	bl	8004c74 <__NVIC_GetPriorityGrouping>
 8004df8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	68b9      	ldr	r1, [r7, #8]
 8004dfe:	6978      	ldr	r0, [r7, #20]
 8004e00:	f7ff ff8e 	bl	8004d20 <NVIC_EncodePriority>
 8004e04:	4602      	mov	r2, r0
 8004e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e0a:	4611      	mov	r1, r2
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f7ff ff5d 	bl	8004ccc <__NVIC_SetPriority>
}
 8004e12:	bf00      	nop
 8004e14:	3718      	adds	r7, #24
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}

08004e1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e1a:	b580      	push	{r7, lr}
 8004e1c:	b082      	sub	sp, #8
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	4603      	mov	r3, r0
 8004e22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f7ff ff31 	bl	8004c90 <__NVIC_EnableIRQ>
}
 8004e2e:	bf00      	nop
 8004e30:	3708      	adds	r7, #8
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b082      	sub	sp, #8
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f7ff ffa2 	bl	8004d88 <SysTick_Config>
 8004e44:	4603      	mov	r3, r0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3708      	adds	r7, #8
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
	...

08004e50 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d101      	bne.n	8004e62 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e054      	b.n	8004f0c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	7f5b      	ldrb	r3, [r3, #29]
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d105      	bne.n	8004e78 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f7fc fc80 	bl	8001778 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	791b      	ldrb	r3, [r3, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10c      	bne.n	8004ea0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a22      	ldr	r2, [pc, #136]	; (8004f14 <HAL_CRC_Init+0xc4>)
 8004e8c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	689a      	ldr	r2, [r3, #8]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f022 0218 	bic.w	r2, r2, #24
 8004e9c:	609a      	str	r2, [r3, #8]
 8004e9e:	e00c      	b.n	8004eba <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6899      	ldr	r1, [r3, #8]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f834 	bl	8004f18 <HAL_CRCEx_Polynomial_Set>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d001      	beq.n	8004eba <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e028      	b.n	8004f0c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	795b      	ldrb	r3, [r3, #5]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d105      	bne.n	8004ece <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8004eca:	611a      	str	r2, [r3, #16]
 8004ecc:	e004      	b.n	8004ed8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	6912      	ldr	r2, [r2, #16]
 8004ed6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	695a      	ldr	r2, [r3, #20]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	430a      	orrs	r2, r1
 8004eec:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	699a      	ldr	r2, [r3, #24]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	430a      	orrs	r2, r1
 8004f02:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3708      	adds	r7, #8
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	04c11db7 	.word	0x04c11db7

08004f18 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b087      	sub	sp, #28
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f24:	2300      	movs	r3, #0
 8004f26:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004f28:	231f      	movs	r3, #31
 8004f2a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004f2c:	bf00      	nop
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	1e5a      	subs	r2, r3, #1
 8004f32:	613a      	str	r2, [r7, #16]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d009      	beq.n	8004f4c <HAL_CRCEx_Polynomial_Set+0x34>
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	f003 031f 	and.w	r3, r3, #31
 8004f3e:	68ba      	ldr	r2, [r7, #8]
 8004f40:	fa22 f303 	lsr.w	r3, r2, r3
 8004f44:	f003 0301 	and.w	r3, r3, #1
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d0f0      	beq.n	8004f2e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2b18      	cmp	r3, #24
 8004f50:	d846      	bhi.n	8004fe0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8004f52:	a201      	add	r2, pc, #4	; (adr r2, 8004f58 <HAL_CRCEx_Polynomial_Set+0x40>)
 8004f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f58:	08004fe7 	.word	0x08004fe7
 8004f5c:	08004fe1 	.word	0x08004fe1
 8004f60:	08004fe1 	.word	0x08004fe1
 8004f64:	08004fe1 	.word	0x08004fe1
 8004f68:	08004fe1 	.word	0x08004fe1
 8004f6c:	08004fe1 	.word	0x08004fe1
 8004f70:	08004fe1 	.word	0x08004fe1
 8004f74:	08004fe1 	.word	0x08004fe1
 8004f78:	08004fd5 	.word	0x08004fd5
 8004f7c:	08004fe1 	.word	0x08004fe1
 8004f80:	08004fe1 	.word	0x08004fe1
 8004f84:	08004fe1 	.word	0x08004fe1
 8004f88:	08004fe1 	.word	0x08004fe1
 8004f8c:	08004fe1 	.word	0x08004fe1
 8004f90:	08004fe1 	.word	0x08004fe1
 8004f94:	08004fe1 	.word	0x08004fe1
 8004f98:	08004fc9 	.word	0x08004fc9
 8004f9c:	08004fe1 	.word	0x08004fe1
 8004fa0:	08004fe1 	.word	0x08004fe1
 8004fa4:	08004fe1 	.word	0x08004fe1
 8004fa8:	08004fe1 	.word	0x08004fe1
 8004fac:	08004fe1 	.word	0x08004fe1
 8004fb0:	08004fe1 	.word	0x08004fe1
 8004fb4:	08004fe1 	.word	0x08004fe1
 8004fb8:	08004fbd 	.word	0x08004fbd
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	2b06      	cmp	r3, #6
 8004fc0:	d913      	bls.n	8004fea <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004fc6:	e010      	b.n	8004fea <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	2b07      	cmp	r3, #7
 8004fcc:	d90f      	bls.n	8004fee <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004fd2:	e00c      	b.n	8004fee <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	2b0f      	cmp	r3, #15
 8004fd8:	d90b      	bls.n	8004ff2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004fde:	e008      	b.n	8004ff2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	75fb      	strb	r3, [r7, #23]
      break;
 8004fe4:	e006      	b.n	8004ff4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004fe6:	bf00      	nop
 8004fe8:	e004      	b.n	8004ff4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004fea:	bf00      	nop
 8004fec:	e002      	b.n	8004ff4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004fee:	bf00      	nop
 8004ff0:	e000      	b.n	8004ff4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004ff2:	bf00      	nop
  }
  if (status == HAL_OK)
 8004ff4:	7dfb      	ldrb	r3, [r7, #23]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d10d      	bne.n	8005016 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68ba      	ldr	r2, [r7, #8]
 8005000:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f023 0118 	bic.w	r1, r3, #24
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	430a      	orrs	r2, r1
 8005014:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8005016:	7dfb      	ldrb	r3, [r7, #23]
}
 8005018:	4618      	mov	r0, r3
 800501a:	371c      	adds	r7, #28
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d101      	bne.n	8005036 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e0ac      	b.n	8005190 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4618      	mov	r0, r3
 800503c:	f000 f8b2 	bl	80051a4 <DFSDM_GetChannelFromInstance>
 8005040:	4602      	mov	r2, r0
 8005042:	4b55      	ldr	r3, [pc, #340]	; (8005198 <HAL_DFSDM_ChannelInit+0x174>)
 8005044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d001      	beq.n	8005050 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e09f      	b.n	8005190 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f7fc fbe9 	bl	8001828 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8005056:	4b51      	ldr	r3, [pc, #324]	; (800519c <HAL_DFSDM_ChannelInit+0x178>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	3301      	adds	r3, #1
 800505c:	4a4f      	ldr	r2, [pc, #316]	; (800519c <HAL_DFSDM_ChannelInit+0x178>)
 800505e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8005060:	4b4e      	ldr	r3, [pc, #312]	; (800519c <HAL_DFSDM_ChannelInit+0x178>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d125      	bne.n	80050b4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8005068:	4b4d      	ldr	r3, [pc, #308]	; (80051a0 <HAL_DFSDM_ChannelInit+0x17c>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a4c      	ldr	r2, [pc, #304]	; (80051a0 <HAL_DFSDM_ChannelInit+0x17c>)
 800506e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005072:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8005074:	4b4a      	ldr	r3, [pc, #296]	; (80051a0 <HAL_DFSDM_ChannelInit+0x17c>)
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	4948      	ldr	r1, [pc, #288]	; (80051a0 <HAL_DFSDM_ChannelInit+0x17c>)
 800507e:	4313      	orrs	r3, r2
 8005080:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8005082:	4b47      	ldr	r3, [pc, #284]	; (80051a0 <HAL_DFSDM_ChannelInit+0x17c>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a46      	ldr	r2, [pc, #280]	; (80051a0 <HAL_DFSDM_ChannelInit+0x17c>)
 8005088:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800508c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	791b      	ldrb	r3, [r3, #4]
 8005092:	2b01      	cmp	r3, #1
 8005094:	d108      	bne.n	80050a8 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8005096:	4b42      	ldr	r3, [pc, #264]	; (80051a0 <HAL_DFSDM_ChannelInit+0x17c>)
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	3b01      	subs	r3, #1
 80050a0:	041b      	lsls	r3, r3, #16
 80050a2:	493f      	ldr	r1, [pc, #252]	; (80051a0 <HAL_DFSDM_ChannelInit+0x17c>)
 80050a4:	4313      	orrs	r3, r2
 80050a6:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80050a8:	4b3d      	ldr	r3, [pc, #244]	; (80051a0 <HAL_DFSDM_ChannelInit+0x17c>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a3c      	ldr	r2, [pc, #240]	; (80051a0 <HAL_DFSDM_ChannelInit+0x17c>)
 80050ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050b2:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80050c2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	6819      	ldr	r1, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80050d2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80050d8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	430a      	orrs	r2, r1
 80050e0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f022 020f 	bic.w	r2, r2, #15
 80050f0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	6819      	ldr	r1, [r3, #0]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8005100:	431a      	orrs	r2, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	430a      	orrs	r2, r1
 8005108:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	689a      	ldr	r2, [r3, #8]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8005118:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	6899      	ldr	r1, [r3, #8]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005128:	3b01      	subs	r3, #1
 800512a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800512c:	431a      	orrs	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	430a      	orrs	r2, r1
 8005134:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	685a      	ldr	r2, [r3, #4]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f002 0207 	and.w	r2, r2, #7
 8005144:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	6859      	ldr	r1, [r3, #4]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005150:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005156:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8005158:	431a      	orrs	r2, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	430a      	orrs	r2, r1
 8005160:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005170:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2201      	movs	r2, #1
 8005176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4618      	mov	r0, r3
 8005180:	f000 f810 	bl	80051a4 <DFSDM_GetChannelFromInstance>
 8005184:	4601      	mov	r1, r0
 8005186:	4a04      	ldr	r2, [pc, #16]	; (8005198 <HAL_DFSDM_ChannelInit+0x174>)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3708      	adds	r7, #8
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	20000928 	.word	0x20000928
 800519c:	20000924 	.word	0x20000924
 80051a0:	40016000 	.word	0x40016000

080051a4 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a1c      	ldr	r2, [pc, #112]	; (8005220 <DFSDM_GetChannelFromInstance+0x7c>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d102      	bne.n	80051ba <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80051b4:	2300      	movs	r3, #0
 80051b6:	60fb      	str	r3, [r7, #12]
 80051b8:	e02b      	b.n	8005212 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a19      	ldr	r2, [pc, #100]	; (8005224 <DFSDM_GetChannelFromInstance+0x80>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d102      	bne.n	80051c8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80051c2:	2301      	movs	r3, #1
 80051c4:	60fb      	str	r3, [r7, #12]
 80051c6:	e024      	b.n	8005212 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a17      	ldr	r2, [pc, #92]	; (8005228 <DFSDM_GetChannelFromInstance+0x84>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d102      	bne.n	80051d6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80051d0:	2302      	movs	r3, #2
 80051d2:	60fb      	str	r3, [r7, #12]
 80051d4:	e01d      	b.n	8005212 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a14      	ldr	r2, [pc, #80]	; (800522c <DFSDM_GetChannelFromInstance+0x88>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d102      	bne.n	80051e4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80051de:	2304      	movs	r3, #4
 80051e0:	60fb      	str	r3, [r7, #12]
 80051e2:	e016      	b.n	8005212 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a12      	ldr	r2, [pc, #72]	; (8005230 <DFSDM_GetChannelFromInstance+0x8c>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d102      	bne.n	80051f2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80051ec:	2305      	movs	r3, #5
 80051ee:	60fb      	str	r3, [r7, #12]
 80051f0:	e00f      	b.n	8005212 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a0f      	ldr	r2, [pc, #60]	; (8005234 <DFSDM_GetChannelFromInstance+0x90>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d102      	bne.n	8005200 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80051fa:	2306      	movs	r3, #6
 80051fc:	60fb      	str	r3, [r7, #12]
 80051fe:	e008      	b.n	8005212 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a0d      	ldr	r2, [pc, #52]	; (8005238 <DFSDM_GetChannelFromInstance+0x94>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d102      	bne.n	800520e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8005208:	2307      	movs	r3, #7
 800520a:	60fb      	str	r3, [r7, #12]
 800520c:	e001      	b.n	8005212 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800520e:	2303      	movs	r3, #3
 8005210:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8005212:	68fb      	ldr	r3, [r7, #12]
}
 8005214:	4618      	mov	r0, r3
 8005216:	3714      	adds	r7, #20
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr
 8005220:	40016000 	.word	0x40016000
 8005224:	40016020 	.word	0x40016020
 8005228:	40016040 	.word	0x40016040
 800522c:	40016080 	.word	0x40016080
 8005230:	400160a0 	.word	0x400160a0
 8005234:	400160c0 	.word	0x400160c0
 8005238:	400160e0 	.word	0x400160e0

0800523c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800523c:	b480      	push	{r7}
 800523e:	b087      	sub	sp, #28
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	460b      	mov	r3, r1
 8005246:	607a      	str	r2, [r7, #4]
 8005248:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800524a:	2300      	movs	r3, #0
 800524c:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800524e:	7afb      	ldrb	r3, [r7, #11]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d103      	bne.n	800525c <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	605a      	str	r2, [r3, #4]
      break;
 800525a:	e002      	b.n	8005262 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	75fb      	strb	r3, [r7, #23]
      break;
 8005260:	bf00      	nop
  }

  return status;
 8005262:	7dfb      	ldrb	r3, [r7, #23]
}
 8005264:	4618      	mov	r0, r3
 8005266:	371c      	adds	r7, #28
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d101      	bne.n	8005284 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e003      	b.n	800528c <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	683a      	ldr	r2, [r7, #0]
 8005288:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800528a:	2300      	movs	r3, #0
  }
}
 800528c:	4618      	mov	r0, r3
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b086      	sub	sp, #24
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	0c1b      	lsrs	r3, r3, #16
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 031f 	and.w	r3, r3, #31
 80052b4:	2201      	movs	r2, #1
 80052b6:	fa02 f303 	lsl.w	r3, r2, r3
 80052ba:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	015a      	lsls	r2, r3, #5
 80052c0:	4b0c      	ldr	r3, [pc, #48]	; (80052f4 <HAL_EXTI_IRQHandler+0x5c>)
 80052c2:	4413      	add	r3, r2
 80052c4:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	693a      	ldr	r2, [r7, #16]
 80052cc:	4013      	ands	r3, r2
 80052ce:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d009      	beq.n	80052ea <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d002      	beq.n	80052ea <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	4798      	blx	r3
    }
  }
}
 80052ea:	bf00      	nop
 80052ec:	3718      	adds	r7, #24
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	40010414 	.word	0x40010414

080052f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b087      	sub	sp, #28
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005302:	2300      	movs	r3, #0
 8005304:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005306:	e166      	b.n	80055d6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	2101      	movs	r1, #1
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	fa01 f303 	lsl.w	r3, r1, r3
 8005314:	4013      	ands	r3, r2
 8005316:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2b00      	cmp	r3, #0
 800531c:	f000 8158 	beq.w	80055d0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	2b01      	cmp	r3, #1
 8005326:	d00b      	beq.n	8005340 <HAL_GPIO_Init+0x48>
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	2b02      	cmp	r3, #2
 800532e:	d007      	beq.n	8005340 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005334:	2b11      	cmp	r3, #17
 8005336:	d003      	beq.n	8005340 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	2b12      	cmp	r3, #18
 800533e:	d130      	bne.n	80053a2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	005b      	lsls	r3, r3, #1
 800534a:	2203      	movs	r2, #3
 800534c:	fa02 f303 	lsl.w	r3, r2, r3
 8005350:	43db      	mvns	r3, r3
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	4013      	ands	r3, r2
 8005356:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	68da      	ldr	r2, [r3, #12]
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	005b      	lsls	r3, r3, #1
 8005360:	fa02 f303 	lsl.w	r3, r2, r3
 8005364:	693a      	ldr	r2, [r7, #16]
 8005366:	4313      	orrs	r3, r2
 8005368:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005376:	2201      	movs	r2, #1
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	fa02 f303 	lsl.w	r3, r2, r3
 800537e:	43db      	mvns	r3, r3
 8005380:	693a      	ldr	r2, [r7, #16]
 8005382:	4013      	ands	r3, r2
 8005384:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	091b      	lsrs	r3, r3, #4
 800538c:	f003 0201 	and.w	r2, r3, #1
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	fa02 f303 	lsl.w	r3, r2, r3
 8005396:	693a      	ldr	r2, [r7, #16]
 8005398:	4313      	orrs	r3, r2
 800539a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	693a      	ldr	r2, [r7, #16]
 80053a0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	005b      	lsls	r3, r3, #1
 80053ac:	2203      	movs	r2, #3
 80053ae:	fa02 f303 	lsl.w	r3, r2, r3
 80053b2:	43db      	mvns	r3, r3
 80053b4:	693a      	ldr	r2, [r7, #16]
 80053b6:	4013      	ands	r3, r2
 80053b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	689a      	ldr	r2, [r3, #8]
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	005b      	lsls	r3, r3, #1
 80053c2:	fa02 f303 	lsl.w	r3, r2, r3
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d003      	beq.n	80053e2 <HAL_GPIO_Init+0xea>
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	2b12      	cmp	r3, #18
 80053e0:	d123      	bne.n	800542a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	08da      	lsrs	r2, r3, #3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	3208      	adds	r2, #8
 80053ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	f003 0307 	and.w	r3, r3, #7
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	220f      	movs	r2, #15
 80053fa:	fa02 f303 	lsl.w	r3, r2, r3
 80053fe:	43db      	mvns	r3, r3
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	4013      	ands	r3, r2
 8005404:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	691a      	ldr	r2, [r3, #16]
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f003 0307 	and.w	r3, r3, #7
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	fa02 f303 	lsl.w	r3, r2, r3
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	4313      	orrs	r3, r2
 800541a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	08da      	lsrs	r2, r3, #3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	3208      	adds	r2, #8
 8005424:	6939      	ldr	r1, [r7, #16]
 8005426:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	005b      	lsls	r3, r3, #1
 8005434:	2203      	movs	r2, #3
 8005436:	fa02 f303 	lsl.w	r3, r2, r3
 800543a:	43db      	mvns	r3, r3
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	4013      	ands	r3, r2
 8005440:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f003 0203 	and.w	r2, r3, #3
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	005b      	lsls	r3, r3, #1
 800544e:	fa02 f303 	lsl.w	r3, r2, r3
 8005452:	693a      	ldr	r2, [r7, #16]
 8005454:	4313      	orrs	r3, r2
 8005456:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	693a      	ldr	r2, [r7, #16]
 800545c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005466:	2b00      	cmp	r3, #0
 8005468:	f000 80b2 	beq.w	80055d0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800546c:	4b61      	ldr	r3, [pc, #388]	; (80055f4 <HAL_GPIO_Init+0x2fc>)
 800546e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005470:	4a60      	ldr	r2, [pc, #384]	; (80055f4 <HAL_GPIO_Init+0x2fc>)
 8005472:	f043 0301 	orr.w	r3, r3, #1
 8005476:	6613      	str	r3, [r2, #96]	; 0x60
 8005478:	4b5e      	ldr	r3, [pc, #376]	; (80055f4 <HAL_GPIO_Init+0x2fc>)
 800547a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800547c:	f003 0301 	and.w	r3, r3, #1
 8005480:	60bb      	str	r3, [r7, #8]
 8005482:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005484:	4a5c      	ldr	r2, [pc, #368]	; (80055f8 <HAL_GPIO_Init+0x300>)
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	089b      	lsrs	r3, r3, #2
 800548a:	3302      	adds	r3, #2
 800548c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005490:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	f003 0303 	and.w	r3, r3, #3
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	220f      	movs	r2, #15
 800549c:	fa02 f303 	lsl.w	r3, r2, r3
 80054a0:	43db      	mvns	r3, r3
 80054a2:	693a      	ldr	r2, [r7, #16]
 80054a4:	4013      	ands	r3, r2
 80054a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80054ae:	d02b      	beq.n	8005508 <HAL_GPIO_Init+0x210>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a52      	ldr	r2, [pc, #328]	; (80055fc <HAL_GPIO_Init+0x304>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d025      	beq.n	8005504 <HAL_GPIO_Init+0x20c>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a51      	ldr	r2, [pc, #324]	; (8005600 <HAL_GPIO_Init+0x308>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d01f      	beq.n	8005500 <HAL_GPIO_Init+0x208>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a50      	ldr	r2, [pc, #320]	; (8005604 <HAL_GPIO_Init+0x30c>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d019      	beq.n	80054fc <HAL_GPIO_Init+0x204>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a4f      	ldr	r2, [pc, #316]	; (8005608 <HAL_GPIO_Init+0x310>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d013      	beq.n	80054f8 <HAL_GPIO_Init+0x200>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a4e      	ldr	r2, [pc, #312]	; (800560c <HAL_GPIO_Init+0x314>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d00d      	beq.n	80054f4 <HAL_GPIO_Init+0x1fc>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a4d      	ldr	r2, [pc, #308]	; (8005610 <HAL_GPIO_Init+0x318>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d007      	beq.n	80054f0 <HAL_GPIO_Init+0x1f8>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a4c      	ldr	r2, [pc, #304]	; (8005614 <HAL_GPIO_Init+0x31c>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d101      	bne.n	80054ec <HAL_GPIO_Init+0x1f4>
 80054e8:	2307      	movs	r3, #7
 80054ea:	e00e      	b.n	800550a <HAL_GPIO_Init+0x212>
 80054ec:	2308      	movs	r3, #8
 80054ee:	e00c      	b.n	800550a <HAL_GPIO_Init+0x212>
 80054f0:	2306      	movs	r3, #6
 80054f2:	e00a      	b.n	800550a <HAL_GPIO_Init+0x212>
 80054f4:	2305      	movs	r3, #5
 80054f6:	e008      	b.n	800550a <HAL_GPIO_Init+0x212>
 80054f8:	2304      	movs	r3, #4
 80054fa:	e006      	b.n	800550a <HAL_GPIO_Init+0x212>
 80054fc:	2303      	movs	r3, #3
 80054fe:	e004      	b.n	800550a <HAL_GPIO_Init+0x212>
 8005500:	2302      	movs	r3, #2
 8005502:	e002      	b.n	800550a <HAL_GPIO_Init+0x212>
 8005504:	2301      	movs	r3, #1
 8005506:	e000      	b.n	800550a <HAL_GPIO_Init+0x212>
 8005508:	2300      	movs	r3, #0
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	f002 0203 	and.w	r2, r2, #3
 8005510:	0092      	lsls	r2, r2, #2
 8005512:	4093      	lsls	r3, r2
 8005514:	693a      	ldr	r2, [r7, #16]
 8005516:	4313      	orrs	r3, r2
 8005518:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800551a:	4937      	ldr	r1, [pc, #220]	; (80055f8 <HAL_GPIO_Init+0x300>)
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	089b      	lsrs	r3, r3, #2
 8005520:	3302      	adds	r3, #2
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005528:	4b3b      	ldr	r3, [pc, #236]	; (8005618 <HAL_GPIO_Init+0x320>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	43db      	mvns	r3, r3
 8005532:	693a      	ldr	r2, [r7, #16]
 8005534:	4013      	ands	r3, r2
 8005536:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d003      	beq.n	800554c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8005544:	693a      	ldr	r2, [r7, #16]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	4313      	orrs	r3, r2
 800554a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800554c:	4a32      	ldr	r2, [pc, #200]	; (8005618 <HAL_GPIO_Init+0x320>)
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8005552:	4b31      	ldr	r3, [pc, #196]	; (8005618 <HAL_GPIO_Init+0x320>)
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	43db      	mvns	r3, r3
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	4013      	ands	r3, r2
 8005560:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d003      	beq.n	8005576 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	4313      	orrs	r3, r2
 8005574:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005576:	4a28      	ldr	r2, [pc, #160]	; (8005618 <HAL_GPIO_Init+0x320>)
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800557c:	4b26      	ldr	r3, [pc, #152]	; (8005618 <HAL_GPIO_Init+0x320>)
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	43db      	mvns	r3, r3
 8005586:	693a      	ldr	r2, [r7, #16]
 8005588:	4013      	ands	r3, r2
 800558a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005594:	2b00      	cmp	r3, #0
 8005596:	d003      	beq.n	80055a0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8005598:	693a      	ldr	r2, [r7, #16]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	4313      	orrs	r3, r2
 800559e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80055a0:	4a1d      	ldr	r2, [pc, #116]	; (8005618 <HAL_GPIO_Init+0x320>)
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80055a6:	4b1c      	ldr	r3, [pc, #112]	; (8005618 <HAL_GPIO_Init+0x320>)
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	43db      	mvns	r3, r3
 80055b0:	693a      	ldr	r2, [r7, #16]
 80055b2:	4013      	ands	r3, r2
 80055b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d003      	beq.n	80055ca <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80055ca:	4a13      	ldr	r2, [pc, #76]	; (8005618 <HAL_GPIO_Init+0x320>)
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	3301      	adds	r3, #1
 80055d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	fa22 f303 	lsr.w	r3, r2, r3
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	f47f ae91 	bne.w	8005308 <HAL_GPIO_Init+0x10>
  }
}
 80055e6:	bf00      	nop
 80055e8:	371c      	adds	r7, #28
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	40021000 	.word	0x40021000
 80055f8:	40010000 	.word	0x40010000
 80055fc:	48000400 	.word	0x48000400
 8005600:	48000800 	.word	0x48000800
 8005604:	48000c00 	.word	0x48000c00
 8005608:	48001000 	.word	0x48001000
 800560c:	48001400 	.word	0x48001400
 8005610:	48001800 	.word	0x48001800
 8005614:	48001c00 	.word	0x48001c00
 8005618:	40010400 	.word	0x40010400

0800561c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800561c:	b480      	push	{r7}
 800561e:	b087      	sub	sp, #28
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005626:	2300      	movs	r3, #0
 8005628:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800562a:	e0c9      	b.n	80057c0 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800562c:	2201      	movs	r2, #1
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	fa02 f303 	lsl.w	r3, r2, r3
 8005634:	683a      	ldr	r2, [r7, #0]
 8005636:	4013      	ands	r3, r2
 8005638:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	2b00      	cmp	r3, #0
 800563e:	f000 80bc 	beq.w	80057ba <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005642:	4a66      	ldr	r2, [pc, #408]	; (80057dc <HAL_GPIO_DeInit+0x1c0>)
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	089b      	lsrs	r3, r3, #2
 8005648:	3302      	adds	r3, #2
 800564a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800564e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	f003 0303 	and.w	r3, r3, #3
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	220f      	movs	r2, #15
 800565a:	fa02 f303 	lsl.w	r3, r2, r3
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	4013      	ands	r3, r2
 8005662:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800566a:	d02b      	beq.n	80056c4 <HAL_GPIO_DeInit+0xa8>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a5c      	ldr	r2, [pc, #368]	; (80057e0 <HAL_GPIO_DeInit+0x1c4>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d025      	beq.n	80056c0 <HAL_GPIO_DeInit+0xa4>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a5b      	ldr	r2, [pc, #364]	; (80057e4 <HAL_GPIO_DeInit+0x1c8>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d01f      	beq.n	80056bc <HAL_GPIO_DeInit+0xa0>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a5a      	ldr	r2, [pc, #360]	; (80057e8 <HAL_GPIO_DeInit+0x1cc>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d019      	beq.n	80056b8 <HAL_GPIO_DeInit+0x9c>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a59      	ldr	r2, [pc, #356]	; (80057ec <HAL_GPIO_DeInit+0x1d0>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d013      	beq.n	80056b4 <HAL_GPIO_DeInit+0x98>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a58      	ldr	r2, [pc, #352]	; (80057f0 <HAL_GPIO_DeInit+0x1d4>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d00d      	beq.n	80056b0 <HAL_GPIO_DeInit+0x94>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a57      	ldr	r2, [pc, #348]	; (80057f4 <HAL_GPIO_DeInit+0x1d8>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d007      	beq.n	80056ac <HAL_GPIO_DeInit+0x90>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a56      	ldr	r2, [pc, #344]	; (80057f8 <HAL_GPIO_DeInit+0x1dc>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d101      	bne.n	80056a8 <HAL_GPIO_DeInit+0x8c>
 80056a4:	2307      	movs	r3, #7
 80056a6:	e00e      	b.n	80056c6 <HAL_GPIO_DeInit+0xaa>
 80056a8:	2308      	movs	r3, #8
 80056aa:	e00c      	b.n	80056c6 <HAL_GPIO_DeInit+0xaa>
 80056ac:	2306      	movs	r3, #6
 80056ae:	e00a      	b.n	80056c6 <HAL_GPIO_DeInit+0xaa>
 80056b0:	2305      	movs	r3, #5
 80056b2:	e008      	b.n	80056c6 <HAL_GPIO_DeInit+0xaa>
 80056b4:	2304      	movs	r3, #4
 80056b6:	e006      	b.n	80056c6 <HAL_GPIO_DeInit+0xaa>
 80056b8:	2303      	movs	r3, #3
 80056ba:	e004      	b.n	80056c6 <HAL_GPIO_DeInit+0xaa>
 80056bc:	2302      	movs	r3, #2
 80056be:	e002      	b.n	80056c6 <HAL_GPIO_DeInit+0xaa>
 80056c0:	2301      	movs	r3, #1
 80056c2:	e000      	b.n	80056c6 <HAL_GPIO_DeInit+0xaa>
 80056c4:	2300      	movs	r3, #0
 80056c6:	697a      	ldr	r2, [r7, #20]
 80056c8:	f002 0203 	and.w	r2, r2, #3
 80056cc:	0092      	lsls	r2, r2, #2
 80056ce:	4093      	lsls	r3, r2
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d132      	bne.n	800573c <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80056d6:	4b49      	ldr	r3, [pc, #292]	; (80057fc <HAL_GPIO_DeInit+0x1e0>)
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	43db      	mvns	r3, r3
 80056de:	4947      	ldr	r1, [pc, #284]	; (80057fc <HAL_GPIO_DeInit+0x1e0>)
 80056e0:	4013      	ands	r3, r2
 80056e2:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80056e4:	4b45      	ldr	r3, [pc, #276]	; (80057fc <HAL_GPIO_DeInit+0x1e0>)
 80056e6:	685a      	ldr	r2, [r3, #4]
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	43db      	mvns	r3, r3
 80056ec:	4943      	ldr	r1, [pc, #268]	; (80057fc <HAL_GPIO_DeInit+0x1e0>)
 80056ee:	4013      	ands	r3, r2
 80056f0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80056f2:	4b42      	ldr	r3, [pc, #264]	; (80057fc <HAL_GPIO_DeInit+0x1e0>)
 80056f4:	689a      	ldr	r2, [r3, #8]
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	43db      	mvns	r3, r3
 80056fa:	4940      	ldr	r1, [pc, #256]	; (80057fc <HAL_GPIO_DeInit+0x1e0>)
 80056fc:	4013      	ands	r3, r2
 80056fe:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8005700:	4b3e      	ldr	r3, [pc, #248]	; (80057fc <HAL_GPIO_DeInit+0x1e0>)
 8005702:	68da      	ldr	r2, [r3, #12]
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	43db      	mvns	r3, r3
 8005708:	493c      	ldr	r1, [pc, #240]	; (80057fc <HAL_GPIO_DeInit+0x1e0>)
 800570a:	4013      	ands	r3, r2
 800570c:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	f003 0303 	and.w	r3, r3, #3
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	220f      	movs	r2, #15
 8005718:	fa02 f303 	lsl.w	r3, r2, r3
 800571c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800571e:	4a2f      	ldr	r2, [pc, #188]	; (80057dc <HAL_GPIO_DeInit+0x1c0>)
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	089b      	lsrs	r3, r3, #2
 8005724:	3302      	adds	r3, #2
 8005726:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	43da      	mvns	r2, r3
 800572e:	482b      	ldr	r0, [pc, #172]	; (80057dc <HAL_GPIO_DeInit+0x1c0>)
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	089b      	lsrs	r3, r3, #2
 8005734:	400a      	ands	r2, r1
 8005736:	3302      	adds	r3, #2
 8005738:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	005b      	lsls	r3, r3, #1
 8005744:	2103      	movs	r1, #3
 8005746:	fa01 f303 	lsl.w	r3, r1, r3
 800574a:	431a      	orrs	r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	08da      	lsrs	r2, r3, #3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	3208      	adds	r2, #8
 8005758:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	f003 0307 	and.w	r3, r3, #7
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	220f      	movs	r2, #15
 8005766:	fa02 f303 	lsl.w	r3, r2, r3
 800576a:	43db      	mvns	r3, r3
 800576c:	697a      	ldr	r2, [r7, #20]
 800576e:	08d2      	lsrs	r2, r2, #3
 8005770:	4019      	ands	r1, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	3208      	adds	r2, #8
 8005776:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	689a      	ldr	r2, [r3, #8]
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	005b      	lsls	r3, r3, #1
 8005782:	2103      	movs	r1, #3
 8005784:	fa01 f303 	lsl.w	r3, r1, r3
 8005788:	43db      	mvns	r3, r3
 800578a:	401a      	ands	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685a      	ldr	r2, [r3, #4]
 8005794:	2101      	movs	r1, #1
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	fa01 f303 	lsl.w	r3, r1, r3
 800579c:	43db      	mvns	r3, r3
 800579e:	401a      	ands	r2, r3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	68da      	ldr	r2, [r3, #12]
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	005b      	lsls	r3, r3, #1
 80057ac:	2103      	movs	r1, #3
 80057ae:	fa01 f303 	lsl.w	r3, r1, r3
 80057b2:	43db      	mvns	r3, r3
 80057b4:	401a      	ands	r2, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	3301      	adds	r3, #1
 80057be:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80057c0:	683a      	ldr	r2, [r7, #0]
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	fa22 f303 	lsr.w	r3, r2, r3
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f47f af2f 	bne.w	800562c <HAL_GPIO_DeInit+0x10>
  }
}
 80057ce:	bf00      	nop
 80057d0:	371c      	adds	r7, #28
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	40010000 	.word	0x40010000
 80057e0:	48000400 	.word	0x48000400
 80057e4:	48000800 	.word	0x48000800
 80057e8:	48000c00 	.word	0x48000c00
 80057ec:	48001000 	.word	0x48001000
 80057f0:	48001400 	.word	0x48001400
 80057f4:	48001800 	.word	0x48001800
 80057f8:	48001c00 	.word	0x48001c00
 80057fc:	40010400 	.word	0x40010400

08005800 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005800:	b480      	push	{r7}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	460b      	mov	r3, r1
 800580a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	691a      	ldr	r2, [r3, #16]
 8005810:	887b      	ldrh	r3, [r7, #2]
 8005812:	4013      	ands	r3, r2
 8005814:	2b00      	cmp	r3, #0
 8005816:	d002      	beq.n	800581e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005818:	2301      	movs	r3, #1
 800581a:	73fb      	strb	r3, [r7, #15]
 800581c:	e001      	b.n	8005822 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800581e:	2300      	movs	r3, #0
 8005820:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005822:	7bfb      	ldrb	r3, [r7, #15]
}
 8005824:	4618      	mov	r0, r3
 8005826:	3714      	adds	r7, #20
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	460b      	mov	r3, r1
 800583a:	807b      	strh	r3, [r7, #2]
 800583c:	4613      	mov	r3, r2
 800583e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005840:	787b      	ldrb	r3, [r7, #1]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d003      	beq.n	800584e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005846:	887a      	ldrh	r2, [r7, #2]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800584c:	e002      	b.n	8005854 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800584e:	887a      	ldrh	r2, [r7, #2]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005854:	bf00      	nop
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	4603      	mov	r3, r0
 8005868:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800586a:	4b08      	ldr	r3, [pc, #32]	; (800588c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800586c:	695a      	ldr	r2, [r3, #20]
 800586e:	88fb      	ldrh	r3, [r7, #6]
 8005870:	4013      	ands	r3, r2
 8005872:	2b00      	cmp	r3, #0
 8005874:	d006      	beq.n	8005884 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005876:	4a05      	ldr	r2, [pc, #20]	; (800588c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005878:	88fb      	ldrh	r3, [r7, #6]
 800587a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800587c:	88fb      	ldrh	r3, [r7, #6]
 800587e:	4618      	mov	r0, r3
 8005880:	f7fc fb9c 	bl	8001fbc <HAL_GPIO_EXTI_Callback>
  }
}
 8005884:	bf00      	nop
 8005886:	3708      	adds	r7, #8
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}
 800588c:	40010400 	.word	0x40010400

08005890 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d101      	bne.n	80058a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e081      	b.n	80059a6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d106      	bne.n	80058bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f7fc f9b0 	bl	8001c1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2224      	movs	r2, #36	; 0x24
 80058c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f022 0201 	bic.w	r2, r2, #1
 80058d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685a      	ldr	r2, [r3, #4]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80058e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	689a      	ldr	r2, [r3, #8]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80058f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d107      	bne.n	800590a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	689a      	ldr	r2, [r3, #8]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005906:	609a      	str	r2, [r3, #8]
 8005908:	e006      	b.n	8005918 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	689a      	ldr	r2, [r3, #8]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005916:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	2b02      	cmp	r3, #2
 800591e:	d104      	bne.n	800592a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005928:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	6812      	ldr	r2, [r2, #0]
 8005934:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005938:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800593c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68da      	ldr	r2, [r3, #12]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800594c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	691a      	ldr	r2, [r3, #16]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	695b      	ldr	r3, [r3, #20]
 8005956:	ea42 0103 	orr.w	r1, r2, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	699b      	ldr	r3, [r3, #24]
 800595e:	021a      	lsls	r2, r3, #8
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	430a      	orrs	r2, r1
 8005966:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	69d9      	ldr	r1, [r3, #28]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a1a      	ldr	r2, [r3, #32]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	430a      	orrs	r2, r1
 8005976:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f042 0201 	orr.w	r2, r2, #1
 8005986:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2220      	movs	r2, #32
 8005992:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3708      	adds	r7, #8
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}

080059ae <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b082      	sub	sp, #8
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d101      	bne.n	80059c0 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e021      	b.n	8005a04 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2224      	movs	r2, #36	; 0x24
 80059c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f022 0201 	bic.w	r2, r2, #1
 80059d6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f7fc f963 	bl	8001ca4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3708      	adds	r7, #8
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b088      	sub	sp, #32
 8005a10:	af02      	add	r7, sp, #8
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	4608      	mov	r0, r1
 8005a16:	4611      	mov	r1, r2
 8005a18:	461a      	mov	r2, r3
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	817b      	strh	r3, [r7, #10]
 8005a1e:	460b      	mov	r3, r1
 8005a20:	813b      	strh	r3, [r7, #8]
 8005a22:	4613      	mov	r3, r2
 8005a24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	2b20      	cmp	r3, #32
 8005a30:	f040 80f9 	bne.w	8005c26 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a34:	6a3b      	ldr	r3, [r7, #32]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d002      	beq.n	8005a40 <HAL_I2C_Mem_Write+0x34>
 8005a3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d105      	bne.n	8005a4c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a46:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e0ed      	b.n	8005c28 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d101      	bne.n	8005a5a <HAL_I2C_Mem_Write+0x4e>
 8005a56:	2302      	movs	r3, #2
 8005a58:	e0e6      	b.n	8005c28 <HAL_I2C_Mem_Write+0x21c>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005a62:	f7fe f9d1 	bl	8003e08 <HAL_GetTick>
 8005a66:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	9300      	str	r3, [sp, #0]
 8005a6c:	2319      	movs	r3, #25
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a74:	68f8      	ldr	r0, [r7, #12]
 8005a76:	f000 fadd 	bl	8006034 <I2C_WaitOnFlagUntilTimeout>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d001      	beq.n	8005a84 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e0d1      	b.n	8005c28 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2221      	movs	r2, #33	; 0x21
 8005a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2240      	movs	r2, #64	; 0x40
 8005a90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2200      	movs	r2, #0
 8005a98:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6a3a      	ldr	r2, [r7, #32]
 8005a9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005aa4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005aac:	88f8      	ldrh	r0, [r7, #6]
 8005aae:	893a      	ldrh	r2, [r7, #8]
 8005ab0:	8979      	ldrh	r1, [r7, #10]
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	9301      	str	r3, [sp, #4]
 8005ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab8:	9300      	str	r3, [sp, #0]
 8005aba:	4603      	mov	r3, r0
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	f000 f9ed 	bl	8005e9c <I2C_RequestMemoryWrite>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d005      	beq.n	8005ad4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e0a9      	b.n	8005c28 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	2bff      	cmp	r3, #255	; 0xff
 8005adc:	d90e      	bls.n	8005afc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	22ff      	movs	r2, #255	; 0xff
 8005ae2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ae8:	b2da      	uxtb	r2, r3
 8005aea:	8979      	ldrh	r1, [r7, #10]
 8005aec:	2300      	movs	r3, #0
 8005aee:	9300      	str	r3, [sp, #0]
 8005af0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005af4:	68f8      	ldr	r0, [r7, #12]
 8005af6:	f000 fbbf 	bl	8006278 <I2C_TransferConfig>
 8005afa:	e00f      	b.n	8005b1c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b00:	b29a      	uxth	r2, r3
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b0a:	b2da      	uxtb	r2, r3
 8005b0c:	8979      	ldrh	r1, [r7, #10]
 8005b0e:	2300      	movs	r3, #0
 8005b10:	9300      	str	r3, [sp, #0]
 8005b12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b16:	68f8      	ldr	r0, [r7, #12]
 8005b18:	f000 fbae 	bl	8006278 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b1c:	697a      	ldr	r2, [r7, #20]
 8005b1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f000 fac7 	bl	80060b4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d001      	beq.n	8005b30 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e07b      	b.n	8005c28 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b34:	781a      	ldrb	r2, [r3, #0]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b40:	1c5a      	adds	r2, r3, #1
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b58:	3b01      	subs	r3, #1
 8005b5a:	b29a      	uxth	r2, r3
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d034      	beq.n	8005bd4 <HAL_I2C_Mem_Write+0x1c8>
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d130      	bne.n	8005bd4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	9300      	str	r3, [sp, #0]
 8005b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b78:	2200      	movs	r2, #0
 8005b7a:	2180      	movs	r1, #128	; 0x80
 8005b7c:	68f8      	ldr	r0, [r7, #12]
 8005b7e:	f000 fa59 	bl	8006034 <I2C_WaitOnFlagUntilTimeout>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d001      	beq.n	8005b8c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e04d      	b.n	8005c28 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	2bff      	cmp	r3, #255	; 0xff
 8005b94:	d90e      	bls.n	8005bb4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	22ff      	movs	r2, #255	; 0xff
 8005b9a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ba0:	b2da      	uxtb	r2, r3
 8005ba2:	8979      	ldrh	r1, [r7, #10]
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	9300      	str	r3, [sp, #0]
 8005ba8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f000 fb63 	bl	8006278 <I2C_TransferConfig>
 8005bb2:	e00f      	b.n	8005bd4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bc2:	b2da      	uxtb	r2, r3
 8005bc4:	8979      	ldrh	r1, [r7, #10]
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	9300      	str	r3, [sp, #0]
 8005bca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005bce:	68f8      	ldr	r0, [r7, #12]
 8005bd0:	f000 fb52 	bl	8006278 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d19e      	bne.n	8005b1c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	f000 faa6 	bl	8006134 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d001      	beq.n	8005bf2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e01a      	b.n	8005c28 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2220      	movs	r2, #32
 8005bf8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	6859      	ldr	r1, [r3, #4]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	4b0a      	ldr	r3, [pc, #40]	; (8005c30 <HAL_I2C_Mem_Write+0x224>)
 8005c06:	400b      	ands	r3, r1
 8005c08:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2220      	movs	r2, #32
 8005c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c22:	2300      	movs	r3, #0
 8005c24:	e000      	b.n	8005c28 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005c26:	2302      	movs	r3, #2
  }
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3718      	adds	r7, #24
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	fe00e800 	.word	0xfe00e800

08005c34 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b088      	sub	sp, #32
 8005c38:	af02      	add	r7, sp, #8
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	4608      	mov	r0, r1
 8005c3e:	4611      	mov	r1, r2
 8005c40:	461a      	mov	r2, r3
 8005c42:	4603      	mov	r3, r0
 8005c44:	817b      	strh	r3, [r7, #10]
 8005c46:	460b      	mov	r3, r1
 8005c48:	813b      	strh	r3, [r7, #8]
 8005c4a:	4613      	mov	r3, r2
 8005c4c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	2b20      	cmp	r3, #32
 8005c58:	f040 80fd 	bne.w	8005e56 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c5c:	6a3b      	ldr	r3, [r7, #32]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d002      	beq.n	8005c68 <HAL_I2C_Mem_Read+0x34>
 8005c62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d105      	bne.n	8005c74 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c6e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e0f1      	b.n	8005e58 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d101      	bne.n	8005c82 <HAL_I2C_Mem_Read+0x4e>
 8005c7e:	2302      	movs	r3, #2
 8005c80:	e0ea      	b.n	8005e58 <HAL_I2C_Mem_Read+0x224>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2201      	movs	r2, #1
 8005c86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005c8a:	f7fe f8bd 	bl	8003e08 <HAL_GetTick>
 8005c8e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	9300      	str	r3, [sp, #0]
 8005c94:	2319      	movs	r3, #25
 8005c96:	2201      	movs	r2, #1
 8005c98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005c9c:	68f8      	ldr	r0, [r7, #12]
 8005c9e:	f000 f9c9 	bl	8006034 <I2C_WaitOnFlagUntilTimeout>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d001      	beq.n	8005cac <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e0d5      	b.n	8005e58 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2222      	movs	r2, #34	; 0x22
 8005cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2240      	movs	r2, #64	; 0x40
 8005cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6a3a      	ldr	r2, [r7, #32]
 8005cc6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005ccc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005cd4:	88f8      	ldrh	r0, [r7, #6]
 8005cd6:	893a      	ldrh	r2, [r7, #8]
 8005cd8:	8979      	ldrh	r1, [r7, #10]
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	9301      	str	r3, [sp, #4]
 8005cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce0:	9300      	str	r3, [sp, #0]
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	f000 f92d 	bl	8005f44 <I2C_RequestMemoryRead>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d005      	beq.n	8005cfc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e0ad      	b.n	8005e58 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	2bff      	cmp	r3, #255	; 0xff
 8005d04:	d90e      	bls.n	8005d24 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	22ff      	movs	r2, #255	; 0xff
 8005d0a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d10:	b2da      	uxtb	r2, r3
 8005d12:	8979      	ldrh	r1, [r7, #10]
 8005d14:	4b52      	ldr	r3, [pc, #328]	; (8005e60 <HAL_I2C_Mem_Read+0x22c>)
 8005d16:	9300      	str	r3, [sp, #0]
 8005d18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d1c:	68f8      	ldr	r0, [r7, #12]
 8005d1e:	f000 faab 	bl	8006278 <I2C_TransferConfig>
 8005d22:	e00f      	b.n	8005d44 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d28:	b29a      	uxth	r2, r3
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d32:	b2da      	uxtb	r2, r3
 8005d34:	8979      	ldrh	r1, [r7, #10]
 8005d36:	4b4a      	ldr	r3, [pc, #296]	; (8005e60 <HAL_I2C_Mem_Read+0x22c>)
 8005d38:	9300      	str	r3, [sp, #0]
 8005d3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	f000 fa9a 	bl	8006278 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	9300      	str	r3, [sp, #0]
 8005d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	2104      	movs	r1, #4
 8005d4e:	68f8      	ldr	r0, [r7, #12]
 8005d50:	f000 f970 	bl	8006034 <I2C_WaitOnFlagUntilTimeout>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d001      	beq.n	8005d5e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e07c      	b.n	8005e58 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d68:	b2d2      	uxtb	r2, r2
 8005d6a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d70:	1c5a      	adds	r2, r3, #1
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d034      	beq.n	8005e04 <HAL_I2C_Mem_Read+0x1d0>
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d130      	bne.n	8005e04 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	9300      	str	r3, [sp, #0]
 8005da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da8:	2200      	movs	r2, #0
 8005daa:	2180      	movs	r1, #128	; 0x80
 8005dac:	68f8      	ldr	r0, [r7, #12]
 8005dae:	f000 f941 	bl	8006034 <I2C_WaitOnFlagUntilTimeout>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d001      	beq.n	8005dbc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e04d      	b.n	8005e58 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	2bff      	cmp	r3, #255	; 0xff
 8005dc4:	d90e      	bls.n	8005de4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	22ff      	movs	r2, #255	; 0xff
 8005dca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dd0:	b2da      	uxtb	r2, r3
 8005dd2:	8979      	ldrh	r1, [r7, #10]
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	9300      	str	r3, [sp, #0]
 8005dd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f000 fa4b 	bl	8006278 <I2C_TransferConfig>
 8005de2:	e00f      	b.n	8005e04 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005de8:	b29a      	uxth	r2, r3
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005df2:	b2da      	uxtb	r2, r3
 8005df4:	8979      	ldrh	r1, [r7, #10]
 8005df6:	2300      	movs	r3, #0
 8005df8:	9300      	str	r3, [sp, #0]
 8005dfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005dfe:	68f8      	ldr	r0, [r7, #12]
 8005e00:	f000 fa3a 	bl	8006278 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d19a      	bne.n	8005d44 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e0e:	697a      	ldr	r2, [r7, #20]
 8005e10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e12:	68f8      	ldr	r0, [r7, #12]
 8005e14:	f000 f98e 	bl	8006134 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d001      	beq.n	8005e22 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e01a      	b.n	8005e58 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2220      	movs	r2, #32
 8005e28:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	6859      	ldr	r1, [r3, #4]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	4b0b      	ldr	r3, [pc, #44]	; (8005e64 <HAL_I2C_Mem_Read+0x230>)
 8005e36:	400b      	ands	r3, r1
 8005e38:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2220      	movs	r2, #32
 8005e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005e52:	2300      	movs	r3, #0
 8005e54:	e000      	b.n	8005e58 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005e56:	2302      	movs	r3, #2
  }
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3718      	adds	r7, #24
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	80002400 	.word	0x80002400
 8005e64:	fe00e800 	.word	0xfe00e800

08005e68 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e76:	b2db      	uxtb	r3, r3
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b086      	sub	sp, #24
 8005ea0:	af02      	add	r7, sp, #8
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	4608      	mov	r0, r1
 8005ea6:	4611      	mov	r1, r2
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	4603      	mov	r3, r0
 8005eac:	817b      	strh	r3, [r7, #10]
 8005eae:	460b      	mov	r3, r1
 8005eb0:	813b      	strh	r3, [r7, #8]
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005eb6:	88fb      	ldrh	r3, [r7, #6]
 8005eb8:	b2da      	uxtb	r2, r3
 8005eba:	8979      	ldrh	r1, [r7, #10]
 8005ebc:	4b20      	ldr	r3, [pc, #128]	; (8005f40 <I2C_RequestMemoryWrite+0xa4>)
 8005ebe:	9300      	str	r3, [sp, #0]
 8005ec0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ec4:	68f8      	ldr	r0, [r7, #12]
 8005ec6:	f000 f9d7 	bl	8006278 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005eca:	69fa      	ldr	r2, [r7, #28]
 8005ecc:	69b9      	ldr	r1, [r7, #24]
 8005ece:	68f8      	ldr	r0, [r7, #12]
 8005ed0:	f000 f8f0 	bl	80060b4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d001      	beq.n	8005ede <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e02c      	b.n	8005f38 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005ede:	88fb      	ldrh	r3, [r7, #6]
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d105      	bne.n	8005ef0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005ee4:	893b      	ldrh	r3, [r7, #8]
 8005ee6:	b2da      	uxtb	r2, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	629a      	str	r2, [r3, #40]	; 0x28
 8005eee:	e015      	b.n	8005f1c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005ef0:	893b      	ldrh	r3, [r7, #8]
 8005ef2:	0a1b      	lsrs	r3, r3, #8
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	b2da      	uxtb	r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005efe:	69fa      	ldr	r2, [r7, #28]
 8005f00:	69b9      	ldr	r1, [r7, #24]
 8005f02:	68f8      	ldr	r0, [r7, #12]
 8005f04:	f000 f8d6 	bl	80060b4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d001      	beq.n	8005f12 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e012      	b.n	8005f38 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005f12:	893b      	ldrh	r3, [r7, #8]
 8005f14:	b2da      	uxtb	r2, r3
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	9300      	str	r3, [sp, #0]
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	2200      	movs	r2, #0
 8005f24:	2180      	movs	r1, #128	; 0x80
 8005f26:	68f8      	ldr	r0, [r7, #12]
 8005f28:	f000 f884 	bl	8006034 <I2C_WaitOnFlagUntilTimeout>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d001      	beq.n	8005f36 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e000      	b.n	8005f38 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005f36:	2300      	movs	r3, #0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3710      	adds	r7, #16
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	80002000 	.word	0x80002000

08005f44 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b086      	sub	sp, #24
 8005f48:	af02      	add	r7, sp, #8
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	4608      	mov	r0, r1
 8005f4e:	4611      	mov	r1, r2
 8005f50:	461a      	mov	r2, r3
 8005f52:	4603      	mov	r3, r0
 8005f54:	817b      	strh	r3, [r7, #10]
 8005f56:	460b      	mov	r3, r1
 8005f58:	813b      	strh	r3, [r7, #8]
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005f5e:	88fb      	ldrh	r3, [r7, #6]
 8005f60:	b2da      	uxtb	r2, r3
 8005f62:	8979      	ldrh	r1, [r7, #10]
 8005f64:	4b20      	ldr	r3, [pc, #128]	; (8005fe8 <I2C_RequestMemoryRead+0xa4>)
 8005f66:	9300      	str	r3, [sp, #0]
 8005f68:	2300      	movs	r3, #0
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	f000 f984 	bl	8006278 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f70:	69fa      	ldr	r2, [r7, #28]
 8005f72:	69b9      	ldr	r1, [r7, #24]
 8005f74:	68f8      	ldr	r0, [r7, #12]
 8005f76:	f000 f89d 	bl	80060b4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d001      	beq.n	8005f84 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e02c      	b.n	8005fde <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f84:	88fb      	ldrh	r3, [r7, #6]
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d105      	bne.n	8005f96 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005f8a:	893b      	ldrh	r3, [r7, #8]
 8005f8c:	b2da      	uxtb	r2, r3
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	629a      	str	r2, [r3, #40]	; 0x28
 8005f94:	e015      	b.n	8005fc2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005f96:	893b      	ldrh	r3, [r7, #8]
 8005f98:	0a1b      	lsrs	r3, r3, #8
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	b2da      	uxtb	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fa4:	69fa      	ldr	r2, [r7, #28]
 8005fa6:	69b9      	ldr	r1, [r7, #24]
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f000 f883 	bl	80060b4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d001      	beq.n	8005fb8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e012      	b.n	8005fde <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005fb8:	893b      	ldrh	r3, [r7, #8]
 8005fba:	b2da      	uxtb	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	9300      	str	r3, [sp, #0]
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	2140      	movs	r1, #64	; 0x40
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f000 f831 	bl	8006034 <I2C_WaitOnFlagUntilTimeout>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d001      	beq.n	8005fdc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e000      	b.n	8005fde <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3710      	adds	r7, #16
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	80002000 	.word	0x80002000

08005fec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	f003 0302 	and.w	r3, r3, #2
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d103      	bne.n	800600a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2200      	movs	r2, #0
 8006008:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	699b      	ldr	r3, [r3, #24]
 8006010:	f003 0301 	and.w	r3, r3, #1
 8006014:	2b01      	cmp	r3, #1
 8006016:	d007      	beq.n	8006028 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	699a      	ldr	r2, [r3, #24]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f042 0201 	orr.w	r2, r2, #1
 8006026:	619a      	str	r2, [r3, #24]
  }
}
 8006028:	bf00      	nop
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	603b      	str	r3, [r7, #0]
 8006040:	4613      	mov	r3, r2
 8006042:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006044:	e022      	b.n	800608c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800604c:	d01e      	beq.n	800608c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800604e:	f7fd fedb 	bl	8003e08 <HAL_GetTick>
 8006052:	4602      	mov	r2, r0
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	1ad3      	subs	r3, r2, r3
 8006058:	683a      	ldr	r2, [r7, #0]
 800605a:	429a      	cmp	r2, r3
 800605c:	d302      	bcc.n	8006064 <I2C_WaitOnFlagUntilTimeout+0x30>
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d113      	bne.n	800608c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006068:	f043 0220 	orr.w	r2, r3, #32
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2220      	movs	r2, #32
 8006074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2200      	movs	r2, #0
 800607c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2200      	movs	r2, #0
 8006084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e00f      	b.n	80060ac <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	699a      	ldr	r2, [r3, #24]
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	4013      	ands	r3, r2
 8006096:	68ba      	ldr	r2, [r7, #8]
 8006098:	429a      	cmp	r2, r3
 800609a:	bf0c      	ite	eq
 800609c:	2301      	moveq	r3, #1
 800609e:	2300      	movne	r3, #0
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	461a      	mov	r2, r3
 80060a4:	79fb      	ldrb	r3, [r7, #7]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d0cd      	beq.n	8006046 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80060aa:	2300      	movs	r3, #0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3710      	adds	r7, #16
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80060c0:	e02c      	b.n	800611c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	68b9      	ldr	r1, [r7, #8]
 80060c6:	68f8      	ldr	r0, [r7, #12]
 80060c8:	f000 f870 	bl	80061ac <I2C_IsAcknowledgeFailed>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d001      	beq.n	80060d6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e02a      	b.n	800612c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060dc:	d01e      	beq.n	800611c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060de:	f7fd fe93 	bl	8003e08 <HAL_GetTick>
 80060e2:	4602      	mov	r2, r0
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d302      	bcc.n	80060f4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d113      	bne.n	800611c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060f8:	f043 0220 	orr.w	r2, r3, #32
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2220      	movs	r2, #32
 8006104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2200      	movs	r2, #0
 800610c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e007      	b.n	800612c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	f003 0302 	and.w	r3, r3, #2
 8006126:	2b02      	cmp	r3, #2
 8006128:	d1cb      	bne.n	80060c2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800612a:	2300      	movs	r3, #0
}
 800612c:	4618      	mov	r0, r3
 800612e:	3710      	adds	r7, #16
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006140:	e028      	b.n	8006194 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	68b9      	ldr	r1, [r7, #8]
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	f000 f830 	bl	80061ac <I2C_IsAcknowledgeFailed>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d001      	beq.n	8006156 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e026      	b.n	80061a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006156:	f7fd fe57 	bl	8003e08 <HAL_GetTick>
 800615a:	4602      	mov	r2, r0
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	1ad3      	subs	r3, r2, r3
 8006160:	68ba      	ldr	r2, [r7, #8]
 8006162:	429a      	cmp	r2, r3
 8006164:	d302      	bcc.n	800616c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d113      	bne.n	8006194 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006170:	f043 0220 	orr.w	r2, r3, #32
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2220      	movs	r2, #32
 800617c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2200      	movs	r2, #0
 8006184:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	e007      	b.n	80061a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	699b      	ldr	r3, [r3, #24]
 800619a:	f003 0320 	and.w	r3, r3, #32
 800619e:	2b20      	cmp	r3, #32
 80061a0:	d1cf      	bne.n	8006142 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3710      	adds	r7, #16
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	699b      	ldr	r3, [r3, #24]
 80061be:	f003 0310 	and.w	r3, r3, #16
 80061c2:	2b10      	cmp	r3, #16
 80061c4:	d151      	bne.n	800626a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80061c6:	e022      	b.n	800620e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ce:	d01e      	beq.n	800620e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061d0:	f7fd fe1a 	bl	8003e08 <HAL_GetTick>
 80061d4:	4602      	mov	r2, r0
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	68ba      	ldr	r2, [r7, #8]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d302      	bcc.n	80061e6 <I2C_IsAcknowledgeFailed+0x3a>
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d113      	bne.n	800620e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ea:	f043 0220 	orr.w	r2, r3, #32
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2220      	movs	r2, #32
 80061f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e02e      	b.n	800626c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	699b      	ldr	r3, [r3, #24]
 8006214:	f003 0320 	and.w	r3, r3, #32
 8006218:	2b20      	cmp	r3, #32
 800621a:	d1d5      	bne.n	80061c8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2210      	movs	r2, #16
 8006222:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2220      	movs	r2, #32
 800622a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f7ff fedd 	bl	8005fec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	6859      	ldr	r1, [r3, #4]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	4b0d      	ldr	r3, [pc, #52]	; (8006274 <I2C_IsAcknowledgeFailed+0xc8>)
 800623e:	400b      	ands	r3, r1
 8006240:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006246:	f043 0204 	orr.w	r2, r3, #4
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2220      	movs	r2, #32
 8006252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2200      	movs	r2, #0
 800625a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	e000      	b.n	800626c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	3710      	adds	r7, #16
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	fe00e800 	.word	0xfe00e800

08006278 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	607b      	str	r3, [r7, #4]
 8006282:	460b      	mov	r3, r1
 8006284:	817b      	strh	r3, [r7, #10]
 8006286:	4613      	mov	r3, r2
 8006288:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	685a      	ldr	r2, [r3, #4]
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	0d5b      	lsrs	r3, r3, #21
 8006294:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006298:	4b0d      	ldr	r3, [pc, #52]	; (80062d0 <I2C_TransferConfig+0x58>)
 800629a:	430b      	orrs	r3, r1
 800629c:	43db      	mvns	r3, r3
 800629e:	ea02 0103 	and.w	r1, r2, r3
 80062a2:	897b      	ldrh	r3, [r7, #10]
 80062a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80062a8:	7a7b      	ldrb	r3, [r7, #9]
 80062aa:	041b      	lsls	r3, r3, #16
 80062ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80062b0:	431a      	orrs	r2, r3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	431a      	orrs	r2, r3
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	431a      	orrs	r2, r3
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	430a      	orrs	r2, r1
 80062c0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80062c2:	bf00      	nop
 80062c4:	3714      	adds	r7, #20
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	03ff63ff 	.word	0x03ff63ff

080062d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	2b20      	cmp	r3, #32
 80062e8:	d138      	bne.n	800635c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d101      	bne.n	80062f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80062f4:	2302      	movs	r3, #2
 80062f6:	e032      	b.n	800635e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2224      	movs	r2, #36	; 0x24
 8006304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f022 0201 	bic.w	r2, r2, #1
 8006316:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006326:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	6819      	ldr	r1, [r3, #0]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	683a      	ldr	r2, [r7, #0]
 8006334:	430a      	orrs	r2, r1
 8006336:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f042 0201 	orr.w	r2, r2, #1
 8006346:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2220      	movs	r2, #32
 800634c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006358:	2300      	movs	r3, #0
 800635a:	e000      	b.n	800635e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800635c:	2302      	movs	r3, #2
  }
}
 800635e:	4618      	mov	r0, r3
 8006360:	370c      	adds	r7, #12
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr

0800636a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800636a:	b480      	push	{r7}
 800636c:	b085      	sub	sp, #20
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
 8006372:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800637a:	b2db      	uxtb	r3, r3
 800637c:	2b20      	cmp	r3, #32
 800637e:	d139      	bne.n	80063f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006386:	2b01      	cmp	r3, #1
 8006388:	d101      	bne.n	800638e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800638a:	2302      	movs	r3, #2
 800638c:	e033      	b.n	80063f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2201      	movs	r2, #1
 8006392:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2224      	movs	r2, #36	; 0x24
 800639a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f022 0201 	bic.w	r2, r2, #1
 80063ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80063bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	021b      	lsls	r3, r3, #8
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f042 0201 	orr.w	r2, r2, #1
 80063de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2220      	movs	r2, #32
 80063e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80063f0:	2300      	movs	r3, #0
 80063f2:	e000      	b.n	80063f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80063f4:	2302      	movs	r3, #2
  }
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3714      	adds	r7, #20
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr
	...

08006404 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b086      	sub	sp, #24
 8006408:	af02      	add	r7, sp, #8
 800640a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800640c:	2300      	movs	r3, #0
 800640e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8006410:	f7fd fcfa 	bl	8003e08 <HAL_GetTick>
 8006414:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d102      	bne.n	8006422 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	73fb      	strb	r3, [r7, #15]
 8006420:	e092      	b.n	8006548 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800642c:	2b00      	cmp	r3, #0
 800642e:	f040 808b 	bne.w	8006548 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f7fb ff68 	bl	8002308 <HAL_OSPI_MspInit>
#endif

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8006438:	f241 3188 	movw	r1, #5000	; 0x1388
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 f88b 	bl	8006558 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass, free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	689a      	ldr	r2, [r3, #8]
 8006448:	4b42      	ldr	r3, [pc, #264]	; (8006554 <HAL_OSPI_Init+0x150>)
 800644a:	4013      	ands	r3, r2
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	68d1      	ldr	r1, [r2, #12]
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	6912      	ldr	r2, [r2, #16]
 8006454:	3a01      	subs	r2, #1
 8006456:	0412      	lsls	r2, r2, #16
 8006458:	4311      	orrs	r1, r2
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	6952      	ldr	r2, [r2, #20]
 800645e:	3a01      	subs	r2, #1
 8006460:	0212      	lsls	r2, r2, #8
 8006462:	4311      	orrs	r1, r2
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006468:	4311      	orrs	r1, r2
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	69d2      	ldr	r2, [r2, #28]
 800646e:	4311      	orrs	r1, r2
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	6812      	ldr	r2, [r2, #0]
 8006474:	430b      	orrs	r3, r1
 8006476:	6093      	str	r3, [r2, #8]
#if   defined (OCTOSPI_DCR3_MAXTRAN)
      /* Configure chip select boundary and maximun transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) | (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	0412      	lsls	r2, r2, #16
 8006482:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	3b01      	subs	r3, #1
 8006494:	021a      	lsls	r2, r3, #8
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	430a      	orrs	r2, r1
 800649c:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064a2:	9300      	str	r3, [sp, #0]
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	2200      	movs	r2, #0
 80064a8:	2120      	movs	r1, #32
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 fbb8 	bl	8006c20 <OSPI_WaitFlagStateUntilTimeout>
 80064b0:	4603      	mov	r3, r0
 80064b2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80064b4:	7bfb      	ldrb	r3, [r7, #15]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d146      	bne.n	8006548 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER, ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6a1b      	ldr	r3, [r3, #32]
 80064c8:	1e5a      	subs	r2, r3, #1
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	430a      	orrs	r2, r1
 80064d0:	60da      	str	r2, [r3, #12]

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	689a      	ldr	r2, [r3, #8]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	430a      	orrs	r2, r1
 80064e6:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC), (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80064f0:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064fc:	431a      	orrs	r2, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	430a      	orrs	r2, r1
 8006504:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f042 0201 	orr.w	r2, r2, #1
 8006516:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	699b      	ldr	r3, [r3, #24]
 800651c:	2b02      	cmp	r3, #2
 800651e:	d107      	bne.n	8006530 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	689a      	ldr	r2, [r3, #8]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f042 0202 	orr.w	r2, r2, #2
 800652e:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006538:	d103      	bne.n	8006542 <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2201      	movs	r2, #1
 800653e:	645a      	str	r2, [r3, #68]	; 0x44
 8006540:	e002      	b.n	8006548 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2202      	movs	r2, #2
 8006546:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8006548:	7bfb      	ldrb	r3, [r7, #15]
}
 800654a:	4618      	mov	r0, r3
 800654c:	3710      	adds	r7, #16
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	f8e0f8f4 	.word	0xf8e0f8f4

08006558 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	683a      	ldr	r2, [r7, #0]
 8006566:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	370c      	adds	r7, #12
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr
	...

08006578 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b092      	sub	sp, #72	; 0x48
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006584:	2300      	movs	r3, #0
 8006586:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index, ospi_enabled = 0U, other_instance;
 800658a:	2300      	movs	r3, #0
 800658c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a08      	ldr	r2, [pc, #32]	; (80065b8 <HAL_OSPIM_Config+0x40>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d105      	bne.n	80065a6 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 800659a:	2300      	movs	r3, #0
 800659c:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 800659e:	2301      	movs	r3, #1
 80065a0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80065a4:	e004      	b.n	80065b0 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80065a6:	2301      	movs	r3, #1
 80065a8:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 80065aa:	2300      	movs	r3, #0
 80065ac:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80065b0:	2300      	movs	r3, #0
 80065b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80065b6:	e01f      	b.n	80065f8 <HAL_OSPIM_Config+0x80>
 80065b8:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 80065bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80065c0:	3301      	adds	r3, #1
 80065c2:	b2d8      	uxtb	r0, r3
 80065c4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80065c8:	f107 0114 	add.w	r1, r7, #20
 80065cc:	4613      	mov	r3, r2
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	4413      	add	r3, r2
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	440b      	add	r3, r1
 80065d6:	4619      	mov	r1, r3
 80065d8:	f000 fb5a 	bl	8006c90 <OSPIM_GetConfig>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d005      	beq.n	80065ee <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2208      	movs	r2, #8
 80065ec:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80065ee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80065f2:	3301      	adds	r3, #1
 80065f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80065f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d9dd      	bls.n	80065bc <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8006600:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006604:	2b00      	cmp	r3, #0
 8006606:	f040 82fe 	bne.w	8006c06 <HAL_OSPIM_Config+0x68e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 800660a:	4bcd      	ldr	r3, [pc, #820]	; (8006940 <HAL_OSPIM_Config+0x3c8>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 0301 	and.w	r3, r3, #1
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00b      	beq.n	800662e <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8006616:	4bca      	ldr	r3, [pc, #808]	; (8006940 <HAL_OSPIM_Config+0x3c8>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4ac9      	ldr	r2, [pc, #804]	; (8006940 <HAL_OSPIM_Config+0x3c8>)
 800661c:	f023 0301 	bic.w	r3, r3, #1
 8006620:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8006622:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006626:	f043 0301 	orr.w	r3, r3, #1
 800662a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 800662e:	4bc5      	ldr	r3, [pc, #788]	; (8006944 <HAL_OSPIM_Config+0x3cc>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 0301 	and.w	r3, r3, #1
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00b      	beq.n	8006652 <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800663a:	4bc2      	ldr	r3, [pc, #776]	; (8006944 <HAL_OSPIM_Config+0x3cc>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4ac1      	ldr	r2, [pc, #772]	; (8006944 <HAL_OSPIM_Config+0x3cc>)
 8006640:	f023 0301 	bic.w	r3, r3, #1
 8006644:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8006646:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800664a:	f043 0302 	orr.w	r3, r3, #2
 800664e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8006652:	49bd      	ldr	r1, [pc, #756]	; (8006948 <HAL_OSPIM_Config+0x3d0>)
 8006654:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006656:	4613      	mov	r3, r2
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	4413      	add	r3, r2
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006662:	4413      	add	r3, r2
 8006664:	3b2c      	subs	r3, #44	; 0x2c
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	3b01      	subs	r3, #1
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	440b      	add	r3, r1
 800666e:	6859      	ldr	r1, [r3, #4]
 8006670:	48b5      	ldr	r0, [pc, #724]	; (8006948 <HAL_OSPIM_Config+0x3d0>)
 8006672:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006674:	4613      	mov	r3, r2
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	4413      	add	r3, r2
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006680:	4413      	add	r3, r2
 8006682:	3b2c      	subs	r3, #44	; 0x2c
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	3b01      	subs	r3, #1
 8006688:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	4403      	add	r3, r0
 8006690:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8006692:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006694:	4613      	mov	r3, r2
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	4413      	add	r3, r2
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80066a0:	4413      	add	r3, r2
 80066a2:	3b34      	subs	r3, #52	; 0x34
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	f000 80ac 	beq.w	8006804 <HAL_OSPIM_Config+0x28c>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 80066ac:	49a6      	ldr	r1, [pc, #664]	; (8006948 <HAL_OSPIM_Config+0x3d0>)
 80066ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066b0:	4613      	mov	r3, r2
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	4413      	add	r3, r2
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80066bc:	4413      	add	r3, r2
 80066be:	3b34      	subs	r3, #52	; 0x34
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	3b01      	subs	r3, #1
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	440b      	add	r3, r1
 80066c8:	6859      	ldr	r1, [r3, #4]
 80066ca:	489f      	ldr	r0, [pc, #636]	; (8006948 <HAL_OSPIM_Config+0x3d0>)
 80066cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066ce:	4613      	mov	r3, r2
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	4413      	add	r3, r2
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80066da:	4413      	add	r3, r2
 80066dc:	3b34      	subs	r3, #52	; 0x34
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	3b01      	subs	r3, #1
 80066e2:	f021 0201 	bic.w	r2, r1, #1
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	4403      	add	r3, r0
 80066ea:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 80066ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066ee:	4613      	mov	r3, r2
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	4413      	add	r3, r2
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80066fa:	4413      	add	r3, r2
 80066fc:	3b30      	subs	r3, #48	; 0x30
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d01f      	beq.n	8006744 <HAL_OSPIM_Config+0x1cc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8006704:	4990      	ldr	r1, [pc, #576]	; (8006948 <HAL_OSPIM_Config+0x3d0>)
 8006706:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006708:	4613      	mov	r3, r2
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	4413      	add	r3, r2
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006714:	4413      	add	r3, r2
 8006716:	3b30      	subs	r3, #48	; 0x30
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	3b01      	subs	r3, #1
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	440b      	add	r3, r1
 8006720:	6859      	ldr	r1, [r3, #4]
 8006722:	4889      	ldr	r0, [pc, #548]	; (8006948 <HAL_OSPIM_Config+0x3d0>)
 8006724:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006726:	4613      	mov	r3, r2
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	4413      	add	r3, r2
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006732:	4413      	add	r3, r2
 8006734:	3b30      	subs	r3, #48	; 0x30
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	3b01      	subs	r3, #1
 800673a:	f021 0210 	bic.w	r2, r1, #16
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	4403      	add	r3, r0
 8006742:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006744:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006746:	4613      	mov	r3, r2
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	4413      	add	r3, r2
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006752:	4413      	add	r3, r2
 8006754:	3b28      	subs	r3, #40	; 0x28
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d023      	beq.n	80067a4 <HAL_OSPIM_Config+0x22c>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800675c:	497a      	ldr	r1, [pc, #488]	; (8006948 <HAL_OSPIM_Config+0x3d0>)
 800675e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006760:	4613      	mov	r3, r2
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	4413      	add	r3, r2
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800676c:	4413      	add	r3, r2
 800676e:	3b28      	subs	r3, #40	; 0x28
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	3b01      	subs	r3, #1
 8006774:	f003 0301 	and.w	r3, r3, #1
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	440b      	add	r3, r1
 800677c:	6859      	ldr	r1, [r3, #4]
 800677e:	4872      	ldr	r0, [pc, #456]	; (8006948 <HAL_OSPIM_Config+0x3d0>)
 8006780:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006782:	4613      	mov	r3, r2
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	4413      	add	r3, r2
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800678e:	4413      	add	r3, r2
 8006790:	3b28      	subs	r3, #40	; 0x28
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	3b01      	subs	r3, #1
 8006796:	f003 0301 	and.w	r3, r3, #1
 800679a:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	4403      	add	r3, r0
 80067a2:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80067a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067a6:	4613      	mov	r3, r2
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	4413      	add	r3, r2
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80067b2:	4413      	add	r3, r2
 80067b4:	3b24      	subs	r3, #36	; 0x24
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d023      	beq.n	8006804 <HAL_OSPIM_Config+0x28c>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80067bc:	4962      	ldr	r1, [pc, #392]	; (8006948 <HAL_OSPIM_Config+0x3d0>)
 80067be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067c0:	4613      	mov	r3, r2
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	4413      	add	r3, r2
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80067cc:	4413      	add	r3, r2
 80067ce:	3b24      	subs	r3, #36	; 0x24
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	3b01      	subs	r3, #1
 80067d4:	f003 0301 	and.w	r3, r3, #1
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	440b      	add	r3, r1
 80067dc:	6859      	ldr	r1, [r3, #4]
 80067de:	485a      	ldr	r0, [pc, #360]	; (8006948 <HAL_OSPIM_Config+0x3d0>)
 80067e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067e2:	4613      	mov	r3, r2
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	4413      	add	r3, r2
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80067ee:	4413      	add	r3, r2
 80067f0:	3b24      	subs	r3, #36	; 0x24
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	3b01      	subs	r3, #1
 80067f6:	f003 0301 	and.w	r3, r3, #1
 80067fa:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	4403      	add	r3, r0
 8006802:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	6819      	ldr	r1, [r3, #0]
 8006808:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800680c:	4613      	mov	r3, r2
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	4413      	add	r3, r2
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006818:	4413      	add	r3, r2
 800681a:	3b34      	subs	r3, #52	; 0x34
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4299      	cmp	r1, r3
 8006820:	d03c      	beq.n	800689c <HAL_OSPIM_Config+0x324>
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	6859      	ldr	r1, [r3, #4]
 8006826:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800682a:	4613      	mov	r3, r2
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	4413      	add	r3, r2
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006836:	4413      	add	r3, r2
 8006838:	3b30      	subs	r3, #48	; 0x30
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4299      	cmp	r1, r3
 800683e:	d02d      	beq.n	800689c <HAL_OSPIM_Config+0x324>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	6899      	ldr	r1, [r3, #8]
 8006844:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006848:	4613      	mov	r3, r2
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	4413      	add	r3, r2
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006854:	4413      	add	r3, r2
 8006856:	3b2c      	subs	r3, #44	; 0x2c
 8006858:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800685a:	4299      	cmp	r1, r3
 800685c:	d01e      	beq.n	800689c <HAL_OSPIM_Config+0x324>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	68d9      	ldr	r1, [r3, #12]
 8006862:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006866:	4613      	mov	r3, r2
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	4413      	add	r3, r2
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006872:	4413      	add	r3, r2
 8006874:	3b28      	subs	r3, #40	; 0x28
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4299      	cmp	r1, r3
 800687a:	d00f      	beq.n	800689c <HAL_OSPIM_Config+0x324>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	6919      	ldr	r1, [r3, #16]
 8006880:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006884:	4613      	mov	r3, r2
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	4413      	add	r3, r2
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006890:	4413      	add	r3, r2
 8006892:	3b24      	subs	r3, #36	; 0x24
 8006894:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8006896:	4299      	cmp	r1, r3
 8006898:	f040 80e0 	bne.w	8006a5c <HAL_OSPIM_Config+0x4e4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 800689c:	492a      	ldr	r1, [pc, #168]	; (8006948 <HAL_OSPIM_Config+0x3d0>)
 800689e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80068a2:	4613      	mov	r3, r2
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	4413      	add	r3, r2
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80068ae:	4413      	add	r3, r2
 80068b0:	3b34      	subs	r3, #52	; 0x34
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	3b01      	subs	r3, #1
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	440b      	add	r3, r1
 80068ba:	6859      	ldr	r1, [r3, #4]
 80068bc:	4822      	ldr	r0, [pc, #136]	; (8006948 <HAL_OSPIM_Config+0x3d0>)
 80068be:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80068c2:	4613      	mov	r3, r2
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	4413      	add	r3, r2
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80068ce:	4413      	add	r3, r2
 80068d0:	3b34      	subs	r3, #52	; 0x34
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	3b01      	subs	r3, #1
 80068d6:	f021 0201 	bic.w	r2, r1, #1
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	4403      	add	r3, r0
 80068de:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80068e0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80068e4:	4613      	mov	r3, r2
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	4413      	add	r3, r2
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80068f0:	4413      	add	r3, r2
 80068f2:	3b30      	subs	r3, #48	; 0x30
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d028      	beq.n	800694c <HAL_OSPIM_Config+0x3d4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 80068fa:	4913      	ldr	r1, [pc, #76]	; (8006948 <HAL_OSPIM_Config+0x3d0>)
 80068fc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006900:	4613      	mov	r3, r2
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	4413      	add	r3, r2
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800690c:	4413      	add	r3, r2
 800690e:	3b30      	subs	r3, #48	; 0x30
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	3b01      	subs	r3, #1
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	440b      	add	r3, r1
 8006918:	6859      	ldr	r1, [r3, #4]
 800691a:	480b      	ldr	r0, [pc, #44]	; (8006948 <HAL_OSPIM_Config+0x3d0>)
 800691c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006920:	4613      	mov	r3, r2
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	4413      	add	r3, r2
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800692c:	4413      	add	r3, r2
 800692e:	3b30      	subs	r3, #48	; 0x30
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	3b01      	subs	r3, #1
 8006934:	f021 0210 	bic.w	r2, r1, #16
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	4403      	add	r3, r0
 800693c:	605a      	str	r2, [r3, #4]
 800693e:	e005      	b.n	800694c <HAL_OSPIM_Config+0x3d4>
 8006940:	a0001000 	.word	0xa0001000
 8006944:	a0001400 	.word	0xa0001400
 8006948:	50061c00 	.word	0x50061c00
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 800694c:	49b1      	ldr	r1, [pc, #708]	; (8006c14 <HAL_OSPIM_Config+0x69c>)
 800694e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006952:	4613      	mov	r3, r2
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	4413      	add	r3, r2
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800695e:	4413      	add	r3, r2
 8006960:	3b2c      	subs	r3, #44	; 0x2c
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	3b01      	subs	r3, #1
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	440b      	add	r3, r1
 800696a:	6859      	ldr	r1, [r3, #4]
 800696c:	48a9      	ldr	r0, [pc, #676]	; (8006c14 <HAL_OSPIM_Config+0x69c>)
 800696e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006972:	4613      	mov	r3, r2
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	4413      	add	r3, r2
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800697e:	4413      	add	r3, r2
 8006980:	3b2c      	subs	r3, #44	; 0x2c
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	3b01      	subs	r3, #1
 8006986:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	4403      	add	r3, r0
 800698e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006990:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006994:	4613      	mov	r3, r2
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	4413      	add	r3, r2
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80069a0:	4413      	add	r3, r2
 80069a2:	3b28      	subs	r3, #40	; 0x28
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d025      	beq.n	80069f6 <HAL_OSPIM_Config+0x47e>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 80069aa:	499a      	ldr	r1, [pc, #616]	; (8006c14 <HAL_OSPIM_Config+0x69c>)
 80069ac:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80069b0:	4613      	mov	r3, r2
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	4413      	add	r3, r2
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80069bc:	4413      	add	r3, r2
 80069be:	3b28      	subs	r3, #40	; 0x28
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	3b01      	subs	r3, #1
 80069c4:	f003 0301 	and.w	r3, r3, #1
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	440b      	add	r3, r1
 80069cc:	6859      	ldr	r1, [r3, #4]
 80069ce:	4891      	ldr	r0, [pc, #580]	; (8006c14 <HAL_OSPIM_Config+0x69c>)
 80069d0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80069d4:	4613      	mov	r3, r2
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	4413      	add	r3, r2
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80069e0:	4413      	add	r3, r2
 80069e2:	3b28      	subs	r3, #40	; 0x28
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	3b01      	subs	r3, #1
 80069e8:	f003 0301 	and.w	r3, r3, #1
 80069ec:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	4403      	add	r3, r0
 80069f4:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80069f6:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80069fa:	4613      	mov	r3, r2
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	4413      	add	r3, r2
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006a06:	4413      	add	r3, r2
 8006a08:	3b24      	subs	r3, #36	; 0x24
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d025      	beq.n	8006a5c <HAL_OSPIM_Config+0x4e4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8006a10:	4980      	ldr	r1, [pc, #512]	; (8006c14 <HAL_OSPIM_Config+0x69c>)
 8006a12:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006a16:	4613      	mov	r3, r2
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	4413      	add	r3, r2
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006a22:	4413      	add	r3, r2
 8006a24:	3b24      	subs	r3, #36	; 0x24
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	3b01      	subs	r3, #1
 8006a2a:	f003 0301 	and.w	r3, r3, #1
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	440b      	add	r3, r1
 8006a32:	6859      	ldr	r1, [r3, #4]
 8006a34:	4877      	ldr	r0, [pc, #476]	; (8006c14 <HAL_OSPIM_Config+0x69c>)
 8006a36:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006a3a:	4613      	mov	r3, r2
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	4413      	add	r3, r2
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006a46:	4413      	add	r3, r2
 8006a48:	3b24      	subs	r3, #36	; 0x24
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	f003 0301 	and.w	r3, r3, #1
 8006a52:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	4403      	add	r3, r0
 8006a5a:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort-1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC), (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));
 8006a5c:	4a6d      	ldr	r2, [pc, #436]	; (8006c14 <HAL_OSPIM_Config+0x69c>)
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	3b01      	subs	r3, #1
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	4413      	add	r3, r2
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a70:	025b      	lsls	r3, r3, #9
 8006a72:	431a      	orrs	r2, r3
 8006a74:	4967      	ldr	r1, [pc, #412]	; (8006c14 <HAL_OSPIM_Config+0x69c>)
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	440b      	add	r3, r1
 8006a84:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
 8006a86:	4a63      	ldr	r2, [pc, #396]	; (8006c14 <HAL_OSPIM_Config+0x69c>)
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	3b01      	subs	r3, #1
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	4413      	add	r3, r2
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	f023 0203 	bic.w	r2, r3, #3
 8006a98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a9a:	005b      	lsls	r3, r3, #1
 8006a9c:	431a      	orrs	r2, r3
 8006a9e:	495d      	ldr	r1, [pc, #372]	; (8006c14 <HAL_OSPIM_Config+0x69c>)
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	3b01      	subs	r3, #1
 8006aa6:	f042 0201 	orr.w	r2, r2, #1
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	440b      	add	r3, r1
 8006aae:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d014      	beq.n	8006ae2 <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
 8006ab8:	4a56      	ldr	r2, [pc, #344]	; (8006c14 <HAL_OSPIM_Config+0x69c>)
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	4413      	add	r3, r2
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006aca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006acc:	015b      	lsls	r3, r3, #5
 8006ace:	431a      	orrs	r2, r3
 8006ad0:	4950      	ldr	r1, [pc, #320]	; (8006c14 <HAL_OSPIM_Config+0x69c>)
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	f042 0210 	orr.w	r2, r2, #16
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	440b      	add	r3, r1
 8006ae0:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d019      	beq.n	8006b22 <HAL_OSPIM_Config+0x5aa>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
 8006aee:	4a49      	ldr	r2, [pc, #292]	; (8006c14 <HAL_OSPIM_Config+0x69c>)
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	68db      	ldr	r3, [r3, #12]
 8006af4:	3b01      	subs	r3, #1
 8006af6:	f003 0301 	and.w	r3, r3, #1
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	4413      	add	r3, r2
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006b04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b06:	049b      	lsls	r3, r3, #18
 8006b08:	431a      	orrs	r2, r3
 8006b0a:	4942      	ldr	r1, [pc, #264]	; (8006c14 <HAL_OSPIM_Config+0x69c>)
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	3b01      	subs	r3, #1
 8006b12:	f003 0301 	and.w	r3, r3, #1
 8006b16:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	440b      	add	r3, r1
 8006b1e:	605a      	str	r2, [r3, #4]
 8006b20:	e01c      	b.n	8006b5c <HAL_OSPIM_Config+0x5e4>
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d018      	beq.n	8006b5c <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOHEN | OCTOSPIM_PCR_IOHSRC),
 8006b2a:	4a3a      	ldr	r2, [pc, #232]	; (8006c14 <HAL_OSPIM_Config+0x69c>)
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	3b01      	subs	r3, #1
 8006b32:	f003 0301 	and.w	r3, r3, #1
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	4413      	add	r3, r2
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006b40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b42:	069b      	lsls	r3, r3, #26
 8006b44:	431a      	orrs	r2, r3
 8006b46:	4933      	ldr	r1, [pc, #204]	; (8006c14 <HAL_OSPIM_Config+0x69c>)
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	f003 0301 	and.w	r3, r3, #1
 8006b52:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	440b      	add	r3, r1
 8006b5a:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	691b      	ldr	r3, [r3, #16]
 8006b60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d019      	beq.n	8006b9c <HAL_OSPIM_Config+0x624>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
 8006b68:	4a2a      	ldr	r2, [pc, #168]	; (8006c14 <HAL_OSPIM_Config+0x69c>)
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	f003 0301 	and.w	r3, r3, #1
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	4413      	add	r3, r2
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006b7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b80:	049b      	lsls	r3, r3, #18
 8006b82:	431a      	orrs	r2, r3
 8006b84:	4923      	ldr	r1, [pc, #140]	; (8006c14 <HAL_OSPIM_Config+0x69c>)
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	3b01      	subs	r3, #1
 8006b8c:	f003 0301 	and.w	r3, r3, #1
 8006b90:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	440b      	add	r3, r1
 8006b98:	605a      	str	r2, [r3, #4]
 8006b9a:	e01c      	b.n	8006bd6 <HAL_OSPIM_Config+0x65e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	691b      	ldr	r3, [r3, #16]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d018      	beq.n	8006bd6 <HAL_OSPIM_Config+0x65e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOHEN | OCTOSPIM_PCR_IOHSRC),
 8006ba4:	4a1b      	ldr	r2, [pc, #108]	; (8006c14 <HAL_OSPIM_Config+0x69c>)
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	3b01      	subs	r3, #1
 8006bac:	f003 0301 	and.w	r3, r3, #1
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	4413      	add	r3, r2
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006bba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bbc:	069b      	lsls	r3, r3, #26
 8006bbe:	431a      	orrs	r2, r3
 8006bc0:	4914      	ldr	r1, [pc, #80]	; (8006c14 <HAL_OSPIM_Config+0x69c>)
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	f003 0301 	and.w	r3, r3, #1
 8006bcc:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	440b      	add	r3, r1
 8006bd4:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8006bd6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006bda:	f003 0301 	and.w	r3, r3, #1
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d005      	beq.n	8006bee <HAL_OSPIM_Config+0x676>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8006be2:	4b0d      	ldr	r3, [pc, #52]	; (8006c18 <HAL_OSPIM_Config+0x6a0>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a0c      	ldr	r2, [pc, #48]	; (8006c18 <HAL_OSPIM_Config+0x6a0>)
 8006be8:	f043 0301 	orr.w	r3, r3, #1
 8006bec:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8006bee:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006bf2:	f003 0302 	and.w	r3, r3, #2
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d005      	beq.n	8006c06 <HAL_OSPIM_Config+0x68e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8006bfa:	4b08      	ldr	r3, [pc, #32]	; (8006c1c <HAL_OSPIM_Config+0x6a4>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a07      	ldr	r2, [pc, #28]	; (8006c1c <HAL_OSPIM_Config+0x6a4>)
 8006c00:	f043 0301 	orr.w	r3, r3, #1
 8006c04:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8006c06:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3748      	adds	r7, #72	; 0x48
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
 8006c12:	bf00      	nop
 8006c14:	50061c00 	.word	0x50061c00
 8006c18:	a0001000 	.word	0xa0001000
 8006c1c:	a0001400 	.word	0xa0001400

08006c20 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	603b      	str	r3, [r7, #0]
 8006c2c:	4613      	mov	r3, r2
 8006c2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8006c30:	e01a      	b.n	8006c68 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c38:	d016      	beq.n	8006c68 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c3a:	f7fd f8e5 	bl	8003e08 <HAL_GetTick>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	1ad3      	subs	r3, r2, r3
 8006c44:	69ba      	ldr	r2, [r7, #24]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d302      	bcc.n	8006c50 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8006c4a:	69bb      	ldr	r3, [r7, #24]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d10b      	bne.n	8006c68 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c56:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c5c:	f043 0201 	orr.w	r2, r3, #1
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	e00e      	b.n	8006c86 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	6a1a      	ldr	r2, [r3, #32]
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	4013      	ands	r3, r2
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	bf14      	ite	ne
 8006c76:	2301      	movne	r3, #1
 8006c78:	2300      	moveq	r3, #0
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	79fb      	ldrb	r3, [r7, #7]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d1d6      	bne.n	8006c32 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3710      	adds	r7, #16
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
	...

08006c90 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b087      	sub	sp, #28
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	4603      	mov	r3, r0
 8006c98:	6039      	str	r1, [r7, #0]
 8006c9a:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	75fb      	strb	r3, [r7, #23]
  uint32_t reg, value = 0U;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8006ca4:	79fb      	ldrb	r3, [r7, #7]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d005      	beq.n	8006cb6 <OSPIM_GetConfig+0x26>
 8006caa:	79fb      	ldrb	r3, [r7, #7]
 8006cac:	2b02      	cmp	r3, #2
 8006cae:	d802      	bhi.n	8006cb6 <OSPIM_GetConfig+0x26>
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d102      	bne.n	8006cbc <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	75fb      	strb	r3, [r7, #23]
 8006cba:	e08e      	b.n	8006dda <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8006cda:	79fb      	ldrb	r3, [r7, #7]
 8006cdc:	2b02      	cmp	r3, #2
 8006cde:	d101      	bne.n	8006ce4 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
 8006ce0:	4b41      	ldr	r3, [pc, #260]	; (8006de8 <OSPIM_GetConfig+0x158>)
 8006ce2:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	60fb      	str	r3, [r7, #12]
 8006ce8:	e074      	b.n	8006dd4 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8006cea:	4a40      	ldr	r2, [pc, #256]	; (8006dec <OSPIM_GetConfig+0x15c>)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	4413      	add	r3, r2
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	f003 0301 	and.w	r3, r3, #1
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d00a      	beq.n	8006d16 <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8006d00:	68ba      	ldr	r2, [r7, #8]
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	4053      	eors	r3, r2
 8006d06:	f003 0302 	and.w	r3, r3, #2
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d103      	bne.n	8006d16 <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	1c5a      	adds	r2, r3, #1
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	f003 0310 	and.w	r3, r3, #16
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d00a      	beq.n	8006d36 <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8006d20:	68ba      	ldr	r2, [r7, #8]
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	4053      	eors	r3, r2
 8006d26:	f003 0320 	and.w	r3, r3, #32
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d103      	bne.n	8006d36 <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	1c5a      	adds	r2, r3, #1
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00a      	beq.n	8006d56 <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8006d40:	68ba      	ldr	r2, [r7, #8]
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	4053      	eors	r3, r2
 8006d46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d103      	bne.n	8006d56 <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	1c5a      	adds	r2, r3, #1
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d018      	beq.n	8006d92 <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8006d60:	68ba      	ldr	r2, [r7, #8]
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	4053      	eors	r3, r2
 8006d66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d111      	bne.n	8006d92 <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d106      	bne.n	8006d86 <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	60da      	str	r2, [r3, #12]
 8006d84:	e005      	b.n	8006d92 <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d018      	beq.n	8006dce <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8006d9c:	68ba      	ldr	r2, [r7, #8]
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	4053      	eors	r3, r2
 8006da2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d111      	bne.n	8006dce <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d106      	bne.n	8006dc2 <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	3301      	adds	r3, #1
 8006db8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	611a      	str	r2, [r3, #16]
 8006dc0:	e005      	b.n	8006dce <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	60fb      	str	r3, [r7, #12]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d987      	bls.n	8006cea <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8006dda:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	371c      	adds	r7, #28
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr
 8006de8:	04040222 	.word	0x04040222
 8006dec:	50061c00 	.word	0x50061c00

08006df0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006df0:	b480      	push	{r7}
 8006df2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006df4:	4b05      	ldr	r3, [pc, #20]	; (8006e0c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a04      	ldr	r2, [pc, #16]	; (8006e0c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006dfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dfe:	6013      	str	r3, [r2, #0]
}
 8006e00:	bf00      	nop
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr
 8006e0a:	bf00      	nop
 8006e0c:	40007000 	.word	0x40007000

08006e10 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006e10:	b480      	push	{r7}
 8006e12:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006e14:	4b0d      	ldr	r3, [pc, #52]	; (8006e4c <HAL_PWREx_GetVoltageRange+0x3c>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006e1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e20:	d102      	bne.n	8006e28 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8006e22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e26:	e00b      	b.n	8006e40 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8006e28:	4b08      	ldr	r3, [pc, #32]	; (8006e4c <HAL_PWREx_GetVoltageRange+0x3c>)
 8006e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e36:	d102      	bne.n	8006e3e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8006e38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e3c:	e000      	b.n	8006e40 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8006e3e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr
 8006e4a:	bf00      	nop
 8006e4c:	40007000 	.word	0x40007000

08006e50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b085      	sub	sp, #20
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d141      	bne.n	8006ee2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006e5e:	4b4b      	ldr	r3, [pc, #300]	; (8006f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006e66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e6a:	d131      	bne.n	8006ed0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006e6c:	4b47      	ldr	r3, [pc, #284]	; (8006f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e72:	4a46      	ldr	r2, [pc, #280]	; (8006f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006e7c:	4b43      	ldr	r3, [pc, #268]	; (8006f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006e84:	4a41      	ldr	r2, [pc, #260]	; (8006f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8006e8c:	4b40      	ldr	r3, [pc, #256]	; (8006f90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2232      	movs	r2, #50	; 0x32
 8006e92:	fb02 f303 	mul.w	r3, r2, r3
 8006e96:	4a3f      	ldr	r2, [pc, #252]	; (8006f94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006e98:	fba2 2303 	umull	r2, r3, r2, r3
 8006e9c:	0c9b      	lsrs	r3, r3, #18
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006ea2:	e002      	b.n	8006eaa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	3b01      	subs	r3, #1
 8006ea8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006eaa:	4b38      	ldr	r3, [pc, #224]	; (8006f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eac:	695b      	ldr	r3, [r3, #20]
 8006eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006eb6:	d102      	bne.n	8006ebe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d1f2      	bne.n	8006ea4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006ebe:	4b33      	ldr	r3, [pc, #204]	; (8006f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ec0:	695b      	ldr	r3, [r3, #20]
 8006ec2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006eca:	d158      	bne.n	8006f7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006ecc:	2303      	movs	r3, #3
 8006ece:	e057      	b.n	8006f80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006ed0:	4b2e      	ldr	r3, [pc, #184]	; (8006f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ed2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ed6:	4a2d      	ldr	r2, [pc, #180]	; (8006f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ed8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006edc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006ee0:	e04d      	b.n	8006f7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ee8:	d141      	bne.n	8006f6e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006eea:	4b28      	ldr	r3, [pc, #160]	; (8006f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006ef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ef6:	d131      	bne.n	8006f5c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006ef8:	4b24      	ldr	r3, [pc, #144]	; (8006f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006efa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006efe:	4a23      	ldr	r2, [pc, #140]	; (8006f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006f08:	4b20      	ldr	r3, [pc, #128]	; (8006f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006f10:	4a1e      	ldr	r2, [pc, #120]	; (8006f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006f16:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8006f18:	4b1d      	ldr	r3, [pc, #116]	; (8006f90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2232      	movs	r2, #50	; 0x32
 8006f1e:	fb02 f303 	mul.w	r3, r2, r3
 8006f22:	4a1c      	ldr	r2, [pc, #112]	; (8006f94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006f24:	fba2 2303 	umull	r2, r3, r2, r3
 8006f28:	0c9b      	lsrs	r3, r3, #18
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006f2e:	e002      	b.n	8006f36 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	3b01      	subs	r3, #1
 8006f34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006f36:	4b15      	ldr	r3, [pc, #84]	; (8006f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f42:	d102      	bne.n	8006f4a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d1f2      	bne.n	8006f30 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006f4a:	4b10      	ldr	r3, [pc, #64]	; (8006f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f4c:	695b      	ldr	r3, [r3, #20]
 8006f4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f56:	d112      	bne.n	8006f7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006f58:	2303      	movs	r3, #3
 8006f5a:	e011      	b.n	8006f80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006f5c:	4b0b      	ldr	r3, [pc, #44]	; (8006f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f62:	4a0a      	ldr	r2, [pc, #40]	; (8006f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006f6c:	e007      	b.n	8006f7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006f6e:	4b07      	ldr	r3, [pc, #28]	; (8006f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006f76:	4a05      	ldr	r2, [pc, #20]	; (8006f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006f7c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006f7e:	2300      	movs	r3, #0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3714      	adds	r7, #20
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr
 8006f8c:	40007000 	.word	0x40007000
 8006f90:	20000008 	.word	0x20000008
 8006f94:	431bde83 	.word	0x431bde83

08006f98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b088      	sub	sp, #32
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d102      	bne.n	8006fac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	f000 bc16 	b.w	80077d8 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fac:	4ba0      	ldr	r3, [pc, #640]	; (8007230 <HAL_RCC_OscConfig+0x298>)
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	f003 030c 	and.w	r3, r3, #12
 8006fb4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006fb6:	4b9e      	ldr	r3, [pc, #632]	; (8007230 <HAL_RCC_OscConfig+0x298>)
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	f003 0303 	and.w	r3, r3, #3
 8006fbe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 0310 	and.w	r3, r3, #16
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	f000 80e4 	beq.w	8007196 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d007      	beq.n	8006fe4 <HAL_RCC_OscConfig+0x4c>
 8006fd4:	69bb      	ldr	r3, [r7, #24]
 8006fd6:	2b0c      	cmp	r3, #12
 8006fd8:	f040 808b 	bne.w	80070f2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	f040 8087 	bne.w	80070f2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006fe4:	4b92      	ldr	r3, [pc, #584]	; (8007230 <HAL_RCC_OscConfig+0x298>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 0302 	and.w	r3, r3, #2
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d005      	beq.n	8006ffc <HAL_RCC_OscConfig+0x64>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	699b      	ldr	r3, [r3, #24]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d101      	bne.n	8006ffc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	e3ed      	b.n	80077d8 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6a1a      	ldr	r2, [r3, #32]
 8007000:	4b8b      	ldr	r3, [pc, #556]	; (8007230 <HAL_RCC_OscConfig+0x298>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 0308 	and.w	r3, r3, #8
 8007008:	2b00      	cmp	r3, #0
 800700a:	d004      	beq.n	8007016 <HAL_RCC_OscConfig+0x7e>
 800700c:	4b88      	ldr	r3, [pc, #544]	; (8007230 <HAL_RCC_OscConfig+0x298>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007014:	e005      	b.n	8007022 <HAL_RCC_OscConfig+0x8a>
 8007016:	4b86      	ldr	r3, [pc, #536]	; (8007230 <HAL_RCC_OscConfig+0x298>)
 8007018:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800701c:	091b      	lsrs	r3, r3, #4
 800701e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007022:	4293      	cmp	r3, r2
 8007024:	d223      	bcs.n	800706e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6a1b      	ldr	r3, [r3, #32]
 800702a:	4618      	mov	r0, r3
 800702c:	f000 fdc8 	bl	8007bc0 <RCC_SetFlashLatencyFromMSIRange>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d001      	beq.n	800703a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	e3ce      	b.n	80077d8 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800703a:	4b7d      	ldr	r3, [pc, #500]	; (8007230 <HAL_RCC_OscConfig+0x298>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a7c      	ldr	r2, [pc, #496]	; (8007230 <HAL_RCC_OscConfig+0x298>)
 8007040:	f043 0308 	orr.w	r3, r3, #8
 8007044:	6013      	str	r3, [r2, #0]
 8007046:	4b7a      	ldr	r3, [pc, #488]	; (8007230 <HAL_RCC_OscConfig+0x298>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a1b      	ldr	r3, [r3, #32]
 8007052:	4977      	ldr	r1, [pc, #476]	; (8007230 <HAL_RCC_OscConfig+0x298>)
 8007054:	4313      	orrs	r3, r2
 8007056:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007058:	4b75      	ldr	r3, [pc, #468]	; (8007230 <HAL_RCC_OscConfig+0x298>)
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	69db      	ldr	r3, [r3, #28]
 8007064:	021b      	lsls	r3, r3, #8
 8007066:	4972      	ldr	r1, [pc, #456]	; (8007230 <HAL_RCC_OscConfig+0x298>)
 8007068:	4313      	orrs	r3, r2
 800706a:	604b      	str	r3, [r1, #4]
 800706c:	e025      	b.n	80070ba <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800706e:	4b70      	ldr	r3, [pc, #448]	; (8007230 <HAL_RCC_OscConfig+0x298>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a6f      	ldr	r2, [pc, #444]	; (8007230 <HAL_RCC_OscConfig+0x298>)
 8007074:	f043 0308 	orr.w	r3, r3, #8
 8007078:	6013      	str	r3, [r2, #0]
 800707a:	4b6d      	ldr	r3, [pc, #436]	; (8007230 <HAL_RCC_OscConfig+0x298>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a1b      	ldr	r3, [r3, #32]
 8007086:	496a      	ldr	r1, [pc, #424]	; (8007230 <HAL_RCC_OscConfig+0x298>)
 8007088:	4313      	orrs	r3, r2
 800708a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800708c:	4b68      	ldr	r3, [pc, #416]	; (8007230 <HAL_RCC_OscConfig+0x298>)
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	69db      	ldr	r3, [r3, #28]
 8007098:	021b      	lsls	r3, r3, #8
 800709a:	4965      	ldr	r1, [pc, #404]	; (8007230 <HAL_RCC_OscConfig+0x298>)
 800709c:	4313      	orrs	r3, r2
 800709e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80070a0:	69bb      	ldr	r3, [r7, #24]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d109      	bne.n	80070ba <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6a1b      	ldr	r3, [r3, #32]
 80070aa:	4618      	mov	r0, r3
 80070ac:	f000 fd88 	bl	8007bc0 <RCC_SetFlashLatencyFromMSIRange>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d001      	beq.n	80070ba <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	e38e      	b.n	80077d8 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80070ba:	f000 fcbf 	bl	8007a3c <HAL_RCC_GetSysClockFreq>
 80070be:	4601      	mov	r1, r0
 80070c0:	4b5b      	ldr	r3, [pc, #364]	; (8007230 <HAL_RCC_OscConfig+0x298>)
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	091b      	lsrs	r3, r3, #4
 80070c6:	f003 030f 	and.w	r3, r3, #15
 80070ca:	4a5a      	ldr	r2, [pc, #360]	; (8007234 <HAL_RCC_OscConfig+0x29c>)
 80070cc:	5cd3      	ldrb	r3, [r2, r3]
 80070ce:	f003 031f 	and.w	r3, r3, #31
 80070d2:	fa21 f303 	lsr.w	r3, r1, r3
 80070d6:	4a58      	ldr	r2, [pc, #352]	; (8007238 <HAL_RCC_OscConfig+0x2a0>)
 80070d8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80070da:	4b58      	ldr	r3, [pc, #352]	; (800723c <HAL_RCC_OscConfig+0x2a4>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4618      	mov	r0, r3
 80070e0:	f7fc fe42 	bl	8003d68 <HAL_InitTick>
 80070e4:	4603      	mov	r3, r0
 80070e6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80070e8:	7bfb      	ldrb	r3, [r7, #15]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d052      	beq.n	8007194 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80070ee:	7bfb      	ldrb	r3, [r7, #15]
 80070f0:	e372      	b.n	80077d8 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	699b      	ldr	r3, [r3, #24]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d032      	beq.n	8007160 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80070fa:	4b4d      	ldr	r3, [pc, #308]	; (8007230 <HAL_RCC_OscConfig+0x298>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a4c      	ldr	r2, [pc, #304]	; (8007230 <HAL_RCC_OscConfig+0x298>)
 8007100:	f043 0301 	orr.w	r3, r3, #1
 8007104:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007106:	f7fc fe7f 	bl	8003e08 <HAL_GetTick>
 800710a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800710c:	e008      	b.n	8007120 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800710e:	f7fc fe7b 	bl	8003e08 <HAL_GetTick>
 8007112:	4602      	mov	r2, r0
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	1ad3      	subs	r3, r2, r3
 8007118:	2b02      	cmp	r3, #2
 800711a:	d901      	bls.n	8007120 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800711c:	2303      	movs	r3, #3
 800711e:	e35b      	b.n	80077d8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007120:	4b43      	ldr	r3, [pc, #268]	; (8007230 <HAL_RCC_OscConfig+0x298>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f003 0302 	and.w	r3, r3, #2
 8007128:	2b00      	cmp	r3, #0
 800712a:	d0f0      	beq.n	800710e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800712c:	4b40      	ldr	r3, [pc, #256]	; (8007230 <HAL_RCC_OscConfig+0x298>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a3f      	ldr	r2, [pc, #252]	; (8007230 <HAL_RCC_OscConfig+0x298>)
 8007132:	f043 0308 	orr.w	r3, r3, #8
 8007136:	6013      	str	r3, [r2, #0]
 8007138:	4b3d      	ldr	r3, [pc, #244]	; (8007230 <HAL_RCC_OscConfig+0x298>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6a1b      	ldr	r3, [r3, #32]
 8007144:	493a      	ldr	r1, [pc, #232]	; (8007230 <HAL_RCC_OscConfig+0x298>)
 8007146:	4313      	orrs	r3, r2
 8007148:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800714a:	4b39      	ldr	r3, [pc, #228]	; (8007230 <HAL_RCC_OscConfig+0x298>)
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	69db      	ldr	r3, [r3, #28]
 8007156:	021b      	lsls	r3, r3, #8
 8007158:	4935      	ldr	r1, [pc, #212]	; (8007230 <HAL_RCC_OscConfig+0x298>)
 800715a:	4313      	orrs	r3, r2
 800715c:	604b      	str	r3, [r1, #4]
 800715e:	e01a      	b.n	8007196 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007160:	4b33      	ldr	r3, [pc, #204]	; (8007230 <HAL_RCC_OscConfig+0x298>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a32      	ldr	r2, [pc, #200]	; (8007230 <HAL_RCC_OscConfig+0x298>)
 8007166:	f023 0301 	bic.w	r3, r3, #1
 800716a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800716c:	f7fc fe4c 	bl	8003e08 <HAL_GetTick>
 8007170:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007172:	e008      	b.n	8007186 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007174:	f7fc fe48 	bl	8003e08 <HAL_GetTick>
 8007178:	4602      	mov	r2, r0
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	1ad3      	subs	r3, r2, r3
 800717e:	2b02      	cmp	r3, #2
 8007180:	d901      	bls.n	8007186 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8007182:	2303      	movs	r3, #3
 8007184:	e328      	b.n	80077d8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007186:	4b2a      	ldr	r3, [pc, #168]	; (8007230 <HAL_RCC_OscConfig+0x298>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f003 0302 	and.w	r3, r3, #2
 800718e:	2b00      	cmp	r3, #0
 8007190:	d1f0      	bne.n	8007174 <HAL_RCC_OscConfig+0x1dc>
 8007192:	e000      	b.n	8007196 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007194:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f003 0301 	and.w	r3, r3, #1
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d073      	beq.n	800728a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	2b08      	cmp	r3, #8
 80071a6:	d005      	beq.n	80071b4 <HAL_RCC_OscConfig+0x21c>
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	2b0c      	cmp	r3, #12
 80071ac:	d10e      	bne.n	80071cc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	2b03      	cmp	r3, #3
 80071b2:	d10b      	bne.n	80071cc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071b4:	4b1e      	ldr	r3, [pc, #120]	; (8007230 <HAL_RCC_OscConfig+0x298>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d063      	beq.n	8007288 <HAL_RCC_OscConfig+0x2f0>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d15f      	bne.n	8007288 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	e305      	b.n	80077d8 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071d4:	d106      	bne.n	80071e4 <HAL_RCC_OscConfig+0x24c>
 80071d6:	4b16      	ldr	r3, [pc, #88]	; (8007230 <HAL_RCC_OscConfig+0x298>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a15      	ldr	r2, [pc, #84]	; (8007230 <HAL_RCC_OscConfig+0x298>)
 80071dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071e0:	6013      	str	r3, [r2, #0]
 80071e2:	e01d      	b.n	8007220 <HAL_RCC_OscConfig+0x288>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80071ec:	d10c      	bne.n	8007208 <HAL_RCC_OscConfig+0x270>
 80071ee:	4b10      	ldr	r3, [pc, #64]	; (8007230 <HAL_RCC_OscConfig+0x298>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a0f      	ldr	r2, [pc, #60]	; (8007230 <HAL_RCC_OscConfig+0x298>)
 80071f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80071f8:	6013      	str	r3, [r2, #0]
 80071fa:	4b0d      	ldr	r3, [pc, #52]	; (8007230 <HAL_RCC_OscConfig+0x298>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a0c      	ldr	r2, [pc, #48]	; (8007230 <HAL_RCC_OscConfig+0x298>)
 8007200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007204:	6013      	str	r3, [r2, #0]
 8007206:	e00b      	b.n	8007220 <HAL_RCC_OscConfig+0x288>
 8007208:	4b09      	ldr	r3, [pc, #36]	; (8007230 <HAL_RCC_OscConfig+0x298>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a08      	ldr	r2, [pc, #32]	; (8007230 <HAL_RCC_OscConfig+0x298>)
 800720e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007212:	6013      	str	r3, [r2, #0]
 8007214:	4b06      	ldr	r3, [pc, #24]	; (8007230 <HAL_RCC_OscConfig+0x298>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a05      	ldr	r2, [pc, #20]	; (8007230 <HAL_RCC_OscConfig+0x298>)
 800721a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800721e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d01b      	beq.n	8007260 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007228:	f7fc fdee 	bl	8003e08 <HAL_GetTick>
 800722c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800722e:	e010      	b.n	8007252 <HAL_RCC_OscConfig+0x2ba>
 8007230:	40021000 	.word	0x40021000
 8007234:	0800ffcc 	.word	0x0800ffcc
 8007238:	20000008 	.word	0x20000008
 800723c:	20000010 	.word	0x20000010
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007240:	f7fc fde2 	bl	8003e08 <HAL_GetTick>
 8007244:	4602      	mov	r2, r0
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	1ad3      	subs	r3, r2, r3
 800724a:	2b64      	cmp	r3, #100	; 0x64
 800724c:	d901      	bls.n	8007252 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800724e:	2303      	movs	r3, #3
 8007250:	e2c2      	b.n	80077d8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007252:	4baf      	ldr	r3, [pc, #700]	; (8007510 <HAL_RCC_OscConfig+0x578>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800725a:	2b00      	cmp	r3, #0
 800725c:	d0f0      	beq.n	8007240 <HAL_RCC_OscConfig+0x2a8>
 800725e:	e014      	b.n	800728a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007260:	f7fc fdd2 	bl	8003e08 <HAL_GetTick>
 8007264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007266:	e008      	b.n	800727a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007268:	f7fc fdce 	bl	8003e08 <HAL_GetTick>
 800726c:	4602      	mov	r2, r0
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	1ad3      	subs	r3, r2, r3
 8007272:	2b64      	cmp	r3, #100	; 0x64
 8007274:	d901      	bls.n	800727a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007276:	2303      	movs	r3, #3
 8007278:	e2ae      	b.n	80077d8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800727a:	4ba5      	ldr	r3, [pc, #660]	; (8007510 <HAL_RCC_OscConfig+0x578>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007282:	2b00      	cmp	r3, #0
 8007284:	d1f0      	bne.n	8007268 <HAL_RCC_OscConfig+0x2d0>
 8007286:	e000      	b.n	800728a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007288:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 0302 	and.w	r3, r3, #2
 8007292:	2b00      	cmp	r3, #0
 8007294:	d060      	beq.n	8007358 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	2b04      	cmp	r3, #4
 800729a:	d005      	beq.n	80072a8 <HAL_RCC_OscConfig+0x310>
 800729c:	69bb      	ldr	r3, [r7, #24]
 800729e:	2b0c      	cmp	r3, #12
 80072a0:	d119      	bne.n	80072d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	2b02      	cmp	r3, #2
 80072a6:	d116      	bne.n	80072d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80072a8:	4b99      	ldr	r3, [pc, #612]	; (8007510 <HAL_RCC_OscConfig+0x578>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d005      	beq.n	80072c0 <HAL_RCC_OscConfig+0x328>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d101      	bne.n	80072c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	e28b      	b.n	80077d8 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072c0:	4b93      	ldr	r3, [pc, #588]	; (8007510 <HAL_RCC_OscConfig+0x578>)
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	061b      	lsls	r3, r3, #24
 80072ce:	4990      	ldr	r1, [pc, #576]	; (8007510 <HAL_RCC_OscConfig+0x578>)
 80072d0:	4313      	orrs	r3, r2
 80072d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80072d4:	e040      	b.n	8007358 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	68db      	ldr	r3, [r3, #12]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d023      	beq.n	8007326 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80072de:	4b8c      	ldr	r3, [pc, #560]	; (8007510 <HAL_RCC_OscConfig+0x578>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a8b      	ldr	r2, [pc, #556]	; (8007510 <HAL_RCC_OscConfig+0x578>)
 80072e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072ea:	f7fc fd8d 	bl	8003e08 <HAL_GetTick>
 80072ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80072f0:	e008      	b.n	8007304 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80072f2:	f7fc fd89 	bl	8003e08 <HAL_GetTick>
 80072f6:	4602      	mov	r2, r0
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	1ad3      	subs	r3, r2, r3
 80072fc:	2b02      	cmp	r3, #2
 80072fe:	d901      	bls.n	8007304 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007300:	2303      	movs	r3, #3
 8007302:	e269      	b.n	80077d8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007304:	4b82      	ldr	r3, [pc, #520]	; (8007510 <HAL_RCC_OscConfig+0x578>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800730c:	2b00      	cmp	r3, #0
 800730e:	d0f0      	beq.n	80072f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007310:	4b7f      	ldr	r3, [pc, #508]	; (8007510 <HAL_RCC_OscConfig+0x578>)
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	691b      	ldr	r3, [r3, #16]
 800731c:	061b      	lsls	r3, r3, #24
 800731e:	497c      	ldr	r1, [pc, #496]	; (8007510 <HAL_RCC_OscConfig+0x578>)
 8007320:	4313      	orrs	r3, r2
 8007322:	604b      	str	r3, [r1, #4]
 8007324:	e018      	b.n	8007358 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007326:	4b7a      	ldr	r3, [pc, #488]	; (8007510 <HAL_RCC_OscConfig+0x578>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a79      	ldr	r2, [pc, #484]	; (8007510 <HAL_RCC_OscConfig+0x578>)
 800732c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007330:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007332:	f7fc fd69 	bl	8003e08 <HAL_GetTick>
 8007336:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007338:	e008      	b.n	800734c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800733a:	f7fc fd65 	bl	8003e08 <HAL_GetTick>
 800733e:	4602      	mov	r2, r0
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	1ad3      	subs	r3, r2, r3
 8007344:	2b02      	cmp	r3, #2
 8007346:	d901      	bls.n	800734c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007348:	2303      	movs	r3, #3
 800734a:	e245      	b.n	80077d8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800734c:	4b70      	ldr	r3, [pc, #448]	; (8007510 <HAL_RCC_OscConfig+0x578>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007354:	2b00      	cmp	r3, #0
 8007356:	d1f0      	bne.n	800733a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f003 0308 	and.w	r3, r3, #8
 8007360:	2b00      	cmp	r3, #0
 8007362:	d03c      	beq.n	80073de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	695b      	ldr	r3, [r3, #20]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d01c      	beq.n	80073a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800736c:	4b68      	ldr	r3, [pc, #416]	; (8007510 <HAL_RCC_OscConfig+0x578>)
 800736e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007372:	4a67      	ldr	r2, [pc, #412]	; (8007510 <HAL_RCC_OscConfig+0x578>)
 8007374:	f043 0301 	orr.w	r3, r3, #1
 8007378:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800737c:	f7fc fd44 	bl	8003e08 <HAL_GetTick>
 8007380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007382:	e008      	b.n	8007396 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007384:	f7fc fd40 	bl	8003e08 <HAL_GetTick>
 8007388:	4602      	mov	r2, r0
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	1ad3      	subs	r3, r2, r3
 800738e:	2b02      	cmp	r3, #2
 8007390:	d901      	bls.n	8007396 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007392:	2303      	movs	r3, #3
 8007394:	e220      	b.n	80077d8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007396:	4b5e      	ldr	r3, [pc, #376]	; (8007510 <HAL_RCC_OscConfig+0x578>)
 8007398:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800739c:	f003 0302 	and.w	r3, r3, #2
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d0ef      	beq.n	8007384 <HAL_RCC_OscConfig+0x3ec>
 80073a4:	e01b      	b.n	80073de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80073a6:	4b5a      	ldr	r3, [pc, #360]	; (8007510 <HAL_RCC_OscConfig+0x578>)
 80073a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073ac:	4a58      	ldr	r2, [pc, #352]	; (8007510 <HAL_RCC_OscConfig+0x578>)
 80073ae:	f023 0301 	bic.w	r3, r3, #1
 80073b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073b6:	f7fc fd27 	bl	8003e08 <HAL_GetTick>
 80073ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80073bc:	e008      	b.n	80073d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80073be:	f7fc fd23 	bl	8003e08 <HAL_GetTick>
 80073c2:	4602      	mov	r2, r0
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	1ad3      	subs	r3, r2, r3
 80073c8:	2b02      	cmp	r3, #2
 80073ca:	d901      	bls.n	80073d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80073cc:	2303      	movs	r3, #3
 80073ce:	e203      	b.n	80077d8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80073d0:	4b4f      	ldr	r3, [pc, #316]	; (8007510 <HAL_RCC_OscConfig+0x578>)
 80073d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073d6:	f003 0302 	and.w	r3, r3, #2
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d1ef      	bne.n	80073be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f003 0304 	and.w	r3, r3, #4
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	f000 80a6 	beq.w	8007538 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80073ec:	2300      	movs	r3, #0
 80073ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80073f0:	4b47      	ldr	r3, [pc, #284]	; (8007510 <HAL_RCC_OscConfig+0x578>)
 80073f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d10d      	bne.n	8007418 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073fc:	4b44      	ldr	r3, [pc, #272]	; (8007510 <HAL_RCC_OscConfig+0x578>)
 80073fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007400:	4a43      	ldr	r2, [pc, #268]	; (8007510 <HAL_RCC_OscConfig+0x578>)
 8007402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007406:	6593      	str	r3, [r2, #88]	; 0x58
 8007408:	4b41      	ldr	r3, [pc, #260]	; (8007510 <HAL_RCC_OscConfig+0x578>)
 800740a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800740c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007410:	60bb      	str	r3, [r7, #8]
 8007412:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007414:	2301      	movs	r3, #1
 8007416:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007418:	4b3e      	ldr	r3, [pc, #248]	; (8007514 <HAL_RCC_OscConfig+0x57c>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007420:	2b00      	cmp	r3, #0
 8007422:	d118      	bne.n	8007456 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007424:	4b3b      	ldr	r3, [pc, #236]	; (8007514 <HAL_RCC_OscConfig+0x57c>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a3a      	ldr	r2, [pc, #232]	; (8007514 <HAL_RCC_OscConfig+0x57c>)
 800742a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800742e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007430:	f7fc fcea 	bl	8003e08 <HAL_GetTick>
 8007434:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007436:	e008      	b.n	800744a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007438:	f7fc fce6 	bl	8003e08 <HAL_GetTick>
 800743c:	4602      	mov	r2, r0
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	2b02      	cmp	r3, #2
 8007444:	d901      	bls.n	800744a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007446:	2303      	movs	r3, #3
 8007448:	e1c6      	b.n	80077d8 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800744a:	4b32      	ldr	r3, [pc, #200]	; (8007514 <HAL_RCC_OscConfig+0x57c>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007452:	2b00      	cmp	r3, #0
 8007454:	d0f0      	beq.n	8007438 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	2b01      	cmp	r3, #1
 800745c:	d108      	bne.n	8007470 <HAL_RCC_OscConfig+0x4d8>
 800745e:	4b2c      	ldr	r3, [pc, #176]	; (8007510 <HAL_RCC_OscConfig+0x578>)
 8007460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007464:	4a2a      	ldr	r2, [pc, #168]	; (8007510 <HAL_RCC_OscConfig+0x578>)
 8007466:	f043 0301 	orr.w	r3, r3, #1
 800746a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800746e:	e024      	b.n	80074ba <HAL_RCC_OscConfig+0x522>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	2b05      	cmp	r3, #5
 8007476:	d110      	bne.n	800749a <HAL_RCC_OscConfig+0x502>
 8007478:	4b25      	ldr	r3, [pc, #148]	; (8007510 <HAL_RCC_OscConfig+0x578>)
 800747a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800747e:	4a24      	ldr	r2, [pc, #144]	; (8007510 <HAL_RCC_OscConfig+0x578>)
 8007480:	f043 0304 	orr.w	r3, r3, #4
 8007484:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007488:	4b21      	ldr	r3, [pc, #132]	; (8007510 <HAL_RCC_OscConfig+0x578>)
 800748a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800748e:	4a20      	ldr	r2, [pc, #128]	; (8007510 <HAL_RCC_OscConfig+0x578>)
 8007490:	f043 0301 	orr.w	r3, r3, #1
 8007494:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007498:	e00f      	b.n	80074ba <HAL_RCC_OscConfig+0x522>
 800749a:	4b1d      	ldr	r3, [pc, #116]	; (8007510 <HAL_RCC_OscConfig+0x578>)
 800749c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074a0:	4a1b      	ldr	r2, [pc, #108]	; (8007510 <HAL_RCC_OscConfig+0x578>)
 80074a2:	f023 0301 	bic.w	r3, r3, #1
 80074a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80074aa:	4b19      	ldr	r3, [pc, #100]	; (8007510 <HAL_RCC_OscConfig+0x578>)
 80074ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074b0:	4a17      	ldr	r2, [pc, #92]	; (8007510 <HAL_RCC_OscConfig+0x578>)
 80074b2:	f023 0304 	bic.w	r3, r3, #4
 80074b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d016      	beq.n	80074f0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074c2:	f7fc fca1 	bl	8003e08 <HAL_GetTick>
 80074c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80074c8:	e00a      	b.n	80074e0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074ca:	f7fc fc9d 	bl	8003e08 <HAL_GetTick>
 80074ce:	4602      	mov	r2, r0
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	1ad3      	subs	r3, r2, r3
 80074d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80074d8:	4293      	cmp	r3, r2
 80074da:	d901      	bls.n	80074e0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80074dc:	2303      	movs	r3, #3
 80074de:	e17b      	b.n	80077d8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80074e0:	4b0b      	ldr	r3, [pc, #44]	; (8007510 <HAL_RCC_OscConfig+0x578>)
 80074e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074e6:	f003 0302 	and.w	r3, r3, #2
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d0ed      	beq.n	80074ca <HAL_RCC_OscConfig+0x532>
 80074ee:	e01a      	b.n	8007526 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074f0:	f7fc fc8a 	bl	8003e08 <HAL_GetTick>
 80074f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80074f6:	e00f      	b.n	8007518 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074f8:	f7fc fc86 	bl	8003e08 <HAL_GetTick>
 80074fc:	4602      	mov	r2, r0
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	1ad3      	subs	r3, r2, r3
 8007502:	f241 3288 	movw	r2, #5000	; 0x1388
 8007506:	4293      	cmp	r3, r2
 8007508:	d906      	bls.n	8007518 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800750a:	2303      	movs	r3, #3
 800750c:	e164      	b.n	80077d8 <HAL_RCC_OscConfig+0x840>
 800750e:	bf00      	nop
 8007510:	40021000 	.word	0x40021000
 8007514:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007518:	4ba8      	ldr	r3, [pc, #672]	; (80077bc <HAL_RCC_OscConfig+0x824>)
 800751a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800751e:	f003 0302 	and.w	r3, r3, #2
 8007522:	2b00      	cmp	r3, #0
 8007524:	d1e8      	bne.n	80074f8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007526:	7ffb      	ldrb	r3, [r7, #31]
 8007528:	2b01      	cmp	r3, #1
 800752a:	d105      	bne.n	8007538 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800752c:	4ba3      	ldr	r3, [pc, #652]	; (80077bc <HAL_RCC_OscConfig+0x824>)
 800752e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007530:	4aa2      	ldr	r2, [pc, #648]	; (80077bc <HAL_RCC_OscConfig+0x824>)
 8007532:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007536:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 0320 	and.w	r3, r3, #32
 8007540:	2b00      	cmp	r3, #0
 8007542:	d03c      	beq.n	80075be <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007548:	2b00      	cmp	r3, #0
 800754a:	d01c      	beq.n	8007586 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800754c:	4b9b      	ldr	r3, [pc, #620]	; (80077bc <HAL_RCC_OscConfig+0x824>)
 800754e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007552:	4a9a      	ldr	r2, [pc, #616]	; (80077bc <HAL_RCC_OscConfig+0x824>)
 8007554:	f043 0301 	orr.w	r3, r3, #1
 8007558:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800755c:	f7fc fc54 	bl	8003e08 <HAL_GetTick>
 8007560:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007562:	e008      	b.n	8007576 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007564:	f7fc fc50 	bl	8003e08 <HAL_GetTick>
 8007568:	4602      	mov	r2, r0
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	2b02      	cmp	r3, #2
 8007570:	d901      	bls.n	8007576 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8007572:	2303      	movs	r3, #3
 8007574:	e130      	b.n	80077d8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007576:	4b91      	ldr	r3, [pc, #580]	; (80077bc <HAL_RCC_OscConfig+0x824>)
 8007578:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800757c:	f003 0302 	and.w	r3, r3, #2
 8007580:	2b00      	cmp	r3, #0
 8007582:	d0ef      	beq.n	8007564 <HAL_RCC_OscConfig+0x5cc>
 8007584:	e01b      	b.n	80075be <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007586:	4b8d      	ldr	r3, [pc, #564]	; (80077bc <HAL_RCC_OscConfig+0x824>)
 8007588:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800758c:	4a8b      	ldr	r2, [pc, #556]	; (80077bc <HAL_RCC_OscConfig+0x824>)
 800758e:	f023 0301 	bic.w	r3, r3, #1
 8007592:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007596:	f7fc fc37 	bl	8003e08 <HAL_GetTick>
 800759a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800759c:	e008      	b.n	80075b0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800759e:	f7fc fc33 	bl	8003e08 <HAL_GetTick>
 80075a2:	4602      	mov	r2, r0
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	1ad3      	subs	r3, r2, r3
 80075a8:	2b02      	cmp	r3, #2
 80075aa:	d901      	bls.n	80075b0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80075ac:	2303      	movs	r3, #3
 80075ae:	e113      	b.n	80077d8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80075b0:	4b82      	ldr	r3, [pc, #520]	; (80077bc <HAL_RCC_OscConfig+0x824>)
 80075b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80075b6:	f003 0302 	and.w	r3, r3, #2
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d1ef      	bne.n	800759e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	f000 8107 	beq.w	80077d6 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075cc:	2b02      	cmp	r3, #2
 80075ce:	f040 80cb 	bne.w	8007768 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80075d2:	4b7a      	ldr	r3, [pc, #488]	; (80077bc <HAL_RCC_OscConfig+0x824>)
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	f003 0203 	and.w	r2, r3, #3
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d12c      	bne.n	8007640 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f0:	3b01      	subs	r3, #1
 80075f2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d123      	bne.n	8007640 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007602:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007604:	429a      	cmp	r2, r3
 8007606:	d11b      	bne.n	8007640 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007612:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007614:	429a      	cmp	r2, r3
 8007616:	d113      	bne.n	8007640 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007622:	085b      	lsrs	r3, r3, #1
 8007624:	3b01      	subs	r3, #1
 8007626:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007628:	429a      	cmp	r2, r3
 800762a:	d109      	bne.n	8007640 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007636:	085b      	lsrs	r3, r3, #1
 8007638:	3b01      	subs	r3, #1
 800763a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800763c:	429a      	cmp	r2, r3
 800763e:	d06d      	beq.n	800771c <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	2b0c      	cmp	r3, #12
 8007644:	d068      	beq.n	8007718 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007646:	4b5d      	ldr	r3, [pc, #372]	; (80077bc <HAL_RCC_OscConfig+0x824>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800764e:	2b00      	cmp	r3, #0
 8007650:	d105      	bne.n	800765e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8007652:	4b5a      	ldr	r3, [pc, #360]	; (80077bc <HAL_RCC_OscConfig+0x824>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800765a:	2b00      	cmp	r3, #0
 800765c:	d001      	beq.n	8007662 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	e0ba      	b.n	80077d8 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007662:	4b56      	ldr	r3, [pc, #344]	; (80077bc <HAL_RCC_OscConfig+0x824>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a55      	ldr	r2, [pc, #340]	; (80077bc <HAL_RCC_OscConfig+0x824>)
 8007668:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800766c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800766e:	f7fc fbcb 	bl	8003e08 <HAL_GetTick>
 8007672:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007674:	e008      	b.n	8007688 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007676:	f7fc fbc7 	bl	8003e08 <HAL_GetTick>
 800767a:	4602      	mov	r2, r0
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	1ad3      	subs	r3, r2, r3
 8007680:	2b02      	cmp	r3, #2
 8007682:	d901      	bls.n	8007688 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8007684:	2303      	movs	r3, #3
 8007686:	e0a7      	b.n	80077d8 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007688:	4b4c      	ldr	r3, [pc, #304]	; (80077bc <HAL_RCC_OscConfig+0x824>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007690:	2b00      	cmp	r3, #0
 8007692:	d1f0      	bne.n	8007676 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007694:	4b49      	ldr	r3, [pc, #292]	; (80077bc <HAL_RCC_OscConfig+0x824>)
 8007696:	68da      	ldr	r2, [r3, #12]
 8007698:	4b49      	ldr	r3, [pc, #292]	; (80077c0 <HAL_RCC_OscConfig+0x828>)
 800769a:	4013      	ands	r3, r2
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80076a4:	3a01      	subs	r2, #1
 80076a6:	0112      	lsls	r2, r2, #4
 80076a8:	4311      	orrs	r1, r2
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80076ae:	0212      	lsls	r2, r2, #8
 80076b0:	4311      	orrs	r1, r2
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80076b6:	0852      	lsrs	r2, r2, #1
 80076b8:	3a01      	subs	r2, #1
 80076ba:	0552      	lsls	r2, r2, #21
 80076bc:	4311      	orrs	r1, r2
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80076c2:	0852      	lsrs	r2, r2, #1
 80076c4:	3a01      	subs	r2, #1
 80076c6:	0652      	lsls	r2, r2, #25
 80076c8:	4311      	orrs	r1, r2
 80076ca:	687a      	ldr	r2, [r7, #4]
 80076cc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80076ce:	06d2      	lsls	r2, r2, #27
 80076d0:	430a      	orrs	r2, r1
 80076d2:	493a      	ldr	r1, [pc, #232]	; (80077bc <HAL_RCC_OscConfig+0x824>)
 80076d4:	4313      	orrs	r3, r2
 80076d6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80076d8:	4b38      	ldr	r3, [pc, #224]	; (80077bc <HAL_RCC_OscConfig+0x824>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a37      	ldr	r2, [pc, #220]	; (80077bc <HAL_RCC_OscConfig+0x824>)
 80076de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076e2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80076e4:	4b35      	ldr	r3, [pc, #212]	; (80077bc <HAL_RCC_OscConfig+0x824>)
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	4a34      	ldr	r2, [pc, #208]	; (80077bc <HAL_RCC_OscConfig+0x824>)
 80076ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076ee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80076f0:	f7fc fb8a 	bl	8003e08 <HAL_GetTick>
 80076f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80076f6:	e008      	b.n	800770a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076f8:	f7fc fb86 	bl	8003e08 <HAL_GetTick>
 80076fc:	4602      	mov	r2, r0
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	1ad3      	subs	r3, r2, r3
 8007702:	2b02      	cmp	r3, #2
 8007704:	d901      	bls.n	800770a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8007706:	2303      	movs	r3, #3
 8007708:	e066      	b.n	80077d8 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800770a:	4b2c      	ldr	r3, [pc, #176]	; (80077bc <HAL_RCC_OscConfig+0x824>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007712:	2b00      	cmp	r3, #0
 8007714:	d0f0      	beq.n	80076f8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007716:	e05e      	b.n	80077d6 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007718:	2301      	movs	r3, #1
 800771a:	e05d      	b.n	80077d8 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800771c:	4b27      	ldr	r3, [pc, #156]	; (80077bc <HAL_RCC_OscConfig+0x824>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007724:	2b00      	cmp	r3, #0
 8007726:	d156      	bne.n	80077d6 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007728:	4b24      	ldr	r3, [pc, #144]	; (80077bc <HAL_RCC_OscConfig+0x824>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a23      	ldr	r2, [pc, #140]	; (80077bc <HAL_RCC_OscConfig+0x824>)
 800772e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007732:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007734:	4b21      	ldr	r3, [pc, #132]	; (80077bc <HAL_RCC_OscConfig+0x824>)
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	4a20      	ldr	r2, [pc, #128]	; (80077bc <HAL_RCC_OscConfig+0x824>)
 800773a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800773e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007740:	f7fc fb62 	bl	8003e08 <HAL_GetTick>
 8007744:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007746:	e008      	b.n	800775a <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007748:	f7fc fb5e 	bl	8003e08 <HAL_GetTick>
 800774c:	4602      	mov	r2, r0
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	1ad3      	subs	r3, r2, r3
 8007752:	2b02      	cmp	r3, #2
 8007754:	d901      	bls.n	800775a <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8007756:	2303      	movs	r3, #3
 8007758:	e03e      	b.n	80077d8 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800775a:	4b18      	ldr	r3, [pc, #96]	; (80077bc <HAL_RCC_OscConfig+0x824>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007762:	2b00      	cmp	r3, #0
 8007764:	d0f0      	beq.n	8007748 <HAL_RCC_OscConfig+0x7b0>
 8007766:	e036      	b.n	80077d6 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007768:	69bb      	ldr	r3, [r7, #24]
 800776a:	2b0c      	cmp	r3, #12
 800776c:	d031      	beq.n	80077d2 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800776e:	4b13      	ldr	r3, [pc, #76]	; (80077bc <HAL_RCC_OscConfig+0x824>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a12      	ldr	r2, [pc, #72]	; (80077bc <HAL_RCC_OscConfig+0x824>)
 8007774:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007778:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800777a:	4b10      	ldr	r3, [pc, #64]	; (80077bc <HAL_RCC_OscConfig+0x824>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8007782:	2b00      	cmp	r3, #0
 8007784:	d105      	bne.n	8007792 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007786:	4b0d      	ldr	r3, [pc, #52]	; (80077bc <HAL_RCC_OscConfig+0x824>)
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	4a0c      	ldr	r2, [pc, #48]	; (80077bc <HAL_RCC_OscConfig+0x824>)
 800778c:	f023 0303 	bic.w	r3, r3, #3
 8007790:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007792:	4b0a      	ldr	r3, [pc, #40]	; (80077bc <HAL_RCC_OscConfig+0x824>)
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	4a09      	ldr	r2, [pc, #36]	; (80077bc <HAL_RCC_OscConfig+0x824>)
 8007798:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800779c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077a0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077a2:	f7fc fb31 	bl	8003e08 <HAL_GetTick>
 80077a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80077a8:	e00c      	b.n	80077c4 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077aa:	f7fc fb2d 	bl	8003e08 <HAL_GetTick>
 80077ae:	4602      	mov	r2, r0
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	1ad3      	subs	r3, r2, r3
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	d905      	bls.n	80077c4 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80077b8:	2303      	movs	r3, #3
 80077ba:	e00d      	b.n	80077d8 <HAL_RCC_OscConfig+0x840>
 80077bc:	40021000 	.word	0x40021000
 80077c0:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80077c4:	4b06      	ldr	r3, [pc, #24]	; (80077e0 <HAL_RCC_OscConfig+0x848>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d1ec      	bne.n	80077aa <HAL_RCC_OscConfig+0x812>
 80077d0:	e001      	b.n	80077d6 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	e000      	b.n	80077d8 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 80077d6:	2300      	movs	r3, #0
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3720      	adds	r7, #32
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}
 80077e0:	40021000 	.word	0x40021000

080077e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b086      	sub	sp, #24
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80077ee:	2300      	movs	r3, #0
 80077f0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d101      	bne.n	80077fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	e10f      	b.n	8007a1c <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80077fc:	4b89      	ldr	r3, [pc, #548]	; (8007a24 <HAL_RCC_ClockConfig+0x240>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f003 030f 	and.w	r3, r3, #15
 8007804:	683a      	ldr	r2, [r7, #0]
 8007806:	429a      	cmp	r2, r3
 8007808:	d910      	bls.n	800782c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800780a:	4b86      	ldr	r3, [pc, #536]	; (8007a24 <HAL_RCC_ClockConfig+0x240>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f023 020f 	bic.w	r2, r3, #15
 8007812:	4984      	ldr	r1, [pc, #528]	; (8007a24 <HAL_RCC_ClockConfig+0x240>)
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	4313      	orrs	r3, r2
 8007818:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800781a:	4b82      	ldr	r3, [pc, #520]	; (8007a24 <HAL_RCC_ClockConfig+0x240>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f003 030f 	and.w	r3, r3, #15
 8007822:	683a      	ldr	r2, [r7, #0]
 8007824:	429a      	cmp	r2, r3
 8007826:	d001      	beq.n	800782c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	e0f7      	b.n	8007a1c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f003 0301 	and.w	r3, r3, #1
 8007834:	2b00      	cmp	r3, #0
 8007836:	f000 8089 	beq.w	800794c <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	2b03      	cmp	r3, #3
 8007840:	d133      	bne.n	80078aa <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007842:	4b79      	ldr	r3, [pc, #484]	; (8007a28 <HAL_RCC_ClockConfig+0x244>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800784a:	2b00      	cmp	r3, #0
 800784c:	d101      	bne.n	8007852 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800784e:	2301      	movs	r3, #1
 8007850:	e0e4      	b.n	8007a1c <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8007852:	f000 fa0f 	bl	8007c74 <RCC_GetSysClockFreqFromPLLSource>
 8007856:	4602      	mov	r2, r0
 8007858:	4b74      	ldr	r3, [pc, #464]	; (8007a2c <HAL_RCC_ClockConfig+0x248>)
 800785a:	429a      	cmp	r2, r3
 800785c:	d955      	bls.n	800790a <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800785e:	4b72      	ldr	r3, [pc, #456]	; (8007a28 <HAL_RCC_ClockConfig+0x244>)
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007866:	2b00      	cmp	r3, #0
 8007868:	d10a      	bne.n	8007880 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800786a:	4b6f      	ldr	r3, [pc, #444]	; (8007a28 <HAL_RCC_ClockConfig+0x244>)
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007872:	4a6d      	ldr	r2, [pc, #436]	; (8007a28 <HAL_RCC_ClockConfig+0x244>)
 8007874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007878:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800787a:	2380      	movs	r3, #128	; 0x80
 800787c:	617b      	str	r3, [r7, #20]
 800787e:	e044      	b.n	800790a <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f003 0302 	and.w	r3, r3, #2
 8007888:	2b00      	cmp	r3, #0
 800788a:	d03e      	beq.n	800790a <HAL_RCC_ClockConfig+0x126>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d13a      	bne.n	800790a <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007894:	4b64      	ldr	r3, [pc, #400]	; (8007a28 <HAL_RCC_ClockConfig+0x244>)
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800789c:	4a62      	ldr	r2, [pc, #392]	; (8007a28 <HAL_RCC_ClockConfig+0x244>)
 800789e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078a2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80078a4:	2380      	movs	r3, #128	; 0x80
 80078a6:	617b      	str	r3, [r7, #20]
 80078a8:	e02f      	b.n	800790a <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	2b02      	cmp	r3, #2
 80078b0:	d107      	bne.n	80078c2 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80078b2:	4b5d      	ldr	r3, [pc, #372]	; (8007a28 <HAL_RCC_ClockConfig+0x244>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d115      	bne.n	80078ea <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	e0ac      	b.n	8007a1c <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d107      	bne.n	80078da <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80078ca:	4b57      	ldr	r3, [pc, #348]	; (8007a28 <HAL_RCC_ClockConfig+0x244>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f003 0302 	and.w	r3, r3, #2
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d109      	bne.n	80078ea <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80078d6:	2301      	movs	r3, #1
 80078d8:	e0a0      	b.n	8007a1c <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80078da:	4b53      	ldr	r3, [pc, #332]	; (8007a28 <HAL_RCC_ClockConfig+0x244>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d101      	bne.n	80078ea <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	e098      	b.n	8007a1c <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80078ea:	f000 f8a7 	bl	8007a3c <HAL_RCC_GetSysClockFreq>
 80078ee:	4602      	mov	r2, r0
 80078f0:	4b4e      	ldr	r3, [pc, #312]	; (8007a2c <HAL_RCC_ClockConfig+0x248>)
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d909      	bls.n	800790a <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80078f6:	4b4c      	ldr	r3, [pc, #304]	; (8007a28 <HAL_RCC_ClockConfig+0x244>)
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80078fe:	4a4a      	ldr	r2, [pc, #296]	; (8007a28 <HAL_RCC_ClockConfig+0x244>)
 8007900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007904:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007906:	2380      	movs	r3, #128	; 0x80
 8007908:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800790a:	4b47      	ldr	r3, [pc, #284]	; (8007a28 <HAL_RCC_ClockConfig+0x244>)
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	f023 0203 	bic.w	r2, r3, #3
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	4944      	ldr	r1, [pc, #272]	; (8007a28 <HAL_RCC_ClockConfig+0x244>)
 8007918:	4313      	orrs	r3, r2
 800791a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800791c:	f7fc fa74 	bl	8003e08 <HAL_GetTick>
 8007920:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007922:	e00a      	b.n	800793a <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007924:	f7fc fa70 	bl	8003e08 <HAL_GetTick>
 8007928:	4602      	mov	r2, r0
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	1ad3      	subs	r3, r2, r3
 800792e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007932:	4293      	cmp	r3, r2
 8007934:	d901      	bls.n	800793a <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8007936:	2303      	movs	r3, #3
 8007938:	e070      	b.n	8007a1c <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800793a:	4b3b      	ldr	r3, [pc, #236]	; (8007a28 <HAL_RCC_ClockConfig+0x244>)
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	f003 020c 	and.w	r2, r3, #12
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	429a      	cmp	r2, r3
 800794a:	d1eb      	bne.n	8007924 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f003 0302 	and.w	r3, r3, #2
 8007954:	2b00      	cmp	r3, #0
 8007956:	d009      	beq.n	800796c <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007958:	4b33      	ldr	r3, [pc, #204]	; (8007a28 <HAL_RCC_ClockConfig+0x244>)
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	4930      	ldr	r1, [pc, #192]	; (8007a28 <HAL_RCC_ClockConfig+0x244>)
 8007966:	4313      	orrs	r3, r2
 8007968:	608b      	str	r3, [r1, #8]
 800796a:	e008      	b.n	800797e <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	2b80      	cmp	r3, #128	; 0x80
 8007970:	d105      	bne.n	800797e <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007972:	4b2d      	ldr	r3, [pc, #180]	; (8007a28 <HAL_RCC_ClockConfig+0x244>)
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	4a2c      	ldr	r2, [pc, #176]	; (8007a28 <HAL_RCC_ClockConfig+0x244>)
 8007978:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800797c:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800797e:	4b29      	ldr	r3, [pc, #164]	; (8007a24 <HAL_RCC_ClockConfig+0x240>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f003 030f 	and.w	r3, r3, #15
 8007986:	683a      	ldr	r2, [r7, #0]
 8007988:	429a      	cmp	r2, r3
 800798a:	d210      	bcs.n	80079ae <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800798c:	4b25      	ldr	r3, [pc, #148]	; (8007a24 <HAL_RCC_ClockConfig+0x240>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f023 020f 	bic.w	r2, r3, #15
 8007994:	4923      	ldr	r1, [pc, #140]	; (8007a24 <HAL_RCC_ClockConfig+0x240>)
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	4313      	orrs	r3, r2
 800799a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800799c:	4b21      	ldr	r3, [pc, #132]	; (8007a24 <HAL_RCC_ClockConfig+0x240>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f003 030f 	and.w	r3, r3, #15
 80079a4:	683a      	ldr	r2, [r7, #0]
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d001      	beq.n	80079ae <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	e036      	b.n	8007a1c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f003 0304 	and.w	r3, r3, #4
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d008      	beq.n	80079cc <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80079ba:	4b1b      	ldr	r3, [pc, #108]	; (8007a28 <HAL_RCC_ClockConfig+0x244>)
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	68db      	ldr	r3, [r3, #12]
 80079c6:	4918      	ldr	r1, [pc, #96]	; (8007a28 <HAL_RCC_ClockConfig+0x244>)
 80079c8:	4313      	orrs	r3, r2
 80079ca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f003 0308 	and.w	r3, r3, #8
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d009      	beq.n	80079ec <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80079d8:	4b13      	ldr	r3, [pc, #76]	; (8007a28 <HAL_RCC_ClockConfig+0x244>)
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	691b      	ldr	r3, [r3, #16]
 80079e4:	00db      	lsls	r3, r3, #3
 80079e6:	4910      	ldr	r1, [pc, #64]	; (8007a28 <HAL_RCC_ClockConfig+0x244>)
 80079e8:	4313      	orrs	r3, r2
 80079ea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80079ec:	f000 f826 	bl	8007a3c <HAL_RCC_GetSysClockFreq>
 80079f0:	4601      	mov	r1, r0
 80079f2:	4b0d      	ldr	r3, [pc, #52]	; (8007a28 <HAL_RCC_ClockConfig+0x244>)
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	091b      	lsrs	r3, r3, #4
 80079f8:	f003 030f 	and.w	r3, r3, #15
 80079fc:	4a0c      	ldr	r2, [pc, #48]	; (8007a30 <HAL_RCC_ClockConfig+0x24c>)
 80079fe:	5cd3      	ldrb	r3, [r2, r3]
 8007a00:	f003 031f 	and.w	r3, r3, #31
 8007a04:	fa21 f303 	lsr.w	r3, r1, r3
 8007a08:	4a0a      	ldr	r2, [pc, #40]	; (8007a34 <HAL_RCC_ClockConfig+0x250>)
 8007a0a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007a0c:	4b0a      	ldr	r3, [pc, #40]	; (8007a38 <HAL_RCC_ClockConfig+0x254>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7fc f9a9 	bl	8003d68 <HAL_InitTick>
 8007a16:	4603      	mov	r3, r0
 8007a18:	73fb      	strb	r3, [r7, #15]

  return status;
 8007a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3718      	adds	r7, #24
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	40022000 	.word	0x40022000
 8007a28:	40021000 	.word	0x40021000
 8007a2c:	04c4b400 	.word	0x04c4b400
 8007a30:	0800ffcc 	.word	0x0800ffcc
 8007a34:	20000008 	.word	0x20000008
 8007a38:	20000010 	.word	0x20000010

08007a3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b089      	sub	sp, #36	; 0x24
 8007a40:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007a42:	2300      	movs	r3, #0
 8007a44:	61fb      	str	r3, [r7, #28]
 8007a46:	2300      	movs	r3, #0
 8007a48:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a4a:	4b3d      	ldr	r3, [pc, #244]	; (8007b40 <HAL_RCC_GetSysClockFreq+0x104>)
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	f003 030c 	and.w	r3, r3, #12
 8007a52:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007a54:	4b3a      	ldr	r3, [pc, #232]	; (8007b40 <HAL_RCC_GetSysClockFreq+0x104>)
 8007a56:	68db      	ldr	r3, [r3, #12]
 8007a58:	f003 0303 	and.w	r3, r3, #3
 8007a5c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d005      	beq.n	8007a70 <HAL_RCC_GetSysClockFreq+0x34>
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	2b0c      	cmp	r3, #12
 8007a68:	d121      	bne.n	8007aae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d11e      	bne.n	8007aae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007a70:	4b33      	ldr	r3, [pc, #204]	; (8007b40 <HAL_RCC_GetSysClockFreq+0x104>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f003 0308 	and.w	r3, r3, #8
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d107      	bne.n	8007a8c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007a7c:	4b30      	ldr	r3, [pc, #192]	; (8007b40 <HAL_RCC_GetSysClockFreq+0x104>)
 8007a7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a82:	0a1b      	lsrs	r3, r3, #8
 8007a84:	f003 030f 	and.w	r3, r3, #15
 8007a88:	61fb      	str	r3, [r7, #28]
 8007a8a:	e005      	b.n	8007a98 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007a8c:	4b2c      	ldr	r3, [pc, #176]	; (8007b40 <HAL_RCC_GetSysClockFreq+0x104>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	091b      	lsrs	r3, r3, #4
 8007a92:	f003 030f 	and.w	r3, r3, #15
 8007a96:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007a98:	4a2a      	ldr	r2, [pc, #168]	; (8007b44 <HAL_RCC_GetSysClockFreq+0x108>)
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007aa0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d10d      	bne.n	8007ac4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007aa8:	69fb      	ldr	r3, [r7, #28]
 8007aaa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007aac:	e00a      	b.n	8007ac4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	2b04      	cmp	r3, #4
 8007ab2:	d102      	bne.n	8007aba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007ab4:	4b24      	ldr	r3, [pc, #144]	; (8007b48 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007ab6:	61bb      	str	r3, [r7, #24]
 8007ab8:	e004      	b.n	8007ac4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	2b08      	cmp	r3, #8
 8007abe:	d101      	bne.n	8007ac4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007ac0:	4b22      	ldr	r3, [pc, #136]	; (8007b4c <HAL_RCC_GetSysClockFreq+0x110>)
 8007ac2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	2b0c      	cmp	r3, #12
 8007ac8:	d133      	bne.n	8007b32 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007aca:	4b1d      	ldr	r3, [pc, #116]	; (8007b40 <HAL_RCC_GetSysClockFreq+0x104>)
 8007acc:	68db      	ldr	r3, [r3, #12]
 8007ace:	f003 0303 	and.w	r3, r3, #3
 8007ad2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	2b02      	cmp	r3, #2
 8007ad8:	d002      	beq.n	8007ae0 <HAL_RCC_GetSysClockFreq+0xa4>
 8007ada:	2b03      	cmp	r3, #3
 8007adc:	d003      	beq.n	8007ae6 <HAL_RCC_GetSysClockFreq+0xaa>
 8007ade:	e005      	b.n	8007aec <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007ae0:	4b19      	ldr	r3, [pc, #100]	; (8007b48 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007ae2:	617b      	str	r3, [r7, #20]
      break;
 8007ae4:	e005      	b.n	8007af2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007ae6:	4b19      	ldr	r3, [pc, #100]	; (8007b4c <HAL_RCC_GetSysClockFreq+0x110>)
 8007ae8:	617b      	str	r3, [r7, #20]
      break;
 8007aea:	e002      	b.n	8007af2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007aec:	69fb      	ldr	r3, [r7, #28]
 8007aee:	617b      	str	r3, [r7, #20]
      break;
 8007af0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007af2:	4b13      	ldr	r3, [pc, #76]	; (8007b40 <HAL_RCC_GetSysClockFreq+0x104>)
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	091b      	lsrs	r3, r3, #4
 8007af8:	f003 030f 	and.w	r3, r3, #15
 8007afc:	3301      	adds	r3, #1
 8007afe:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007b00:	4b0f      	ldr	r3, [pc, #60]	; (8007b40 <HAL_RCC_GetSysClockFreq+0x104>)
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	0a1b      	lsrs	r3, r3, #8
 8007b06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b0a:	697a      	ldr	r2, [r7, #20]
 8007b0c:	fb02 f203 	mul.w	r2, r2, r3
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b16:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007b18:	4b09      	ldr	r3, [pc, #36]	; (8007b40 <HAL_RCC_GetSysClockFreq+0x104>)
 8007b1a:	68db      	ldr	r3, [r3, #12]
 8007b1c:	0e5b      	lsrs	r3, r3, #25
 8007b1e:	f003 0303 	and.w	r3, r3, #3
 8007b22:	3301      	adds	r3, #1
 8007b24:	005b      	lsls	r3, r3, #1
 8007b26:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007b28:	697a      	ldr	r2, [r7, #20]
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b30:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007b32:	69bb      	ldr	r3, [r7, #24]
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3724      	adds	r7, #36	; 0x24
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr
 8007b40:	40021000 	.word	0x40021000
 8007b44:	0800ffe4 	.word	0x0800ffe4
 8007b48:	00f42400 	.word	0x00f42400
 8007b4c:	007a1200 	.word	0x007a1200

08007b50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b50:	b480      	push	{r7}
 8007b52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b54:	4b03      	ldr	r3, [pc, #12]	; (8007b64 <HAL_RCC_GetHCLKFreq+0x14>)
 8007b56:	681b      	ldr	r3, [r3, #0]
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr
 8007b62:	bf00      	nop
 8007b64:	20000008 	.word	0x20000008

08007b68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007b6c:	f7ff fff0 	bl	8007b50 <HAL_RCC_GetHCLKFreq>
 8007b70:	4601      	mov	r1, r0
 8007b72:	4b06      	ldr	r3, [pc, #24]	; (8007b8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	0a1b      	lsrs	r3, r3, #8
 8007b78:	f003 0307 	and.w	r3, r3, #7
 8007b7c:	4a04      	ldr	r2, [pc, #16]	; (8007b90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007b7e:	5cd3      	ldrb	r3, [r2, r3]
 8007b80:	f003 031f 	and.w	r3, r3, #31
 8007b84:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	bd80      	pop	{r7, pc}
 8007b8c:	40021000 	.word	0x40021000
 8007b90:	0800ffdc 	.word	0x0800ffdc

08007b94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007b98:	f7ff ffda 	bl	8007b50 <HAL_RCC_GetHCLKFreq>
 8007b9c:	4601      	mov	r1, r0
 8007b9e:	4b06      	ldr	r3, [pc, #24]	; (8007bb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	0adb      	lsrs	r3, r3, #11
 8007ba4:	f003 0307 	and.w	r3, r3, #7
 8007ba8:	4a04      	ldr	r2, [pc, #16]	; (8007bbc <HAL_RCC_GetPCLK2Freq+0x28>)
 8007baa:	5cd3      	ldrb	r3, [r2, r3]
 8007bac:	f003 031f 	and.w	r3, r3, #31
 8007bb0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	bd80      	pop	{r7, pc}
 8007bb8:	40021000 	.word	0x40021000
 8007bbc:	0800ffdc 	.word	0x0800ffdc

08007bc0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b086      	sub	sp, #24
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007bc8:	2300      	movs	r3, #0
 8007bca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007bcc:	4b27      	ldr	r3, [pc, #156]	; (8007c6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d003      	beq.n	8007be0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007bd8:	f7ff f91a 	bl	8006e10 <HAL_PWREx_GetVoltageRange>
 8007bdc:	6178      	str	r0, [r7, #20]
 8007bde:	e014      	b.n	8007c0a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007be0:	4b22      	ldr	r3, [pc, #136]	; (8007c6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007be4:	4a21      	ldr	r2, [pc, #132]	; (8007c6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bea:	6593      	str	r3, [r2, #88]	; 0x58
 8007bec:	4b1f      	ldr	r3, [pc, #124]	; (8007c6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bf4:	60fb      	str	r3, [r7, #12]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007bf8:	f7ff f90a 	bl	8006e10 <HAL_PWREx_GetVoltageRange>
 8007bfc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007bfe:	4b1b      	ldr	r3, [pc, #108]	; (8007c6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c02:	4a1a      	ldr	r2, [pc, #104]	; (8007c6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007c04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c08:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c10:	d10b      	bne.n	8007c2a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2b80      	cmp	r3, #128	; 0x80
 8007c16:	d913      	bls.n	8007c40 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2ba0      	cmp	r3, #160	; 0xa0
 8007c1c:	d902      	bls.n	8007c24 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007c1e:	2302      	movs	r3, #2
 8007c20:	613b      	str	r3, [r7, #16]
 8007c22:	e00d      	b.n	8007c40 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007c24:	2301      	movs	r3, #1
 8007c26:	613b      	str	r3, [r7, #16]
 8007c28:	e00a      	b.n	8007c40 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2b7f      	cmp	r3, #127	; 0x7f
 8007c2e:	d902      	bls.n	8007c36 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8007c30:	2302      	movs	r3, #2
 8007c32:	613b      	str	r3, [r7, #16]
 8007c34:	e004      	b.n	8007c40 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2b70      	cmp	r3, #112	; 0x70
 8007c3a:	d101      	bne.n	8007c40 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007c40:	4b0b      	ldr	r3, [pc, #44]	; (8007c70 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f023 020f 	bic.w	r2, r3, #15
 8007c48:	4909      	ldr	r1, [pc, #36]	; (8007c70 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007c50:	4b07      	ldr	r3, [pc, #28]	; (8007c70 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f003 030f 	and.w	r3, r3, #15
 8007c58:	693a      	ldr	r2, [r7, #16]
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d001      	beq.n	8007c62 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	e000      	b.n	8007c64 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8007c62:	2300      	movs	r3, #0
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3718      	adds	r7, #24
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}
 8007c6c:	40021000 	.word	0x40021000
 8007c70:	40022000 	.word	0x40022000

08007c74 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b087      	sub	sp, #28
 8007c78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8007c7e:	4b2d      	ldr	r3, [pc, #180]	; (8007d34 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007c80:	68db      	ldr	r3, [r3, #12]
 8007c82:	f003 0303 	and.w	r3, r3, #3
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	d118      	bne.n	8007cbc <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007c8a:	4b2a      	ldr	r3, [pc, #168]	; (8007d34 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f003 0308 	and.w	r3, r3, #8
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d107      	bne.n	8007ca6 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007c96:	4b27      	ldr	r3, [pc, #156]	; (8007d34 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007c98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c9c:	0a1b      	lsrs	r3, r3, #8
 8007c9e:	f003 030f 	and.w	r3, r3, #15
 8007ca2:	617b      	str	r3, [r7, #20]
 8007ca4:	e005      	b.n	8007cb2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007ca6:	4b23      	ldr	r3, [pc, #140]	; (8007d34 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	091b      	lsrs	r3, r3, #4
 8007cac:	f003 030f 	and.w	r3, r3, #15
 8007cb0:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007cb2:	4a21      	ldr	r2, [pc, #132]	; (8007d38 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cba:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007cbc:	4b1d      	ldr	r3, [pc, #116]	; (8007d34 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	f003 0303 	and.w	r3, r3, #3
 8007cc4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2b02      	cmp	r3, #2
 8007cca:	d002      	beq.n	8007cd2 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8007ccc:	2b03      	cmp	r3, #3
 8007cce:	d003      	beq.n	8007cd8 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8007cd0:	e005      	b.n	8007cde <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8007cd2:	4b1a      	ldr	r3, [pc, #104]	; (8007d3c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8007cd4:	613b      	str	r3, [r7, #16]
    break;
 8007cd6:	e005      	b.n	8007ce4 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8007cd8:	4b19      	ldr	r3, [pc, #100]	; (8007d40 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8007cda:	613b      	str	r3, [r7, #16]
    break;
 8007cdc:	e002      	b.n	8007ce4 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	613b      	str	r3, [r7, #16]
    break;
 8007ce2:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007ce4:	4b13      	ldr	r3, [pc, #76]	; (8007d34 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	091b      	lsrs	r3, r3, #4
 8007cea:	f003 030f 	and.w	r3, r3, #15
 8007cee:	3301      	adds	r3, #1
 8007cf0:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007cf2:	4b10      	ldr	r3, [pc, #64]	; (8007d34 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007cf4:	68db      	ldr	r3, [r3, #12]
 8007cf6:	0a1b      	lsrs	r3, r3, #8
 8007cf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cfc:	693a      	ldr	r2, [r7, #16]
 8007cfe:	fb02 f203 	mul.w	r2, r2, r3
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d08:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007d0a:	4b0a      	ldr	r3, [pc, #40]	; (8007d34 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007d0c:	68db      	ldr	r3, [r3, #12]
 8007d0e:	0e5b      	lsrs	r3, r3, #25
 8007d10:	f003 0303 	and.w	r3, r3, #3
 8007d14:	3301      	adds	r3, #1
 8007d16:	005b      	lsls	r3, r3, #1
 8007d18:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8007d1a:	693a      	ldr	r2, [r7, #16]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d22:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8007d24:	683b      	ldr	r3, [r7, #0]
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	371c      	adds	r7, #28
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr
 8007d32:	bf00      	nop
 8007d34:	40021000 	.word	0x40021000
 8007d38:	0800ffe4 	.word	0x0800ffe4
 8007d3c:	00f42400 	.word	0x00f42400
 8007d40:	007a1200 	.word	0x007a1200

08007d44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b086      	sub	sp, #24
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007d50:	2300      	movs	r3, #0
 8007d52:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d03d      	beq.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d64:	2b40      	cmp	r3, #64	; 0x40
 8007d66:	d00b      	beq.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8007d68:	2b40      	cmp	r3, #64	; 0x40
 8007d6a:	d804      	bhi.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d00e      	beq.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8007d70:	2b20      	cmp	r3, #32
 8007d72:	d015      	beq.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8007d74:	e01d      	b.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8007d76:	2b60      	cmp	r3, #96	; 0x60
 8007d78:	d01e      	beq.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007d7a:	2b80      	cmp	r3, #128	; 0x80
 8007d7c:	d01c      	beq.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007d7e:	e018      	b.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007d80:	4b86      	ldr	r3, [pc, #536]	; (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007d82:	68db      	ldr	r3, [r3, #12]
 8007d84:	4a85      	ldr	r2, [pc, #532]	; (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007d86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d8a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007d8c:	e015      	b.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	3304      	adds	r3, #4
 8007d92:	2100      	movs	r1, #0
 8007d94:	4618      	mov	r0, r3
 8007d96:	f000 fb0d 	bl	80083b4 <RCCEx_PLLSAI1_Config>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007d9e:	e00c      	b.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	3320      	adds	r3, #32
 8007da4:	2100      	movs	r1, #0
 8007da6:	4618      	mov	r0, r3
 8007da8:	f000 fbf4 	bl	8008594 <RCCEx_PLLSAI2_Config>
 8007dac:	4603      	mov	r3, r0
 8007dae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007db0:	e003      	b.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	74fb      	strb	r3, [r7, #19]
      break;
 8007db6:	e000      	b.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8007db8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007dba:	7cfb      	ldrb	r3, [r7, #19]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d10b      	bne.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007dc0:	4b76      	ldr	r3, [pc, #472]	; (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007dc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007dc6:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dce:	4973      	ldr	r1, [pc, #460]	; (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8007dd6:	e001      	b.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dd8:	7cfb      	ldrb	r3, [r7, #19]
 8007dda:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d042      	beq.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007df0:	d00f      	beq.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0xce>
 8007df2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007df6:	d805      	bhi.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d011      	beq.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8007dfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e00:	d017      	beq.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0xee>
 8007e02:	e01f      	b.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8007e04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e08:	d01f      	beq.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007e0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e0e:	d01c      	beq.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007e10:	e018      	b.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007e12:	4b62      	ldr	r3, [pc, #392]	; (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007e14:	68db      	ldr	r3, [r3, #12]
 8007e16:	4a61      	ldr	r2, [pc, #388]	; (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e1c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007e1e:	e015      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	3304      	adds	r3, #4
 8007e24:	2100      	movs	r1, #0
 8007e26:	4618      	mov	r0, r3
 8007e28:	f000 fac4 	bl	80083b4 <RCCEx_PLLSAI1_Config>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007e30:	e00c      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	3320      	adds	r3, #32
 8007e36:	2100      	movs	r1, #0
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f000 fbab 	bl	8008594 <RCCEx_PLLSAI2_Config>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007e42:	e003      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e44:	2301      	movs	r3, #1
 8007e46:	74fb      	strb	r3, [r7, #19]
      break;
 8007e48:	e000      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8007e4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e4c:	7cfb      	ldrb	r3, [r7, #19]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d10b      	bne.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007e52:	4b52      	ldr	r3, [pc, #328]	; (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007e54:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e60:	494e      	ldr	r1, [pc, #312]	; (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007e62:	4313      	orrs	r3, r2
 8007e64:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8007e68:	e001      	b.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e6a:	7cfb      	ldrb	r3, [r7, #19]
 8007e6c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	f000 809f 	beq.w	8007fba <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007e80:	4b46      	ldr	r3, [pc, #280]	; (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d101      	bne.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	e000      	b.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007e90:	2300      	movs	r3, #0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d00d      	beq.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e96:	4b41      	ldr	r3, [pc, #260]	; (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e9a:	4a40      	ldr	r2, [pc, #256]	; (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ea0:	6593      	str	r3, [r2, #88]	; 0x58
 8007ea2:	4b3e      	ldr	r3, [pc, #248]	; (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007eaa:	60bb      	str	r3, [r7, #8]
 8007eac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007eb2:	4b3b      	ldr	r3, [pc, #236]	; (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a3a      	ldr	r2, [pc, #232]	; (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8007eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ebc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007ebe:	f7fb ffa3 	bl	8003e08 <HAL_GetTick>
 8007ec2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007ec4:	e009      	b.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ec6:	f7fb ff9f 	bl	8003e08 <HAL_GetTick>
 8007eca:	4602      	mov	r2, r0
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	1ad3      	subs	r3, r2, r3
 8007ed0:	2b02      	cmp	r3, #2
 8007ed2:	d902      	bls.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8007ed4:	2303      	movs	r3, #3
 8007ed6:	74fb      	strb	r3, [r7, #19]
        break;
 8007ed8:	e005      	b.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007eda:	4b31      	ldr	r3, [pc, #196]	; (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d0ef      	beq.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8007ee6:	7cfb      	ldrb	r3, [r7, #19]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d15b      	bne.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007eec:	4b2b      	ldr	r3, [pc, #172]	; (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ef6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d01f      	beq.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f04:	697a      	ldr	r2, [r7, #20]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d019      	beq.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007f0a:	4b24      	ldr	r3, [pc, #144]	; (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f14:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007f16:	4b21      	ldr	r3, [pc, #132]	; (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f1c:	4a1f      	ldr	r2, [pc, #124]	; (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007f1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007f26:	4b1d      	ldr	r3, [pc, #116]	; (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f2c:	4a1b      	ldr	r2, [pc, #108]	; (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007f2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007f36:	4a19      	ldr	r2, [pc, #100]	; (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	f003 0301 	and.w	r3, r3, #1
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d016      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f48:	f7fb ff5e 	bl	8003e08 <HAL_GetTick>
 8007f4c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f4e:	e00b      	b.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f50:	f7fb ff5a 	bl	8003e08 <HAL_GetTick>
 8007f54:	4602      	mov	r2, r0
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	1ad3      	subs	r3, r2, r3
 8007f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d902      	bls.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 8007f62:	2303      	movs	r3, #3
 8007f64:	74fb      	strb	r3, [r7, #19]
            break;
 8007f66:	e006      	b.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f68:	4b0c      	ldr	r3, [pc, #48]	; (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f6e:	f003 0302 	and.w	r3, r3, #2
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d0ec      	beq.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 8007f76:	7cfb      	ldrb	r3, [r7, #19]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d10c      	bne.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007f7c:	4b07      	ldr	r3, [pc, #28]	; (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f8c:	4903      	ldr	r1, [pc, #12]	; (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007f94:	e008      	b.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007f96:	7cfb      	ldrb	r3, [r7, #19]
 8007f98:	74bb      	strb	r3, [r7, #18]
 8007f9a:	e005      	b.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8007f9c:	40021000 	.word	0x40021000
 8007fa0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fa4:	7cfb      	ldrb	r3, [r7, #19]
 8007fa6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007fa8:	7c7b      	ldrb	r3, [r7, #17]
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d105      	bne.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007fae:	4ba0      	ldr	r3, [pc, #640]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fb2:	4a9f      	ldr	r2, [pc, #636]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007fb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fb8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f003 0301 	and.w	r3, r3, #1
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d00a      	beq.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007fc6:	4b9a      	ldr	r3, [pc, #616]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fcc:	f023 0203 	bic.w	r2, r3, #3
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fd4:	4996      	ldr	r1, [pc, #600]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f003 0302 	and.w	r3, r3, #2
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d00a      	beq.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007fe8:	4b91      	ldr	r3, [pc, #580]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fee:	f023 020c 	bic.w	r2, r3, #12
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ff6:	498e      	ldr	r1, [pc, #568]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f003 0304 	and.w	r3, r3, #4
 8008006:	2b00      	cmp	r3, #0
 8008008:	d00a      	beq.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800800a:	4b89      	ldr	r3, [pc, #548]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800800c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008010:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008018:	4985      	ldr	r1, [pc, #532]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800801a:	4313      	orrs	r3, r2
 800801c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f003 0308 	and.w	r3, r3, #8
 8008028:	2b00      	cmp	r3, #0
 800802a:	d00a      	beq.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800802c:	4b80      	ldr	r3, [pc, #512]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800802e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008032:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800803a:	497d      	ldr	r1, [pc, #500]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800803c:	4313      	orrs	r3, r2
 800803e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f003 0310 	and.w	r3, r3, #16
 800804a:	2b00      	cmp	r3, #0
 800804c:	d00a      	beq.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800804e:	4b78      	ldr	r3, [pc, #480]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008054:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800805c:	4974      	ldr	r1, [pc, #464]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800805e:	4313      	orrs	r3, r2
 8008060:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f003 0320 	and.w	r3, r3, #32
 800806c:	2b00      	cmp	r3, #0
 800806e:	d00a      	beq.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008070:	4b6f      	ldr	r3, [pc, #444]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008076:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800807e:	496c      	ldr	r1, [pc, #432]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008080:	4313      	orrs	r3, r2
 8008082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800808e:	2b00      	cmp	r3, #0
 8008090:	d00a      	beq.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008092:	4b67      	ldr	r3, [pc, #412]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008098:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080a0:	4963      	ldr	r1, [pc, #396]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80080a2:	4313      	orrs	r3, r2
 80080a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d00a      	beq.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80080b4:	4b5e      	ldr	r3, [pc, #376]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80080b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080c2:	495b      	ldr	r1, [pc, #364]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80080c4:	4313      	orrs	r3, r2
 80080c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d00a      	beq.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80080d6:	4b56      	ldr	r3, [pc, #344]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80080d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080e4:	4952      	ldr	r1, [pc, #328]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80080e6:	4313      	orrs	r3, r2
 80080e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d00a      	beq.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80080f8:	4b4d      	ldr	r3, [pc, #308]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80080fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008106:	494a      	ldr	r1, [pc, #296]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008108:	4313      	orrs	r3, r2
 800810a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008116:	2b00      	cmp	r3, #0
 8008118:	d00a      	beq.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800811a:	4b45      	ldr	r3, [pc, #276]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800811c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008120:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008128:	4941      	ldr	r1, [pc, #260]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800812a:	4313      	orrs	r3, r2
 800812c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008138:	2b00      	cmp	r3, #0
 800813a:	d00a      	beq.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800813c:	4b3c      	ldr	r3, [pc, #240]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800813e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008142:	f023 0203 	bic.w	r2, r3, #3
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800814a:	4939      	ldr	r1, [pc, #228]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800814c:	4313      	orrs	r3, r2
 800814e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800815a:	2b00      	cmp	r3, #0
 800815c:	d028      	beq.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800815e:	4b34      	ldr	r3, [pc, #208]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008164:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800816c:	4930      	ldr	r1, [pc, #192]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800816e:	4313      	orrs	r3, r2
 8008170:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008178:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800817c:	d106      	bne.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800817e:	4b2c      	ldr	r3, [pc, #176]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	4a2b      	ldr	r2, [pc, #172]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008184:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008188:	60d3      	str	r3, [r2, #12]
 800818a:	e011      	b.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008190:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008194:	d10c      	bne.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	3304      	adds	r3, #4
 800819a:	2101      	movs	r1, #1
 800819c:	4618      	mov	r0, r3
 800819e:	f000 f909 	bl	80083b4 <RCCEx_PLLSAI1_Config>
 80081a2:	4603      	mov	r3, r0
 80081a4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80081a6:	7cfb      	ldrb	r3, [r7, #19]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d001      	beq.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 80081ac:	7cfb      	ldrb	r3, [r7, #19]
 80081ae:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d04d      	beq.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80081c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081c4:	d108      	bne.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80081c6:	4b1a      	ldr	r3, [pc, #104]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80081c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80081cc:	4a18      	ldr	r2, [pc, #96]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80081ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80081d2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80081d6:	e012      	b.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80081d8:	4b15      	ldr	r3, [pc, #84]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80081da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80081de:	4a14      	ldr	r2, [pc, #80]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80081e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081e4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80081e8:	4b11      	ldr	r3, [pc, #68]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80081ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80081f6:	490e      	ldr	r1, [pc, #56]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80081f8:	4313      	orrs	r3, r2
 80081fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008202:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008206:	d106      	bne.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008208:	4b09      	ldr	r3, [pc, #36]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800820a:	68db      	ldr	r3, [r3, #12]
 800820c:	4a08      	ldr	r2, [pc, #32]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800820e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008212:	60d3      	str	r3, [r2, #12]
 8008214:	e020      	b.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800821a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800821e:	d109      	bne.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008220:	4b03      	ldr	r3, [pc, #12]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008222:	68db      	ldr	r3, [r3, #12]
 8008224:	4a02      	ldr	r2, [pc, #8]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008226:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800822a:	60d3      	str	r3, [r2, #12]
 800822c:	e014      	b.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800822e:	bf00      	nop
 8008230:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008238:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800823c:	d10c      	bne.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	3304      	adds	r3, #4
 8008242:	2101      	movs	r1, #1
 8008244:	4618      	mov	r0, r3
 8008246:	f000 f8b5 	bl	80083b4 <RCCEx_PLLSAI1_Config>
 800824a:	4603      	mov	r3, r0
 800824c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800824e:	7cfb      	ldrb	r3, [r7, #19]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d001      	beq.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8008254:	7cfb      	ldrb	r3, [r7, #19]
 8008256:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008260:	2b00      	cmp	r3, #0
 8008262:	d028      	beq.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008264:	4b4a      	ldr	r3, [pc, #296]	; (8008390 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800826a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008272:	4947      	ldr	r1, [pc, #284]	; (8008390 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008274:	4313      	orrs	r3, r2
 8008276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800827e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008282:	d106      	bne.n	8008292 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008284:	4b42      	ldr	r3, [pc, #264]	; (8008390 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008286:	68db      	ldr	r3, [r3, #12]
 8008288:	4a41      	ldr	r2, [pc, #260]	; (8008390 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800828a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800828e:	60d3      	str	r3, [r2, #12]
 8008290:	e011      	b.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008296:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800829a:	d10c      	bne.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	3304      	adds	r3, #4
 80082a0:	2101      	movs	r1, #1
 80082a2:	4618      	mov	r0, r3
 80082a4:	f000 f886 	bl	80083b4 <RCCEx_PLLSAI1_Config>
 80082a8:	4603      	mov	r3, r0
 80082aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80082ac:	7cfb      	ldrb	r3, [r7, #19]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d001      	beq.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 80082b2:	7cfb      	ldrb	r3, [r7, #19]
 80082b4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d01e      	beq.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80082c2:	4b33      	ldr	r3, [pc, #204]	; (8008390 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80082c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082c8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082d2:	492f      	ldr	r1, [pc, #188]	; (8008390 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80082d4:	4313      	orrs	r3, r2
 80082d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082e4:	d10c      	bne.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	3304      	adds	r3, #4
 80082ea:	2102      	movs	r1, #2
 80082ec:	4618      	mov	r0, r3
 80082ee:	f000 f861 	bl	80083b4 <RCCEx_PLLSAI1_Config>
 80082f2:	4603      	mov	r3, r0
 80082f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80082f6:	7cfb      	ldrb	r3, [r7, #19]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d001      	beq.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 80082fc:	7cfb      	ldrb	r3, [r7, #19]
 80082fe:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008308:	2b00      	cmp	r3, #0
 800830a:	d00b      	beq.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800830c:	4b20      	ldr	r3, [pc, #128]	; (8008390 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800830e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008312:	f023 0204 	bic.w	r2, r3, #4
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800831c:	491c      	ldr	r1, [pc, #112]	; (8008390 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800831e:	4313      	orrs	r3, r2
 8008320:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800832c:	2b00      	cmp	r3, #0
 800832e:	d00b      	beq.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8008330:	4b17      	ldr	r3, [pc, #92]	; (8008390 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008332:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008336:	f023 0218 	bic.w	r2, r3, #24
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008340:	4913      	ldr	r1, [pc, #76]	; (8008390 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008342:	4313      	orrs	r3, r2
 8008344:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008350:	2b00      	cmp	r3, #0
 8008352:	d017      	beq.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008354:	4b0e      	ldr	r3, [pc, #56]	; (8008390 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008356:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800835a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008364:	490a      	ldr	r1, [pc, #40]	; (8008390 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008366:	4313      	orrs	r3, r2
 8008368:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008372:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008376:	d105      	bne.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008378:	4b05      	ldr	r3, [pc, #20]	; (8008390 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800837a:	68db      	ldr	r3, [r3, #12]
 800837c:	4a04      	ldr	r2, [pc, #16]	; (8008390 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800837e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008382:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008384:	7cbb      	ldrb	r3, [r7, #18]
}
 8008386:	4618      	mov	r0, r3
 8008388:	3718      	adds	r7, #24
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop
 8008390:	40021000 	.word	0x40021000

08008394 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8008394:	b480      	push	{r7}
 8008396:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8008398:	4b05      	ldr	r3, [pc, #20]	; (80083b0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a04      	ldr	r2, [pc, #16]	; (80083b0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800839e:	f043 0304 	orr.w	r3, r3, #4
 80083a2:	6013      	str	r3, [r2, #0]
}
 80083a4:	bf00      	nop
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr
 80083ae:	bf00      	nop
 80083b0:	40021000 	.word	0x40021000

080083b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b084      	sub	sp, #16
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80083be:	2300      	movs	r3, #0
 80083c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80083c2:	4b70      	ldr	r3, [pc, #448]	; (8008584 <RCCEx_PLLSAI1_Config+0x1d0>)
 80083c4:	68db      	ldr	r3, [r3, #12]
 80083c6:	f003 0303 	and.w	r3, r3, #3
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d00e      	beq.n	80083ec <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80083ce:	4b6d      	ldr	r3, [pc, #436]	; (8008584 <RCCEx_PLLSAI1_Config+0x1d0>)
 80083d0:	68db      	ldr	r3, [r3, #12]
 80083d2:	f003 0203 	and.w	r2, r3, #3
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	429a      	cmp	r2, r3
 80083dc:	d103      	bne.n	80083e6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
       ||
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d13f      	bne.n	8008466 <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80083e6:	2301      	movs	r3, #1
 80083e8:	73fb      	strb	r3, [r7, #15]
 80083ea:	e03c      	b.n	8008466 <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2b02      	cmp	r3, #2
 80083f2:	d00c      	beq.n	800840e <RCCEx_PLLSAI1_Config+0x5a>
 80083f4:	2b03      	cmp	r3, #3
 80083f6:	d013      	beq.n	8008420 <RCCEx_PLLSAI1_Config+0x6c>
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d120      	bne.n	800843e <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80083fc:	4b61      	ldr	r3, [pc, #388]	; (8008584 <RCCEx_PLLSAI1_Config+0x1d0>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f003 0302 	and.w	r3, r3, #2
 8008404:	2b00      	cmp	r3, #0
 8008406:	d11d      	bne.n	8008444 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8008408:	2301      	movs	r3, #1
 800840a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800840c:	e01a      	b.n	8008444 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800840e:	4b5d      	ldr	r3, [pc, #372]	; (8008584 <RCCEx_PLLSAI1_Config+0x1d0>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008416:	2b00      	cmp	r3, #0
 8008418:	d116      	bne.n	8008448 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 800841a:	2301      	movs	r3, #1
 800841c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800841e:	e013      	b.n	8008448 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008420:	4b58      	ldr	r3, [pc, #352]	; (8008584 <RCCEx_PLLSAI1_Config+0x1d0>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008428:	2b00      	cmp	r3, #0
 800842a:	d10f      	bne.n	800844c <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800842c:	4b55      	ldr	r3, [pc, #340]	; (8008584 <RCCEx_PLLSAI1_Config+0x1d0>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008434:	2b00      	cmp	r3, #0
 8008436:	d109      	bne.n	800844c <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8008438:	2301      	movs	r3, #1
 800843a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800843c:	e006      	b.n	800844c <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 800843e:	2301      	movs	r3, #1
 8008440:	73fb      	strb	r3, [r7, #15]
      break;
 8008442:	e004      	b.n	800844e <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8008444:	bf00      	nop
 8008446:	e002      	b.n	800844e <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8008448:	bf00      	nop
 800844a:	e000      	b.n	800844e <RCCEx_PLLSAI1_Config+0x9a>
      break;
 800844c:	bf00      	nop
    }

    if(status == HAL_OK)
 800844e:	7bfb      	ldrb	r3, [r7, #15]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d108      	bne.n	8008466 <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8008454:	4b4b      	ldr	r3, [pc, #300]	; (8008584 <RCCEx_PLLSAI1_Config+0x1d0>)
 8008456:	68db      	ldr	r3, [r3, #12]
 8008458:	f023 0203 	bic.w	r2, r3, #3
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4948      	ldr	r1, [pc, #288]	; (8008584 <RCCEx_PLLSAI1_Config+0x1d0>)
 8008462:	4313      	orrs	r3, r2
 8008464:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8008466:	7bfb      	ldrb	r3, [r7, #15]
 8008468:	2b00      	cmp	r3, #0
 800846a:	f040 8086 	bne.w	800857a <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800846e:	4b45      	ldr	r3, [pc, #276]	; (8008584 <RCCEx_PLLSAI1_Config+0x1d0>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a44      	ldr	r2, [pc, #272]	; (8008584 <RCCEx_PLLSAI1_Config+0x1d0>)
 8008474:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008478:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800847a:	f7fb fcc5 	bl	8003e08 <HAL_GetTick>
 800847e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008480:	e009      	b.n	8008496 <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008482:	f7fb fcc1 	bl	8003e08 <HAL_GetTick>
 8008486:	4602      	mov	r2, r0
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	1ad3      	subs	r3, r2, r3
 800848c:	2b02      	cmp	r3, #2
 800848e:	d902      	bls.n	8008496 <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8008490:	2303      	movs	r3, #3
 8008492:	73fb      	strb	r3, [r7, #15]
        break;
 8008494:	e005      	b.n	80084a2 <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008496:	4b3b      	ldr	r3, [pc, #236]	; (8008584 <RCCEx_PLLSAI1_Config+0x1d0>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d1ef      	bne.n	8008482 <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 80084a2:	7bfb      	ldrb	r3, [r7, #15]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d168      	bne.n	800857a <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d113      	bne.n	80084d6 <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80084ae:	4b35      	ldr	r3, [pc, #212]	; (8008584 <RCCEx_PLLSAI1_Config+0x1d0>)
 80084b0:	691a      	ldr	r2, [r3, #16]
 80084b2:	4b35      	ldr	r3, [pc, #212]	; (8008588 <RCCEx_PLLSAI1_Config+0x1d4>)
 80084b4:	4013      	ands	r3, r2
 80084b6:	687a      	ldr	r2, [r7, #4]
 80084b8:	6892      	ldr	r2, [r2, #8]
 80084ba:	0211      	lsls	r1, r2, #8
 80084bc:	687a      	ldr	r2, [r7, #4]
 80084be:	68d2      	ldr	r2, [r2, #12]
 80084c0:	06d2      	lsls	r2, r2, #27
 80084c2:	4311      	orrs	r1, r2
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	6852      	ldr	r2, [r2, #4]
 80084c8:	3a01      	subs	r2, #1
 80084ca:	0112      	lsls	r2, r2, #4
 80084cc:	430a      	orrs	r2, r1
 80084ce:	492d      	ldr	r1, [pc, #180]	; (8008584 <RCCEx_PLLSAI1_Config+0x1d0>)
 80084d0:	4313      	orrs	r3, r2
 80084d2:	610b      	str	r3, [r1, #16]
 80084d4:	e02d      	b.n	8008532 <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d115      	bne.n	8008508 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80084dc:	4b29      	ldr	r3, [pc, #164]	; (8008584 <RCCEx_PLLSAI1_Config+0x1d0>)
 80084de:	691a      	ldr	r2, [r3, #16]
 80084e0:	4b2a      	ldr	r3, [pc, #168]	; (800858c <RCCEx_PLLSAI1_Config+0x1d8>)
 80084e2:	4013      	ands	r3, r2
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	6892      	ldr	r2, [r2, #8]
 80084e8:	0211      	lsls	r1, r2, #8
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	6912      	ldr	r2, [r2, #16]
 80084ee:	0852      	lsrs	r2, r2, #1
 80084f0:	3a01      	subs	r2, #1
 80084f2:	0552      	lsls	r2, r2, #21
 80084f4:	4311      	orrs	r1, r2
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	6852      	ldr	r2, [r2, #4]
 80084fa:	3a01      	subs	r2, #1
 80084fc:	0112      	lsls	r2, r2, #4
 80084fe:	430a      	orrs	r2, r1
 8008500:	4920      	ldr	r1, [pc, #128]	; (8008584 <RCCEx_PLLSAI1_Config+0x1d0>)
 8008502:	4313      	orrs	r3, r2
 8008504:	610b      	str	r3, [r1, #16]
 8008506:	e014      	b.n	8008532 <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008508:	4b1e      	ldr	r3, [pc, #120]	; (8008584 <RCCEx_PLLSAI1_Config+0x1d0>)
 800850a:	691a      	ldr	r2, [r3, #16]
 800850c:	4b20      	ldr	r3, [pc, #128]	; (8008590 <RCCEx_PLLSAI1_Config+0x1dc>)
 800850e:	4013      	ands	r3, r2
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	6892      	ldr	r2, [r2, #8]
 8008514:	0211      	lsls	r1, r2, #8
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	6952      	ldr	r2, [r2, #20]
 800851a:	0852      	lsrs	r2, r2, #1
 800851c:	3a01      	subs	r2, #1
 800851e:	0652      	lsls	r2, r2, #25
 8008520:	4311      	orrs	r1, r2
 8008522:	687a      	ldr	r2, [r7, #4]
 8008524:	6852      	ldr	r2, [r2, #4]
 8008526:	3a01      	subs	r2, #1
 8008528:	0112      	lsls	r2, r2, #4
 800852a:	430a      	orrs	r2, r1
 800852c:	4915      	ldr	r1, [pc, #84]	; (8008584 <RCCEx_PLLSAI1_Config+0x1d0>)
 800852e:	4313      	orrs	r3, r2
 8008530:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008532:	4b14      	ldr	r3, [pc, #80]	; (8008584 <RCCEx_PLLSAI1_Config+0x1d0>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a13      	ldr	r2, [pc, #76]	; (8008584 <RCCEx_PLLSAI1_Config+0x1d0>)
 8008538:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800853c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800853e:	f7fb fc63 	bl	8003e08 <HAL_GetTick>
 8008542:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008544:	e009      	b.n	800855a <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008546:	f7fb fc5f 	bl	8003e08 <HAL_GetTick>
 800854a:	4602      	mov	r2, r0
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	1ad3      	subs	r3, r2, r3
 8008550:	2b02      	cmp	r3, #2
 8008552:	d902      	bls.n	800855a <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8008554:	2303      	movs	r3, #3
 8008556:	73fb      	strb	r3, [r7, #15]
          break;
 8008558:	e005      	b.n	8008566 <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800855a:	4b0a      	ldr	r3, [pc, #40]	; (8008584 <RCCEx_PLLSAI1_Config+0x1d0>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008562:	2b00      	cmp	r3, #0
 8008564:	d0ef      	beq.n	8008546 <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8008566:	7bfb      	ldrb	r3, [r7, #15]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d106      	bne.n	800857a <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800856c:	4b05      	ldr	r3, [pc, #20]	; (8008584 <RCCEx_PLLSAI1_Config+0x1d0>)
 800856e:	691a      	ldr	r2, [r3, #16]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	699b      	ldr	r3, [r3, #24]
 8008574:	4903      	ldr	r1, [pc, #12]	; (8008584 <RCCEx_PLLSAI1_Config+0x1d0>)
 8008576:	4313      	orrs	r3, r2
 8008578:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800857a:	7bfb      	ldrb	r3, [r7, #15]
}
 800857c:	4618      	mov	r0, r3
 800857e:	3710      	adds	r7, #16
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}
 8008584:	40021000 	.word	0x40021000
 8008588:	07ff800f 	.word	0x07ff800f
 800858c:	ff9f800f 	.word	0xff9f800f
 8008590:	f9ff800f 	.word	0xf9ff800f

08008594 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800859e:	2300      	movs	r3, #0
 80085a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80085a2:	4b70      	ldr	r3, [pc, #448]	; (8008764 <RCCEx_PLLSAI2_Config+0x1d0>)
 80085a4:	68db      	ldr	r3, [r3, #12]
 80085a6:	f003 0303 	and.w	r3, r3, #3
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d00e      	beq.n	80085cc <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80085ae:	4b6d      	ldr	r3, [pc, #436]	; (8008764 <RCCEx_PLLSAI2_Config+0x1d0>)
 80085b0:	68db      	ldr	r3, [r3, #12]
 80085b2:	f003 0203 	and.w	r2, r3, #3
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d103      	bne.n	80085c6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
       ||
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d13f      	bne.n	8008646 <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80085c6:	2301      	movs	r3, #1
 80085c8:	73fb      	strb	r3, [r7, #15]
 80085ca:	e03c      	b.n	8008646 <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	2b02      	cmp	r3, #2
 80085d2:	d00c      	beq.n	80085ee <RCCEx_PLLSAI2_Config+0x5a>
 80085d4:	2b03      	cmp	r3, #3
 80085d6:	d013      	beq.n	8008600 <RCCEx_PLLSAI2_Config+0x6c>
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d120      	bne.n	800861e <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80085dc:	4b61      	ldr	r3, [pc, #388]	; (8008764 <RCCEx_PLLSAI2_Config+0x1d0>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f003 0302 	and.w	r3, r3, #2
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d11d      	bne.n	8008624 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 80085e8:	2301      	movs	r3, #1
 80085ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80085ec:	e01a      	b.n	8008624 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80085ee:	4b5d      	ldr	r3, [pc, #372]	; (8008764 <RCCEx_PLLSAI2_Config+0x1d0>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d116      	bne.n	8008628 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 80085fa:	2301      	movs	r3, #1
 80085fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80085fe:	e013      	b.n	8008628 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008600:	4b58      	ldr	r3, [pc, #352]	; (8008764 <RCCEx_PLLSAI2_Config+0x1d0>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008608:	2b00      	cmp	r3, #0
 800860a:	d10f      	bne.n	800862c <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800860c:	4b55      	ldr	r3, [pc, #340]	; (8008764 <RCCEx_PLLSAI2_Config+0x1d0>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008614:	2b00      	cmp	r3, #0
 8008616:	d109      	bne.n	800862c <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8008618:	2301      	movs	r3, #1
 800861a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800861c:	e006      	b.n	800862c <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 800861e:	2301      	movs	r3, #1
 8008620:	73fb      	strb	r3, [r7, #15]
      break;
 8008622:	e004      	b.n	800862e <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8008624:	bf00      	nop
 8008626:	e002      	b.n	800862e <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8008628:	bf00      	nop
 800862a:	e000      	b.n	800862e <RCCEx_PLLSAI2_Config+0x9a>
      break;
 800862c:	bf00      	nop
    }

    if(status == HAL_OK)
 800862e:	7bfb      	ldrb	r3, [r7, #15]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d108      	bne.n	8008646 <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8008634:	4b4b      	ldr	r3, [pc, #300]	; (8008764 <RCCEx_PLLSAI2_Config+0x1d0>)
 8008636:	68db      	ldr	r3, [r3, #12]
 8008638:	f023 0203 	bic.w	r2, r3, #3
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4948      	ldr	r1, [pc, #288]	; (8008764 <RCCEx_PLLSAI2_Config+0x1d0>)
 8008642:	4313      	orrs	r3, r2
 8008644:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8008646:	7bfb      	ldrb	r3, [r7, #15]
 8008648:	2b00      	cmp	r3, #0
 800864a:	f040 8086 	bne.w	800875a <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800864e:	4b45      	ldr	r3, [pc, #276]	; (8008764 <RCCEx_PLLSAI2_Config+0x1d0>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a44      	ldr	r2, [pc, #272]	; (8008764 <RCCEx_PLLSAI2_Config+0x1d0>)
 8008654:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008658:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800865a:	f7fb fbd5 	bl	8003e08 <HAL_GetTick>
 800865e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008660:	e009      	b.n	8008676 <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008662:	f7fb fbd1 	bl	8003e08 <HAL_GetTick>
 8008666:	4602      	mov	r2, r0
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	1ad3      	subs	r3, r2, r3
 800866c:	2b02      	cmp	r3, #2
 800866e:	d902      	bls.n	8008676 <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8008670:	2303      	movs	r3, #3
 8008672:	73fb      	strb	r3, [r7, #15]
        break;
 8008674:	e005      	b.n	8008682 <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008676:	4b3b      	ldr	r3, [pc, #236]	; (8008764 <RCCEx_PLLSAI2_Config+0x1d0>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800867e:	2b00      	cmp	r3, #0
 8008680:	d1ef      	bne.n	8008662 <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8008682:	7bfb      	ldrb	r3, [r7, #15]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d168      	bne.n	800875a <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d113      	bne.n	80086b6 <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800868e:	4b35      	ldr	r3, [pc, #212]	; (8008764 <RCCEx_PLLSAI2_Config+0x1d0>)
 8008690:	695a      	ldr	r2, [r3, #20]
 8008692:	4b35      	ldr	r3, [pc, #212]	; (8008768 <RCCEx_PLLSAI2_Config+0x1d4>)
 8008694:	4013      	ands	r3, r2
 8008696:	687a      	ldr	r2, [r7, #4]
 8008698:	6892      	ldr	r2, [r2, #8]
 800869a:	0211      	lsls	r1, r2, #8
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	68d2      	ldr	r2, [r2, #12]
 80086a0:	06d2      	lsls	r2, r2, #27
 80086a2:	4311      	orrs	r1, r2
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	6852      	ldr	r2, [r2, #4]
 80086a8:	3a01      	subs	r2, #1
 80086aa:	0112      	lsls	r2, r2, #4
 80086ac:	430a      	orrs	r2, r1
 80086ae:	492d      	ldr	r1, [pc, #180]	; (8008764 <RCCEx_PLLSAI2_Config+0x1d0>)
 80086b0:	4313      	orrs	r3, r2
 80086b2:	614b      	str	r3, [r1, #20]
 80086b4:	e02d      	b.n	8008712 <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d115      	bne.n	80086e8 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80086bc:	4b29      	ldr	r3, [pc, #164]	; (8008764 <RCCEx_PLLSAI2_Config+0x1d0>)
 80086be:	695a      	ldr	r2, [r3, #20]
 80086c0:	4b2a      	ldr	r3, [pc, #168]	; (800876c <RCCEx_PLLSAI2_Config+0x1d8>)
 80086c2:	4013      	ands	r3, r2
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	6892      	ldr	r2, [r2, #8]
 80086c8:	0211      	lsls	r1, r2, #8
 80086ca:	687a      	ldr	r2, [r7, #4]
 80086cc:	6912      	ldr	r2, [r2, #16]
 80086ce:	0852      	lsrs	r2, r2, #1
 80086d0:	3a01      	subs	r2, #1
 80086d2:	0552      	lsls	r2, r2, #21
 80086d4:	4311      	orrs	r1, r2
 80086d6:	687a      	ldr	r2, [r7, #4]
 80086d8:	6852      	ldr	r2, [r2, #4]
 80086da:	3a01      	subs	r2, #1
 80086dc:	0112      	lsls	r2, r2, #4
 80086de:	430a      	orrs	r2, r1
 80086e0:	4920      	ldr	r1, [pc, #128]	; (8008764 <RCCEx_PLLSAI2_Config+0x1d0>)
 80086e2:	4313      	orrs	r3, r2
 80086e4:	614b      	str	r3, [r1, #20]
 80086e6:	e014      	b.n	8008712 <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80086e8:	4b1e      	ldr	r3, [pc, #120]	; (8008764 <RCCEx_PLLSAI2_Config+0x1d0>)
 80086ea:	695a      	ldr	r2, [r3, #20]
 80086ec:	4b20      	ldr	r3, [pc, #128]	; (8008770 <RCCEx_PLLSAI2_Config+0x1dc>)
 80086ee:	4013      	ands	r3, r2
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	6892      	ldr	r2, [r2, #8]
 80086f4:	0211      	lsls	r1, r2, #8
 80086f6:	687a      	ldr	r2, [r7, #4]
 80086f8:	6952      	ldr	r2, [r2, #20]
 80086fa:	0852      	lsrs	r2, r2, #1
 80086fc:	3a01      	subs	r2, #1
 80086fe:	0652      	lsls	r2, r2, #25
 8008700:	4311      	orrs	r1, r2
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	6852      	ldr	r2, [r2, #4]
 8008706:	3a01      	subs	r2, #1
 8008708:	0112      	lsls	r2, r2, #4
 800870a:	430a      	orrs	r2, r1
 800870c:	4915      	ldr	r1, [pc, #84]	; (8008764 <RCCEx_PLLSAI2_Config+0x1d0>)
 800870e:	4313      	orrs	r3, r2
 8008710:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008712:	4b14      	ldr	r3, [pc, #80]	; (8008764 <RCCEx_PLLSAI2_Config+0x1d0>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a13      	ldr	r2, [pc, #76]	; (8008764 <RCCEx_PLLSAI2_Config+0x1d0>)
 8008718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800871c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800871e:	f7fb fb73 	bl	8003e08 <HAL_GetTick>
 8008722:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008724:	e009      	b.n	800873a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008726:	f7fb fb6f 	bl	8003e08 <HAL_GetTick>
 800872a:	4602      	mov	r2, r0
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	1ad3      	subs	r3, r2, r3
 8008730:	2b02      	cmp	r3, #2
 8008732:	d902      	bls.n	800873a <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8008734:	2303      	movs	r3, #3
 8008736:	73fb      	strb	r3, [r7, #15]
          break;
 8008738:	e005      	b.n	8008746 <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800873a:	4b0a      	ldr	r3, [pc, #40]	; (8008764 <RCCEx_PLLSAI2_Config+0x1d0>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008742:	2b00      	cmp	r3, #0
 8008744:	d0ef      	beq.n	8008726 <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8008746:	7bfb      	ldrb	r3, [r7, #15]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d106      	bne.n	800875a <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800874c:	4b05      	ldr	r3, [pc, #20]	; (8008764 <RCCEx_PLLSAI2_Config+0x1d0>)
 800874e:	695a      	ldr	r2, [r3, #20]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	699b      	ldr	r3, [r3, #24]
 8008754:	4903      	ldr	r1, [pc, #12]	; (8008764 <RCCEx_PLLSAI2_Config+0x1d0>)
 8008756:	4313      	orrs	r3, r2
 8008758:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800875a:	7bfb      	ldrb	r3, [r7, #15]
}
 800875c:	4618      	mov	r0, r3
 800875e:	3710      	adds	r7, #16
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}
 8008764:	40021000 	.word	0x40021000
 8008768:	07ff800f 	.word	0x07ff800f
 800876c:	ff9f800f 	.word	0xff9f800f
 8008770:	f9ff800f 	.word	0xf9ff800f

08008774 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d101      	bne.n	8008786 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008782:	2301      	movs	r3, #1
 8008784:	e095      	b.n	80088b2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800878a:	2b00      	cmp	r3, #0
 800878c:	d108      	bne.n	80087a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008796:	d009      	beq.n	80087ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2200      	movs	r2, #0
 800879c:	61da      	str	r2, [r3, #28]
 800879e:	e005      	b.n	80087ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2200      	movs	r2, #0
 80087a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2200      	movs	r2, #0
 80087b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80087b8:	b2db      	uxtb	r3, r3
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d106      	bne.n	80087cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2200      	movs	r2, #0
 80087c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f7f9 fe2c 	bl	8002424 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2202      	movs	r2, #2
 80087d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	681a      	ldr	r2, [r3, #0]
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087e2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	68db      	ldr	r3, [r3, #12]
 80087e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80087ec:	d902      	bls.n	80087f4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80087ee:	2300      	movs	r3, #0
 80087f0:	60fb      	str	r3, [r7, #12]
 80087f2:	e002      	b.n	80087fa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80087f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80087f8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	68db      	ldr	r3, [r3, #12]
 80087fe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008802:	d007      	beq.n	8008814 <HAL_SPI_Init+0xa0>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	68db      	ldr	r3, [r3, #12]
 8008808:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800880c:	d002      	beq.n	8008814 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2200      	movs	r2, #0
 8008812:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	689b      	ldr	r3, [r3, #8]
 8008820:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008824:	431a      	orrs	r2, r3
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	691b      	ldr	r3, [r3, #16]
 800882a:	f003 0302 	and.w	r3, r3, #2
 800882e:	431a      	orrs	r2, r3
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	695b      	ldr	r3, [r3, #20]
 8008834:	f003 0301 	and.w	r3, r3, #1
 8008838:	431a      	orrs	r2, r3
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	699b      	ldr	r3, [r3, #24]
 800883e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008842:	431a      	orrs	r2, r3
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	69db      	ldr	r3, [r3, #28]
 8008848:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800884c:	431a      	orrs	r2, r3
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6a1b      	ldr	r3, [r3, #32]
 8008852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008856:	ea42 0103 	orr.w	r1, r2, r3
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800885e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	430a      	orrs	r2, r1
 8008868:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	699b      	ldr	r3, [r3, #24]
 800886e:	0c1b      	lsrs	r3, r3, #16
 8008870:	f003 0204 	and.w	r2, r3, #4
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008878:	f003 0310 	and.w	r3, r3, #16
 800887c:	431a      	orrs	r2, r3
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008882:	f003 0308 	and.w	r3, r3, #8
 8008886:	431a      	orrs	r2, r3
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	68db      	ldr	r3, [r3, #12]
 800888c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008890:	ea42 0103 	orr.w	r1, r2, r3
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	430a      	orrs	r2, r1
 80088a0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2200      	movs	r2, #0
 80088a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2201      	movs	r2, #1
 80088ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3710      	adds	r7, #16
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}

080088ba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80088ba:	b580      	push	{r7, lr}
 80088bc:	b08a      	sub	sp, #40	; 0x28
 80088be:	af00      	add	r7, sp, #0
 80088c0:	60f8      	str	r0, [r7, #12]
 80088c2:	60b9      	str	r1, [r7, #8]
 80088c4:	607a      	str	r2, [r7, #4]
 80088c6:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80088c8:	2301      	movs	r3, #1
 80088ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80088cc:	2300      	movs	r3, #0
 80088ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d101      	bne.n	80088e0 <HAL_SPI_TransmitReceive+0x26>
 80088dc:	2302      	movs	r3, #2
 80088de:	e1fb      	b.n	8008cd8 <HAL_SPI_TransmitReceive+0x41e>
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2201      	movs	r2, #1
 80088e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80088e8:	f7fb fa8e 	bl	8003e08 <HAL_GetTick>
 80088ec:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80088f4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80088fc:	887b      	ldrh	r3, [r7, #2]
 80088fe:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008900:	887b      	ldrh	r3, [r7, #2]
 8008902:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008904:	7efb      	ldrb	r3, [r7, #27]
 8008906:	2b01      	cmp	r3, #1
 8008908:	d00e      	beq.n	8008928 <HAL_SPI_TransmitReceive+0x6e>
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008910:	d106      	bne.n	8008920 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	689b      	ldr	r3, [r3, #8]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d102      	bne.n	8008920 <HAL_SPI_TransmitReceive+0x66>
 800891a:	7efb      	ldrb	r3, [r7, #27]
 800891c:	2b04      	cmp	r3, #4
 800891e:	d003      	beq.n	8008928 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008920:	2302      	movs	r3, #2
 8008922:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008926:	e1cd      	b.n	8008cc4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d005      	beq.n	800893a <HAL_SPI_TransmitReceive+0x80>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d002      	beq.n	800893a <HAL_SPI_TransmitReceive+0x80>
 8008934:	887b      	ldrh	r3, [r7, #2]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d103      	bne.n	8008942 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800893a:	2301      	movs	r3, #1
 800893c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008940:	e1c0      	b.n	8008cc4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008948:	b2db      	uxtb	r3, r3
 800894a:	2b04      	cmp	r3, #4
 800894c:	d003      	beq.n	8008956 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2205      	movs	r2, #5
 8008952:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2200      	movs	r2, #0
 800895a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	687a      	ldr	r2, [r7, #4]
 8008960:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	887a      	ldrh	r2, [r7, #2]
 8008966:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	887a      	ldrh	r2, [r7, #2]
 800896e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	68ba      	ldr	r2, [r7, #8]
 8008976:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	887a      	ldrh	r2, [r7, #2]
 800897c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	887a      	ldrh	r2, [r7, #2]
 8008982:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2200      	movs	r2, #0
 8008988:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2200      	movs	r2, #0
 800898e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	68db      	ldr	r3, [r3, #12]
 8008994:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008998:	d802      	bhi.n	80089a0 <HAL_SPI_TransmitReceive+0xe6>
 800899a:	8a3b      	ldrh	r3, [r7, #16]
 800899c:	2b01      	cmp	r3, #1
 800899e:	d908      	bls.n	80089b2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	685a      	ldr	r2, [r3, #4]
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80089ae:	605a      	str	r2, [r3, #4]
 80089b0:	e007      	b.n	80089c2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	685a      	ldr	r2, [r3, #4]
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80089c0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089cc:	2b40      	cmp	r3, #64	; 0x40
 80089ce:	d007      	beq.n	80089e0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	68db      	ldr	r3, [r3, #12]
 80089e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80089e8:	d97c      	bls.n	8008ae4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d002      	beq.n	80089f8 <HAL_SPI_TransmitReceive+0x13e>
 80089f2:	8a7b      	ldrh	r3, [r7, #18]
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d169      	bne.n	8008acc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089fc:	881a      	ldrh	r2, [r3, #0]
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a08:	1c9a      	adds	r2, r3, #2
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a12:	b29b      	uxth	r3, r3
 8008a14:	3b01      	subs	r3, #1
 8008a16:	b29a      	uxth	r2, r3
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008a1c:	e056      	b.n	8008acc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	689b      	ldr	r3, [r3, #8]
 8008a24:	f003 0302 	and.w	r3, r3, #2
 8008a28:	2b02      	cmp	r3, #2
 8008a2a:	d11b      	bne.n	8008a64 <HAL_SPI_TransmitReceive+0x1aa>
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d016      	beq.n	8008a64 <HAL_SPI_TransmitReceive+0x1aa>
 8008a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d113      	bne.n	8008a64 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a40:	881a      	ldrh	r2, [r3, #0]
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a4c:	1c9a      	adds	r2, r3, #2
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	3b01      	subs	r3, #1
 8008a5a:	b29a      	uxth	r2, r3
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008a60:	2300      	movs	r3, #0
 8008a62:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	689b      	ldr	r3, [r3, #8]
 8008a6a:	f003 0301 	and.w	r3, r3, #1
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d11c      	bne.n	8008aac <HAL_SPI_TransmitReceive+0x1f2>
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d016      	beq.n	8008aac <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	68da      	ldr	r2, [r3, #12]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a88:	b292      	uxth	r2, r2
 8008a8a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a90:	1c9a      	adds	r2, r3, #2
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	3b01      	subs	r3, #1
 8008aa0:	b29a      	uxth	r2, r3
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008aac:	f7fb f9ac 	bl	8003e08 <HAL_GetTick>
 8008ab0:	4602      	mov	r2, r0
 8008ab2:	69fb      	ldr	r3, [r7, #28]
 8008ab4:	1ad3      	subs	r3, r2, r3
 8008ab6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d807      	bhi.n	8008acc <HAL_SPI_TransmitReceive+0x212>
 8008abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ac2:	d003      	beq.n	8008acc <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8008ac4:	2303      	movs	r3, #3
 8008ac6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008aca:	e0fb      	b.n	8008cc4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d1a3      	bne.n	8008a1e <HAL_SPI_TransmitReceive+0x164>
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d19d      	bne.n	8008a1e <HAL_SPI_TransmitReceive+0x164>
 8008ae2:	e0df      	b.n	8008ca4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d003      	beq.n	8008af4 <HAL_SPI_TransmitReceive+0x23a>
 8008aec:	8a7b      	ldrh	r3, [r7, #18]
 8008aee:	2b01      	cmp	r3, #1
 8008af0:	f040 80cb 	bne.w	8008c8a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008af8:	b29b      	uxth	r3, r3
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d912      	bls.n	8008b24 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b02:	881a      	ldrh	r2, [r3, #0]
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b0e:	1c9a      	adds	r2, r3, #2
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	3b02      	subs	r3, #2
 8008b1c:	b29a      	uxth	r2, r3
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008b22:	e0b2      	b.n	8008c8a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	330c      	adds	r3, #12
 8008b2e:	7812      	ldrb	r2, [r2, #0]
 8008b30:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b36:	1c5a      	adds	r2, r3, #1
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	3b01      	subs	r3, #1
 8008b44:	b29a      	uxth	r2, r3
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008b4a:	e09e      	b.n	8008c8a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	689b      	ldr	r3, [r3, #8]
 8008b52:	f003 0302 	and.w	r3, r3, #2
 8008b56:	2b02      	cmp	r3, #2
 8008b58:	d134      	bne.n	8008bc4 <HAL_SPI_TransmitReceive+0x30a>
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d02f      	beq.n	8008bc4 <HAL_SPI_TransmitReceive+0x30a>
 8008b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b66:	2b01      	cmp	r3, #1
 8008b68:	d12c      	bne.n	8008bc4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d912      	bls.n	8008b9a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b78:	881a      	ldrh	r2, [r3, #0]
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b84:	1c9a      	adds	r2, r3, #2
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	3b02      	subs	r3, #2
 8008b92:	b29a      	uxth	r2, r3
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008b98:	e012      	b.n	8008bc0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	330c      	adds	r3, #12
 8008ba4:	7812      	ldrb	r2, [r2, #0]
 8008ba6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bac:	1c5a      	adds	r2, r3, #1
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	3b01      	subs	r3, #1
 8008bba:	b29a      	uxth	r2, r3
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	689b      	ldr	r3, [r3, #8]
 8008bca:	f003 0301 	and.w	r3, r3, #1
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d148      	bne.n	8008c64 <HAL_SPI_TransmitReceive+0x3aa>
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d042      	beq.n	8008c64 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	2b01      	cmp	r3, #1
 8008be8:	d923      	bls.n	8008c32 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	68da      	ldr	r2, [r3, #12]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bf4:	b292      	uxth	r2, r2
 8008bf6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bfc:	1c9a      	adds	r2, r3, #2
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	3b02      	subs	r3, #2
 8008c0c:	b29a      	uxth	r2, r3
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d81f      	bhi.n	8008c60 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	685a      	ldr	r2, [r3, #4]
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008c2e:	605a      	str	r2, [r3, #4]
 8008c30:	e016      	b.n	8008c60 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f103 020c 	add.w	r2, r3, #12
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c3e:	7812      	ldrb	r2, [r2, #0]
 8008c40:	b2d2      	uxtb	r2, r2
 8008c42:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c48:	1c5a      	adds	r2, r3, #1
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	3b01      	subs	r3, #1
 8008c58:	b29a      	uxth	r2, r3
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008c60:	2301      	movs	r3, #1
 8008c62:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008c64:	f7fb f8d0 	bl	8003e08 <HAL_GetTick>
 8008c68:	4602      	mov	r2, r0
 8008c6a:	69fb      	ldr	r3, [r7, #28]
 8008c6c:	1ad3      	subs	r3, r2, r3
 8008c6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d803      	bhi.n	8008c7c <HAL_SPI_TransmitReceive+0x3c2>
 8008c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c7a:	d102      	bne.n	8008c82 <HAL_SPI_TransmitReceive+0x3c8>
 8008c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d103      	bne.n	8008c8a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8008c82:	2303      	movs	r3, #3
 8008c84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008c88:	e01c      	b.n	8008cc4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	f47f af5b 	bne.w	8008b4c <HAL_SPI_TransmitReceive+0x292>
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	f47f af54 	bne.w	8008b4c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008ca4:	69fa      	ldr	r2, [r7, #28]
 8008ca6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008ca8:	68f8      	ldr	r0, [r7, #12]
 8008caa:	f000 f93d 	bl	8008f28 <SPI_EndRxTxTransaction>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d006      	beq.n	8008cc2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2220      	movs	r2, #32
 8008cbe:	661a      	str	r2, [r3, #96]	; 0x60
 8008cc0:	e000      	b.n	8008cc4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8008cc2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008cd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3728      	adds	r7, #40	; 0x28
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b083      	sub	sp, #12
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008cee:	b2db      	uxtb	r3, r3
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	370c      	adds	r7, #12
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr

08008cfc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b088      	sub	sp, #32
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	60f8      	str	r0, [r7, #12]
 8008d04:	60b9      	str	r1, [r7, #8]
 8008d06:	603b      	str	r3, [r7, #0]
 8008d08:	4613      	mov	r3, r2
 8008d0a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008d0c:	f7fb f87c 	bl	8003e08 <HAL_GetTick>
 8008d10:	4602      	mov	r2, r0
 8008d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d14:	1a9b      	subs	r3, r3, r2
 8008d16:	683a      	ldr	r2, [r7, #0]
 8008d18:	4413      	add	r3, r2
 8008d1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008d1c:	f7fb f874 	bl	8003e08 <HAL_GetTick>
 8008d20:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008d22:	4b39      	ldr	r3, [pc, #228]	; (8008e08 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	015b      	lsls	r3, r3, #5
 8008d28:	0d1b      	lsrs	r3, r3, #20
 8008d2a:	69fa      	ldr	r2, [r7, #28]
 8008d2c:	fb02 f303 	mul.w	r3, r2, r3
 8008d30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008d32:	e054      	b.n	8008dde <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d3a:	d050      	beq.n	8008dde <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008d3c:	f7fb f864 	bl	8003e08 <HAL_GetTick>
 8008d40:	4602      	mov	r2, r0
 8008d42:	69bb      	ldr	r3, [r7, #24]
 8008d44:	1ad3      	subs	r3, r2, r3
 8008d46:	69fa      	ldr	r2, [r7, #28]
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d902      	bls.n	8008d52 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008d4c:	69fb      	ldr	r3, [r7, #28]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d13d      	bne.n	8008dce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	685a      	ldr	r2, [r3, #4]
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008d60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d6a:	d111      	bne.n	8008d90 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	689b      	ldr	r3, [r3, #8]
 8008d70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d74:	d004      	beq.n	8008d80 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	689b      	ldr	r3, [r3, #8]
 8008d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d7e:	d107      	bne.n	8008d90 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	681a      	ldr	r2, [r3, #0]
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d98:	d10f      	bne.n	8008dba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	681a      	ldr	r2, [r3, #0]
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008da8:	601a      	str	r2, [r3, #0]
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	681a      	ldr	r2, [r3, #0]
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008db8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008dca:	2303      	movs	r3, #3
 8008dcc:	e017      	b.n	8008dfe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d101      	bne.n	8008dd8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	3b01      	subs	r3, #1
 8008ddc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	689a      	ldr	r2, [r3, #8]
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	4013      	ands	r3, r2
 8008de8:	68ba      	ldr	r2, [r7, #8]
 8008dea:	429a      	cmp	r2, r3
 8008dec:	bf0c      	ite	eq
 8008dee:	2301      	moveq	r3, #1
 8008df0:	2300      	movne	r3, #0
 8008df2:	b2db      	uxtb	r3, r3
 8008df4:	461a      	mov	r2, r3
 8008df6:	79fb      	ldrb	r3, [r7, #7]
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	d19b      	bne.n	8008d34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008dfc:	2300      	movs	r3, #0
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3720      	adds	r7, #32
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
 8008e06:	bf00      	nop
 8008e08:	20000008 	.word	0x20000008

08008e0c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b088      	sub	sp, #32
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	60f8      	str	r0, [r7, #12]
 8008e14:	60b9      	str	r1, [r7, #8]
 8008e16:	607a      	str	r2, [r7, #4]
 8008e18:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008e1a:	f7fa fff5 	bl	8003e08 <HAL_GetTick>
 8008e1e:	4602      	mov	r2, r0
 8008e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e22:	1a9b      	subs	r3, r3, r2
 8008e24:	683a      	ldr	r2, [r7, #0]
 8008e26:	4413      	add	r3, r2
 8008e28:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008e2a:	f7fa ffed 	bl	8003e08 <HAL_GetTick>
 8008e2e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008e30:	4b3c      	ldr	r3, [pc, #240]	; (8008f24 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8008e32:	681a      	ldr	r2, [r3, #0]
 8008e34:	4613      	mov	r3, r2
 8008e36:	009b      	lsls	r3, r3, #2
 8008e38:	4413      	add	r3, r2
 8008e3a:	00da      	lsls	r2, r3, #3
 8008e3c:	1ad3      	subs	r3, r2, r3
 8008e3e:	0d1b      	lsrs	r3, r3, #20
 8008e40:	69fa      	ldr	r2, [r7, #28]
 8008e42:	fb02 f303 	mul.w	r3, r2, r3
 8008e46:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8008e48:	e05f      	b.n	8008f0a <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008e50:	d106      	bne.n	8008e60 <SPI_WaitFifoStateUntilTimeout+0x54>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d103      	bne.n	8008e60 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	330c      	adds	r3, #12
 8008e5e:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e66:	d050      	beq.n	8008f0a <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008e68:	f7fa ffce 	bl	8003e08 <HAL_GetTick>
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	69bb      	ldr	r3, [r7, #24]
 8008e70:	1ad3      	subs	r3, r2, r3
 8008e72:	69fa      	ldr	r2, [r7, #28]
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d902      	bls.n	8008e7e <SPI_WaitFifoStateUntilTimeout+0x72>
 8008e78:	69fb      	ldr	r3, [r7, #28]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d13d      	bne.n	8008efa <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	685a      	ldr	r2, [r3, #4]
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008e8c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e96:	d111      	bne.n	8008ebc <SPI_WaitFifoStateUntilTimeout+0xb0>
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	689b      	ldr	r3, [r3, #8]
 8008e9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ea0:	d004      	beq.n	8008eac <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	689b      	ldr	r3, [r3, #8]
 8008ea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008eaa:	d107      	bne.n	8008ebc <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	681a      	ldr	r2, [r3, #0]
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008eba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ec0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ec4:	d10f      	bne.n	8008ee6 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	681a      	ldr	r2, [r3, #0]
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008ed4:	601a      	str	r2, [r3, #0]
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	681a      	ldr	r2, [r3, #0]
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008ee4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2201      	movs	r2, #1
 8008eea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008ef6:	2303      	movs	r3, #3
 8008ef8:	e010      	b.n	8008f1c <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d101      	bne.n	8008f04 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8008f00:	2300      	movs	r3, #0
 8008f02:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	3b01      	subs	r3, #1
 8008f08:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	689a      	ldr	r2, [r3, #8]
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	4013      	ands	r3, r2
 8008f14:	687a      	ldr	r2, [r7, #4]
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d197      	bne.n	8008e4a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8008f1a:	2300      	movs	r3, #0
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3720      	adds	r7, #32
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}
 8008f24:	20000008 	.word	0x20000008

08008f28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b086      	sub	sp, #24
 8008f2c:	af02      	add	r7, sp, #8
 8008f2e:	60f8      	str	r0, [r7, #12]
 8008f30:	60b9      	str	r1, [r7, #8]
 8008f32:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	9300      	str	r3, [sp, #0]
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008f40:	68f8      	ldr	r0, [r7, #12]
 8008f42:	f7ff ff63 	bl	8008e0c <SPI_WaitFifoStateUntilTimeout>
 8008f46:	4603      	mov	r3, r0
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d007      	beq.n	8008f5c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f50:	f043 0220 	orr.w	r2, r3, #32
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008f58:	2303      	movs	r3, #3
 8008f5a:	e027      	b.n	8008fac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	9300      	str	r3, [sp, #0]
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	2200      	movs	r2, #0
 8008f64:	2180      	movs	r1, #128	; 0x80
 8008f66:	68f8      	ldr	r0, [r7, #12]
 8008f68:	f7ff fec8 	bl	8008cfc <SPI_WaitFlagStateUntilTimeout>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d007      	beq.n	8008f82 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f76:	f043 0220 	orr.w	r2, r3, #32
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008f7e:	2303      	movs	r3, #3
 8008f80:	e014      	b.n	8008fac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	9300      	str	r3, [sp, #0]
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008f8e:	68f8      	ldr	r0, [r7, #12]
 8008f90:	f7ff ff3c 	bl	8008e0c <SPI_WaitFifoStateUntilTimeout>
 8008f94:	4603      	mov	r3, r0
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d007      	beq.n	8008faa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f9e:	f043 0220 	orr.w	r2, r3, #32
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008fa6:	2303      	movs	r3, #3
 8008fa8:	e000      	b.n	8008fac <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008faa:	2300      	movs	r3, #0
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3710      	adds	r7, #16
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}

08008fb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b082      	sub	sp, #8
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d101      	bne.n	8008fc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	e042      	b.n	800904c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d106      	bne.n	8008fde <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f000 f83b 	bl	8009054 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2224      	movs	r2, #36	; 0x24
 8008fe2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	681a      	ldr	r2, [r3, #0]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f022 0201 	bic.w	r2, r2, #1
 8008ff4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 f8ce 	bl	8009198 <UART_SetConfig>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	d101      	bne.n	8009006 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009002:	2301      	movs	r3, #1
 8009004:	e022      	b.n	800904c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800900a:	2b00      	cmp	r3, #0
 800900c:	d002      	beq.n	8009014 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f000 fb94 	bl	800973c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	685a      	ldr	r2, [r3, #4]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009022:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	689a      	ldr	r2, [r3, #8]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009032:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	681a      	ldr	r2, [r3, #0]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f042 0201 	orr.w	r2, r2, #1
 8009042:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f000 fc1b 	bl	8009880 <UART_CheckIdleState>
 800904a:	4603      	mov	r3, r0
}
 800904c:	4618      	mov	r0, r3
 800904e:	3708      	adds	r7, #8
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}

08009054 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8009054:	b480      	push	{r7}
 8009056:	b083      	sub	sp, #12
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800905c:	bf00      	nop
 800905e:	370c      	adds	r7, #12
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr

08009068 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b08a      	sub	sp, #40	; 0x28
 800906c:	af02      	add	r7, sp, #8
 800906e:	60f8      	str	r0, [r7, #12]
 8009070:	60b9      	str	r1, [r7, #8]
 8009072:	603b      	str	r3, [r7, #0]
 8009074:	4613      	mov	r3, r2
 8009076:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800907e:	2b20      	cmp	r3, #32
 8009080:	f040 8084 	bne.w	800918c <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d002      	beq.n	8009090 <HAL_UART_Transmit+0x28>
 800908a:	88fb      	ldrh	r3, [r7, #6]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d101      	bne.n	8009094 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009090:	2301      	movs	r3, #1
 8009092:	e07c      	b.n	800918e <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800909a:	2b01      	cmp	r3, #1
 800909c:	d101      	bne.n	80090a2 <HAL_UART_Transmit+0x3a>
 800909e:	2302      	movs	r3, #2
 80090a0:	e075      	b.n	800918e <HAL_UART_Transmit+0x126>
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2201      	movs	r2, #1
 80090a6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2200      	movs	r2, #0
 80090ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	2221      	movs	r2, #33	; 0x21
 80090b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80090ba:	f7fa fea5 	bl	8003e08 <HAL_GetTick>
 80090be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	88fa      	ldrh	r2, [r7, #6]
 80090c4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	88fa      	ldrh	r2, [r7, #6]
 80090cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	689b      	ldr	r3, [r3, #8]
 80090d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090d8:	d108      	bne.n	80090ec <HAL_UART_Transmit+0x84>
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	691b      	ldr	r3, [r3, #16]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d104      	bne.n	80090ec <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80090e2:	2300      	movs	r3, #0
 80090e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	61bb      	str	r3, [r7, #24]
 80090ea:	e003      	b.n	80090f4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80090f0:	2300      	movs	r3, #0
 80090f2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2200      	movs	r2, #0
 80090f8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 80090fc:	e02d      	b.n	800915a <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	9300      	str	r3, [sp, #0]
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	2200      	movs	r2, #0
 8009106:	2180      	movs	r1, #128	; 0x80
 8009108:	68f8      	ldr	r0, [r7, #12]
 800910a:	f000 fc01 	bl	8009910 <UART_WaitOnFlagUntilTimeout>
 800910e:	4603      	mov	r3, r0
 8009110:	2b00      	cmp	r3, #0
 8009112:	d001      	beq.n	8009118 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8009114:	2303      	movs	r3, #3
 8009116:	e03a      	b.n	800918e <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8009118:	69fb      	ldr	r3, [r7, #28]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d10b      	bne.n	8009136 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800911e:	69bb      	ldr	r3, [r7, #24]
 8009120:	881a      	ldrh	r2, [r3, #0]
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800912a:	b292      	uxth	r2, r2
 800912c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800912e:	69bb      	ldr	r3, [r7, #24]
 8009130:	3302      	adds	r3, #2
 8009132:	61bb      	str	r3, [r7, #24]
 8009134:	e008      	b.n	8009148 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009136:	69fb      	ldr	r3, [r7, #28]
 8009138:	781a      	ldrb	r2, [r3, #0]
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	b292      	uxth	r2, r2
 8009140:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009142:	69fb      	ldr	r3, [r7, #28]
 8009144:	3301      	adds	r3, #1
 8009146:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800914e:	b29b      	uxth	r3, r3
 8009150:	3b01      	subs	r3, #1
 8009152:	b29a      	uxth	r2, r3
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009160:	b29b      	uxth	r3, r3
 8009162:	2b00      	cmp	r3, #0
 8009164:	d1cb      	bne.n	80090fe <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	9300      	str	r3, [sp, #0]
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	2200      	movs	r2, #0
 800916e:	2140      	movs	r1, #64	; 0x40
 8009170:	68f8      	ldr	r0, [r7, #12]
 8009172:	f000 fbcd 	bl	8009910 <UART_WaitOnFlagUntilTimeout>
 8009176:	4603      	mov	r3, r0
 8009178:	2b00      	cmp	r3, #0
 800917a:	d001      	beq.n	8009180 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 800917c:	2303      	movs	r3, #3
 800917e:	e006      	b.n	800918e <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2220      	movs	r2, #32
 8009184:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8009188:	2300      	movs	r3, #0
 800918a:	e000      	b.n	800918e <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 800918c:	2302      	movs	r3, #2
  }
}
 800918e:	4618      	mov	r0, r3
 8009190:	3720      	adds	r7, #32
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
	...

08009198 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009198:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800919c:	b088      	sub	sp, #32
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80091a2:	2300      	movs	r3, #0
 80091a4:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	689a      	ldr	r2, [r3, #8]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	691b      	ldr	r3, [r3, #16]
 80091ae:	431a      	orrs	r2, r3
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	695b      	ldr	r3, [r3, #20]
 80091b4:	431a      	orrs	r2, r3
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	69db      	ldr	r3, [r3, #28]
 80091ba:	4313      	orrs	r3, r2
 80091bc:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091c2:	69fa      	ldr	r2, [r7, #28]
 80091c4:	4313      	orrs	r3, r2
 80091c6:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	681a      	ldr	r2, [r3, #0]
 80091ce:	4bb1      	ldr	r3, [pc, #708]	; (8009494 <UART_SetConfig+0x2fc>)
 80091d0:	4013      	ands	r3, r2
 80091d2:	687a      	ldr	r2, [r7, #4]
 80091d4:	6812      	ldr	r2, [r2, #0]
 80091d6:	69f9      	ldr	r1, [r7, #28]
 80091d8:	430b      	orrs	r3, r1
 80091da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	685b      	ldr	r3, [r3, #4]
 80091e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	68da      	ldr	r2, [r3, #12]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	430a      	orrs	r2, r1
 80091f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	699b      	ldr	r3, [r3, #24]
 80091f6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4aa6      	ldr	r2, [pc, #664]	; (8009498 <UART_SetConfig+0x300>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d004      	beq.n	800920c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6a1b      	ldr	r3, [r3, #32]
 8009206:	69fa      	ldr	r2, [r7, #28]
 8009208:	4313      	orrs	r3, r2
 800920a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	689b      	ldr	r3, [r3, #8]
 8009212:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009216:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800921a:	687a      	ldr	r2, [r7, #4]
 800921c:	6812      	ldr	r2, [r2, #0]
 800921e:	69f9      	ldr	r1, [r7, #28]
 8009220:	430b      	orrs	r3, r1
 8009222:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800922a:	f023 010f 	bic.w	r1, r3, #15
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	430a      	orrs	r2, r1
 8009238:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4a97      	ldr	r2, [pc, #604]	; (800949c <UART_SetConfig+0x304>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d121      	bne.n	8009288 <UART_SetConfig+0xf0>
 8009244:	4b96      	ldr	r3, [pc, #600]	; (80094a0 <UART_SetConfig+0x308>)
 8009246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800924a:	f003 0303 	and.w	r3, r3, #3
 800924e:	2b03      	cmp	r3, #3
 8009250:	d816      	bhi.n	8009280 <UART_SetConfig+0xe8>
 8009252:	a201      	add	r2, pc, #4	; (adr r2, 8009258 <UART_SetConfig+0xc0>)
 8009254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009258:	08009269 	.word	0x08009269
 800925c:	08009275 	.word	0x08009275
 8009260:	0800926f 	.word	0x0800926f
 8009264:	0800927b 	.word	0x0800927b
 8009268:	2301      	movs	r3, #1
 800926a:	76fb      	strb	r3, [r7, #27]
 800926c:	e0e8      	b.n	8009440 <UART_SetConfig+0x2a8>
 800926e:	2302      	movs	r3, #2
 8009270:	76fb      	strb	r3, [r7, #27]
 8009272:	e0e5      	b.n	8009440 <UART_SetConfig+0x2a8>
 8009274:	2304      	movs	r3, #4
 8009276:	76fb      	strb	r3, [r7, #27]
 8009278:	e0e2      	b.n	8009440 <UART_SetConfig+0x2a8>
 800927a:	2308      	movs	r3, #8
 800927c:	76fb      	strb	r3, [r7, #27]
 800927e:	e0df      	b.n	8009440 <UART_SetConfig+0x2a8>
 8009280:	2310      	movs	r3, #16
 8009282:	76fb      	strb	r3, [r7, #27]
 8009284:	bf00      	nop
 8009286:	e0db      	b.n	8009440 <UART_SetConfig+0x2a8>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a85      	ldr	r2, [pc, #532]	; (80094a4 <UART_SetConfig+0x30c>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d134      	bne.n	80092fc <UART_SetConfig+0x164>
 8009292:	4b83      	ldr	r3, [pc, #524]	; (80094a0 <UART_SetConfig+0x308>)
 8009294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009298:	f003 030c 	and.w	r3, r3, #12
 800929c:	2b0c      	cmp	r3, #12
 800929e:	d829      	bhi.n	80092f4 <UART_SetConfig+0x15c>
 80092a0:	a201      	add	r2, pc, #4	; (adr r2, 80092a8 <UART_SetConfig+0x110>)
 80092a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092a6:	bf00      	nop
 80092a8:	080092dd 	.word	0x080092dd
 80092ac:	080092f5 	.word	0x080092f5
 80092b0:	080092f5 	.word	0x080092f5
 80092b4:	080092f5 	.word	0x080092f5
 80092b8:	080092e9 	.word	0x080092e9
 80092bc:	080092f5 	.word	0x080092f5
 80092c0:	080092f5 	.word	0x080092f5
 80092c4:	080092f5 	.word	0x080092f5
 80092c8:	080092e3 	.word	0x080092e3
 80092cc:	080092f5 	.word	0x080092f5
 80092d0:	080092f5 	.word	0x080092f5
 80092d4:	080092f5 	.word	0x080092f5
 80092d8:	080092ef 	.word	0x080092ef
 80092dc:	2300      	movs	r3, #0
 80092de:	76fb      	strb	r3, [r7, #27]
 80092e0:	e0ae      	b.n	8009440 <UART_SetConfig+0x2a8>
 80092e2:	2302      	movs	r3, #2
 80092e4:	76fb      	strb	r3, [r7, #27]
 80092e6:	e0ab      	b.n	8009440 <UART_SetConfig+0x2a8>
 80092e8:	2304      	movs	r3, #4
 80092ea:	76fb      	strb	r3, [r7, #27]
 80092ec:	e0a8      	b.n	8009440 <UART_SetConfig+0x2a8>
 80092ee:	2308      	movs	r3, #8
 80092f0:	76fb      	strb	r3, [r7, #27]
 80092f2:	e0a5      	b.n	8009440 <UART_SetConfig+0x2a8>
 80092f4:	2310      	movs	r3, #16
 80092f6:	76fb      	strb	r3, [r7, #27]
 80092f8:	bf00      	nop
 80092fa:	e0a1      	b.n	8009440 <UART_SetConfig+0x2a8>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a69      	ldr	r2, [pc, #420]	; (80094a8 <UART_SetConfig+0x310>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d120      	bne.n	8009348 <UART_SetConfig+0x1b0>
 8009306:	4b66      	ldr	r3, [pc, #408]	; (80094a0 <UART_SetConfig+0x308>)
 8009308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800930c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009310:	2b10      	cmp	r3, #16
 8009312:	d00f      	beq.n	8009334 <UART_SetConfig+0x19c>
 8009314:	2b10      	cmp	r3, #16
 8009316:	d802      	bhi.n	800931e <UART_SetConfig+0x186>
 8009318:	2b00      	cmp	r3, #0
 800931a:	d005      	beq.n	8009328 <UART_SetConfig+0x190>
 800931c:	e010      	b.n	8009340 <UART_SetConfig+0x1a8>
 800931e:	2b20      	cmp	r3, #32
 8009320:	d005      	beq.n	800932e <UART_SetConfig+0x196>
 8009322:	2b30      	cmp	r3, #48	; 0x30
 8009324:	d009      	beq.n	800933a <UART_SetConfig+0x1a2>
 8009326:	e00b      	b.n	8009340 <UART_SetConfig+0x1a8>
 8009328:	2300      	movs	r3, #0
 800932a:	76fb      	strb	r3, [r7, #27]
 800932c:	e088      	b.n	8009440 <UART_SetConfig+0x2a8>
 800932e:	2302      	movs	r3, #2
 8009330:	76fb      	strb	r3, [r7, #27]
 8009332:	e085      	b.n	8009440 <UART_SetConfig+0x2a8>
 8009334:	2304      	movs	r3, #4
 8009336:	76fb      	strb	r3, [r7, #27]
 8009338:	e082      	b.n	8009440 <UART_SetConfig+0x2a8>
 800933a:	2308      	movs	r3, #8
 800933c:	76fb      	strb	r3, [r7, #27]
 800933e:	e07f      	b.n	8009440 <UART_SetConfig+0x2a8>
 8009340:	2310      	movs	r3, #16
 8009342:	76fb      	strb	r3, [r7, #27]
 8009344:	bf00      	nop
 8009346:	e07b      	b.n	8009440 <UART_SetConfig+0x2a8>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4a57      	ldr	r2, [pc, #348]	; (80094ac <UART_SetConfig+0x314>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d120      	bne.n	8009394 <UART_SetConfig+0x1fc>
 8009352:	4b53      	ldr	r3, [pc, #332]	; (80094a0 <UART_SetConfig+0x308>)
 8009354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009358:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800935c:	2b40      	cmp	r3, #64	; 0x40
 800935e:	d00f      	beq.n	8009380 <UART_SetConfig+0x1e8>
 8009360:	2b40      	cmp	r3, #64	; 0x40
 8009362:	d802      	bhi.n	800936a <UART_SetConfig+0x1d2>
 8009364:	2b00      	cmp	r3, #0
 8009366:	d005      	beq.n	8009374 <UART_SetConfig+0x1dc>
 8009368:	e010      	b.n	800938c <UART_SetConfig+0x1f4>
 800936a:	2b80      	cmp	r3, #128	; 0x80
 800936c:	d005      	beq.n	800937a <UART_SetConfig+0x1e2>
 800936e:	2bc0      	cmp	r3, #192	; 0xc0
 8009370:	d009      	beq.n	8009386 <UART_SetConfig+0x1ee>
 8009372:	e00b      	b.n	800938c <UART_SetConfig+0x1f4>
 8009374:	2300      	movs	r3, #0
 8009376:	76fb      	strb	r3, [r7, #27]
 8009378:	e062      	b.n	8009440 <UART_SetConfig+0x2a8>
 800937a:	2302      	movs	r3, #2
 800937c:	76fb      	strb	r3, [r7, #27]
 800937e:	e05f      	b.n	8009440 <UART_SetConfig+0x2a8>
 8009380:	2304      	movs	r3, #4
 8009382:	76fb      	strb	r3, [r7, #27]
 8009384:	e05c      	b.n	8009440 <UART_SetConfig+0x2a8>
 8009386:	2308      	movs	r3, #8
 8009388:	76fb      	strb	r3, [r7, #27]
 800938a:	e059      	b.n	8009440 <UART_SetConfig+0x2a8>
 800938c:	2310      	movs	r3, #16
 800938e:	76fb      	strb	r3, [r7, #27]
 8009390:	bf00      	nop
 8009392:	e055      	b.n	8009440 <UART_SetConfig+0x2a8>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4a45      	ldr	r2, [pc, #276]	; (80094b0 <UART_SetConfig+0x318>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d124      	bne.n	80093e8 <UART_SetConfig+0x250>
 800939e:	4b40      	ldr	r3, [pc, #256]	; (80094a0 <UART_SetConfig+0x308>)
 80093a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093ac:	d012      	beq.n	80093d4 <UART_SetConfig+0x23c>
 80093ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093b2:	d802      	bhi.n	80093ba <UART_SetConfig+0x222>
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d007      	beq.n	80093c8 <UART_SetConfig+0x230>
 80093b8:	e012      	b.n	80093e0 <UART_SetConfig+0x248>
 80093ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093be:	d006      	beq.n	80093ce <UART_SetConfig+0x236>
 80093c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80093c4:	d009      	beq.n	80093da <UART_SetConfig+0x242>
 80093c6:	e00b      	b.n	80093e0 <UART_SetConfig+0x248>
 80093c8:	2300      	movs	r3, #0
 80093ca:	76fb      	strb	r3, [r7, #27]
 80093cc:	e038      	b.n	8009440 <UART_SetConfig+0x2a8>
 80093ce:	2302      	movs	r3, #2
 80093d0:	76fb      	strb	r3, [r7, #27]
 80093d2:	e035      	b.n	8009440 <UART_SetConfig+0x2a8>
 80093d4:	2304      	movs	r3, #4
 80093d6:	76fb      	strb	r3, [r7, #27]
 80093d8:	e032      	b.n	8009440 <UART_SetConfig+0x2a8>
 80093da:	2308      	movs	r3, #8
 80093dc:	76fb      	strb	r3, [r7, #27]
 80093de:	e02f      	b.n	8009440 <UART_SetConfig+0x2a8>
 80093e0:	2310      	movs	r3, #16
 80093e2:	76fb      	strb	r3, [r7, #27]
 80093e4:	bf00      	nop
 80093e6:	e02b      	b.n	8009440 <UART_SetConfig+0x2a8>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4a2a      	ldr	r2, [pc, #168]	; (8009498 <UART_SetConfig+0x300>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d124      	bne.n	800943c <UART_SetConfig+0x2a4>
 80093f2:	4b2b      	ldr	r3, [pc, #172]	; (80094a0 <UART_SetConfig+0x308>)
 80093f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80093fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009400:	d012      	beq.n	8009428 <UART_SetConfig+0x290>
 8009402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009406:	d802      	bhi.n	800940e <UART_SetConfig+0x276>
 8009408:	2b00      	cmp	r3, #0
 800940a:	d007      	beq.n	800941c <UART_SetConfig+0x284>
 800940c:	e012      	b.n	8009434 <UART_SetConfig+0x29c>
 800940e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009412:	d006      	beq.n	8009422 <UART_SetConfig+0x28a>
 8009414:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009418:	d009      	beq.n	800942e <UART_SetConfig+0x296>
 800941a:	e00b      	b.n	8009434 <UART_SetConfig+0x29c>
 800941c:	2300      	movs	r3, #0
 800941e:	76fb      	strb	r3, [r7, #27]
 8009420:	e00e      	b.n	8009440 <UART_SetConfig+0x2a8>
 8009422:	2302      	movs	r3, #2
 8009424:	76fb      	strb	r3, [r7, #27]
 8009426:	e00b      	b.n	8009440 <UART_SetConfig+0x2a8>
 8009428:	2304      	movs	r3, #4
 800942a:	76fb      	strb	r3, [r7, #27]
 800942c:	e008      	b.n	8009440 <UART_SetConfig+0x2a8>
 800942e:	2308      	movs	r3, #8
 8009430:	76fb      	strb	r3, [r7, #27]
 8009432:	e005      	b.n	8009440 <UART_SetConfig+0x2a8>
 8009434:	2310      	movs	r3, #16
 8009436:	76fb      	strb	r3, [r7, #27]
 8009438:	bf00      	nop
 800943a:	e001      	b.n	8009440 <UART_SetConfig+0x2a8>
 800943c:	2310      	movs	r3, #16
 800943e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4a14      	ldr	r2, [pc, #80]	; (8009498 <UART_SetConfig+0x300>)
 8009446:	4293      	cmp	r3, r2
 8009448:	f040 80a1 	bne.w	800958e <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800944c:	7efb      	ldrb	r3, [r7, #27]
 800944e:	2b08      	cmp	r3, #8
 8009450:	d836      	bhi.n	80094c0 <UART_SetConfig+0x328>
 8009452:	a201      	add	r2, pc, #4	; (adr r2, 8009458 <UART_SetConfig+0x2c0>)
 8009454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009458:	0800947d 	.word	0x0800947d
 800945c:	080094c1 	.word	0x080094c1
 8009460:	08009485 	.word	0x08009485
 8009464:	080094c1 	.word	0x080094c1
 8009468:	0800948b 	.word	0x0800948b
 800946c:	080094c1 	.word	0x080094c1
 8009470:	080094c1 	.word	0x080094c1
 8009474:	080094c1 	.word	0x080094c1
 8009478:	080094b9 	.word	0x080094b9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800947c:	f7fe fb74 	bl	8007b68 <HAL_RCC_GetPCLK1Freq>
 8009480:	6178      	str	r0, [r7, #20]
        break;
 8009482:	e022      	b.n	80094ca <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009484:	4b0b      	ldr	r3, [pc, #44]	; (80094b4 <UART_SetConfig+0x31c>)
 8009486:	617b      	str	r3, [r7, #20]
        break;
 8009488:	e01f      	b.n	80094ca <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800948a:	f7fe fad7 	bl	8007a3c <HAL_RCC_GetSysClockFreq>
 800948e:	6178      	str	r0, [r7, #20]
        break;
 8009490:	e01b      	b.n	80094ca <UART_SetConfig+0x332>
 8009492:	bf00      	nop
 8009494:	cfff69f3 	.word	0xcfff69f3
 8009498:	40008000 	.word	0x40008000
 800949c:	40013800 	.word	0x40013800
 80094a0:	40021000 	.word	0x40021000
 80094a4:	40004400 	.word	0x40004400
 80094a8:	40004800 	.word	0x40004800
 80094ac:	40004c00 	.word	0x40004c00
 80094b0:	40005000 	.word	0x40005000
 80094b4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80094b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094bc:	617b      	str	r3, [r7, #20]
        break;
 80094be:	e004      	b.n	80094ca <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 80094c0:	2300      	movs	r3, #0
 80094c2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80094c4:	2301      	movs	r3, #1
 80094c6:	76bb      	strb	r3, [r7, #26]
        break;
 80094c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	f000 811d 	beq.w	800970c <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d6:	4a97      	ldr	r2, [pc, #604]	; (8009734 <UART_SetConfig+0x59c>)
 80094d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094dc:	461a      	mov	r2, r3
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80094e4:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	685a      	ldr	r2, [r3, #4]
 80094ea:	4613      	mov	r3, r2
 80094ec:	005b      	lsls	r3, r3, #1
 80094ee:	4413      	add	r3, r2
 80094f0:	68ba      	ldr	r2, [r7, #8]
 80094f2:	429a      	cmp	r2, r3
 80094f4:	d305      	bcc.n	8009502 <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80094fc:	68ba      	ldr	r2, [r7, #8]
 80094fe:	429a      	cmp	r2, r3
 8009500:	d902      	bls.n	8009508 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 8009502:	2301      	movs	r3, #1
 8009504:	76bb      	strb	r3, [r7, #26]
 8009506:	e101      	b.n	800970c <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	4618      	mov	r0, r3
 800950c:	f04f 0100 	mov.w	r1, #0
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009514:	4a87      	ldr	r2, [pc, #540]	; (8009734 <UART_SetConfig+0x59c>)
 8009516:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800951a:	b29b      	uxth	r3, r3
 800951c:	f04f 0400 	mov.w	r4, #0
 8009520:	461a      	mov	r2, r3
 8009522:	4623      	mov	r3, r4
 8009524:	f7f7 fba8 	bl	8000c78 <__aeabi_uldivmod>
 8009528:	4603      	mov	r3, r0
 800952a:	460c      	mov	r4, r1
 800952c:	4619      	mov	r1, r3
 800952e:	4622      	mov	r2, r4
 8009530:	f04f 0300 	mov.w	r3, #0
 8009534:	f04f 0400 	mov.w	r4, #0
 8009538:	0214      	lsls	r4, r2, #8
 800953a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800953e:	020b      	lsls	r3, r1, #8
 8009540:	687a      	ldr	r2, [r7, #4]
 8009542:	6852      	ldr	r2, [r2, #4]
 8009544:	0852      	lsrs	r2, r2, #1
 8009546:	4611      	mov	r1, r2
 8009548:	f04f 0200 	mov.w	r2, #0
 800954c:	eb13 0b01 	adds.w	fp, r3, r1
 8009550:	eb44 0c02 	adc.w	ip, r4, r2
 8009554:	4658      	mov	r0, fp
 8009556:	4661      	mov	r1, ip
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	f04f 0400 	mov.w	r4, #0
 8009560:	461a      	mov	r2, r3
 8009562:	4623      	mov	r3, r4
 8009564:	f7f7 fb88 	bl	8000c78 <__aeabi_uldivmod>
 8009568:	4603      	mov	r3, r0
 800956a:	460c      	mov	r4, r1
 800956c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009574:	d308      	bcc.n	8009588 <UART_SetConfig+0x3f0>
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800957c:	d204      	bcs.n	8009588 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	693a      	ldr	r2, [r7, #16]
 8009584:	60da      	str	r2, [r3, #12]
 8009586:	e0c1      	b.n	800970c <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 8009588:	2301      	movs	r3, #1
 800958a:	76bb      	strb	r3, [r7, #26]
 800958c:	e0be      	b.n	800970c <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	69db      	ldr	r3, [r3, #28]
 8009592:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009596:	d164      	bne.n	8009662 <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8009598:	7efb      	ldrb	r3, [r7, #27]
 800959a:	2b08      	cmp	r3, #8
 800959c:	d827      	bhi.n	80095ee <UART_SetConfig+0x456>
 800959e:	a201      	add	r2, pc, #4	; (adr r2, 80095a4 <UART_SetConfig+0x40c>)
 80095a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095a4:	080095c9 	.word	0x080095c9
 80095a8:	080095d1 	.word	0x080095d1
 80095ac:	080095d9 	.word	0x080095d9
 80095b0:	080095ef 	.word	0x080095ef
 80095b4:	080095df 	.word	0x080095df
 80095b8:	080095ef 	.word	0x080095ef
 80095bc:	080095ef 	.word	0x080095ef
 80095c0:	080095ef 	.word	0x080095ef
 80095c4:	080095e7 	.word	0x080095e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80095c8:	f7fe face 	bl	8007b68 <HAL_RCC_GetPCLK1Freq>
 80095cc:	6178      	str	r0, [r7, #20]
        break;
 80095ce:	e013      	b.n	80095f8 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80095d0:	f7fe fae0 	bl	8007b94 <HAL_RCC_GetPCLK2Freq>
 80095d4:	6178      	str	r0, [r7, #20]
        break;
 80095d6:	e00f      	b.n	80095f8 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80095d8:	4b57      	ldr	r3, [pc, #348]	; (8009738 <UART_SetConfig+0x5a0>)
 80095da:	617b      	str	r3, [r7, #20]
        break;
 80095dc:	e00c      	b.n	80095f8 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80095de:	f7fe fa2d 	bl	8007a3c <HAL_RCC_GetSysClockFreq>
 80095e2:	6178      	str	r0, [r7, #20]
        break;
 80095e4:	e008      	b.n	80095f8 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80095e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80095ea:	617b      	str	r3, [r7, #20]
        break;
 80095ec:	e004      	b.n	80095f8 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 80095ee:	2300      	movs	r3, #0
 80095f0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80095f2:	2301      	movs	r3, #1
 80095f4:	76bb      	strb	r3, [r7, #26]
        break;
 80095f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	f000 8086 	beq.w	800970c <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009604:	4a4b      	ldr	r2, [pc, #300]	; (8009734 <UART_SetConfig+0x59c>)
 8009606:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800960a:	461a      	mov	r2, r3
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009612:	005a      	lsls	r2, r3, #1
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	085b      	lsrs	r3, r3, #1
 800961a:	441a      	add	r2, r3
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	685b      	ldr	r3, [r3, #4]
 8009620:	fbb2 f3f3 	udiv	r3, r2, r3
 8009624:	b29b      	uxth	r3, r3
 8009626:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	2b0f      	cmp	r3, #15
 800962c:	d916      	bls.n	800965c <UART_SetConfig+0x4c4>
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009634:	d212      	bcs.n	800965c <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	b29b      	uxth	r3, r3
 800963a:	f023 030f 	bic.w	r3, r3, #15
 800963e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	085b      	lsrs	r3, r3, #1
 8009644:	b29b      	uxth	r3, r3
 8009646:	f003 0307 	and.w	r3, r3, #7
 800964a:	b29a      	uxth	r2, r3
 800964c:	89fb      	ldrh	r3, [r7, #14]
 800964e:	4313      	orrs	r3, r2
 8009650:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	89fa      	ldrh	r2, [r7, #14]
 8009658:	60da      	str	r2, [r3, #12]
 800965a:	e057      	b.n	800970c <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 800965c:	2301      	movs	r3, #1
 800965e:	76bb      	strb	r3, [r7, #26]
 8009660:	e054      	b.n	800970c <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009662:	7efb      	ldrb	r3, [r7, #27]
 8009664:	2b08      	cmp	r3, #8
 8009666:	d828      	bhi.n	80096ba <UART_SetConfig+0x522>
 8009668:	a201      	add	r2, pc, #4	; (adr r2, 8009670 <UART_SetConfig+0x4d8>)
 800966a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800966e:	bf00      	nop
 8009670:	08009695 	.word	0x08009695
 8009674:	0800969d 	.word	0x0800969d
 8009678:	080096a5 	.word	0x080096a5
 800967c:	080096bb 	.word	0x080096bb
 8009680:	080096ab 	.word	0x080096ab
 8009684:	080096bb 	.word	0x080096bb
 8009688:	080096bb 	.word	0x080096bb
 800968c:	080096bb 	.word	0x080096bb
 8009690:	080096b3 	.word	0x080096b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009694:	f7fe fa68 	bl	8007b68 <HAL_RCC_GetPCLK1Freq>
 8009698:	6178      	str	r0, [r7, #20]
        break;
 800969a:	e013      	b.n	80096c4 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800969c:	f7fe fa7a 	bl	8007b94 <HAL_RCC_GetPCLK2Freq>
 80096a0:	6178      	str	r0, [r7, #20]
        break;
 80096a2:	e00f      	b.n	80096c4 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80096a4:	4b24      	ldr	r3, [pc, #144]	; (8009738 <UART_SetConfig+0x5a0>)
 80096a6:	617b      	str	r3, [r7, #20]
        break;
 80096a8:	e00c      	b.n	80096c4 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80096aa:	f7fe f9c7 	bl	8007a3c <HAL_RCC_GetSysClockFreq>
 80096ae:	6178      	str	r0, [r7, #20]
        break;
 80096b0:	e008      	b.n	80096c4 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80096b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80096b6:	617b      	str	r3, [r7, #20]
        break;
 80096b8:	e004      	b.n	80096c4 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 80096ba:	2300      	movs	r3, #0
 80096bc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80096be:	2301      	movs	r3, #1
 80096c0:	76bb      	strb	r3, [r7, #26]
        break;
 80096c2:	bf00      	nop
    }

    if (pclk != 0U)
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d020      	beq.n	800970c <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ce:	4a19      	ldr	r2, [pc, #100]	; (8009734 <UART_SetConfig+0x59c>)
 80096d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80096d4:	461a      	mov	r2, r3
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	fbb3 f2f2 	udiv	r2, r3, r2
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	685b      	ldr	r3, [r3, #4]
 80096e0:	085b      	lsrs	r3, r3, #1
 80096e2:	441a      	add	r2, r3
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	685b      	ldr	r3, [r3, #4]
 80096e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80096ec:	b29b      	uxth	r3, r3
 80096ee:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	2b0f      	cmp	r3, #15
 80096f4:	d908      	bls.n	8009708 <UART_SetConfig+0x570>
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096fc:	d204      	bcs.n	8009708 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	693a      	ldr	r2, [r7, #16]
 8009704:	60da      	str	r2, [r3, #12]
 8009706:	e001      	b.n	800970c <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8009708:	2301      	movs	r3, #1
 800970a:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2201      	movs	r2, #1
 8009710:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2201      	movs	r2, #1
 8009718:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2200      	movs	r2, #0
 8009720:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2200      	movs	r2, #0
 8009726:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8009728:	7ebb      	ldrb	r3, [r7, #26]
}
 800972a:	4618      	mov	r0, r3
 800972c:	3720      	adds	r7, #32
 800972e:	46bd      	mov	sp, r7
 8009730:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8009734:	08010014 	.word	0x08010014
 8009738:	00f42400 	.word	0x00f42400

0800973c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800973c:	b480      	push	{r7}
 800973e:	b083      	sub	sp, #12
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009748:	f003 0301 	and.w	r3, r3, #1
 800974c:	2b00      	cmp	r3, #0
 800974e:	d00a      	beq.n	8009766 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	430a      	orrs	r2, r1
 8009764:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800976a:	f003 0302 	and.w	r3, r3, #2
 800976e:	2b00      	cmp	r3, #0
 8009770:	d00a      	beq.n	8009788 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	430a      	orrs	r2, r1
 8009786:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800978c:	f003 0304 	and.w	r3, r3, #4
 8009790:	2b00      	cmp	r3, #0
 8009792:	d00a      	beq.n	80097aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	430a      	orrs	r2, r1
 80097a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ae:	f003 0308 	and.w	r3, r3, #8
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d00a      	beq.n	80097cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	685b      	ldr	r3, [r3, #4]
 80097bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	430a      	orrs	r2, r1
 80097ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097d0:	f003 0310 	and.w	r3, r3, #16
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d00a      	beq.n	80097ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	689b      	ldr	r3, [r3, #8]
 80097de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	430a      	orrs	r2, r1
 80097ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097f2:	f003 0320 	and.w	r3, r3, #32
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d00a      	beq.n	8009810 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	689b      	ldr	r3, [r3, #8]
 8009800:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	430a      	orrs	r2, r1
 800980e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009818:	2b00      	cmp	r3, #0
 800981a:	d01a      	beq.n	8009852 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	685b      	ldr	r3, [r3, #4]
 8009822:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	430a      	orrs	r2, r1
 8009830:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009836:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800983a:	d10a      	bne.n	8009852 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	430a      	orrs	r2, r1
 8009850:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800985a:	2b00      	cmp	r3, #0
 800985c:	d00a      	beq.n	8009874 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	430a      	orrs	r2, r1
 8009872:	605a      	str	r2, [r3, #4]
  }
}
 8009874:	bf00      	nop
 8009876:	370c      	adds	r7, #12
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr

08009880 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b086      	sub	sp, #24
 8009884:	af02      	add	r7, sp, #8
 8009886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2200      	movs	r2, #0
 800988c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009890:	f7fa faba 	bl	8003e08 <HAL_GetTick>
 8009894:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f003 0308 	and.w	r3, r3, #8
 80098a0:	2b08      	cmp	r3, #8
 80098a2:	d10e      	bne.n	80098c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80098a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80098a8:	9300      	str	r3, [sp, #0]
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2200      	movs	r2, #0
 80098ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f000 f82c 	bl	8009910 <UART_WaitOnFlagUntilTimeout>
 80098b8:	4603      	mov	r3, r0
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d001      	beq.n	80098c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80098be:	2303      	movs	r3, #3
 80098c0:	e022      	b.n	8009908 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f003 0304 	and.w	r3, r3, #4
 80098cc:	2b04      	cmp	r3, #4
 80098ce:	d10e      	bne.n	80098ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80098d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80098d4:	9300      	str	r3, [sp, #0]
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	2200      	movs	r2, #0
 80098da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f000 f816 	bl	8009910 <UART_WaitOnFlagUntilTimeout>
 80098e4:	4603      	mov	r3, r0
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d001      	beq.n	80098ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80098ea:	2303      	movs	r3, #3
 80098ec:	e00c      	b.n	8009908 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2220      	movs	r2, #32
 80098f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2220      	movs	r2, #32
 80098fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2200      	movs	r2, #0
 8009902:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009906:	2300      	movs	r3, #0
}
 8009908:	4618      	mov	r0, r3
 800990a:	3710      	adds	r7, #16
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}

08009910 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b084      	sub	sp, #16
 8009914:	af00      	add	r7, sp, #0
 8009916:	60f8      	str	r0, [r7, #12]
 8009918:	60b9      	str	r1, [r7, #8]
 800991a:	603b      	str	r3, [r7, #0]
 800991c:	4613      	mov	r3, r2
 800991e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009920:	e062      	b.n	80099e8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009922:	69bb      	ldr	r3, [r7, #24]
 8009924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009928:	d05e      	beq.n	80099e8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800992a:	f7fa fa6d 	bl	8003e08 <HAL_GetTick>
 800992e:	4602      	mov	r2, r0
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	1ad3      	subs	r3, r2, r3
 8009934:	69ba      	ldr	r2, [r7, #24]
 8009936:	429a      	cmp	r2, r3
 8009938:	d302      	bcc.n	8009940 <UART_WaitOnFlagUntilTimeout+0x30>
 800993a:	69bb      	ldr	r3, [r7, #24]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d11d      	bne.n	800997c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800994e:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	689a      	ldr	r2, [r3, #8]
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f022 0201 	bic.w	r2, r2, #1
 800995e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2220      	movs	r2, #32
 8009964:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2220      	movs	r2, #32
 800996c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2200      	movs	r2, #0
 8009974:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009978:	2303      	movs	r3, #3
 800997a:	e045      	b.n	8009a08 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f003 0304 	and.w	r3, r3, #4
 8009986:	2b00      	cmp	r3, #0
 8009988:	d02e      	beq.n	80099e8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	69db      	ldr	r3, [r3, #28]
 8009990:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009994:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009998:	d126      	bne.n	80099e8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80099a2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	681a      	ldr	r2, [r3, #0]
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80099b2:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	689a      	ldr	r2, [r3, #8]
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f022 0201 	bic.w	r2, r2, #1
 80099c2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	2220      	movs	r2, #32
 80099c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	2220      	movs	r2, #32
 80099d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2220      	movs	r2, #32
 80099d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2200      	movs	r2, #0
 80099e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80099e4:	2303      	movs	r3, #3
 80099e6:	e00f      	b.n	8009a08 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	69da      	ldr	r2, [r3, #28]
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	4013      	ands	r3, r2
 80099f2:	68ba      	ldr	r2, [r7, #8]
 80099f4:	429a      	cmp	r2, r3
 80099f6:	bf0c      	ite	eq
 80099f8:	2301      	moveq	r3, #1
 80099fa:	2300      	movne	r3, #0
 80099fc:	b2db      	uxtb	r3, r3
 80099fe:	461a      	mov	r2, r3
 8009a00:	79fb      	ldrb	r3, [r7, #7]
 8009a02:	429a      	cmp	r2, r3
 8009a04:	d08d      	beq.n	8009922 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009a06:	2300      	movs	r3, #0
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3710      	adds	r7, #16
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b085      	sub	sp, #20
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009a1e:	2b01      	cmp	r3, #1
 8009a20:	d101      	bne.n	8009a26 <HAL_UARTEx_DisableFifoMode+0x16>
 8009a22:	2302      	movs	r3, #2
 8009a24:	e027      	b.n	8009a76 <HAL_UARTEx_DisableFifoMode+0x66>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2201      	movs	r2, #1
 8009a2a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2224      	movs	r2, #36	; 0x24
 8009a32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	681a      	ldr	r2, [r3, #0]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f022 0201 	bic.w	r2, r2, #1
 8009a4c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009a54:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	68fa      	ldr	r2, [r7, #12]
 8009a62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2220      	movs	r2, #32
 8009a68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009a74:	2300      	movs	r3, #0
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3714      	adds	r7, #20
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a80:	4770      	bx	lr

08009a82 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009a82:	b580      	push	{r7, lr}
 8009a84:	b084      	sub	sp, #16
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	6078      	str	r0, [r7, #4]
 8009a8a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009a92:	2b01      	cmp	r3, #1
 8009a94:	d101      	bne.n	8009a9a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009a96:	2302      	movs	r3, #2
 8009a98:	e02d      	b.n	8009af6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2201      	movs	r2, #1
 8009a9e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2224      	movs	r2, #36	; 0x24
 8009aa6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	681a      	ldr	r2, [r3, #0]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f022 0201 	bic.w	r2, r2, #1
 8009ac0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	689b      	ldr	r3, [r3, #8]
 8009ac8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	683a      	ldr	r2, [r7, #0]
 8009ad2:	430a      	orrs	r2, r1
 8009ad4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f000 f850 	bl	8009b7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	68fa      	ldr	r2, [r7, #12]
 8009ae2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2220      	movs	r2, #32
 8009ae8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2200      	movs	r2, #0
 8009af0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009af4:	2300      	movs	r3, #0
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3710      	adds	r7, #16
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}

08009afe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009afe:	b580      	push	{r7, lr}
 8009b00:	b084      	sub	sp, #16
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	6078      	str	r0, [r7, #4]
 8009b06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	d101      	bne.n	8009b16 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009b12:	2302      	movs	r3, #2
 8009b14:	e02d      	b.n	8009b72 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2201      	movs	r2, #1
 8009b1a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2224      	movs	r2, #36	; 0x24
 8009b22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	681a      	ldr	r2, [r3, #0]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f022 0201 	bic.w	r2, r2, #1
 8009b3c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	689b      	ldr	r3, [r3, #8]
 8009b44:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	683a      	ldr	r2, [r7, #0]
 8009b4e:	430a      	orrs	r2, r1
 8009b50:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f000 f812 	bl	8009b7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	68fa      	ldr	r2, [r7, #12]
 8009b5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2220      	movs	r2, #32
 8009b64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009b70:	2300      	movs	r3, #0
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3710      	adds	r7, #16
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}
	...

08009b7c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b089      	sub	sp, #36	; 0x24
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009b84:	4a2f      	ldr	r2, [pc, #188]	; (8009c44 <UARTEx_SetNbDataToProcess+0xc8>)
 8009b86:	f107 0314 	add.w	r3, r7, #20
 8009b8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009b8e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009b92:	4a2d      	ldr	r2, [pc, #180]	; (8009c48 <UARTEx_SetNbDataToProcess+0xcc>)
 8009b94:	f107 030c 	add.w	r3, r7, #12
 8009b98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009b9c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d108      	bne.n	8009bba <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2201      	movs	r2, #1
 8009bac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2201      	movs	r2, #1
 8009bb4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009bb8:	e03d      	b.n	8009c36 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009bba:	2308      	movs	r3, #8
 8009bbc:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009bbe:	2308      	movs	r3, #8
 8009bc0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	689b      	ldr	r3, [r3, #8]
 8009bc8:	0e5b      	lsrs	r3, r3, #25
 8009bca:	b2db      	uxtb	r3, r3
 8009bcc:	f003 0307 	and.w	r3, r3, #7
 8009bd0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	689b      	ldr	r3, [r3, #8]
 8009bd8:	0f5b      	lsrs	r3, r3, #29
 8009bda:	b2db      	uxtb	r3, r3
 8009bdc:	f003 0307 	and.w	r3, r3, #7
 8009be0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009be2:	7fbb      	ldrb	r3, [r7, #30]
 8009be4:	7f3a      	ldrb	r2, [r7, #28]
 8009be6:	f107 0120 	add.w	r1, r7, #32
 8009bea:	440a      	add	r2, r1
 8009bec:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009bf0:	fb02 f303 	mul.w	r3, r2, r3
 8009bf4:	7f3a      	ldrb	r2, [r7, #28]
 8009bf6:	f107 0120 	add.w	r1, r7, #32
 8009bfa:	440a      	add	r2, r1
 8009bfc:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009c00:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c04:	b29a      	uxth	r2, r3
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009c0c:	7ffb      	ldrb	r3, [r7, #31]
 8009c0e:	7f7a      	ldrb	r2, [r7, #29]
 8009c10:	f107 0120 	add.w	r1, r7, #32
 8009c14:	440a      	add	r2, r1
 8009c16:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009c1a:	fb02 f303 	mul.w	r3, r2, r3
 8009c1e:	7f7a      	ldrb	r2, [r7, #29]
 8009c20:	f107 0120 	add.w	r1, r7, #32
 8009c24:	440a      	add	r2, r1
 8009c26:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009c2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c2e:	b29a      	uxth	r2, r3
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009c36:	bf00      	nop
 8009c38:	3724      	adds	r7, #36	; 0x24
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr
 8009c42:	bf00      	nop
 8009c44:	0800ffb8 	.word	0x0800ffb8
 8009c48:	0800ffc0 	.word	0x0800ffc0

08009c4c <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b08c      	sub	sp, #48	; 0x30
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	603b      	str	r3, [r7, #0]
 8009c54:	4603      	mov	r3, r0
 8009c56:	71fb      	strb	r3, [r7, #7]
 8009c58:	460b      	mov	r3, r1
 8009c5a:	71bb      	strb	r3, [r7, #6]
 8009c5c:	4613      	mov	r3, r2
 8009c5e:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 8009c60:	79fb      	ldrb	r3, [r7, #7]
 8009c62:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 8009c64:	79bb      	ldrb	r3, [r7, #6]
 8009c66:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 8009c68:	797b      	ldrb	r3, [r7, #5]
 8009c6a:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8009c6c:	f107 030c 	add.w	r3, r7, #12
 8009c70:	2207      	movs	r2, #7
 8009c72:	2100      	movs	r1, #0
 8009c74:	4618      	mov	r0, r3
 8009c76:	f003 fc1c 	bl	800d4b2 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009c7a:	f107 0318 	add.w	r3, r7, #24
 8009c7e:	2218      	movs	r2, #24
 8009c80:	2100      	movs	r1, #0
 8009c82:	4618      	mov	r0, r3
 8009c84:	f003 fc15 	bl	800d4b2 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009c88:	233f      	movs	r3, #63	; 0x3f
 8009c8a:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 8009c8c:	238a      	movs	r3, #138	; 0x8a
 8009c8e:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 8009c90:	f107 0314 	add.w	r3, r7, #20
 8009c94:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 8009c96:	2303      	movs	r3, #3
 8009c98:	627b      	str	r3, [r7, #36]	; 0x24
  rq.rparam = &resp;
 8009c9a:	f107 030c 	add.w	r3, r7, #12
 8009c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 8009ca0:	2307      	movs	r3, #7
 8009ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 8009ca4:	f107 0318 	add.w	r3, r7, #24
 8009ca8:	2100      	movs	r1, #0
 8009caa:	4618      	mov	r0, r3
 8009cac:	f000 fc7c 	bl	800a5a8 <hci_send_req>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	da01      	bge.n	8009cba <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 8009cb6:	23ff      	movs	r3, #255	; 0xff
 8009cb8:	e014      	b.n	8009ce4 <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 8009cba:	7b3b      	ldrb	r3, [r7, #12]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d001      	beq.n	8009cc4 <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 8009cc0:	7b3b      	ldrb	r3, [r7, #12]
 8009cc2:	e00f      	b.n	8009ce4 <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 8009cc4:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8009cc8:	b29a      	uxth	r2, r3
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8009cce:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8009cd2:	b29a      	uxth	r2, r3
 8009cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cd6:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8009cd8:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 8009cdc:	b29a      	uxth	r2, r3
 8009cde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ce0:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8009ce2:	2300      	movs	r3, #0
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3730      	adds	r7, #48	; 0x30
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}

08009cec <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b08e      	sub	sp, #56	; 0x38
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	60b9      	str	r1, [r7, #8]
 8009cf4:	607a      	str	r2, [r7, #4]
 8009cf6:	603b      	str	r3, [r7, #0]
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	73fb      	strb	r3, [r7, #15]
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 8009cfc:	7bfb      	ldrb	r3, [r7, #15]
 8009cfe:	773b      	strb	r3, [r7, #28]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8009d00:	f107 0314 	add.w	r3, r7, #20
 8009d04:	2207      	movs	r2, #7
 8009d06:	2100      	movs	r1, #0
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f003 fbd2 	bl	800d4b2 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009d0e:	f107 0320 	add.w	r3, r7, #32
 8009d12:	2218      	movs	r2, #24
 8009d14:	2100      	movs	r1, #0
 8009d16:	4618      	mov	r0, r3
 8009d18:	f003 fbcb 	bl	800d4b2 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009d1c:	233f      	movs	r3, #63	; 0x3f
 8009d1e:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_GAP_INIT;
 8009d20:	238a      	movs	r3, #138	; 0x8a
 8009d22:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = &cp;
 8009d24:	f107 031c 	add.w	r3, r7, #28
 8009d28:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = sizeof(cp);
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 8009d2e:	f107 0314 	add.w	r3, r7, #20
 8009d32:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = GAP_INIT_RP_SIZE;
 8009d34:	2307      	movs	r3, #7
 8009d36:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8009d38:	f107 0320 	add.w	r3, r7, #32
 8009d3c:	2100      	movs	r1, #0
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f000 fc32 	bl	800a5a8 <hci_send_req>
 8009d44:	4603      	mov	r3, r0
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	da01      	bge.n	8009d4e <aci_gap_init_IDB04A1+0x62>
    return BLE_STATUS_TIMEOUT;
 8009d4a:	23ff      	movs	r3, #255	; 0xff
 8009d4c:	e014      	b.n	8009d78 <aci_gap_init_IDB04A1+0x8c>
  
  if (resp.status) {
 8009d4e:	7d3b      	ldrb	r3, [r7, #20]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d001      	beq.n	8009d58 <aci_gap_init_IDB04A1+0x6c>
    return resp.status;
 8009d54:	7d3b      	ldrb	r3, [r7, #20]
 8009d56:	e00f      	b.n	8009d78 <aci_gap_init_IDB04A1+0x8c>
  }
  
  *service_handle = btohs(resp.service_handle);
 8009d58:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 8009d5c:	b29a      	uxth	r2, r3
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8009d62:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 8009d66:	b29a      	uxth	r2, r3
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8009d6c:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8009d70:	b29a      	uxth	r2, r3
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8009d76:	2300      	movs	r3, #0
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3738      	adds	r7, #56	; 0x38
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}

08009d80 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 8009d80:	b590      	push	{r4, r7, lr}
 8009d82:	b095      	sub	sp, #84	; 0x54
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	4604      	mov	r4, r0
 8009d88:	4608      	mov	r0, r1
 8009d8a:	4611      	mov	r1, r2
 8009d8c:	461a      	mov	r2, r3
 8009d8e:	4623      	mov	r3, r4
 8009d90:	71fb      	strb	r3, [r7, #7]
 8009d92:	4603      	mov	r3, r0
 8009d94:	80bb      	strh	r3, [r7, #4]
 8009d96:	460b      	mov	r3, r1
 8009d98:	807b      	strh	r3, [r7, #2]
 8009d9a:	4613      	mov	r3, r2
 8009d9c:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 8009da4:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8009da8:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8009dac:	4413      	add	r3, r2
 8009dae:	330e      	adds	r3, #14
 8009db0:	2b28      	cmp	r3, #40	; 0x28
 8009db2:	d901      	bls.n	8009db8 <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 8009db4:	2342      	movs	r3, #66	; 0x42
 8009db6:	e0ce      	b.n	8009f56 <aci_gap_set_discoverable+0x1d6>

  buffer[indx] = AdvType;
 8009db8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009dbc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009dc0:	4413      	add	r3, r2
 8009dc2:	79fa      	ldrb	r2, [r7, #7]
 8009dc4:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8009dc8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009dcc:	3301      	adds	r3, #1
 8009dce:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 8009dd2:	88bb      	ldrh	r3, [r7, #4]
 8009dd4:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 8009dd6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009dda:	f107 0208 	add.w	r2, r7, #8
 8009dde:	4413      	add	r3, r2
 8009de0:	88ba      	ldrh	r2, [r7, #4]
 8009de2:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8009de4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009de8:	3302      	adds	r3, #2
 8009dea:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 8009dee:	887b      	ldrh	r3, [r7, #2]
 8009df0:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 8009df2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009df6:	f107 0208 	add.w	r2, r7, #8
 8009dfa:	4413      	add	r3, r2
 8009dfc:	887a      	ldrh	r2, [r7, #2]
 8009dfe:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8009e00:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009e04:	3302      	adds	r3, #2
 8009e06:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = OwnAddrType;
 8009e0a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009e0e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009e12:	4413      	add	r3, r2
 8009e14:	79ba      	ldrb	r2, [r7, #6]
 8009e16:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8009e1a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009e1e:	3301      	adds	r3, #1
 8009e20:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 8009e24:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009e28:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009e2c:	4413      	add	r3, r2
 8009e2e:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8009e32:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8009e36:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009e3a:	3301      	adds	r3, #1
 8009e3c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = LocalNameLen;
 8009e40:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009e44:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009e48:	4413      	add	r3, r2
 8009e4a:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8009e4e:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8009e52:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009e56:	3301      	adds	r3, #1
 8009e58:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8009e5c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009e60:	f107 0208 	add.w	r2, r7, #8
 8009e64:	4413      	add	r3, r2
 8009e66:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8009e6a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f003 fb15 	bl	800d49c <memcpy>
  indx +=  LocalNameLen;
 8009e72:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8009e76:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8009e7a:	4413      	add	r3, r2
 8009e7c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 8009e80:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009e84:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009e88:	4413      	add	r3, r2
 8009e8a:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 8009e8e:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8009e92:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009e96:	3301      	adds	r3, #1
 8009e98:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8009e9c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009ea0:	f107 0208 	add.w	r2, r7, #8
 8009ea4:	4413      	add	r3, r2
 8009ea6:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 8009eaa:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8009eac:	4618      	mov	r0, r3
 8009eae:	f003 faf5 	bl	800d49c <memcpy>
  indx +=  ServiceUUIDLen;  
 8009eb2:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8009eb6:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8009eba:	4413      	add	r3, r2
 8009ebc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 8009ec0:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8009ec4:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 8009ec8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009ecc:	f107 0208 	add.w	r2, r7, #8
 8009ed0:	4413      	add	r3, r2
 8009ed2:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8009ed6:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8009ed8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009edc:	3302      	adds	r3, #2
 8009ede:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 8009ee2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8009ee6:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 8009eea:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009eee:	f107 0208 	add.w	r2, r7, #8
 8009ef2:	4413      	add	r3, r2
 8009ef4:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8009ef8:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 8009efa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009efe:	3302      	adds	r3, #2
 8009f00:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009f04:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009f08:	2218      	movs	r2, #24
 8009f0a:	2100      	movs	r1, #0
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f003 fad0 	bl	800d4b2 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009f12:	233f      	movs	r3, #63	; 0x3f
 8009f14:	86bb      	strh	r3, [r7, #52]	; 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 8009f16:	2383      	movs	r3, #131	; 0x83
 8009f18:	86fb      	strh	r3, [r7, #54]	; 0x36
  rq.cparam = (void *)buffer;
 8009f1a:	f107 0308 	add.w	r3, r7, #8
 8009f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.clen = indx;
 8009f20:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009f24:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rparam = &status;
 8009f26:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8009f2a:	647b      	str	r3, [r7, #68]	; 0x44
  rq.rlen = 1;
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	64bb      	str	r3, [r7, #72]	; 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 8009f30:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009f34:	2100      	movs	r1, #0
 8009f36:	4618      	mov	r0, r3
 8009f38:	f000 fb36 	bl	800a5a8 <hci_send_req>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	da01      	bge.n	8009f46 <aci_gap_set_discoverable+0x1c6>
    return BLE_STATUS_TIMEOUT;
 8009f42:	23ff      	movs	r3, #255	; 0xff
 8009f44:	e007      	b.n	8009f56 <aci_gap_set_discoverable+0x1d6>

  if (status) {
 8009f46:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d002      	beq.n	8009f54 <aci_gap_set_discoverable+0x1d4>
    return status;
 8009f4e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009f52:	e000      	b.n	8009f56 <aci_gap_set_discoverable+0x1d6>
  }

  return 0;
 8009f54:	2300      	movs	r3, #0
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3754      	adds	r7, #84	; 0x54
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd90      	pop	{r4, r7, pc}

08009f5e <aci_gap_update_adv_data>:
  return status;

}

tBleStatus aci_gap_update_adv_data(uint8_t AdvLen, const uint8_t *AdvData)
{
 8009f5e:	b580      	push	{r7, lr}
 8009f60:	b092      	sub	sp, #72	; 0x48
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	4603      	mov	r3, r0
 8009f66:	6039      	str	r1, [r7, #0]
 8009f68:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[32];
  uint8_t indx = 0;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  if (AdvLen > (sizeof(buffer)-1))
 8009f70:	79fb      	ldrb	r3, [r7, #7]
 8009f72:	2b1f      	cmp	r3, #31
 8009f74:	d901      	bls.n	8009f7a <aci_gap_update_adv_data+0x1c>
    return BLE_STATUS_INVALID_PARAMS;
 8009f76:	2342      	movs	r3, #66	; 0x42
 8009f78:	e03f      	b.n	8009ffa <aci_gap_update_adv_data+0x9c>

  buffer[indx] = AdvLen;
 8009f7a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009f7e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009f82:	4413      	add	r3, r2
 8009f84:	79fa      	ldrb	r2, [r7, #7]
 8009f86:	f803 2c40 	strb.w	r2, [r3, #-64]
  indx++;
 8009f8a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009f8e:	3301      	adds	r3, #1
 8009f90:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  BLUENRG_memcpy(buffer + indx, AdvData, AdvLen);
 8009f94:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009f98:	f107 0208 	add.w	r2, r7, #8
 8009f9c:	4413      	add	r3, r2
 8009f9e:	79fa      	ldrb	r2, [r7, #7]
 8009fa0:	6839      	ldr	r1, [r7, #0]
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f003 fa7a 	bl	800d49c <memcpy>
  indx +=  AdvLen;
 8009fa8:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8009fac:	79fb      	ldrb	r3, [r7, #7]
 8009fae:	4413      	add	r3, r2
 8009fb0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009fb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009fb8:	2218      	movs	r2, #24
 8009fba:	2100      	movs	r1, #0
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f003 fa78 	bl	800d4b2 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009fc2:	233f      	movs	r3, #63	; 0x3f
 8009fc4:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GAP_UPDATE_ADV_DATA;
 8009fc6:	238e      	movs	r3, #142	; 0x8e
 8009fc8:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 8009fca:	f107 0308 	add.w	r3, r7, #8
 8009fce:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 8009fd0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009fd4:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &status;
 8009fd6:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8009fda:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = 1;
 8009fdc:	2301      	movs	r3, #1
 8009fde:	643b      	str	r3, [r7, #64]	; 0x40
    
  if (hci_send_req(&rq, FALSE) < 0)
 8009fe0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009fe4:	2100      	movs	r1, #0
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f000 fade 	bl	800a5a8 <hci_send_req>
 8009fec:	4603      	mov	r3, r0
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	da01      	bge.n	8009ff6 <aci_gap_update_adv_data+0x98>
    return BLE_STATUS_TIMEOUT;
 8009ff2:	23ff      	movs	r3, #255	; 0xff
 8009ff4:	e001      	b.n	8009ffa <aci_gap_update_adv_data+0x9c>
    
  return status;
 8009ff6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3748      	adds	r7, #72	; 0x48
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}

0800a002 <aci_gap_delete_ad_type>:

tBleStatus aci_gap_delete_ad_type(uint8_t ad_type)
{
 800a002:	b580      	push	{r7, lr}
 800a004:	b08a      	sub	sp, #40	; 0x28
 800a006:	af00      	add	r7, sp, #0
 800a008:	4603      	mov	r3, r0
 800a00a:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  gap_delete_ad_type_cp cp;
  uint8_t status;

  cp.ad_type = ad_type;
 800a00c:	79fb      	ldrb	r3, [r7, #7]
 800a00e:	733b      	strb	r3, [r7, #12]
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a010:	f107 0310 	add.w	r3, r7, #16
 800a014:	2218      	movs	r2, #24
 800a016:	2100      	movs	r1, #0
 800a018:	4618      	mov	r0, r3
 800a01a:	f003 fa4a 	bl	800d4b2 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800a01e:	233f      	movs	r3, #63	; 0x3f
 800a020:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_GAP_DELETE_AD_TYPE;
 800a022:	238f      	movs	r3, #143	; 0x8f
 800a024:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 800a026:	f107 030c 	add.w	r3, r7, #12
 800a02a:	61bb      	str	r3, [r7, #24]
  rq.clen = sizeof(cp);
 800a02c:	2301      	movs	r3, #1
 800a02e:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 800a030:	f107 030b 	add.w	r3, r7, #11
 800a034:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 800a036:	2301      	movs	r3, #1
 800a038:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (hci_send_req(&rq, FALSE) < 0)
 800a03a:	f107 0310 	add.w	r3, r7, #16
 800a03e:	2100      	movs	r1, #0
 800a040:	4618      	mov	r0, r3
 800a042:	f000 fab1 	bl	800a5a8 <hci_send_req>
 800a046:	4603      	mov	r3, r0
 800a048:	2b00      	cmp	r3, #0
 800a04a:	da01      	bge.n	800a050 <aci_gap_delete_ad_type+0x4e>
    return BLE_STATUS_TIMEOUT;
 800a04c:	23ff      	movs	r3, #255	; 0xff
 800a04e:	e000      	b.n	800a052 <aci_gap_delete_ad_type+0x50>

  return status;
 800a050:	7afb      	ldrb	r3, [r7, #11]
}
 800a052:	4618      	mov	r0, r3
 800a054:	3728      	adds	r7, #40	; 0x28
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}

0800a05a <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 800a05a:	b580      	push	{r7, lr}
 800a05c:	b088      	sub	sp, #32
 800a05e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a060:	f107 0308 	add.w	r3, r7, #8
 800a064:	2218      	movs	r2, #24
 800a066:	2100      	movs	r1, #0
 800a068:	4618      	mov	r0, r3
 800a06a:	f003 fa22 	bl	800d4b2 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800a06e:	233f      	movs	r3, #63	; 0x3f
 800a070:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 800a072:	f240 1301 	movw	r3, #257	; 0x101
 800a076:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a078:	1dfb      	adds	r3, r7, #7
 800a07a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a07c:	2301      	movs	r3, #1
 800a07e:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 800a080:	f107 0308 	add.w	r3, r7, #8
 800a084:	2100      	movs	r1, #0
 800a086:	4618      	mov	r0, r3
 800a088:	f000 fa8e 	bl	800a5a8 <hci_send_req>
 800a08c:	4603      	mov	r3, r0
 800a08e:	2b00      	cmp	r3, #0
 800a090:	da01      	bge.n	800a096 <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 800a092:	23ff      	movs	r3, #255	; 0xff
 800a094:	e000      	b.n	800a098 <aci_gatt_init+0x3e>

  return status;
 800a096:	79fb      	ldrb	r3, [r7, #7]
}
 800a098:	4618      	mov	r0, r3
 800a09a:	3720      	adds	r7, #32
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}

0800a0a0 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b0aa      	sub	sp, #168	; 0xa8
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	603a      	str	r2, [r7, #0]
 800a0aa:	71fb      	strb	r3, [r7, #7]
 800a0ac:	460b      	mov	r3, r1
 800a0ae:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 800a0b6:	79bb      	ldrb	r3, [r7, #6]
 800a0b8:	3302      	adds	r3, #2
 800a0ba:	2b80      	cmp	r3, #128	; 0x80
 800a0bc:	dd01      	ble.n	800a0c2 <aci_hal_write_config_data+0x22>
    return BLE_STATUS_INVALID_PARAMS;
 800a0be:	2342      	movs	r3, #66	; 0x42
 800a0c0:	e052      	b.n	800a168 <aci_hal_write_config_data+0xc8>

  buffer[indx] = offset;
 800a0c2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800a0c6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800a0ca:	4413      	add	r3, r2
 800a0cc:	79fa      	ldrb	r2, [r7, #7]
 800a0ce:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800a0d2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800a0d6:	3301      	adds	r3, #1
 800a0d8:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = len;
 800a0dc:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800a0e0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800a0e4:	4413      	add	r3, r2
 800a0e6:	79ba      	ldrb	r2, [r7, #6]
 800a0e8:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800a0ec:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800a0f0:	3301      	adds	r3, #1
 800a0f2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, val, len);
 800a0f6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800a0fa:	f107 0208 	add.w	r2, r7, #8
 800a0fe:	4413      	add	r3, r2
 800a100:	79ba      	ldrb	r2, [r7, #6]
 800a102:	6839      	ldr	r1, [r7, #0]
 800a104:	4618      	mov	r0, r3
 800a106:	f003 f9c9 	bl	800d49c <memcpy>
  indx +=  len;
 800a10a:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 800a10e:	79bb      	ldrb	r3, [r7, #6]
 800a110:	4413      	add	r3, r2
 800a112:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a116:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800a11a:	2218      	movs	r2, #24
 800a11c:	2100      	movs	r1, #0
 800a11e:	4618      	mov	r0, r3
 800a120:	f003 f9c7 	bl	800d4b2 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800a124:	233f      	movs	r3, #63	; 0x3f
 800a126:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 800a12a:	230c      	movs	r3, #12
 800a12c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 800a130:	f107 0308 	add.w	r3, r7, #8
 800a134:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 800a138:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800a13c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 800a140:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 800a144:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 800a148:	2301      	movs	r3, #1
 800a14a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 800a14e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800a152:	2100      	movs	r1, #0
 800a154:	4618      	mov	r0, r3
 800a156:	f000 fa27 	bl	800a5a8 <hci_send_req>
 800a15a:	4603      	mov	r3, r0
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	da01      	bge.n	800a164 <aci_hal_write_config_data+0xc4>
    return BLE_STATUS_TIMEOUT;
 800a160:	23ff      	movs	r3, #255	; 0xff
 800a162:	e001      	b.n	800a168 <aci_hal_write_config_data+0xc8>

  return status;
 800a164:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
}
 800a168:	4618      	mov	r0, r3
 800a16a:	37a8      	adds	r7, #168	; 0xa8
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <aci_hal_set_tx_power_level>:
  
  return 0;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b08a      	sub	sp, #40	; 0x28
 800a174:	af00      	add	r7, sp, #0
 800a176:	4603      	mov	r3, r0
 800a178:	460a      	mov	r2, r1
 800a17a:	71fb      	strb	r3, [r7, #7]
 800a17c:	4613      	mov	r3, r2
 800a17e:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 800a180:	79fb      	ldrb	r3, [r7, #7]
 800a182:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 800a184:	79bb      	ldrb	r3, [r7, #6]
 800a186:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a188:	f107 0310 	add.w	r3, r7, #16
 800a18c:	2218      	movs	r2, #24
 800a18e:	2100      	movs	r1, #0
 800a190:	4618      	mov	r0, r3
 800a192:	f003 f98e 	bl	800d4b2 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800a196:	233f      	movs	r3, #63	; 0x3f
 800a198:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 800a19a:	230f      	movs	r3, #15
 800a19c:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 800a19e:	f107 030c 	add.w	r3, r7, #12
 800a1a2:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 800a1a4:	2302      	movs	r3, #2
 800a1a6:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 800a1a8:	f107 030b 	add.w	r3, r7, #11
 800a1ac:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	627b      	str	r3, [r7, #36]	; 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 800a1b2:	f107 0310 	add.w	r3, r7, #16
 800a1b6:	2100      	movs	r1, #0
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f000 f9f5 	bl	800a5a8 <hci_send_req>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	da01      	bge.n	800a1c8 <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 800a1c4:	23ff      	movs	r3, #255	; 0xff
 800a1c6:	e000      	b.n	800a1ca <aci_hal_set_tx_power_level+0x5a>

  return status;
 800a1c8:	7afb      	ldrb	r3, [r7, #11]
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3728      	adds	r7, #40	; 0x28
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}

0800a1d2 <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 800a1d2:	b590      	push	{r4, r7, lr}
 800a1d4:	b089      	sub	sp, #36	; 0x24
 800a1d6:	af02      	add	r7, sp, #8
 800a1d8:	6078      	str	r0, [r7, #4]
 800a1da:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 800a1dc:	f107 0410 	add.w	r4, r7, #16
 800a1e0:	f107 0215 	add.w	r2, r7, #21
 800a1e4:	f107 0112 	add.w	r1, r7, #18
 800a1e8:	f107 0016 	add.w	r0, r7, #22
 800a1ec:	f107 030e 	add.w	r3, r7, #14
 800a1f0:	9300      	str	r3, [sp, #0]
 800a1f2:	4623      	mov	r3, r4
 800a1f4:	f000 f853 	bl	800a29e <hci_le_read_local_version>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	75fb      	strb	r3, [r7, #23]
				     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 800a1fc:	7dfb      	ldrb	r3, [r7, #23]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d126      	bne.n	800a250 <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 800a202:	8a7b      	ldrh	r3, [r7, #18]
 800a204:	0a1b      	lsrs	r3, r3, #8
 800a206:	b29b      	uxth	r3, r3
 800a208:	b2da      	uxtb	r2, r3
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 800a20e:	8a7b      	ldrh	r3, [r7, #18]
 800a210:	021b      	lsls	r3, r3, #8
 800a212:	b29a      	uxth	r2, r3
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	881b      	ldrh	r3, [r3, #0]
 800a21c:	b21a      	sxth	r2, r3
 800a21e:	89fb      	ldrh	r3, [r7, #14]
 800a220:	091b      	lsrs	r3, r3, #4
 800a222:	b29b      	uxth	r3, r3
 800a224:	011b      	lsls	r3, r3, #4
 800a226:	b21b      	sxth	r3, r3
 800a228:	b2db      	uxtb	r3, r3
 800a22a:	b21b      	sxth	r3, r3
 800a22c:	4313      	orrs	r3, r2
 800a22e:	b21b      	sxth	r3, r3
 800a230:	b29a      	uxth	r2, r3
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	881b      	ldrh	r3, [r3, #0]
 800a23a:	b21a      	sxth	r2, r3
 800a23c:	89fb      	ldrh	r3, [r7, #14]
 800a23e:	b21b      	sxth	r3, r3
 800a240:	f003 030f 	and.w	r3, r3, #15
 800a244:	b21b      	sxth	r3, r3
 800a246:	4313      	orrs	r3, r2
 800a248:	b21b      	sxth	r3, r3
 800a24a:	b29a      	uxth	r2, r3
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	801a      	strh	r2, [r3, #0]
  }
  return status;
 800a250:	7dfb      	ldrb	r3, [r7, #23]
}
 800a252:	4618      	mov	r0, r3
 800a254:	371c      	adds	r7, #28
 800a256:	46bd      	mov	sp, r7
 800a258:	bd90      	pop	{r4, r7, pc}

0800a25a <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 800a25a:	b580      	push	{r7, lr}
 800a25c:	b088      	sub	sp, #32
 800a25e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a260:	f107 0308 	add.w	r3, r7, #8
 800a264:	2218      	movs	r2, #24
 800a266:	2100      	movs	r1, #0
 800a268:	4618      	mov	r0, r3
 800a26a:	f003 f922 	bl	800d4b2 <memset>
  rq.ogf = OGF_HOST_CTL;
 800a26e:	2303      	movs	r3, #3
 800a270:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 800a272:	2303      	movs	r3, #3
 800a274:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a276:	1dfb      	adds	r3, r7, #7
 800a278:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a27a:	2301      	movs	r3, #1
 800a27c:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 800a27e:	f107 0308 	add.w	r3, r7, #8
 800a282:	2100      	movs	r1, #0
 800a284:	4618      	mov	r0, r3
 800a286:	f000 f98f 	bl	800a5a8 <hci_send_req>
 800a28a:	4603      	mov	r3, r0
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	da01      	bge.n	800a294 <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 800a290:	23ff      	movs	r3, #255	; 0xff
 800a292:	e000      	b.n	800a296 <hci_reset+0x3c>
  
  return status;  
 800a294:	79fb      	ldrb	r3, [r7, #7]
}
 800a296:	4618      	mov	r0, r3
 800a298:	3720      	adds	r7, #32
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}

0800a29e <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 800a29e:	b580      	push	{r7, lr}
 800a2a0:	b08e      	sub	sp, #56	; 0x38
 800a2a2:	af00      	add	r7, sp, #0
 800a2a4:	60f8      	str	r0, [r7, #12]
 800a2a6:	60b9      	str	r1, [r7, #8]
 800a2a8:	607a      	str	r2, [r7, #4]
 800a2aa:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800a2ac:	f107 0314 	add.w	r3, r7, #20
 800a2b0:	2209      	movs	r2, #9
 800a2b2:	2100      	movs	r1, #0
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	f003 f8fc 	bl	800d4b2 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a2ba:	f107 0320 	add.w	r3, r7, #32
 800a2be:	2218      	movs	r2, #24
 800a2c0:	2100      	movs	r1, #0
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f003 f8f5 	bl	800d4b2 <memset>
  rq.ogf = OGF_INFO_PARAM;
 800a2c8:	2304      	movs	r3, #4
 800a2ca:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = NULL;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = 0;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 800a2d8:	f107 0314 	add.w	r3, r7, #20
 800a2dc:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 800a2de:	2309      	movs	r3, #9
 800a2e0:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 800a2e2:	f107 0320 	add.w	r3, r7, #32
 800a2e6:	2100      	movs	r1, #0
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f000 f95d 	bl	800a5a8 <hci_send_req>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	da01      	bge.n	800a2f8 <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 800a2f4:	23ff      	movs	r3, #255	; 0xff
 800a2f6:	e018      	b.n	800a32a <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 800a2f8:	7d3b      	ldrb	r3, [r7, #20]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d001      	beq.n	800a302 <hci_le_read_local_version+0x64>
    return resp.status;
 800a2fe:	7d3b      	ldrb	r3, [r7, #20]
 800a300:	e013      	b.n	800a32a <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 800a302:	7d7a      	ldrb	r2, [r7, #21]
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 800a308:	8afa      	ldrh	r2, [r7, #22]
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 800a30e:	7e3a      	ldrb	r2, [r7, #24]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 800a314:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 800a318:	b29a      	uxth	r2, r3
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 800a31e:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 800a322:	b29a      	uxth	r2, r3
 800a324:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a326:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800a328:	2300      	movs	r3, #0
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3738      	adds	r7, #56	; 0x38
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}

0800a332 <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 800a332:	b580      	push	{r7, lr}
 800a334:	b092      	sub	sp, #72	; 0x48
 800a336:	af00      	add	r7, sp, #0
 800a338:	4603      	mov	r3, r0
 800a33a:	6039      	str	r1, [r7, #0]
 800a33c:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 800a33e:	f107 0310 	add.w	r3, r7, #16
 800a342:	2220      	movs	r2, #32
 800a344:	2100      	movs	r1, #0
 800a346:	4618      	mov	r0, r3
 800a348:	f003 f8b3 	bl	800d4b2 <memset>
  scan_resp_cp.length = length;
 800a34c:	79fb      	ldrb	r3, [r7, #7]
 800a34e:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 800a350:	79fb      	ldrb	r3, [r7, #7]
 800a352:	2b1f      	cmp	r3, #31
 800a354:	bf28      	it	cs
 800a356:	231f      	movcs	r3, #31
 800a358:	b2db      	uxtb	r3, r3
 800a35a:	461a      	mov	r2, r3
 800a35c:	f107 0310 	add.w	r3, r7, #16
 800a360:	3301      	adds	r3, #1
 800a362:	6839      	ldr	r1, [r7, #0]
 800a364:	4618      	mov	r0, r3
 800a366:	f003 f899 	bl	800d49c <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a36a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a36e:	2218      	movs	r2, #24
 800a370:	2100      	movs	r1, #0
 800a372:	4618      	mov	r0, r3
 800a374:	f003 f89d 	bl	800d4b2 <memset>
  rq.ogf = OGF_LE_CTL;
 800a378:	2308      	movs	r3, #8
 800a37a:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 800a37c:	2309      	movs	r3, #9
 800a37e:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &scan_resp_cp;
 800a380:	f107 0310 	add.w	r3, r7, #16
 800a384:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 800a386:	2320      	movs	r3, #32
 800a388:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rparam = &status;
 800a38a:	f107 030f 	add.w	r3, r7, #15
 800a38e:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 800a390:	2301      	movs	r3, #1
 800a392:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 800a394:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a398:	2100      	movs	r1, #0
 800a39a:	4618      	mov	r0, r3
 800a39c:	f000 f904 	bl	800a5a8 <hci_send_req>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	da01      	bge.n	800a3aa <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 800a3a6:	23ff      	movs	r3, #255	; 0xff
 800a3a8:	e000      	b.n	800a3ac <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 800a3aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3748      	adds	r7, #72	; 0x48
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}

0800a3b4 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b085      	sub	sp, #20
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	3308      	adds	r3, #8
 800a3c0:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	781b      	ldrb	r3, [r3, #0]
 800a3c6:	2b04      	cmp	r3, #4
 800a3c8:	d001      	beq.n	800a3ce <verify_packet+0x1a>
    return 1; /* Incorrect type */
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	e00c      	b.n	800a3e8 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	3302      	adds	r3, #2
 800a3d2:	781b      	ldrb	r3, [r3, #0]
 800a3d4:	461a      	mov	r2, r3
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800a3dc:	3b03      	subs	r3, #3
 800a3de:	429a      	cmp	r2, r3
 800a3e0:	d001      	beq.n	800a3e6 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 800a3e2:	2302      	movs	r3, #2
 800a3e4:	e000      	b.n	800a3e8 <verify_packet+0x34>
  
  return 0;      
 800a3e6:	2300      	movs	r3, #0
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3714      	adds	r7, #20
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f2:	4770      	bx	lr

0800a3f4 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b0a6      	sub	sp, #152	; 0x98
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	607b      	str	r3, [r7, #4]
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	81fb      	strh	r3, [r7, #14]
 800a400:	460b      	mov	r3, r1
 800a402:	81bb      	strh	r3, [r7, #12]
 800a404:	4613      	mov	r3, r2
 800a406:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800a408:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a40c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a410:	b21a      	sxth	r2, r3
 800a412:	89fb      	ldrh	r3, [r7, #14]
 800a414:	029b      	lsls	r3, r3, #10
 800a416:	b21b      	sxth	r3, r3
 800a418:	4313      	orrs	r3, r2
 800a41a:	b21b      	sxth	r3, r3
 800a41c:	b29b      	uxth	r3, r3
 800a41e:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 800a420:	7afb      	ldrb	r3, [r7, #11]
 800a422:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 800a424:	2301      	movs	r3, #1
 800a426:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 800a428:	f107 0318 	add.w	r3, r7, #24
 800a42c:	3301      	adds	r3, #1
 800a42e:	461a      	mov	r2, r3
 800a430:	f107 0314 	add.w	r3, r7, #20
 800a434:	8819      	ldrh	r1, [r3, #0]
 800a436:	789b      	ldrb	r3, [r3, #2]
 800a438:	8011      	strh	r1, [r2, #0]
 800a43a:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800a43c:	f107 0318 	add.w	r3, r7, #24
 800a440:	3304      	adds	r3, #4
 800a442:	7afa      	ldrb	r2, [r7, #11]
 800a444:	6879      	ldr	r1, [r7, #4]
 800a446:	4618      	mov	r0, r3
 800a448:	f003 f828 	bl	800d49c <memcpy>
  
  if (hciContext.io.Send)
 800a44c:	4b08      	ldr	r3, [pc, #32]	; (800a470 <send_cmd+0x7c>)
 800a44e:	691b      	ldr	r3, [r3, #16]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d009      	beq.n	800a468 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 800a454:	4b06      	ldr	r3, [pc, #24]	; (800a470 <send_cmd+0x7c>)
 800a456:	691b      	ldr	r3, [r3, #16]
 800a458:	7afa      	ldrb	r2, [r7, #11]
 800a45a:	b292      	uxth	r2, r2
 800a45c:	3204      	adds	r2, #4
 800a45e:	b291      	uxth	r1, r2
 800a460:	f107 0218 	add.w	r2, r7, #24
 800a464:	4610      	mov	r0, r2
 800a466:	4798      	blx	r3
  }
}
 800a468:	bf00      	nop
 800a46a:	3798      	adds	r7, #152	; 0x98
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}
 800a470:	20000c04 	.word	0x20000c04

0800a474 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b084      	sub	sp, #16
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 800a47e:	e00a      	b.n	800a496 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 800a480:	f107 030c 	add.w	r3, r7, #12
 800a484:	4619      	mov	r1, r3
 800a486:	6838      	ldr	r0, [r7, #0]
 800a488:	f000 fab0 	bl	800a9ec <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	4619      	mov	r1, r3
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f000 fa1f 	bl	800a8d4 <list_insert_head>
  while (!list_is_empty(src_list))
 800a496:	6838      	ldr	r0, [r7, #0]
 800a498:	f000 f9fc 	bl	800a894 <list_is_empty>
 800a49c:	4603      	mov	r3, r0
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d0ee      	beq.n	800a480 <move_list+0xc>
  }
}
 800a4a2:	bf00      	nop
 800a4a4:	3710      	adds	r7, #16
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}
	...

0800a4ac <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b082      	sub	sp, #8
 800a4b0:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800a4b2:	e009      	b.n	800a4c8 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800a4b4:	1d3b      	adds	r3, r7, #4
 800a4b6:	4619      	mov	r1, r3
 800a4b8:	4808      	ldr	r0, [pc, #32]	; (800a4dc <free_event_list+0x30>)
 800a4ba:	f000 fa72 	bl	800a9a2 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	4619      	mov	r1, r3
 800a4c2:	4807      	ldr	r0, [pc, #28]	; (800a4e0 <free_event_list+0x34>)
 800a4c4:	f000 fa2a 	bl	800a91c <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800a4c8:	4805      	ldr	r0, [pc, #20]	; (800a4e0 <free_event_list+0x34>)
 800a4ca:	f000 fab4 	bl	800aa36 <list_get_size>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	ddef      	ble.n	800a4b4 <free_event_list+0x8>
  }
}
 800a4d4:	bf00      	nop
 800a4d6:	3708      	adds	r7, #8
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}
 800a4dc:	200017f0 	.word	0x200017f0
 800a4e0:	200017e8 	.word	0x200017e8

0800a4e4 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b084      	sub	sp, #16
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d002      	beq.n	800a4fa <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 800a4f4:	4a18      	ldr	r2, [pc, #96]	; (800a558 <hci_init+0x74>)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800a4fa:	4818      	ldr	r0, [pc, #96]	; (800a55c <hci_init+0x78>)
 800a4fc:	f000 f9ba 	bl	800a874 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 800a500:	4817      	ldr	r0, [pc, #92]	; (800a560 <hci_init+0x7c>)
 800a502:	f000 f9b7 	bl	800a874 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800a506:	f7f7 f825 	bl	8001554 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800a50a:	2300      	movs	r3, #0
 800a50c:	73fb      	strb	r3, [r7, #15]
 800a50e:	e00c      	b.n	800a52a <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800a510:	7bfb      	ldrb	r3, [r7, #15]
 800a512:	228c      	movs	r2, #140	; 0x8c
 800a514:	fb02 f303 	mul.w	r3, r2, r3
 800a518:	4a12      	ldr	r2, [pc, #72]	; (800a564 <hci_init+0x80>)
 800a51a:	4413      	add	r3, r2
 800a51c:	4619      	mov	r1, r3
 800a51e:	480f      	ldr	r0, [pc, #60]	; (800a55c <hci_init+0x78>)
 800a520:	f000 f9fc 	bl	800a91c <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800a524:	7bfb      	ldrb	r3, [r7, #15]
 800a526:	3301      	adds	r3, #1
 800a528:	73fb      	strb	r3, [r7, #15]
 800a52a:	7bfb      	ldrb	r3, [r7, #15]
 800a52c:	2b04      	cmp	r3, #4
 800a52e:	d9ef      	bls.n	800a510 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 800a530:	4b09      	ldr	r3, [pc, #36]	; (800a558 <hci_init+0x74>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d003      	beq.n	800a540 <hci_init+0x5c>
 800a538:	4b07      	ldr	r3, [pc, #28]	; (800a558 <hci_init+0x74>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	2000      	movs	r0, #0
 800a53e:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 800a540:	4b05      	ldr	r3, [pc, #20]	; (800a558 <hci_init+0x74>)
 800a542:	689b      	ldr	r3, [r3, #8]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d002      	beq.n	800a54e <hci_init+0x6a>
 800a548:	4b03      	ldr	r3, [pc, #12]	; (800a558 <hci_init+0x74>)
 800a54a:	689b      	ldr	r3, [r3, #8]
 800a54c:	4798      	blx	r3
}
 800a54e:	bf00      	nop
 800a550:	3710      	adds	r7, #16
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}
 800a556:	bf00      	nop
 800a558:	20000c04 	.word	0x20000c04
 800a55c:	200017e8 	.word	0x200017e8
 800a560:	200017f0 	.word	0x200017f0
 800a564:	20000948 	.word	0x20000948

0800a568 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 800a568:	b480      	push	{r7}
 800a56a:	b083      	sub	sp, #12
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	4a0b      	ldr	r2, [pc, #44]	; (800a5a4 <hci_register_io_bus+0x3c>)
 800a576:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	68db      	ldr	r3, [r3, #12]
 800a57c:	4a09      	ldr	r2, [pc, #36]	; (800a5a4 <hci_register_io_bus+0x3c>)
 800a57e:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	691b      	ldr	r3, [r3, #16]
 800a584:	4a07      	ldr	r2, [pc, #28]	; (800a5a4 <hci_register_io_bus+0x3c>)
 800a586:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	699b      	ldr	r3, [r3, #24]
 800a58c:	4a05      	ldr	r2, [pc, #20]	; (800a5a4 <hci_register_io_bus+0x3c>)
 800a58e:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	689b      	ldr	r3, [r3, #8]
 800a594:	4a03      	ldr	r2, [pc, #12]	; (800a5a4 <hci_register_io_bus+0x3c>)
 800a596:	6093      	str	r3, [r2, #8]
}
 800a598:	bf00      	nop
 800a59a:	370c      	adds	r7, #12
 800a59c:	46bd      	mov	sp, r7
 800a59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a2:	4770      	bx	lr
 800a5a4:	20000c04 	.word	0x20000c04

0800a5a8 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b08e      	sub	sp, #56	; 0x38
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
 800a5b0:	460b      	mov	r3, r1
 800a5b2:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	885b      	ldrh	r3, [r3, #2]
 800a5b8:	b21b      	sxth	r3, r3
 800a5ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a5be:	b21a      	sxth	r2, r3
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	881b      	ldrh	r3, [r3, #0]
 800a5c4:	029b      	lsls	r3, r3, #10
 800a5c6:	b21b      	sxth	r3, r3
 800a5c8:	4313      	orrs	r3, r2
 800a5ca:	b21b      	sxth	r3, r3
 800a5cc:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800a5d2:	f107 0308 	add.w	r3, r7, #8
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f000 f94c 	bl	800a874 <list_init_head>

  free_event_list();
 800a5dc:	f7ff ff66 	bl	800a4ac <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	8818      	ldrh	r0, [r3, #0]
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	8859      	ldrh	r1, [r3, #2]
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	68db      	ldr	r3, [r3, #12]
 800a5ec:	b2da      	uxtb	r2, r3
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	689b      	ldr	r3, [r3, #8]
 800a5f2:	f7ff feff 	bl	800a3f4 <send_cmd>
  
  if (async)
 800a5f6:	78fb      	ldrb	r3, [r7, #3]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d001      	beq.n	800a600 <hci_send_req+0x58>
  {
    return 0;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	e0e2      	b.n	800a7c6 <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 800a600:	f7f9 fc02 	bl	8003e08 <HAL_GetTick>
 800a604:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800a606:	f7f9 fbff 	bl	8003e08 <HAL_GetTick>
 800a60a:	4602      	mov	r2, r0
 800a60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a60e:	1ad3      	subs	r3, r2, r3
 800a610:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a614:	f200 80b3 	bhi.w	800a77e <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800a618:	486d      	ldr	r0, [pc, #436]	; (800a7d0 <hci_send_req+0x228>)
 800a61a:	f000 f93b 	bl	800a894 <list_is_empty>
 800a61e:	4603      	mov	r3, r0
 800a620:	2b00      	cmp	r3, #0
 800a622:	d000      	beq.n	800a626 <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800a624:	e7ef      	b.n	800a606 <hci_send_req+0x5e>
      {
        break;
 800a626:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800a628:	f107 0310 	add.w	r3, r7, #16
 800a62c:	4619      	mov	r1, r3
 800a62e:	4868      	ldr	r0, [pc, #416]	; (800a7d0 <hci_send_req+0x228>)
 800a630:	f000 f9b7 	bl	800a9a2 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	3308      	adds	r3, #8
 800a638:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800a63a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a63c:	781b      	ldrb	r3, [r3, #0]
 800a63e:	2b04      	cmp	r3, #4
 800a640:	d17a      	bne.n	800a738 <hci_send_req+0x190>
    {
      event_pckt = (void *)(hci_hdr->data);
 800a642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a644:	3301      	adds	r3, #1
 800a646:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	3308      	adds	r3, #8
 800a64c:	3303      	adds	r3, #3
 800a64e:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800a656:	3b03      	subs	r3, #3
 800a658:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 800a65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a65c:	781b      	ldrb	r3, [r3, #0]
 800a65e:	2b0f      	cmp	r3, #15
 800a660:	d00a      	beq.n	800a678 <hci_send_req+0xd0>
 800a662:	2b0f      	cmp	r3, #15
 800a664:	dc02      	bgt.n	800a66c <hci_send_req+0xc4>
 800a666:	2b0e      	cmp	r3, #14
 800a668:	d028      	beq.n	800a6bc <hci_send_req+0x114>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 800a66a:	e06a      	b.n	800a742 <hci_send_req+0x19a>
      switch (event_pckt->evt) 
 800a66c:	2b10      	cmp	r3, #16
 800a66e:	f000 8088 	beq.w	800a782 <hci_send_req+0x1da>
 800a672:	2b3e      	cmp	r3, #62	; 0x3e
 800a674:	d042      	beq.n	800a6fc <hci_send_req+0x154>
        break;
 800a676:	e064      	b.n	800a742 <hci_send_req+0x19a>
        cs = (void *) ptr;
 800a678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a67a:	61bb      	str	r3, [r7, #24]
        if (cs->opcode != opcode)
 800a67c:	69bb      	ldr	r3, [r7, #24]
 800a67e:	885b      	ldrh	r3, [r3, #2]
 800a680:	b29b      	uxth	r3, r3
 800a682:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a684:	429a      	cmp	r2, r3
 800a686:	d17e      	bne.n	800a786 <hci_send_req+0x1de>
        if (r->event != EVT_CMD_STATUS) {
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	685b      	ldr	r3, [r3, #4]
 800a68c:	2b0f      	cmp	r3, #15
 800a68e:	d004      	beq.n	800a69a <hci_send_req+0xf2>
          if (cs->status) {
 800a690:	69bb      	ldr	r3, [r7, #24]
 800a692:	781b      	ldrb	r3, [r3, #0]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d051      	beq.n	800a73c <hci_send_req+0x194>
            goto failed;
 800a698:	e078      	b.n	800a78c <hci_send_req+0x1e4>
        r->rlen = MIN(len, r->rlen);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	695a      	ldr	r2, [r3, #20]
 800a69e:	6a3b      	ldr	r3, [r7, #32]
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	bf28      	it	cs
 800a6a4:	461a      	movcs	r2, r3
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6918      	ldr	r0, [r3, #16]
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	695b      	ldr	r3, [r3, #20]
 800a6b2:	461a      	mov	r2, r3
 800a6b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a6b6:	f002 fef1 	bl	800d49c <memcpy>
        goto done;
 800a6ba:	e078      	b.n	800a7ae <hci_send_req+0x206>
        cc = (void *) ptr;
 800a6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6be:	617b      	str	r3, [r7, #20]
        if (cc->opcode != opcode)
 800a6c0:	697b      	ldr	r3, [r7, #20]
 800a6c2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a6c6:	b29b      	uxth	r3, r3
 800a6c8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a6ca:	429a      	cmp	r2, r3
 800a6cc:	d15d      	bne.n	800a78a <hci_send_req+0x1e2>
        ptr += EVT_CMD_COMPLETE_SIZE;
 800a6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d0:	3303      	adds	r3, #3
 800a6d2:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 800a6d4:	6a3b      	ldr	r3, [r7, #32]
 800a6d6:	3b03      	subs	r3, #3
 800a6d8:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	695a      	ldr	r2, [r3, #20]
 800a6de:	6a3b      	ldr	r3, [r7, #32]
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	bf28      	it	cs
 800a6e4:	461a      	movcs	r2, r3
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6918      	ldr	r0, [r3, #16]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	695b      	ldr	r3, [r3, #20]
 800a6f2:	461a      	mov	r2, r3
 800a6f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a6f6:	f002 fed1 	bl	800d49c <memcpy>
        goto done;
 800a6fa:	e058      	b.n	800a7ae <hci_send_req+0x206>
        me = (void *) ptr;
 800a6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6fe:	61fb      	str	r3, [r7, #28]
        if (me->subevent != r->event)
 800a700:	69fb      	ldr	r3, [r7, #28]
 800a702:	781b      	ldrb	r3, [r3, #0]
 800a704:	461a      	mov	r2, r3
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	685b      	ldr	r3, [r3, #4]
 800a70a:	429a      	cmp	r2, r3
 800a70c:	d118      	bne.n	800a740 <hci_send_req+0x198>
        len -= 1;
 800a70e:	6a3b      	ldr	r3, [r7, #32]
 800a710:	3b01      	subs	r3, #1
 800a712:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	695a      	ldr	r2, [r3, #20]
 800a718:	6a3b      	ldr	r3, [r7, #32]
 800a71a:	429a      	cmp	r2, r3
 800a71c:	bf28      	it	cs
 800a71e:	461a      	movcs	r2, r3
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6918      	ldr	r0, [r3, #16]
 800a728:	69fb      	ldr	r3, [r7, #28]
 800a72a:	1c59      	adds	r1, r3, #1
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	695b      	ldr	r3, [r3, #20]
 800a730:	461a      	mov	r2, r3
 800a732:	f002 feb3 	bl	800d49c <memcpy>
        goto done;
 800a736:	e03a      	b.n	800a7ae <hci_send_req+0x206>
      }
    }
 800a738:	bf00      	nop
 800a73a:	e002      	b.n	800a742 <hci_send_req+0x19a>
          break;
 800a73c:	bf00      	nop
 800a73e:	e000      	b.n	800a742 <hci_send_req+0x19a>
          break;
 800a740:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800a742:	4824      	ldr	r0, [pc, #144]	; (800a7d4 <hci_send_req+0x22c>)
 800a744:	f000 f8a6 	bl	800a894 <list_is_empty>
 800a748:	4603      	mov	r3, r0
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d00d      	beq.n	800a76a <hci_send_req+0x1c2>
 800a74e:	4820      	ldr	r0, [pc, #128]	; (800a7d0 <hci_send_req+0x228>)
 800a750:	f000 f8a0 	bl	800a894 <list_is_empty>
 800a754:	4603      	mov	r3, r0
 800a756:	2b00      	cmp	r3, #0
 800a758:	d007      	beq.n	800a76a <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	4619      	mov	r1, r3
 800a75e:	481d      	ldr	r0, [pc, #116]	; (800a7d4 <hci_send_req+0x22c>)
 800a760:	f000 f8dc 	bl	800a91c <list_insert_tail>
      hciReadPacket=NULL;
 800a764:	2300      	movs	r3, #0
 800a766:	613b      	str	r3, [r7, #16]
 800a768:	e008      	b.n	800a77c <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800a76a:	693a      	ldr	r2, [r7, #16]
 800a76c:	f107 0308 	add.w	r3, r7, #8
 800a770:	4611      	mov	r1, r2
 800a772:	4618      	mov	r0, r3
 800a774:	f000 f8d2 	bl	800a91c <list_insert_tail>
      hciReadPacket=NULL;
 800a778:	2300      	movs	r3, #0
 800a77a:	613b      	str	r3, [r7, #16]
  {
 800a77c:	e740      	b.n	800a600 <hci_send_req+0x58>
        goto failed;
 800a77e:	bf00      	nop
 800a780:	e004      	b.n	800a78c <hci_send_req+0x1e4>
        goto failed;
 800a782:	bf00      	nop
 800a784:	e002      	b.n	800a78c <hci_send_req+0x1e4>
          goto failed;
 800a786:	bf00      	nop
 800a788:	e000      	b.n	800a78c <hci_send_req+0x1e4>
          goto failed;
 800a78a:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d004      	beq.n	800a79c <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	4619      	mov	r1, r3
 800a796:	480f      	ldr	r0, [pc, #60]	; (800a7d4 <hci_send_req+0x22c>)
 800a798:	f000 f89c 	bl	800a8d4 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800a79c:	f107 0308 	add.w	r3, r7, #8
 800a7a0:	4619      	mov	r1, r3
 800a7a2:	480b      	ldr	r0, [pc, #44]	; (800a7d0 <hci_send_req+0x228>)
 800a7a4:	f7ff fe66 	bl	800a474 <move_list>

  return -1;
 800a7a8:	f04f 33ff 	mov.w	r3, #4294967295
 800a7ac:	e00b      	b.n	800a7c6 <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	4619      	mov	r1, r3
 800a7b2:	4808      	ldr	r0, [pc, #32]	; (800a7d4 <hci_send_req+0x22c>)
 800a7b4:	f000 f88e 	bl	800a8d4 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800a7b8:	f107 0308 	add.w	r3, r7, #8
 800a7bc:	4619      	mov	r1, r3
 800a7be:	4804      	ldr	r0, [pc, #16]	; (800a7d0 <hci_send_req+0x228>)
 800a7c0:	f7ff fe58 	bl	800a474 <move_list>

  return 0;
 800a7c4:	2300      	movs	r3, #0
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3738      	adds	r7, #56	; 0x38
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}
 800a7ce:	bf00      	nop
 800a7d0:	200017f0 	.word	0x200017f0
 800a7d4:	200017e8 	.word	0x200017e8

0800a7d8 <hci_notify_asynch_evt>:
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
  }
}

int32_t hci_notify_asynch_evt(void* pdata)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b086      	sub	sp, #24
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800a7e8:	481f      	ldr	r0, [pc, #124]	; (800a868 <hci_notify_asynch_evt+0x90>)
 800a7ea:	f000 f853 	bl	800a894 <list_is_empty>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d132      	bne.n	800a85a <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800a7f4:	f107 030c 	add.w	r3, r7, #12
 800a7f8:	4619      	mov	r1, r3
 800a7fa:	481b      	ldr	r0, [pc, #108]	; (800a868 <hci_notify_asynch_evt+0x90>)
 800a7fc:	f000 f8d1 	bl	800a9a2 <list_remove_head>
    
    if (hciContext.io.Receive)
 800a800:	4b1a      	ldr	r3, [pc, #104]	; (800a86c <hci_notify_asynch_evt+0x94>)
 800a802:	68db      	ldr	r3, [r3, #12]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d02a      	beq.n	800a85e <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800a808:	4b18      	ldr	r3, [pc, #96]	; (800a86c <hci_notify_asynch_evt+0x94>)
 800a80a:	68db      	ldr	r3, [r3, #12]
 800a80c:	68fa      	ldr	r2, [r7, #12]
 800a80e:	3208      	adds	r2, #8
 800a810:	2180      	movs	r1, #128	; 0x80
 800a812:	4610      	mov	r0, r2
 800a814:	4798      	blx	r3
 800a816:	4603      	mov	r3, r0
 800a818:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 800a81a:	7cfb      	ldrb	r3, [r7, #19]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d016      	beq.n	800a84e <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	7cfa      	ldrb	r2, [r7, #19]
 800a824:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	4618      	mov	r0, r3
 800a82c:	f7ff fdc2 	bl	800a3b4 <verify_packet>
 800a830:	4603      	mov	r3, r0
 800a832:	2b00      	cmp	r3, #0
 800a834:	d105      	bne.n	800a842 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	4619      	mov	r1, r3
 800a83a:	480d      	ldr	r0, [pc, #52]	; (800a870 <hci_notify_asynch_evt+0x98>)
 800a83c:	f000 f86e 	bl	800a91c <list_insert_tail>
 800a840:	e00d      	b.n	800a85e <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	4619      	mov	r1, r3
 800a846:	4808      	ldr	r0, [pc, #32]	; (800a868 <hci_notify_asynch_evt+0x90>)
 800a848:	f000 f844 	bl	800a8d4 <list_insert_head>
 800a84c:	e007      	b.n	800a85e <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	4619      	mov	r1, r3
 800a852:	4805      	ldr	r0, [pc, #20]	; (800a868 <hci_notify_asynch_evt+0x90>)
 800a854:	f000 f83e 	bl	800a8d4 <list_insert_head>
 800a858:	e001      	b.n	800a85e <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 800a85a:	2301      	movs	r3, #1
 800a85c:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800a85e:	697b      	ldr	r3, [r7, #20]

}
 800a860:	4618      	mov	r0, r3
 800a862:	3718      	adds	r7, #24
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}
 800a868:	200017e8 	.word	0x200017e8
 800a86c:	20000c04 	.word	0x20000c04
 800a870:	200017f0 	.word	0x200017f0

0800a874 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 800a874:	b480      	push	{r7}
 800a876:	b083      	sub	sp, #12
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	687a      	ldr	r2, [r7, #4]
 800a880:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	687a      	ldr	r2, [r7, #4]
 800a886:	605a      	str	r2, [r3, #4]
}
 800a888:	bf00      	nop
 800a88a:	370c      	adds	r7, #12
 800a88c:	46bd      	mov	sp, r7
 800a88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a892:	4770      	bx	lr

0800a894 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 800a894:	b480      	push	{r7}
 800a896:	b087      	sub	sp, #28
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a89c:	f3ef 8310 	mrs	r3, PRIMASK
 800a8a0:	60fb      	str	r3, [r7, #12]
  return(result);
 800a8a2:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a8a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a8a6:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	687a      	ldr	r2, [r7, #4]
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d102      	bne.n	800a8b8 <list_is_empty+0x24>
  {
    return_value = 1;
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	75fb      	strb	r3, [r7, #23]
 800a8b6:	e001      	b.n	800a8bc <list_is_empty+0x28>
  }
  else
  {
    return_value = 0;
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	75fb      	strb	r3, [r7, #23]
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	f383 8810 	msr	PRIMASK, r3
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800a8c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	371c      	adds	r7, #28
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d2:	4770      	bx	lr

0800a8d4 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b087      	sub	sp, #28
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8de:	f3ef 8310 	mrs	r3, PRIMASK
 800a8e2:	60fb      	str	r3, [r7, #12]
  return(result);
 800a8e4:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a8e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a8e8:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681a      	ldr	r2, [r3, #0]
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	687a      	ldr	r2, [r7, #4]
 800a8f6:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	683a      	ldr	r2, [r7, #0]
 800a8fc:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	683a      	ldr	r2, [r7, #0]
 800a904:	605a      	str	r2, [r3, #4]
 800a906:	697b      	ldr	r3, [r7, #20]
 800a908:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a910:	bf00      	nop
 800a912:	371c      	adds	r7, #28
 800a914:	46bd      	mov	sp, r7
 800a916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91a:	4770      	bx	lr

0800a91c <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 800a91c:	b480      	push	{r7}
 800a91e:	b087      	sub	sp, #28
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
 800a924:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a926:	f3ef 8310 	mrs	r3, PRIMASK
 800a92a:	60fb      	str	r3, [r7, #12]
  return(result);
 800a92c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a92e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a930:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	687a      	ldr	r2, [r7, #4]
 800a936:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	685a      	ldr	r2, [r3, #4]
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	683a      	ldr	r2, [r7, #0]
 800a944:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	685b      	ldr	r3, [r3, #4]
 800a94a:	683a      	ldr	r2, [r7, #0]
 800a94c:	601a      	str	r2, [r3, #0]
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a952:	693b      	ldr	r3, [r7, #16]
 800a954:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a958:	bf00      	nop
 800a95a:	371c      	adds	r7, #28
 800a95c:	46bd      	mov	sp, r7
 800a95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a962:	4770      	bx	lr

0800a964 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 800a964:	b480      	push	{r7}
 800a966:	b087      	sub	sp, #28
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a96c:	f3ef 8310 	mrs	r3, PRIMASK
 800a970:	60fb      	str	r3, [r7, #12]
  return(result);
 800a972:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a974:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a976:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	685b      	ldr	r3, [r3, #4]
 800a97c:	687a      	ldr	r2, [r7, #4]
 800a97e:	6812      	ldr	r2, [r2, #0]
 800a980:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	687a      	ldr	r2, [r7, #4]
 800a988:	6852      	ldr	r2, [r2, #4]
 800a98a:	605a      	str	r2, [r3, #4]
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a996:	bf00      	nop
 800a998:	371c      	adds	r7, #28
 800a99a:	46bd      	mov	sp, r7
 800a99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a0:	4770      	bx	lr

0800a9a2 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800a9a2:	b580      	push	{r7, lr}
 800a9a4:	b086      	sub	sp, #24
 800a9a6:	af00      	add	r7, sp, #0
 800a9a8:	6078      	str	r0, [r7, #4]
 800a9aa:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a9ac:	f3ef 8310 	mrs	r3, PRIMASK
 800a9b0:	60fb      	str	r3, [r7, #12]
  return(result);
 800a9b2:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a9b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a9b6:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681a      	ldr	r2, [r3, #0]
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f7ff ffcd 	bl	800a964 <list_remove_node>
  (*node)->next = NULL;
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	605a      	str	r2, [r3, #4]
 800a9da:	697b      	ldr	r3, [r7, #20]
 800a9dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a9e4:	bf00      	nop
 800a9e6:	3718      	adds	r7, #24
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}

0800a9ec <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b086      	sub	sp, #24
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
 800a9f4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a9f6:	f3ef 8310 	mrs	r3, PRIMASK
 800a9fa:	60fb      	str	r3, [r7, #12]
  return(result);
 800a9fc:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a9fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aa00:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	685a      	ldr	r2, [r3, #4]
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	685b      	ldr	r3, [r3, #4]
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f7ff ffa8 	bl	800a964 <list_remove_node>
  (*node)->next = NULL;
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	2200      	movs	r2, #0
 800aa22:	605a      	str	r2, [r3, #4]
 800aa24:	697b      	ldr	r3, [r7, #20]
 800aa26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa28:	693b      	ldr	r3, [r7, #16]
 800aa2a:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800aa2e:	bf00      	nop
 800aa30:	3718      	adds	r7, #24
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}

0800aa36 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800aa36:	b480      	push	{r7}
 800aa38:	b089      	sub	sp, #36	; 0x24
 800aa3a:	af00      	add	r7, sp, #0
 800aa3c:	6078      	str	r0, [r7, #4]
  int size = 0;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa42:	f3ef 8310 	mrs	r3, PRIMASK
 800aa46:	613b      	str	r3, [r7, #16]
  return(result);
 800aa48:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800aa4a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aa4c:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800aa54:	e005      	b.n	800aa62 <list_get_size+0x2c>
  {
    size++;
 800aa56:	69fb      	ldr	r3, [r7, #28]
 800aa58:	3301      	adds	r3, #1
 800aa5a:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 800aa5c:	69bb      	ldr	r3, [r7, #24]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800aa62:	69ba      	ldr	r2, [r7, #24]
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	429a      	cmp	r2, r3
 800aa68:	d1f5      	bne.n	800aa56 <list_get_size+0x20>
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	f383 8810 	msr	PRIMASK, r3
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 800aa74:	69fb      	ldr	r3, [r7, #28]
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3724      	adds	r7, #36	; 0x24
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa80:	4770      	bx	lr
	...

0800aa84 <network_configure_activations>:


AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 800aa84:	b480      	push	{r7}
 800aa86:	b085      	sub	sp, #20
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
 800aa8c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, AI_NETWORK_ACTIVATIONS_ALIGNMENT));
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	691b      	ldr	r3, [r3, #16]
 800aa92:	3303      	adds	r3, #3
 800aa94:	f023 0303 	bic.w	r3, r3, #3
 800aa98:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    conv2d_scratch0_array.data = AI_PTR(activations + 0);
 800aa9a:	4a18      	ldr	r2, [pc, #96]	; (800aafc <network_configure_activations+0x78>)
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	6093      	str	r3, [r2, #8]
    conv2d_scratch0_array.data_start = AI_PTR(activations + 0);
 800aaa0:	4a16      	ldr	r2, [pc, #88]	; (800aafc <network_configure_activations+0x78>)
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	60d3      	str	r3, [r2, #12]
    input_0_output_array.data = AI_PTR(NULL);
 800aaa6:	4b16      	ldr	r3, [pc, #88]	; (800ab00 <network_configure_activations+0x7c>)
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 800aaac:	4b14      	ldr	r3, [pc, #80]	; (800ab00 <network_configure_activations+0x7c>)
 800aaae:	2200      	movs	r2, #0
 800aab0:	60da      	str	r2, [r3, #12]
    conv2d_output_array.data = AI_PTR(activations + 864);
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800aab8:	4a12      	ldr	r2, [pc, #72]	; (800ab04 <network_configure_activations+0x80>)
 800aaba:	6093      	str	r3, [r2, #8]
    conv2d_output_array.data_start = AI_PTR(activations + 864);
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800aac2:	4a10      	ldr	r2, [pc, #64]	; (800ab04 <network_configure_activations+0x80>)
 800aac4:	60d3      	str	r3, [r2, #12]
    dense_output_array.data = AI_PTR(activations + 0);
 800aac6:	4a10      	ldr	r2, [pc, #64]	; (800ab08 <network_configure_activations+0x84>)
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	6093      	str	r3, [r2, #8]
    dense_output_array.data_start = AI_PTR(activations + 0);
 800aacc:	4a0e      	ldr	r2, [pc, #56]	; (800ab08 <network_configure_activations+0x84>)
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(activations + 48);
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	3330      	adds	r3, #48	; 0x30
 800aad6:	4a0d      	ldr	r2, [pc, #52]	; (800ab0c <network_configure_activations+0x88>)
 800aad8:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(activations + 48);
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	3330      	adds	r3, #48	; 0x30
 800aade:	4a0b      	ldr	r2, [pc, #44]	; (800ab0c <network_configure_activations+0x88>)
 800aae0:	60d3      	str	r3, [r2, #12]
    dense_1_nl_output_array.data = AI_PTR(NULL);
 800aae2:	4b0b      	ldr	r3, [pc, #44]	; (800ab10 <network_configure_activations+0x8c>)
 800aae4:	2200      	movs	r2, #0
 800aae6:	609a      	str	r2, [r3, #8]
    dense_1_nl_output_array.data_start = AI_PTR(NULL);
 800aae8:	4b09      	ldr	r3, [pc, #36]	; (800ab10 <network_configure_activations+0x8c>)
 800aaea:	2200      	movs	r2, #0
 800aaec:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 800aaee:	2301      	movs	r3, #1
}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	3714      	adds	r7, #20
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafa:	4770      	bx	lr
 800aafc:	20000078 	.word	0x20000078
 800ab00:	200000e8 	.word	0x200000e8
 800ab04:	200000f8 	.word	0x200000f8
 800ab08:	20000108 	.word	0x20000108
 800ab0c:	20000118 	.word	0x20000118
 800ab10:	20000128 	.word	0x20000128

0800ab14 <network_configure_weights>:


AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 800ab14:	b480      	push	{r7}
 800ab16:	b085      	sub	sp, #20
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	691b      	ldr	r3, [r3, #16]
 800ab22:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800ab24:	4b34      	ldr	r3, [pc, #208]	; (800abf8 <network_configure_weights+0xe4>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ab2c:	4a32      	ldr	r2, [pc, #200]	; (800abf8 <network_configure_weights+0xe4>)
 800ab2e:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights + 12144);
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 800ab36:	3330      	adds	r3, #48	; 0x30
 800ab38:	4a2f      	ldr	r2, [pc, #188]	; (800abf8 <network_configure_weights+0xe4>)
 800ab3a:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights + 12144);
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 800ab42:	3330      	adds	r3, #48	; 0x30
 800ab44:	4a2c      	ldr	r2, [pc, #176]	; (800abf8 <network_configure_weights+0xe4>)
 800ab46:	60d3      	str	r3, [r2, #12]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800ab48:	4b2c      	ldr	r3, [pc, #176]	; (800abfc <network_configure_weights+0xe8>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ab50:	4a2a      	ldr	r2, [pc, #168]	; (800abfc <network_configure_weights+0xe8>)
 800ab52:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights + 12048);
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 800ab5a:	3310      	adds	r3, #16
 800ab5c:	4a27      	ldr	r2, [pc, #156]	; (800abfc <network_configure_weights+0xe8>)
 800ab5e:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights + 12048);
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 800ab66:	3310      	adds	r3, #16
 800ab68:	4a24      	ldr	r2, [pc, #144]	; (800abfc <network_configure_weights+0xe8>)
 800ab6a:	60d3      	str	r3, [r2, #12]
    dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800ab6c:	4b24      	ldr	r3, [pc, #144]	; (800ac00 <network_configure_weights+0xec>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ab74:	4a22      	ldr	r2, [pc, #136]	; (800ac00 <network_configure_weights+0xec>)
 800ab76:	6013      	str	r3, [r2, #0]
    dense_bias_array.data = AI_PTR(weights + 12000);
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 800ab7e:	3320      	adds	r3, #32
 800ab80:	4a1f      	ldr	r2, [pc, #124]	; (800ac00 <network_configure_weights+0xec>)
 800ab82:	6093      	str	r3, [r2, #8]
    dense_bias_array.data_start = AI_PTR(weights + 12000);
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 800ab8a:	3320      	adds	r3, #32
 800ab8c:	4a1c      	ldr	r2, [pc, #112]	; (800ac00 <network_configure_weights+0xec>)
 800ab8e:	60d3      	str	r3, [r2, #12]
    dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800ab90:	4b1c      	ldr	r3, [pc, #112]	; (800ac04 <network_configure_weights+0xf0>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ab98:	4a1a      	ldr	r2, [pc, #104]	; (800ac04 <network_configure_weights+0xf0>)
 800ab9a:	6013      	str	r3, [r2, #0]
    dense_weights_array.data = AI_PTR(weights + 1632);
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 800aba2:	4a18      	ldr	r2, [pc, #96]	; (800ac04 <network_configure_weights+0xf0>)
 800aba4:	6093      	str	r3, [r2, #8]
    dense_weights_array.data_start = AI_PTR(weights + 1632);
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 800abac:	4a15      	ldr	r2, [pc, #84]	; (800ac04 <network_configure_weights+0xf0>)
 800abae:	60d3      	str	r3, [r2, #12]
    conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 800abb0:	4b15      	ldr	r3, [pc, #84]	; (800ac08 <network_configure_weights+0xf4>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800abb8:	4a13      	ldr	r2, [pc, #76]	; (800ac08 <network_configure_weights+0xf4>)
 800abba:	6013      	str	r3, [r2, #0]
    conv2d_bias_array.data = AI_PTR(weights + 1536);
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800abc2:	4a11      	ldr	r2, [pc, #68]	; (800ac08 <network_configure_weights+0xf4>)
 800abc4:	6093      	str	r3, [r2, #8]
    conv2d_bias_array.data_start = AI_PTR(weights + 1536);
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800abcc:	4a0e      	ldr	r2, [pc, #56]	; (800ac08 <network_configure_weights+0xf4>)
 800abce:	60d3      	str	r3, [r2, #12]
    conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 800abd0:	4b0e      	ldr	r3, [pc, #56]	; (800ac0c <network_configure_weights+0xf8>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800abd8:	4a0c      	ldr	r2, [pc, #48]	; (800ac0c <network_configure_weights+0xf8>)
 800abda:	6013      	str	r3, [r2, #0]
    conv2d_weights_array.data = AI_PTR(weights + 0);
 800abdc:	4a0b      	ldr	r2, [pc, #44]	; (800ac0c <network_configure_weights+0xf8>)
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	6093      	str	r3, [r2, #8]
    conv2d_weights_array.data_start = AI_PTR(weights + 0);
 800abe2:	4a0a      	ldr	r2, [pc, #40]	; (800ac0c <network_configure_weights+0xf8>)
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	60d3      	str	r3, [r2, #12]
  }

  return true;
 800abe8:	2301      	movs	r3, #1
}
 800abea:	4618      	mov	r0, r3
 800abec:	3714      	adds	r7, #20
 800abee:	46bd      	mov	sp, r7
 800abf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf4:	4770      	bx	lr
 800abf6:	bf00      	nop
 800abf8:	20000088 	.word	0x20000088
 800abfc:	20000098 	.word	0x20000098
 800ac00:	200000a8 	.word	0x200000a8
 800ac04:	200000b8 	.word	0x200000b8
 800ac08:	200000c8 	.word	0x200000c8
 800ac0c:	200000d8 	.word	0x200000d8

0800ac10 <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b082      	sub	sp, #8
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f000 f895 	bl	800ad48 <ai_platform_network_get_error>
 800ac1e:	4603      	mov	r3, r0
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	3708      	adds	r7, #8
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}

0800ac28 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b084      	sub	sp, #16
 800ac2c:	af02      	add	r7, sp, #8
 800ac2e:	6078      	str	r0, [r7, #4]
 800ac30:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800ac32:	2300      	movs	r3, #0
 800ac34:	9301      	str	r3, [sp, #4]
 800ac36:	2303      	movs	r3, #3
 800ac38:	9300      	str	r3, [sp, #0]
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	4a04      	ldr	r2, [pc, #16]	; (800ac50 <ai_network_create+0x28>)
 800ac3e:	6839      	ldr	r1, [r7, #0]
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f000 f8b3 	bl	800adac <ai_platform_network_create>
 800ac46:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	3708      	adds	r7, #8
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}
 800ac50:	20000018 	.word	0x20000018

0800ac54 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b084      	sub	sp, #16
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
 800ac5c:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800ac5e:	6839      	ldr	r1, [r7, #0]
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f000 f8fb 	bl	800ae5c <ai_platform_network_init>
 800ac66:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d101      	bne.n	800ac72 <ai_network_init+0x1e>
 800ac6e:	2300      	movs	r3, #0
 800ac70:	e02b      	b.n	800acca <ai_network_init+0x76>

  ai_bool ok = true;
 800ac72:	2301      	movs	r3, #1
 800ac74:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, &params->params);
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	4619      	mov	r1, r3
 800ac7a:	68f8      	ldr	r0, [r7, #12]
 800ac7c:	f7ff ff4a 	bl	800ab14 <network_configure_weights>
 800ac80:	4603      	mov	r3, r0
 800ac82:	461a      	mov	r2, r3
 800ac84:	7afb      	ldrb	r3, [r7, #11]
 800ac86:	4013      	ands	r3, r2
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	bf14      	ite	ne
 800ac8c:	2301      	movne	r3, #1
 800ac8e:	2300      	moveq	r3, #0
 800ac90:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, &params->activations);
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	3318      	adds	r3, #24
 800ac96:	4619      	mov	r1, r3
 800ac98:	68f8      	ldr	r0, [r7, #12]
 800ac9a:	f7ff fef3 	bl	800aa84 <network_configure_activations>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	461a      	mov	r2, r3
 800aca2:	7afb      	ldrb	r3, [r7, #11]
 800aca4:	4013      	ands	r3, r2
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	bf14      	ite	ne
 800acaa:	2301      	movne	r3, #1
 800acac:	2300      	moveq	r3, #0
 800acae:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800acb0:	6878      	ldr	r0, [r7, #4]
 800acb2:	f000 f951 	bl	800af58 <ai_platform_network_post_init>
 800acb6:	4603      	mov	r3, r0
 800acb8:	461a      	mov	r2, r3
 800acba:	7afb      	ldrb	r3, [r7, #11]
 800acbc:	4013      	ands	r3, r2
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	bf14      	ite	ne
 800acc2:	2301      	movne	r3, #1
 800acc4:	2300      	moveq	r3, #0
 800acc6:	72fb      	strb	r3, [r7, #11]

  return ok;
 800acc8:	7afb      	ldrb	r3, [r7, #11]
}
 800acca:	4618      	mov	r0, r3
 800accc:	3710      	adds	r7, #16
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd80      	pop	{r7, pc}

0800acd2 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800acd2:	b580      	push	{r7, lr}
 800acd4:	b084      	sub	sp, #16
 800acd6:	af00      	add	r7, sp, #0
 800acd8:	60f8      	str	r0, [r7, #12]
 800acda:	60b9      	str	r1, [r7, #8]
 800acdc:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800acde:	687a      	ldr	r2, [r7, #4]
 800ace0:	68b9      	ldr	r1, [r7, #8]
 800ace2:	68f8      	ldr	r0, [r7, #12]
 800ace4:	f000 f980 	bl	800afe8 <ai_platform_network_process>
 800ace8:	4603      	mov	r3, r0
}
 800acea:	4618      	mov	r0, r3
 800acec:	3710      	adds	r7, #16
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}
	...

0800acf4 <ai_network_data_weights_get>:
#include "network_data.h"

ai_handle ai_network_data_weights_get(void)
{
 800acf4:	b480      	push	{r7}
 800acf6:	af00      	add	r7, sp, #0
    0x03, 0x20, 0xbf, 0xa3, 0x85, 0x0c, 0x3f, 0x9e, 0x68,
    0xb6, 0x3e, 0x88, 0x58, 0x30, 0x3f, 0xd1, 0x0a, 0x02,
    0xbf, 0x14, 0xf5, 0x73, 0xbd, 0x04, 0xf5, 0x73, 0x3d
  };

  return AI_HANDLE_PTR(s_network_weights);
 800acf8:	4b02      	ldr	r3, [pc, #8]	; (800ad04 <ai_network_data_weights_get+0x10>)

}
 800acfa:	4618      	mov	r0, r3
 800acfc:	46bd      	mov	sp, r7
 800acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad02:	4770      	bx	lr
 800ad04:	0801004c 	.word	0x0801004c

0800ad08 <_platform_network_state_setup.isra.1>:
 800ad08:	b430      	push	{r4, r5}
 800ad0a:	68dd      	ldr	r5, [r3, #12]
 800ad0c:	695c      	ldr	r4, [r3, #20]
 800ad0e:	68ed      	ldr	r5, [r5, #12]
 800ad10:	68e4      	ldr	r4, [r4, #12]
 800ad12:	fb04 f405 	mul.w	r4, r4, r5
 800ad16:	6084      	str	r4, [r0, #8]
 800ad18:	8809      	ldrh	r1, [r1, #0]
 800ad1a:	fb04 f401 	mul.w	r4, r4, r1
 800ad1e:	60c4      	str	r4, [r0, #12]
 800ad20:	6811      	ldr	r1, [r2, #0]
 800ad22:	6041      	str	r1, [r0, #4]
 800ad24:	6812      	ldr	r2, [r2, #0]
 800ad26:	4414      	add	r4, r2
 800ad28:	6004      	str	r4, [r0, #0]
 800ad2a:	699a      	ldr	r2, [r3, #24]
 800ad2c:	6814      	ldr	r4, [r2, #0]
 800ad2e:	00a4      	lsls	r4, r4, #2
 800ad30:	d407      	bmi.n	800ad42 <_platform_network_state_setup.isra.1+0x3a>
 800ad32:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
 800ad36:	1b64      	subs	r4, r4, r5
 800ad38:	4421      	add	r1, r4
 800ad3a:	6091      	str	r1, [r2, #8]
 800ad3c:	699b      	ldr	r3, [r3, #24]
 800ad3e:	6842      	ldr	r2, [r0, #4]
 800ad40:	60da      	str	r2, [r3, #12]
 800ad42:	bc30      	pop	{r4, r5}
 800ad44:	4770      	bx	lr
	...

0800ad48 <ai_platform_network_get_error>:
 800ad48:	b410      	push	{r4}
 800ad4a:	b120      	cbz	r0, 800ad56 <ai_platform_network_get_error+0xe>
 800ad4c:	4b11      	ldr	r3, [pc, #68]	; (800ad94 <ai_platform_network_get_error+0x4c>)
 800ad4e:	6802      	ldr	r2, [r0, #0]
 800ad50:	429a      	cmp	r2, r3
 800ad52:	bf18      	it	ne
 800ad54:	2000      	movne	r0, #0
 800ad56:	4910      	ldr	r1, [pc, #64]	; (800ad98 <ai_platform_network_get_error+0x50>)
 800ad58:	4a10      	ldr	r2, [pc, #64]	; (800ad9c <ai_platform_network_get_error+0x54>)
 800ad5a:	680b      	ldr	r3, [r1, #0]
 800ad5c:	2401      	movs	r4, #1
 800ad5e:	f023 0301 	bic.w	r3, r3, #1
 800ad62:	600b      	str	r3, [r1, #0]
 800ad64:	4613      	mov	r3, r2
 800ad66:	6014      	str	r4, [r2, #0]
 800ad68:	681a      	ldr	r2, [r3, #0]
 800ad6a:	2a00      	cmp	r2, #0
 800ad6c:	d1fc      	bne.n	800ad68 <ai_platform_network_get_error+0x20>
 800ad6e:	4b0c      	ldr	r3, [pc, #48]	; (800ada0 <ai_platform_network_get_error+0x58>)
 800ad70:	4a0c      	ldr	r2, [pc, #48]	; (800ada4 <ai_platform_network_get_error+0x5c>)
 800ad72:	601a      	str	r2, [r3, #0]
 800ad74:	681a      	ldr	r2, [r3, #0]
 800ad76:	4b0c      	ldr	r3, [pc, #48]	; (800ada8 <ai_platform_network_get_error+0x60>)
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	d000      	beq.n	800ad7e <ai_platform_network_get_error+0x36>
 800ad7c:	e7fe      	b.n	800ad7c <ai_platform_network_get_error+0x34>
 800ad7e:	b120      	cbz	r0, 800ad8a <ai_platform_network_get_error+0x42>
 800ad80:	3010      	adds	r0, #16
 800ad82:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad86:	f000 bb3b 	b.w	800b400 <core_get_error>
 800ad8a:	f241 0010 	movw	r0, #4112	; 0x1010
 800ad8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad92:	4770      	bx	lr
 800ad94:	a1c00100 	.word	0xa1c00100
 800ad98:	e0002000 	.word	0xe0002000
 800ad9c:	40023008 	.word	0x40023008
 800ada0:	40023000 	.word	0x40023000
 800ada4:	f407a5c2 	.word	0xf407a5c2
 800ada8:	b5e8b5cd 	.word	0xb5e8b5cd

0800adac <ai_platform_network_create>:
 800adac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adb0:	4e23      	ldr	r6, [pc, #140]	; (800ae40 <ai_platform_network_create+0x94>)
 800adb2:	4924      	ldr	r1, [pc, #144]	; (800ae44 <ai_platform_network_create+0x98>)
 800adb4:	6835      	ldr	r5, [r6, #0]
 800adb6:	b082      	sub	sp, #8
 800adb8:	f025 0501 	bic.w	r5, r5, #1
 800adbc:	f89d 7020 	ldrb.w	r7, [sp, #32]
 800adc0:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 800adc4:	6035      	str	r5, [r6, #0]
 800adc6:	2501      	movs	r5, #1
 800adc8:	600d      	str	r5, [r1, #0]
 800adca:	680d      	ldr	r5, [r1, #0]
 800adcc:	2d00      	cmp	r5, #0
 800adce:	d1fc      	bne.n	800adca <ai_platform_network_create+0x1e>
 800add0:	491d      	ldr	r1, [pc, #116]	; (800ae48 <ai_platform_network_create+0x9c>)
 800add2:	4e1e      	ldr	r6, [pc, #120]	; (800ae4c <ai_platform_network_create+0xa0>)
 800add4:	600e      	str	r6, [r1, #0]
 800add6:	680e      	ldr	r6, [r1, #0]
 800add8:	491d      	ldr	r1, [pc, #116]	; (800ae50 <ai_platform_network_create+0xa4>)
 800adda:	428e      	cmp	r6, r1
 800addc:	d000      	beq.n	800ade0 <ai_platform_network_create+0x34>
 800adde:	e7fe      	b.n	800adde <ai_platform_network_create+0x32>
 800ade0:	b1d0      	cbz	r0, 800ae18 <ai_platform_network_create+0x6c>
 800ade2:	4698      	mov	r8, r3
 800ade4:	4613      	mov	r3, r2
 800ade6:	4a1b      	ldr	r2, [pc, #108]	; (800ae54 <ai_platform_network_create+0xa8>)
 800ade8:	601a      	str	r2, [r3, #0]
 800adea:	6003      	str	r3, [r0, #0]
 800adec:	4606      	mov	r6, r0
 800adee:	f000 fb05 	bl	800b3fc <core_init>
 800adf2:	b1b0      	cbz	r0, 800ae22 <ai_platform_network_create+0x76>
 800adf4:	0223      	lsls	r3, r4, #8
 800adf6:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800adfa:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 800adfe:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 800ae02:	d910      	bls.n	800ae26 <ai_platform_network_create+0x7a>
 800ae04:	2201      	movs	r2, #1
 800ae06:	2300      	movs	r3, #0
 800ae08:	6033      	str	r3, [r6, #0]
 800ae0a:	2310      	movs	r3, #16
 800ae0c:	2000      	movs	r0, #0
 800ae0e:	f362 0007 	bfi	r0, r2, #0, #8
 800ae12:	f363 201f 	bfi	r0, r3, #8, #24
 800ae16:	e001      	b.n	800ae1c <ai_platform_network_create+0x70>
 800ae18:	f241 0010 	movw	r0, #4112	; 0x1010
 800ae1c:	b002      	add	sp, #8
 800ae1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae22:	2230      	movs	r2, #48	; 0x30
 800ae24:	e7ef      	b.n	800ae06 <ai_platform_network_create+0x5a>
 800ae26:	a802      	add	r0, sp, #8
 800ae28:	4b0b      	ldr	r3, [pc, #44]	; (800ae58 <ai_platform_network_create+0xac>)
 800ae2a:	f840 3d04 	str.w	r3, [r0, #-4]!
 800ae2e:	f002 fa31 	bl	800d294 <ai_check_custom_types>
 800ae32:	b110      	cbz	r0, 800ae3a <ai_platform_network_create+0x8e>
 800ae34:	462b      	mov	r3, r5
 800ae36:	462a      	mov	r2, r5
 800ae38:	e7e8      	b.n	800ae0c <ai_platform_network_create+0x60>
 800ae3a:	2202      	movs	r2, #2
 800ae3c:	e7e3      	b.n	800ae06 <ai_platform_network_create+0x5a>
 800ae3e:	bf00      	nop
 800ae40:	e0002000 	.word	0xe0002000
 800ae44:	40023008 	.word	0x40023008
 800ae48:	40023000 	.word	0x40023000
 800ae4c:	f407a5c2 	.word	0xf407a5c2
 800ae50:	b5e8b5cd 	.word	0xb5e8b5cd
 800ae54:	a1c00100 	.word	0xa1c00100
 800ae58:	84048403 	.word	0x84048403

0800ae5c <ai_platform_network_init>:
 800ae5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae5e:	460c      	mov	r4, r1
 800ae60:	4605      	mov	r5, r0
 800ae62:	b120      	cbz	r0, 800ae6e <ai_platform_network_init+0x12>
 800ae64:	4b36      	ldr	r3, [pc, #216]	; (800af40 <ai_platform_network_init+0xe4>)
 800ae66:	6802      	ldr	r2, [r0, #0]
 800ae68:	429a      	cmp	r2, r3
 800ae6a:	bf18      	it	ne
 800ae6c:	2500      	movne	r5, #0
 800ae6e:	4935      	ldr	r1, [pc, #212]	; (800af44 <ai_platform_network_init+0xe8>)
 800ae70:	4a35      	ldr	r2, [pc, #212]	; (800af48 <ai_platform_network_init+0xec>)
 800ae72:	680b      	ldr	r3, [r1, #0]
 800ae74:	2001      	movs	r0, #1
 800ae76:	f023 0301 	bic.w	r3, r3, #1
 800ae7a:	600b      	str	r3, [r1, #0]
 800ae7c:	4613      	mov	r3, r2
 800ae7e:	6010      	str	r0, [r2, #0]
 800ae80:	681a      	ldr	r2, [r3, #0]
 800ae82:	2a00      	cmp	r2, #0
 800ae84:	d1fc      	bne.n	800ae80 <ai_platform_network_init+0x24>
 800ae86:	4b31      	ldr	r3, [pc, #196]	; (800af4c <ai_platform_network_init+0xf0>)
 800ae88:	4a31      	ldr	r2, [pc, #196]	; (800af50 <ai_platform_network_init+0xf4>)
 800ae8a:	601a      	str	r2, [r3, #0]
 800ae8c:	681a      	ldr	r2, [r3, #0]
 800ae8e:	4b31      	ldr	r3, [pc, #196]	; (800af54 <ai_platform_network_init+0xf8>)
 800ae90:	429a      	cmp	r2, r3
 800ae92:	d000      	beq.n	800ae96 <ai_platform_network_init+0x3a>
 800ae94:	e7fe      	b.n	800ae94 <ai_platform_network_init+0x38>
 800ae96:	b33d      	cbz	r5, 800aee8 <ai_platform_network_init+0x8c>
 800ae98:	b344      	cbz	r4, 800aeec <ai_platform_network_init+0x90>
 800ae9a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800ae9c:	6926      	ldr	r6, [r4, #16]
 800ae9e:	2f00      	cmp	r7, #0
 800aea0:	d03d      	beq.n	800af1e <ai_platform_network_init+0xc2>
 800aea2:	b35e      	cbz	r6, 800aefc <ai_platform_network_init+0xa0>
 800aea4:	4627      	mov	r7, r4
 800aea6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800aea8:	f105 0618 	add.w	r6, r5, #24
 800aeac:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800aeae:	e897 0003 	ldmia.w	r7, {r0, r1}
 800aeb2:	e886 0003 	stmia.w	r6, {r0, r1}
 800aeb6:	3418      	adds	r4, #24
 800aeb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aeba:	f105 0630 	add.w	r6, r5, #48	; 0x30
 800aebe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800aec0:	e894 0003 	ldmia.w	r4, {r0, r1}
 800aec4:	e886 0003 	stmia.w	r6, {r0, r1}
 800aec8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800aeca:	2303      	movs	r3, #3
 800aecc:	60eb      	str	r3, [r5, #12]
 800aece:	b15a      	cbz	r2, 800aee8 <ai_platform_network_init+0x8c>
 800aed0:	68d3      	ldr	r3, [r2, #12]
 800aed2:	6095      	str	r5, [r2, #8]
 800aed4:	429a      	cmp	r2, r3
 800aed6:	d007      	beq.n	800aee8 <ai_platform_network_init+0x8c>
 800aed8:	b133      	cbz	r3, 800aee8 <ai_platform_network_init+0x8c>
 800aeda:	68da      	ldr	r2, [r3, #12]
 800aedc:	609d      	str	r5, [r3, #8]
 800aede:	429a      	cmp	r2, r3
 800aee0:	d002      	beq.n	800aee8 <ai_platform_network_init+0x8c>
 800aee2:	4613      	mov	r3, r2
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d1f8      	bne.n	800aeda <ai_platform_network_init+0x7e>
 800aee8:	4628      	mov	r0, r5
 800aeea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aeec:	f105 0010 	add.w	r0, r5, #16
 800aef0:	2211      	movs	r2, #17
 800aef2:	2110      	movs	r1, #16
 800aef4:	f000 fa8a 	bl	800b40c <core_set_error>
 800aef8:	4625      	mov	r5, r4
 800aefa:	e7f5      	b.n	800aee8 <ai_platform_network_init+0x8c>
 800aefc:	8921      	ldrh	r1, [r4, #8]
 800aefe:	88e2      	ldrh	r2, [r4, #6]
 800af00:	68e3      	ldr	r3, [r4, #12]
 800af02:	fb02 f201 	mul.w	r2, r2, r1
 800af06:	fb03 f302 	mul.w	r3, r3, r2
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d0ca      	beq.n	800aea4 <ai_platform_network_init+0x48>
 800af0e:	f105 0010 	add.w	r0, r5, #16
 800af12:	2212      	movs	r2, #18
 800af14:	2110      	movs	r1, #16
 800af16:	f000 fa79 	bl	800b40c <core_set_error>
 800af1a:	4635      	mov	r5, r6
 800af1c:	e7e4      	b.n	800aee8 <ai_platform_network_init+0x8c>
 800af1e:	8c21      	ldrh	r1, [r4, #32]
 800af20:	8be2      	ldrh	r2, [r4, #30]
 800af22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af24:	fb02 f201 	mul.w	r2, r2, r1
 800af28:	fb03 f302 	mul.w	r3, r3, r2
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d0b8      	beq.n	800aea2 <ai_platform_network_init+0x46>
 800af30:	f105 0010 	add.w	r0, r5, #16
 800af34:	2213      	movs	r2, #19
 800af36:	2110      	movs	r1, #16
 800af38:	f000 fa68 	bl	800b40c <core_set_error>
 800af3c:	463d      	mov	r5, r7
 800af3e:	e7d3      	b.n	800aee8 <ai_platform_network_init+0x8c>
 800af40:	a1c00100 	.word	0xa1c00100
 800af44:	e0002000 	.word	0xe0002000
 800af48:	40023008 	.word	0x40023008
 800af4c:	40023000 	.word	0x40023000
 800af50:	f407a5c2 	.word	0xf407a5c2
 800af54:	b5e8b5cd 	.word	0xb5e8b5cd

0800af58 <ai_platform_network_post_init>:
 800af58:	b538      	push	{r3, r4, r5, lr}
 800af5a:	4604      	mov	r4, r0
 800af5c:	b120      	cbz	r0, 800af68 <ai_platform_network_post_init+0x10>
 800af5e:	4b1c      	ldr	r3, [pc, #112]	; (800afd0 <ai_platform_network_post_init+0x78>)
 800af60:	6802      	ldr	r2, [r0, #0]
 800af62:	429a      	cmp	r2, r3
 800af64:	bf18      	it	ne
 800af66:	2400      	movne	r4, #0
 800af68:	491a      	ldr	r1, [pc, #104]	; (800afd4 <ai_platform_network_post_init+0x7c>)
 800af6a:	4a1b      	ldr	r2, [pc, #108]	; (800afd8 <ai_platform_network_post_init+0x80>)
 800af6c:	680b      	ldr	r3, [r1, #0]
 800af6e:	2001      	movs	r0, #1
 800af70:	f023 0301 	bic.w	r3, r3, #1
 800af74:	600b      	str	r3, [r1, #0]
 800af76:	4613      	mov	r3, r2
 800af78:	6010      	str	r0, [r2, #0]
 800af7a:	681a      	ldr	r2, [r3, #0]
 800af7c:	2a00      	cmp	r2, #0
 800af7e:	d1fc      	bne.n	800af7a <ai_platform_network_post_init+0x22>
 800af80:	4b16      	ldr	r3, [pc, #88]	; (800afdc <ai_platform_network_post_init+0x84>)
 800af82:	4a17      	ldr	r2, [pc, #92]	; (800afe0 <ai_platform_network_post_init+0x88>)
 800af84:	601a      	str	r2, [r3, #0]
 800af86:	681a      	ldr	r2, [r3, #0]
 800af88:	4b16      	ldr	r3, [pc, #88]	; (800afe4 <ai_platform_network_post_init+0x8c>)
 800af8a:	429a      	cmp	r2, r3
 800af8c:	d000      	beq.n	800af90 <ai_platform_network_post_init+0x38>
 800af8e:	e7fe      	b.n	800af8e <ai_platform_network_post_init+0x36>
 800af90:	b1a4      	cbz	r4, 800afbc <ai_platform_network_post_init+0x64>
 800af92:	68e3      	ldr	r3, [r4, #12]
 800af94:	f013 0502 	ands.w	r5, r3, #2
 800af98:	d012      	beq.n	800afc0 <ai_platform_network_post_init+0x68>
 800af9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800af9c:	b163      	cbz	r3, 800afb8 <ai_platform_network_post_init+0x60>
 800af9e:	6d25      	ldr	r5, [r4, #80]	; 0x50
 800afa0:	b91d      	cbnz	r5, 800afaa <ai_platform_network_post_init+0x52>
 800afa2:	e009      	b.n	800afb8 <ai_platform_network_post_init+0x60>
 800afa4:	461d      	mov	r5, r3
 800afa6:	b13b      	cbz	r3, 800afb8 <ai_platform_network_post_init+0x60>
 800afa8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800afaa:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800afac:	4629      	mov	r1, r5
 800afae:	2000      	movs	r0, #0
 800afb0:	4798      	blx	r3
 800afb2:	68eb      	ldr	r3, [r5, #12]
 800afb4:	42ab      	cmp	r3, r5
 800afb6:	d1f5      	bne.n	800afa4 <ai_platform_network_post_init+0x4c>
 800afb8:	2001      	movs	r0, #1
 800afba:	bd38      	pop	{r3, r4, r5, pc}
 800afbc:	4620      	mov	r0, r4
 800afbe:	bd38      	pop	{r3, r4, r5, pc}
 800afc0:	f104 0010 	add.w	r0, r4, #16
 800afc4:	2210      	movs	r2, #16
 800afc6:	2111      	movs	r1, #17
 800afc8:	f000 fa20 	bl	800b40c <core_set_error>
 800afcc:	4628      	mov	r0, r5
 800afce:	bd38      	pop	{r3, r4, r5, pc}
 800afd0:	a1c00100 	.word	0xa1c00100
 800afd4:	e0002000 	.word	0xe0002000
 800afd8:	40023008 	.word	0x40023008
 800afdc:	40023000 	.word	0x40023000
 800afe0:	f407a5c2 	.word	0xf407a5c2
 800afe4:	b5e8b5cd 	.word	0xb5e8b5cd

0800afe8 <ai_platform_network_process>:
 800afe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afec:	b083      	sub	sp, #12
 800afee:	4604      	mov	r4, r0
 800aff0:	9201      	str	r2, [sp, #4]
 800aff2:	b120      	cbz	r0, 800affe <ai_platform_network_process+0x16>
 800aff4:	4ba5      	ldr	r3, [pc, #660]	; (800b28c <ai_platform_network_process+0x2a4>)
 800aff6:	6802      	ldr	r2, [r0, #0]
 800aff8:	429a      	cmp	r2, r3
 800affa:	bf18      	it	ne
 800affc:	2400      	movne	r4, #0
 800affe:	48a4      	ldr	r0, [pc, #656]	; (800b290 <ai_platform_network_process+0x2a8>)
 800b000:	4ba4      	ldr	r3, [pc, #656]	; (800b294 <ai_platform_network_process+0x2ac>)
 800b002:	6802      	ldr	r2, [r0, #0]
 800b004:	f022 0201 	bic.w	r2, r2, #1
 800b008:	6002      	str	r2, [r0, #0]
 800b00a:	2201      	movs	r2, #1
 800b00c:	601a      	str	r2, [r3, #0]
 800b00e:	681a      	ldr	r2, [r3, #0]
 800b010:	2a00      	cmp	r2, #0
 800b012:	d1fc      	bne.n	800b00e <ai_platform_network_process+0x26>
 800b014:	4ba0      	ldr	r3, [pc, #640]	; (800b298 <ai_platform_network_process+0x2b0>)
 800b016:	4aa1      	ldr	r2, [pc, #644]	; (800b29c <ai_platform_network_process+0x2b4>)
 800b018:	601a      	str	r2, [r3, #0]
 800b01a:	681a      	ldr	r2, [r3, #0]
 800b01c:	4ba0      	ldr	r3, [pc, #640]	; (800b2a0 <ai_platform_network_process+0x2b8>)
 800b01e:	429a      	cmp	r2, r3
 800b020:	d000      	beq.n	800b024 <ai_platform_network_process+0x3c>
 800b022:	e7fe      	b.n	800b022 <ai_platform_network_process+0x3a>
 800b024:	2c00      	cmp	r4, #0
 800b026:	d066      	beq.n	800b0f6 <ai_platform_network_process+0x10e>
 800b028:	f8b4 7048 	ldrh.w	r7, [r4, #72]	; 0x48
 800b02c:	b107      	cbz	r7, 800b030 <ai_platform_network_process+0x48>
 800b02e:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 800b030:	68e3      	ldr	r3, [r4, #12]
 800b032:	f003 0303 	and.w	r3, r3, #3
 800b036:	2600      	movs	r6, #0
 800b038:	2b03      	cmp	r3, #3
 800b03a:	6166      	str	r6, [r4, #20]
 800b03c:	f040 80fe 	bne.w	800b23c <ai_platform_network_process+0x254>
 800b040:	2900      	cmp	r1, #0
 800b042:	d07f      	beq.n	800b144 <ai_platform_network_process+0x15c>
 800b044:	2f00      	cmp	r7, #0
 800b046:	d07d      	beq.n	800b144 <ai_platform_network_process+0x15c>
 800b048:	883b      	ldrh	r3, [r7, #0]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d07a      	beq.n	800b144 <ai_platform_network_process+0x15c>
 800b04e:	460d      	mov	r5, r1
 800b050:	46a0      	mov	r8, r4
 800b052:	f835 9f04 	ldrh.w	r9, [r5, #4]!
 800b056:	429e      	cmp	r6, r3
 800b058:	d27d      	bcs.n	800b156 <ai_platform_network_process+0x16e>
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d07a      	beq.n	800b156 <ai_platform_network_process+0x16e>
 800b060:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 800b064:	2c00      	cmp	r4, #0
 800b066:	d076      	beq.n	800b156 <ai_platform_network_process+0x16e>
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	eb13 1a06 	adds.w	sl, r3, r6, lsl #4
 800b070:	d067      	beq.n	800b142 <ai_platform_network_process+0x15a>
 800b072:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 800b076:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 800b07a:	69a0      	ldr	r0, [r4, #24]
 800b07c:	f8d5 c008 	ldr.w	ip, [r5, #8]
 800b080:	6841      	ldr	r1, [r0, #4]
 800b082:	fb0b f30e 	mul.w	r3, fp, lr
 800b086:	fb0c f303 	mul.w	r3, ip, r3
 800b08a:	4299      	cmp	r1, r3
 800b08c:	d350      	bcc.n	800b130 <ai_platform_network_process+0x148>
 800b08e:	68e3      	ldr	r3, [r4, #12]
 800b090:	68da      	ldr	r2, [r3, #12]
 800b092:	455a      	cmp	r2, fp
 800b094:	d14c      	bne.n	800b130 <ai_platform_network_process+0x148>
 800b096:	689a      	ldr	r2, [r3, #8]
 800b098:	4572      	cmp	r2, lr
 800b09a:	d149      	bne.n	800b130 <ai_platform_network_process+0x148>
 800b09c:	685b      	ldr	r3, [r3, #4]
 800b09e:	459c      	cmp	ip, r3
 800b0a0:	d146      	bne.n	800b130 <ai_platform_network_process+0x148>
 800b0a2:	6800      	ldr	r0, [r0, #0]
 800b0a4:	f002 f9a6 	bl	800d3f4 <ai_array_get_byte_size>
 800b0a8:	68e2      	ldr	r2, [r4, #12]
 800b0aa:	6963      	ldr	r3, [r4, #20]
 800b0ac:	68d2      	ldr	r2, [r2, #12]
 800b0ae:	68db      	ldr	r3, [r3, #12]
 800b0b0:	fb03 f302 	mul.w	r3, r3, r2
 800b0b4:	4298      	cmp	r0, r3
 800b0b6:	d33b      	bcc.n	800b130 <ai_platform_network_process+0x148>
 800b0b8:	69a3      	ldr	r3, [r4, #24]
 800b0ba:	6818      	ldr	r0, [r3, #0]
 800b0bc:	f002 f94e 	bl	800d35c <ai_array_to_buffer_fmt>
 800b0c0:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800b0c4:	4043      	eors	r3, r0
 800b0c6:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800b0ca:	d128      	bne.n	800b11e <ai_platform_network_process+0x136>
 800b0cc:	68eb      	ldr	r3, [r5, #12]
 800b0ce:	b1f3      	cbz	r3, 800b10e <ai_platform_network_process+0x126>
 800b0d0:	f8b5 b000 	ldrh.w	fp, [r5]
 800b0d4:	f1bb 0f00 	cmp.w	fp, #0
 800b0d8:	d012      	beq.n	800b100 <ai_platform_network_process+0x118>
 800b0da:	4623      	mov	r3, r4
 800b0dc:	f105 020c 	add.w	r2, r5, #12
 800b0e0:	4629      	mov	r1, r5
 800b0e2:	4650      	mov	r0, sl
 800b0e4:	f7ff fe10 	bl	800ad08 <_platform_network_state_setup.isra.1>
 800b0e8:	45d9      	cmp	r9, fp
 800b0ea:	883b      	ldrh	r3, [r7, #0]
 800b0ec:	bf38      	it	cc
 800b0ee:	46d9      	movcc	r9, fp
 800b0f0:	3601      	adds	r6, #1
 800b0f2:	3518      	adds	r5, #24
 800b0f4:	e7af      	b.n	800b056 <ai_platform_network_process+0x6e>
 800b0f6:	46a3      	mov	fp, r4
 800b0f8:	4658      	mov	r0, fp
 800b0fa:	b003      	add	sp, #12
 800b0fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b100:	f108 0010 	add.w	r0, r8, #16
 800b104:	2221      	movs	r2, #33	; 0x21
 800b106:	2112      	movs	r1, #18
 800b108:	f000 f980 	bl	800b40c <core_set_error>
 800b10c:	e7f4      	b.n	800b0f8 <ai_platform_network_process+0x110>
 800b10e:	f108 0010 	add.w	r0, r8, #16
 800b112:	2217      	movs	r2, #23
 800b114:	2112      	movs	r1, #18
 800b116:	469b      	mov	fp, r3
 800b118:	f000 f978 	bl	800b40c <core_set_error>
 800b11c:	e7ec      	b.n	800b0f8 <ai_platform_network_process+0x110>
 800b11e:	f108 0010 	add.w	r0, r8, #16
 800b122:	2219      	movs	r2, #25
 800b124:	2112      	movs	r1, #18
 800b126:	f000 f971 	bl	800b40c <core_set_error>
 800b12a:	f04f 0b00 	mov.w	fp, #0
 800b12e:	e7e3      	b.n	800b0f8 <ai_platform_network_process+0x110>
 800b130:	f108 0010 	add.w	r0, r8, #16
 800b134:	2218      	movs	r2, #24
 800b136:	2112      	movs	r1, #18
 800b138:	f000 f968 	bl	800b40c <core_set_error>
 800b13c:	f04f 0b00 	mov.w	fp, #0
 800b140:	e7da      	b.n	800b0f8 <ai_platform_network_process+0x110>
 800b142:	4644      	mov	r4, r8
 800b144:	f104 0010 	add.w	r0, r4, #16
 800b148:	2217      	movs	r2, #23
 800b14a:	2112      	movs	r1, #18
 800b14c:	f000 f95e 	bl	800b40c <core_set_error>
 800b150:	f04f 0b00 	mov.w	fp, #0
 800b154:	e7d0      	b.n	800b0f8 <ai_platform_network_process+0x110>
 800b156:	9a01      	ldr	r2, [sp, #4]
 800b158:	f8b8 3048 	ldrh.w	r3, [r8, #72]	; 0x48
 800b15c:	4644      	mov	r4, r8
 800b15e:	2a00      	cmp	r2, #0
 800b160:	f000 80a4 	beq.w	800b2ac <ai_platform_network_process+0x2c4>
 800b164:	2b01      	cmp	r3, #1
 800b166:	f240 8140 	bls.w	800b3ea <ai_platform_network_process+0x402>
 800b16a:	f8d8 804c 	ldr.w	r8, [r8, #76]	; 0x4c
 800b16e:	f118 0f0c 	cmn.w	r8, #12
 800b172:	f000 813a 	beq.w	800b3ea <ai_platform_network_process+0x402>
 800b176:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	f000 8135 	beq.w	800b3ea <ai_platform_network_process+0x402>
 800b180:	3204      	adds	r2, #4
 800b182:	4615      	mov	r5, r2
 800b184:	2700      	movs	r7, #0
 800b186:	429f      	cmp	r7, r3
 800b188:	f080 808c 	bcs.w	800b2a4 <ai_platform_network_process+0x2bc>
 800b18c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800b190:	2b00      	cmp	r3, #0
 800b192:	f000 8087 	beq.w	800b2a4 <ai_platform_network_process+0x2bc>
 800b196:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 800b19a:	2e00      	cmp	r6, #0
 800b19c:	f000 8082 	beq.w	800b2a4 <ai_platform_network_process+0x2bc>
 800b1a0:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	eb13 1a07 	adds.w	sl, r3, r7, lsl #4
 800b1aa:	d067      	beq.n	800b27c <ai_platform_network_process+0x294>
 800b1ac:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 800b1b0:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 800b1b4:	69b0      	ldr	r0, [r6, #24]
 800b1b6:	f8d5 c008 	ldr.w	ip, [r5, #8]
 800b1ba:	6841      	ldr	r1, [r0, #4]
 800b1bc:	fb0b f30e 	mul.w	r3, fp, lr
 800b1c0:	fb0c f303 	mul.w	r3, ip, r3
 800b1c4:	4299      	cmp	r1, r3
 800b1c6:	f0c0 8110 	bcc.w	800b3ea <ai_platform_network_process+0x402>
 800b1ca:	68f3      	ldr	r3, [r6, #12]
 800b1cc:	68da      	ldr	r2, [r3, #12]
 800b1ce:	455a      	cmp	r2, fp
 800b1d0:	f040 810b 	bne.w	800b3ea <ai_platform_network_process+0x402>
 800b1d4:	689a      	ldr	r2, [r3, #8]
 800b1d6:	4572      	cmp	r2, lr
 800b1d8:	f040 8107 	bne.w	800b3ea <ai_platform_network_process+0x402>
 800b1dc:	685b      	ldr	r3, [r3, #4]
 800b1de:	459c      	cmp	ip, r3
 800b1e0:	f040 8103 	bne.w	800b3ea <ai_platform_network_process+0x402>
 800b1e4:	6800      	ldr	r0, [r0, #0]
 800b1e6:	f002 f905 	bl	800d3f4 <ai_array_get_byte_size>
 800b1ea:	68f2      	ldr	r2, [r6, #12]
 800b1ec:	6973      	ldr	r3, [r6, #20]
 800b1ee:	68d2      	ldr	r2, [r2, #12]
 800b1f0:	68db      	ldr	r3, [r3, #12]
 800b1f2:	fb03 f302 	mul.w	r3, r3, r2
 800b1f6:	4298      	cmp	r0, r3
 800b1f8:	f0c0 80f7 	bcc.w	800b3ea <ai_platform_network_process+0x402>
 800b1fc:	69b3      	ldr	r3, [r6, #24]
 800b1fe:	6818      	ldr	r0, [r3, #0]
 800b200:	f002 f8ac 	bl	800d35c <ai_array_to_buffer_fmt>
 800b204:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800b208:	4043      	eors	r3, r0
 800b20a:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800b20e:	d12c      	bne.n	800b26a <ai_platform_network_process+0x282>
 800b210:	68eb      	ldr	r3, [r5, #12]
 800b212:	b313      	cbz	r3, 800b25a <ai_platform_network_process+0x272>
 800b214:	f8b5 b000 	ldrh.w	fp, [r5]
 800b218:	f1bb 0f00 	cmp.w	fp, #0
 800b21c:	d016      	beq.n	800b24c <ai_platform_network_process+0x264>
 800b21e:	4633      	mov	r3, r6
 800b220:	f105 020c 	add.w	r2, r5, #12
 800b224:	4629      	mov	r1, r5
 800b226:	4650      	mov	r0, sl
 800b228:	f7ff fd6e 	bl	800ad08 <_platform_network_state_setup.isra.1>
 800b22c:	45d9      	cmp	r9, fp
 800b22e:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800b232:	bf38      	it	cc
 800b234:	46d9      	movcc	r9, fp
 800b236:	3701      	adds	r7, #1
 800b238:	3518      	adds	r5, #24
 800b23a:	e7a4      	b.n	800b186 <ai_platform_network_process+0x19e>
 800b23c:	f104 0010 	add.w	r0, r4, #16
 800b240:	2230      	movs	r2, #48	; 0x30
 800b242:	2111      	movs	r1, #17
 800b244:	f000 f8e2 	bl	800b40c <core_set_error>
 800b248:	46b3      	mov	fp, r6
 800b24a:	e755      	b.n	800b0f8 <ai_platform_network_process+0x110>
 800b24c:	f104 0010 	add.w	r0, r4, #16
 800b250:	2221      	movs	r2, #33	; 0x21
 800b252:	2113      	movs	r1, #19
 800b254:	f000 f8da 	bl	800b40c <core_set_error>
 800b258:	e74e      	b.n	800b0f8 <ai_platform_network_process+0x110>
 800b25a:	f104 0010 	add.w	r0, r4, #16
 800b25e:	2217      	movs	r2, #23
 800b260:	2113      	movs	r1, #19
 800b262:	469b      	mov	fp, r3
 800b264:	f000 f8d2 	bl	800b40c <core_set_error>
 800b268:	e746      	b.n	800b0f8 <ai_platform_network_process+0x110>
 800b26a:	f104 0010 	add.w	r0, r4, #16
 800b26e:	2219      	movs	r2, #25
 800b270:	2113      	movs	r1, #19
 800b272:	f000 f8cb 	bl	800b40c <core_set_error>
 800b276:	f04f 0b00 	mov.w	fp, #0
 800b27a:	e73d      	b.n	800b0f8 <ai_platform_network_process+0x110>
 800b27c:	f104 0010 	add.w	r0, r4, #16
 800b280:	2217      	movs	r2, #23
 800b282:	2113      	movs	r1, #19
 800b284:	f000 f8c2 	bl	800b40c <core_set_error>
 800b288:	46d3      	mov	fp, sl
 800b28a:	e735      	b.n	800b0f8 <ai_platform_network_process+0x110>
 800b28c:	a1c00100 	.word	0xa1c00100
 800b290:	e0002000 	.word	0xe0002000
 800b294:	40023008 	.word	0x40023008
 800b298:	40023000 	.word	0x40023000
 800b29c:	f407a5c2 	.word	0xf407a5c2
 800b2a0:	b5e8b5cd 	.word	0xb5e8b5cd
 800b2a4:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800b2a8:	f8a4 9014 	strh.w	r9, [r4, #20]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	f000 8099 	beq.w	800b3e4 <ai_platform_network_process+0x3fc>
 800b2b2:	2b01      	cmp	r3, #1
 800b2b4:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800b2b6:	f240 8093 	bls.w	800b3e0 <ai_platform_network_process+0x3f8>
 800b2ba:	f105 070c 	add.w	r7, r5, #12
 800b2be:	8ae0      	ldrh	r0, [r4, #22]
 800b2c0:	8aa3      	ldrh	r3, [r4, #20]
 800b2c2:	4283      	cmp	r3, r0
 800b2c4:	d977      	bls.n	800b3b6 <ai_platform_network_process+0x3ce>
 800b2c6:	46a3      	mov	fp, r4
 800b2c8:	2d00      	cmp	r5, #0
 800b2ca:	d032      	beq.n	800b332 <ai_platform_network_process+0x34a>
 800b2cc:	882b      	ldrh	r3, [r5, #0]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d02f      	beq.n	800b332 <ai_platform_network_process+0x34a>
 800b2d2:	686b      	ldr	r3, [r5, #4]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d02c      	beq.n	800b332 <ai_platform_network_process+0x34a>
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f04f 0800 	mov.w	r8, #0
 800b2de:	b343      	cbz	r3, 800b332 <ai_platform_network_process+0x34a>
 800b2e0:	68a9      	ldr	r1, [r5, #8]
 800b2e2:	699a      	ldr	r2, [r3, #24]
 800b2e4:	f8d1 a000 	ldr.w	sl, [r1]
 800b2e8:	6814      	ldr	r4, [r2, #0]
 800b2ea:	6890      	ldr	r0, [r2, #8]
 800b2ec:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800b2f0:	eb0a 0609 	add.w	r6, sl, r9
 800b2f4:	00a4      	lsls	r4, r4, #2
 800b2f6:	6871      	ldr	r1, [r6, #4]
 800b2f8:	d45f      	bmi.n	800b3ba <ai_platform_network_process+0x3d2>
 800b2fa:	68d4      	ldr	r4, [r2, #12]
 800b2fc:	1b00      	subs	r0, r0, r4
 800b2fe:	4401      	add	r1, r0
 800b300:	6091      	str	r1, [r2, #8]
 800b302:	699b      	ldr	r3, [r3, #24]
 800b304:	6872      	ldr	r2, [r6, #4]
 800b306:	60da      	str	r2, [r3, #12]
 800b308:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 800b30c:	f85a 2009 	ldr.w	r2, [sl, r9]
 800b310:	440b      	add	r3, r1
 800b312:	4293      	cmp	r3, r2
 800b314:	bf24      	itt	cs
 800b316:	68f3      	ldrcs	r3, [r6, #12]
 800b318:	1ad3      	subcs	r3, r2, r3
 800b31a:	6073      	str	r3, [r6, #4]
 800b31c:	882b      	ldrh	r3, [r5, #0]
 800b31e:	f108 0801 	add.w	r8, r8, #1
 800b322:	4598      	cmp	r8, r3
 800b324:	d205      	bcs.n	800b332 <ai_platform_network_process+0x34a>
 800b326:	686b      	ldr	r3, [r5, #4]
 800b328:	b11b      	cbz	r3, 800b332 <ai_platform_network_process+0x34a>
 800b32a:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d1d6      	bne.n	800b2e0 <ai_platform_network_process+0x2f8>
 800b332:	4658      	mov	r0, fp
 800b334:	f001 ffd8 	bl	800d2e8 <ai_layers_forward_all>
 800b338:	2f00      	cmp	r7, #0
 800b33a:	d032      	beq.n	800b3a2 <ai_platform_network_process+0x3ba>
 800b33c:	883b      	ldrh	r3, [r7, #0]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d02f      	beq.n	800b3a2 <ai_platform_network_process+0x3ba>
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	b36b      	cbz	r3, 800b3a2 <ai_platform_network_process+0x3ba>
 800b346:	6818      	ldr	r0, [r3, #0]
 800b348:	b358      	cbz	r0, 800b3a2 <ai_platform_network_process+0x3ba>
 800b34a:	f04f 0800 	mov.w	r8, #0
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	6981      	ldr	r1, [r0, #24]
 800b352:	f8d3 a000 	ldr.w	sl, [r3]
 800b356:	680c      	ldr	r4, [r1, #0]
 800b358:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800b35c:	eb0a 0609 	add.w	r6, sl, r9
 800b360:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 800b364:	00a4      	lsls	r4, r4, #2
 800b366:	eb0c 0302 	add.w	r3, ip, r2
 800b36a:	d42a      	bmi.n	800b3c2 <ai_platform_network_process+0x3da>
 800b36c:	f85a 2009 	ldr.w	r2, [sl, r9]
 800b370:	4293      	cmp	r3, r2
 800b372:	bf24      	itt	cs
 800b374:	68f3      	ldrcs	r3, [r6, #12]
 800b376:	1ad3      	subcs	r3, r2, r3
 800b378:	6073      	str	r3, [r6, #4]
 800b37a:	6981      	ldr	r1, [r0, #24]
 800b37c:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 800b380:	1b12      	subs	r2, r2, r4
 800b382:	4413      	add	r3, r2
 800b384:	608b      	str	r3, [r1, #8]
 800b386:	6983      	ldr	r3, [r0, #24]
 800b388:	6872      	ldr	r2, [r6, #4]
 800b38a:	60da      	str	r2, [r3, #12]
 800b38c:	883b      	ldrh	r3, [r7, #0]
 800b38e:	f108 0801 	add.w	r8, r8, #1
 800b392:	4598      	cmp	r8, r3
 800b394:	d205      	bcs.n	800b3a2 <ai_platform_network_process+0x3ba>
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	b11b      	cbz	r3, 800b3a2 <ai_platform_network_process+0x3ba>
 800b39a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b39e:	2800      	cmp	r0, #0
 800b3a0:	d1d5      	bne.n	800b34e <ai_platform_network_process+0x366>
 800b3a2:	f8bb 0016 	ldrh.w	r0, [fp, #22]
 800b3a6:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800b3aa:	3001      	adds	r0, #1
 800b3ac:	b280      	uxth	r0, r0
 800b3ae:	4283      	cmp	r3, r0
 800b3b0:	f8ab 0016 	strh.w	r0, [fp, #22]
 800b3b4:	d888      	bhi.n	800b2c8 <ai_platform_network_process+0x2e0>
 800b3b6:	4683      	mov	fp, r0
 800b3b8:	e69e      	b.n	800b0f8 <ai_platform_network_process+0x110>
 800b3ba:	68b2      	ldr	r2, [r6, #8]
 800b3bc:	f002 f86e 	bl	800d49c <memcpy>
 800b3c0:	e7a2      	b.n	800b308 <ai_platform_network_process+0x320>
 800b3c2:	6889      	ldr	r1, [r1, #8]
 800b3c4:	4660      	mov	r0, ip
 800b3c6:	f002 f869 	bl	800d49c <memcpy>
 800b3ca:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 800b3ce:	f85a 2009 	ldr.w	r2, [sl, r9]
 800b3d2:	440b      	add	r3, r1
 800b3d4:	4293      	cmp	r3, r2
 800b3d6:	bf24      	itt	cs
 800b3d8:	68f3      	ldrcs	r3, [r6, #12]
 800b3da:	1ad3      	subcs	r3, r2, r3
 800b3dc:	6073      	str	r3, [r6, #4]
 800b3de:	e7d5      	b.n	800b38c <ai_platform_network_process+0x3a4>
 800b3e0:	2700      	movs	r7, #0
 800b3e2:	e76c      	b.n	800b2be <ai_platform_network_process+0x2d6>
 800b3e4:	461d      	mov	r5, r3
 800b3e6:	461f      	mov	r7, r3
 800b3e8:	e769      	b.n	800b2be <ai_platform_network_process+0x2d6>
 800b3ea:	f104 0010 	add.w	r0, r4, #16
 800b3ee:	2218      	movs	r2, #24
 800b3f0:	2113      	movs	r1, #19
 800b3f2:	f000 f80b 	bl	800b40c <core_set_error>
 800b3f6:	f04f 0b00 	mov.w	fp, #0
 800b3fa:	e67d      	b.n	800b0f8 <ai_platform_network_process+0x110>

0800b3fc <core_init>:
 800b3fc:	2001      	movs	r0, #1
 800b3fe:	4770      	bx	lr

0800b400 <core_get_error>:
 800b400:	4603      	mov	r3, r0
 800b402:	2200      	movs	r2, #0
 800b404:	6800      	ldr	r0, [r0, #0]
 800b406:	601a      	str	r2, [r3, #0]
 800b408:	4770      	bx	lr
 800b40a:	bf00      	nop

0800b40c <core_set_error>:
 800b40c:	7803      	ldrb	r3, [r0, #0]
 800b40e:	b933      	cbnz	r3, 800b41e <core_set_error+0x12>
 800b410:	7001      	strb	r1, [r0, #0]
 800b412:	6803      	ldr	r3, [r0, #0]
 800b414:	f362 231f 	bfi	r3, r2, #8, #24
 800b418:	6003      	str	r3, [r0, #0]
 800b41a:	2001      	movs	r0, #1
 800b41c:	4770      	bx	lr
 800b41e:	2000      	movs	r0, #0
 800b420:	4770      	bx	lr
 800b422:	bf00      	nop

0800b424 <func_dummy>:
 800b424:	4770      	bx	lr
 800b426:	bf00      	nop

0800b428 <ai_dict8_dot_array_f32>:
 800b428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b42c:	f8dd c020 	ldr.w	ip, [sp, #32]
 800b430:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 800b434:	f000 80c0 	beq.w	800b5b8 <ai_dict8_dot_array_f32+0x190>
 800b438:	f101 0408 	add.w	r4, r1, #8
 800b43c:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 800b440:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800b5c0 <ai_dict8_dot_array_f32+0x198>
 800b444:	eb04 0e09 	add.w	lr, r4, r9
 800b448:	f103 0520 	add.w	r5, r3, #32
 800b44c:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 800b450:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 800b454:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 800b458:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 800b45c:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 800b460:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 800b464:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 800b468:	ed55 3a04 	vldr	s7, [r5, #-16]
 800b46c:	ed55 4a03 	vldr	s9, [r5, #-12]
 800b470:	ed55 5a02 	vldr	s11, [r5, #-8]
 800b474:	ed55 6a01 	vldr	s13, [r5, #-4]
 800b478:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b47c:	edd6 7a00 	vldr	s15, [r6]
 800b480:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 800b484:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800b488:	ee67 7a83 	vmul.f32	s15, s15, s6
 800b48c:	ed9a 3a00 	vldr	s6, [sl]
 800b490:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 800b494:	eee3 7a05 	vfma.f32	s15, s6, s10
 800b498:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800b49c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b4a0:	ed97 3a00 	vldr	s6, [r7]
 800b4a4:	ed96 5a00 	vldr	s10, [r6]
 800b4a8:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 800b4ac:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 800b4b0:	eee3 7a04 	vfma.f32	s15, s6, s8
 800b4b4:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800b4b8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b4bc:	ed9a 3a00 	vldr	s6, [sl]
 800b4c0:	ed96 4a00 	vldr	s8, [r6]
 800b4c4:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 800b4c8:	eee5 7a06 	vfma.f32	s15, s10, s12
 800b4cc:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800b4d0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b4d4:	ed97 5a00 	vldr	s10, [r7]
 800b4d8:	ed96 6a00 	vldr	s12, [r6]
 800b4dc:	eee3 7a23 	vfma.f32	s15, s6, s7
 800b4e0:	3408      	adds	r4, #8
 800b4e2:	45a6      	cmp	lr, r4
 800b4e4:	f105 0520 	add.w	r5, r5, #32
 800b4e8:	eee4 7a24 	vfma.f32	s15, s8, s9
 800b4ec:	eee5 7a25 	vfma.f32	s15, s10, s11
 800b4f0:	eee6 7a26 	vfma.f32	s15, s12, s13
 800b4f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b4f8:	d1a8      	bne.n	800b44c <ai_dict8_dot_array_f32+0x24>
 800b4fa:	4449      	add	r1, r9
 800b4fc:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 800b500:	f01c 0c07 	ands.w	ip, ip, #7
 800b504:	d050      	beq.n	800b5a8 <ai_dict8_dot_array_f32+0x180>
 800b506:	780c      	ldrb	r4, [r1, #0]
 800b508:	edd3 6a00 	vldr	s13, [r3]
 800b50c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800b510:	edd4 7a00 	vldr	s15, [r4]
 800b514:	f1bc 0f01 	cmp.w	ip, #1
 800b518:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b51c:	d044      	beq.n	800b5a8 <ai_dict8_dot_array_f32+0x180>
 800b51e:	784c      	ldrb	r4, [r1, #1]
 800b520:	edd3 6a01 	vldr	s13, [r3, #4]
 800b524:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800b528:	edd4 7a00 	vldr	s15, [r4]
 800b52c:	f1bc 0f02 	cmp.w	ip, #2
 800b530:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b534:	d038      	beq.n	800b5a8 <ai_dict8_dot_array_f32+0x180>
 800b536:	788c      	ldrb	r4, [r1, #2]
 800b538:	edd3 6a02 	vldr	s13, [r3, #8]
 800b53c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800b540:	edd4 7a00 	vldr	s15, [r4]
 800b544:	f1bc 0f03 	cmp.w	ip, #3
 800b548:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b54c:	d02c      	beq.n	800b5a8 <ai_dict8_dot_array_f32+0x180>
 800b54e:	78cc      	ldrb	r4, [r1, #3]
 800b550:	edd3 6a03 	vldr	s13, [r3, #12]
 800b554:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800b558:	edd4 7a00 	vldr	s15, [r4]
 800b55c:	f1bc 0f04 	cmp.w	ip, #4
 800b560:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b564:	d020      	beq.n	800b5a8 <ai_dict8_dot_array_f32+0x180>
 800b566:	790c      	ldrb	r4, [r1, #4]
 800b568:	edd3 6a04 	vldr	s13, [r3, #16]
 800b56c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800b570:	edd4 7a00 	vldr	s15, [r4]
 800b574:	f1bc 0f05 	cmp.w	ip, #5
 800b578:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b57c:	d014      	beq.n	800b5a8 <ai_dict8_dot_array_f32+0x180>
 800b57e:	794c      	ldrb	r4, [r1, #5]
 800b580:	edd3 6a05 	vldr	s13, [r3, #20]
 800b584:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800b588:	edd4 7a00 	vldr	s15, [r4]
 800b58c:	f1bc 0f06 	cmp.w	ip, #6
 800b590:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b594:	d008      	beq.n	800b5a8 <ai_dict8_dot_array_f32+0x180>
 800b596:	7989      	ldrb	r1, [r1, #6]
 800b598:	edd3 7a06 	vldr	s15, [r3, #24]
 800b59c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800b5a0:	edd2 6a00 	vldr	s13, [r2]
 800b5a4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b5a8:	edd0 7a00 	vldr	s15, [r0]
 800b5ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b5b0:	ed80 7a00 	vstr	s14, [r0]
 800b5b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5b8:	ed9f 7a01 	vldr	s14, [pc, #4]	; 800b5c0 <ai_dict8_dot_array_f32+0x198>
 800b5bc:	e7a0      	b.n	800b500 <ai_dict8_dot_array_f32+0xd8>
 800b5be:	bf00      	nop
 800b5c0:	00000000 	.word	0x00000000

0800b5c4 <ai_dict4_dot_array_f32>:
 800b5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5c8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b5ca:	f027 0c01 	bic.w	ip, r7, #1
 800b5ce:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 800b5d2:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800b5d6:	f000 80ae 	beq.w	800b736 <ai_dict4_dot_array_f32+0x172>
 800b5da:	1d0d      	adds	r5, r1, #4
 800b5dc:	ea4f 0988 	mov.w	r9, r8, lsl #2
 800b5e0:	ed9f 7a56 	vldr	s14, [pc, #344]	; 800b73c <ai_dict4_dot_array_f32+0x178>
 800b5e4:	eb05 0e09 	add.w	lr, r5, r9
 800b5e8:	f103 0420 	add.w	r4, r3, #32
 800b5ec:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 800b5f0:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 800b5f4:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 800b5f8:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 800b5fc:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 800b600:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 800b604:	ed14 5a04 	vldr	s10, [r4, #-16]
 800b608:	ed54 5a03 	vldr	s11, [r4, #-12]
 800b60c:	ed14 6a02 	vldr	s12, [r4, #-8]
 800b610:	ed54 6a01 	vldr	s13, [r4, #-4]
 800b614:	f006 0a0f 	and.w	sl, r6, #15
 800b618:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800b61c:	edda 7a00 	vldr	s15, [sl]
 800b620:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 800b624:	0936      	lsrs	r6, r6, #4
 800b626:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b62a:	ee67 7a83 	vmul.f32	s15, s15, s6
 800b62e:	ed96 3a00 	vldr	s6, [r6]
 800b632:	ea4f 161b 	mov.w	r6, fp, lsr #4
 800b636:	eee3 7a23 	vfma.f32	s15, s6, s7
 800b63a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b63e:	f00b 0b0f 	and.w	fp, fp, #15
 800b642:	edd6 3a00 	vldr	s7, [r6]
 800b646:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 800b64a:	eee3 7a84 	vfma.f32	s15, s7, s8
 800b64e:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 800b652:	3504      	adds	r5, #4
 800b654:	ed9b 4a00 	vldr	s8, [fp]
 800b658:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 800b65c:	eee4 7a24 	vfma.f32	s15, s8, s9
 800b660:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 800b664:	f00a 0a0f 	and.w	sl, sl, #15
 800b668:	eddb 4a00 	vldr	s9, [fp]
 800b66c:	eee4 7a85 	vfma.f32	s15, s9, s10
 800b670:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800b674:	45ae      	cmp	lr, r5
 800b676:	ed9a 5a00 	vldr	s10, [sl]
 800b67a:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 800b67e:	eee5 7a25 	vfma.f32	s15, s10, s11
 800b682:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800b686:	f006 060f 	and.w	r6, r6, #15
 800b68a:	edda 5a00 	vldr	s11, [sl]
 800b68e:	eee5 7a86 	vfma.f32	s15, s11, s12
 800b692:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b696:	f104 0420 	add.w	r4, r4, #32
 800b69a:	ed96 6a00 	vldr	s12, [r6]
 800b69e:	eee6 7a26 	vfma.f32	s15, s12, s13
 800b6a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b6a6:	d1a1      	bne.n	800b5ec <ai_dict4_dot_array_f32+0x28>
 800b6a8:	4449      	add	r1, r9
 800b6aa:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 800b6ae:	459c      	cmp	ip, r3
 800b6b0:	d92d      	bls.n	800b70e <ai_dict4_dot_array_f32+0x14a>
 800b6b2:	f10c 0c07 	add.w	ip, ip, #7
 800b6b6:	f103 0508 	add.w	r5, r3, #8
 800b6ba:	ebac 0c05 	sub.w	ip, ip, r5
 800b6be:	f02c 0407 	bic.w	r4, ip, #7
 800b6c2:	f103 0810 	add.w	r8, r3, #16
 800b6c6:	44a0      	add	r8, r4
 800b6c8:	f101 3eff 	add.w	lr, r1, #4294967295
 800b6cc:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 800b6d0:	ed15 6a01 	vldr	s12, [r5, #-4]
 800b6d4:	ed55 6a02 	vldr	s13, [r5, #-8]
 800b6d8:	f004 060f 	and.w	r6, r4, #15
 800b6dc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b6e0:	0924      	lsrs	r4, r4, #4
 800b6e2:	edd6 7a00 	vldr	s15, [r6]
 800b6e6:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800b6ea:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b6ee:	ed94 6a00 	vldr	s12, [r4]
 800b6f2:	eee6 7a26 	vfma.f32	s15, s12, s13
 800b6f6:	3508      	adds	r5, #8
 800b6f8:	45a8      	cmp	r8, r5
 800b6fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b6fe:	d1e5      	bne.n	800b6cc <ai_dict4_dot_array_f32+0x108>
 800b700:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800b704:	f10c 0c01 	add.w	ip, ip, #1
 800b708:	4461      	add	r1, ip
 800b70a:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 800b70e:	07fc      	lsls	r4, r7, #31
 800b710:	d509      	bpl.n	800b726 <ai_dict4_dot_array_f32+0x162>
 800b712:	7809      	ldrb	r1, [r1, #0]
 800b714:	edd3 7a00 	vldr	s15, [r3]
 800b718:	090b      	lsrs	r3, r1, #4
 800b71a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800b71e:	edd2 6a00 	vldr	s13, [r2]
 800b722:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b726:	edd0 7a00 	vldr	s15, [r0]
 800b72a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b72e:	ed80 7a00 	vstr	s14, [r0]
 800b732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b736:	ed9f 7a01 	vldr	s14, [pc, #4]	; 800b73c <ai_dict4_dot_array_f32+0x178>
 800b73a:	e7b8      	b.n	800b6ae <ai_dict4_dot_array_f32+0xea>
 800b73c:	00000000 	.word	0x00000000

0800b740 <ai_dict_decompress_f32>:
 800b740:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b744:	9f08      	ldr	r7, [sp, #32]
 800b746:	2b04      	cmp	r3, #4
 800b748:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800b74c:	d00e      	beq.n	800b76c <ai_dict_decompress_f32+0x2c>
 800b74e:	2b08      	cmp	r3, #8
 800b750:	d10a      	bne.n	800b768 <ai_dict_decompress_f32+0x28>
 800b752:	42b8      	cmp	r0, r7
 800b754:	d208      	bcs.n	800b768 <ai_dict_decompress_f32+0x28>
 800b756:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b75a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	f840 3b04 	str.w	r3, [r0], #4
 800b764:	4287      	cmp	r7, r0
 800b766:	d8f6      	bhi.n	800b756 <ai_dict_decompress_f32+0x16>
 800b768:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b76c:	9b07      	ldr	r3, [sp, #28]
 800b76e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 800b772:	ea4f 09cc 	mov.w	r9, ip, lsl #3
 800b776:	f10c 38ff 	add.w	r8, ip, #4294967295
 800b77a:	f003 0e01 	and.w	lr, r3, #1
 800b77e:	42b8      	cmp	r0, r7
 800b780:	d2f2      	bcs.n	800b768 <ai_dict_decompress_f32+0x28>
 800b782:	f1bc 0f00 	cmp.w	ip, #0
 800b786:	d01a      	beq.n	800b7be <ai_dict_decompress_f32+0x7e>
 800b788:	f100 0508 	add.w	r5, r0, #8
 800b78c:	1e4c      	subs	r4, r1, #1
 800b78e:	eb01 0608 	add.w	r6, r1, r8
 800b792:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800b796:	091b      	lsrs	r3, r3, #4
 800b798:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b79c:	42a6      	cmp	r6, r4
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f845 3c08 	str.w	r3, [r5, #-8]
 800b7a4:	7823      	ldrb	r3, [r4, #0]
 800b7a6:	f003 030f 	and.w	r3, r3, #15
 800b7aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b7ae:	f105 0508 	add.w	r5, r5, #8
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	f845 3c0c 	str.w	r3, [r5, #-12]
 800b7b8:	d1eb      	bne.n	800b792 <ai_dict_decompress_f32+0x52>
 800b7ba:	4461      	add	r1, ip
 800b7bc:	4448      	add	r0, r9
 800b7be:	f1be 0f00 	cmp.w	lr, #0
 800b7c2:	d103      	bne.n	800b7cc <ai_dict_decompress_f32+0x8c>
 800b7c4:	4287      	cmp	r7, r0
 800b7c6:	d8dc      	bhi.n	800b782 <ai_dict_decompress_f32+0x42>
 800b7c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b7cc:	780b      	ldrb	r3, [r1, #0]
 800b7ce:	091b      	lsrs	r3, r3, #4
 800b7d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b7d4:	3101      	adds	r1, #1
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	6003      	str	r3, [r0, #0]
 800b7da:	3004      	adds	r0, #4
 800b7dc:	e7cf      	b.n	800b77e <ai_dict_decompress_f32+0x3e>
 800b7de:	bf00      	nop

0800b7e0 <forward_conv2d_nl_pool>:
 800b7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7e4:	ed2d 8b10 	vpush	{d8-d15}
 800b7e8:	b0e1      	sub	sp, #388	; 0x184
 800b7ea:	6943      	ldr	r3, [r0, #20]
 800b7ec:	af0a      	add	r7, sp, #40	; 0x28
 800b7ee:	881a      	ldrh	r2, [r3, #0]
 800b7f0:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 800b7f4:	2a00      	cmp	r2, #0
 800b7f6:	f001 8106 	beq.w	800ca06 <forward_conv2d_nl_pool+0x1226>
 800b7fa:	685c      	ldr	r4, [r3, #4]
 800b7fc:	6862      	ldr	r2, [r4, #4]
 800b7fe:	2a00      	cmp	r2, #0
 800b800:	f001 80fe 	beq.w	800ca00 <forward_conv2d_nl_pool+0x1220>
 800b804:	f8d2 c000 	ldr.w	ip, [r2]
 800b808:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800b80c:	2a01      	cmp	r2, #1
 800b80e:	f241 80f4 	bls.w	800c9fa <forward_conv2d_nl_pool+0x121a>
 800b812:	6922      	ldr	r2, [r4, #16]
 800b814:	2a00      	cmp	r2, #0
 800b816:	f001 80eb 	beq.w	800c9f0 <forward_conv2d_nl_pool+0x1210>
 800b81a:	f8d2 9000 	ldr.w	r9, [r2]
 800b81e:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800b822:	2a02      	cmp	r2, #2
 800b824:	f001 80e9 	beq.w	800c9fa <forward_conv2d_nl_pool+0x121a>
 800b828:	69e6      	ldr	r6, [r4, #28]
 800b82a:	2e00      	cmp	r6, #0
 800b82c:	f001 80d9 	beq.w	800c9e2 <forward_conv2d_nl_pool+0x1202>
 800b830:	f114 0218 	adds.w	r2, r4, #24
 800b834:	6835      	ldr	r5, [r6, #0]
 800b836:	d004      	beq.n	800b842 <forward_conv2d_nl_pool+0x62>
 800b838:	8b22      	ldrh	r2, [r4, #24]
 800b83a:	2a01      	cmp	r2, #1
 800b83c:	f241 80e6 	bls.w	800ca0c <forward_conv2d_nl_pool+0x122c>
 800b840:	6872      	ldr	r2, [r6, #4]
 800b842:	68b4      	ldr	r4, [r6, #8]
 800b844:	f8dc b018 	ldr.w	fp, [ip, #24]
 800b848:	f8dc 800c 	ldr.w	r8, [ip, #12]
 800b84c:	f8db 1008 	ldr.w	r1, [fp, #8]
 800b850:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800b854:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b858:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 800b85c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
 800b860:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800b864:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 800b868:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800b86c:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 800b870:	f8de 1004 	ldr.w	r1, [lr, #4]
 800b874:	6b86      	ldr	r6, [r0, #56]	; 0x38
 800b876:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 800b87a:	f8de 100c 	ldr.w	r1, [lr, #12]
 800b87e:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 800b882:	f8de 1008 	ldr.w	r1, [lr, #8]
 800b886:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800b88a:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 800b88e:	6831      	ldr	r1, [r6, #0]
 800b890:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
 800b894:	6871      	ldr	r1, [r6, #4]
 800b896:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 800b89a:	f8da 1004 	ldr.w	r1, [sl, #4]
 800b89e:	f8c7 1154 	str.w	r1, [r7, #340]	; 0x154
 800b8a2:	f8da 1008 	ldr.w	r1, [sl, #8]
 800b8a6:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 800b8aa:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800b8ac:	f8d5 c018 	ldr.w	ip, [r5, #24]
 800b8b0:	6809      	ldr	r1, [r1, #0]
 800b8b2:	68b6      	ldr	r6, [r6, #8]
 800b8b4:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 800b8b8:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800b8ba:	6849      	ldr	r1, [r1, #4]
 800b8bc:	6479      	str	r1, [r7, #68]	; 0x44
 800b8be:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800b8c2:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
 800b8c6:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800b8c8:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 800b8cc:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800b8ce:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 800b8d2:	6981      	ldr	r1, [r0, #24]
 800b8d4:	f8c7 1124 	str.w	r1, [r7, #292]	; 0x124
 800b8d8:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800b8da:	64f9      	str	r1, [r7, #76]	; 0x4c
 800b8dc:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800b8de:	64b9      	str	r1, [r7, #72]	; 0x48
 800b8e0:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800b8e2:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 800b8e6:	e9d0 ab0b 	ldrd	sl, fp, [r0, #44]	; 0x2c
 800b8ea:	2a00      	cmp	r2, #0
 800b8ec:	f001 806c 	beq.w	800c9c8 <forward_conv2d_nl_pool+0x11e8>
 800b8f0:	6992      	ldr	r2, [r2, #24]
 800b8f2:	6892      	ldr	r2, [r2, #8]
 800b8f4:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800b8f8:	4680      	mov	r8, r0
 800b8fa:	69c2      	ldr	r2, [r0, #28]
 800b8fc:	2c00      	cmp	r4, #0
 800b8fe:	f001 8058 	beq.w	800c9b2 <forward_conv2d_nl_pool+0x11d2>
 800b902:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 800b906:	6892      	ldr	r2, [r2, #8]
 800b908:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b90c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b910:	689b      	ldr	r3, [r3, #8]
 800b912:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b916:	f001 fd6d 	bl	800d3f4 <ai_array_get_byte_size>
 800b91a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800b91e:	f8d5 c018 	ldr.w	ip, [r5, #24]
 800b922:	881a      	ldrh	r2, [r3, #0]
 800b924:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
 800b928:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 800b92c:	f8b7 0144 	ldrh.w	r0, [r7, #324]	; 0x144
 800b930:	f8d8 1054 	ldr.w	r1, [r8, #84]	; 0x54
 800b934:	6439      	str	r1, [r7, #64]	; 0x40
 800b936:	fa10 f586 	uxtah	r5, r0, r6
 800b93a:	f8dc 1000 	ldr.w	r1, [ip]
 800b93e:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
 800b942:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800b946:	f8d8 2020 	ldr.w	r2, [r8, #32]
 800b94a:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b94e:	f3c1 16c6 	ubfx	r6, r1, #7, #7
 800b952:	1e44      	subs	r4, r0, #1
 800b954:	f3c1 5041 	ubfx	r0, r1, #21, #2
 800b958:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b95c:	fa1f f28b 	uxth.w	r2, fp
 800b960:	eb05 0e01 	add.w	lr, r5, r1
 800b964:	f8d7 5120 	ldr.w	r5, [r7, #288]	; 0x120
 800b968:	f8dc 1000 	ldr.w	r1, [ip]
 800b96c:	3a01      	subs	r2, #1
 800b96e:	fb04 5402 	mla	r4, r4, r2, r5
 800b972:	fa1f f28a 	uxth.w	r2, sl
 800b976:	f8c7 408c 	str.w	r4, [r7, #140]	; 0x8c
 800b97a:	1e54      	subs	r4, r2, #1
 800b97c:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 800b980:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 800b984:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800b988:	f8d7 5154 	ldr.w	r5, [r7, #340]	; 0x154
 800b98c:	fa46 f000 	asr.w	r0, r6, r0
 800b990:	f3c1 4643 	ubfx	r6, r1, #17, #4
 800b994:	f8b7 114c 	ldrh.w	r1, [r7, #332]	; 0x14c
 800b998:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 800b99c:	ebae 0202 	sub.w	r2, lr, r2
 800b9a0:	fbb2 f2f1 	udiv	r2, r2, r1
 800b9a4:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 800b9a8:	3d01      	subs	r5, #1
 800b9aa:	fb05 1104 	mla	r1, r5, r4, r1
 800b9ae:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800b9b2:	1c51      	adds	r1, r2, #1
 800b9b4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800b9b8:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 800b9bc:	497c      	ldr	r1, [pc, #496]	; (800bbb0 <forward_conv2d_nl_pool+0x3d0>)
 800b9be:	4614      	mov	r4, r2
 800b9c0:	2a00      	cmp	r2, #0
 800b9c2:	bf08      	it	eq
 800b9c4:	460c      	moveq	r4, r1
 800b9c6:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 800b9ca:	f8c7 40d4 	str.w	r4, [r7, #212]	; 0xd4
 800b9ce:	2e04      	cmp	r6, #4
 800b9d0:	b280      	uxth	r0, r0
 800b9d2:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 800b9d6:	f000 8382 	beq.w	800c0de <forward_conv2d_nl_pool+0x8fe>
 800b9da:	2e08      	cmp	r6, #8
 800b9dc:	f000 837f 	beq.w	800c0de <forward_conv2d_nl_pool+0x8fe>
 800b9e0:	f8d9 2018 	ldr.w	r2, [r9, #24]
 800b9e4:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800b9e8:	f9b7 2134 	ldrsh.w	r2, [r7, #308]	; 0x134
 800b9ec:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 800b9f0:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800b9f4:	2a03      	cmp	r2, #3
 800b9f6:	f241 8000 	bls.w	800c9fa <forward_conv2d_nl_pool+0x121a>
 800b9fa:	685b      	ldr	r3, [r3, #4]
 800b9fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	f000 836b 	beq.w	800c0da <forward_conv2d_nl_pool+0x8fa>
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800ba0a:	68da      	ldr	r2, [r3, #12]
 800ba0c:	699b      	ldr	r3, [r3, #24]
 800ba0e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800ba12:	6899      	ldr	r1, [r3, #8]
 800ba14:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 800ba18:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 800ba1c:	6896      	ldr	r6, [r2, #8]
 800ba1e:	f8c7 6144 	str.w	r6, [r7, #324]	; 0x144
 800ba22:	4249      	negs	r1, r1
 800ba24:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 800ba28:	2800      	cmp	r0, #0
 800ba2a:	f000 82e1 	beq.w	800bff0 <forward_conv2d_nl_pool+0x810>
 800ba2e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800ba32:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800ba36:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800ba3a:	f8d7 50c4 	ldr.w	r5, [r7, #196]	; 0xc4
 800ba3e:	ed9f 8a5d 	vldr	s16, [pc, #372]	; 800bbb4 <forward_conv2d_nl_pool+0x3d4>
 800ba42:	fb03 f200 	mul.w	r2, r3, r0
 800ba46:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800ba4a:	008c      	lsls	r4, r1, #2
 800ba4c:	fb04 f000 	mul.w	r0, r4, r0
 800ba50:	f8c7 40e8 	str.w	r4, [r7, #232]	; 0xe8
 800ba54:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 800ba58:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 800ba5c:	fb01 fc02 	mul.w	ip, r1, r2
 800ba60:	00a2      	lsls	r2, r4, #2
 800ba62:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 800ba66:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ba6a:	f8c7 c080 	str.w	ip, [r7, #128]	; 0x80
 800ba6e:	00ab      	lsls	r3, r5, #2
 800ba70:	4694      	mov	ip, r2
 800ba72:	fb0c f204 	mul.w	r2, ip, r4
 800ba76:	fb04 f303 	mul.w	r3, r4, r3
 800ba7a:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 800ba7e:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 800ba82:	00a4      	lsls	r4, r4, #2
 800ba84:	f8c7 40ac 	str.w	r4, [r7, #172]	; 0xac
 800ba88:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 800ba8c:	f04f 0c00 	mov.w	ip, #0
 800ba90:	fa0f f58a 	sxth.w	r5, sl
 800ba94:	f8c7 c0f0 	str.w	ip, [r7, #240]	; 0xf0
 800ba98:	46a4      	mov	ip, r4
 800ba9a:	f8d7 4120 	ldr.w	r4, [r7, #288]	; 0x120
 800ba9e:	f8c7 50f4 	str.w	r5, [r7, #244]	; 0xf4
 800baa2:	fa0f f58b 	sxth.w	r5, fp
 800baa6:	f8c7 5104 	str.w	r5, [r7, #260]	; 0x104
 800baaa:	fb0c fc04 	mul.w	ip, ip, r4
 800baae:	f8c7 c038 	str.w	ip, [r7, #56]	; 0x38
 800bab2:	fb06 fc03 	mul.w	ip, r6, r3
 800bab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baba:	f8c7 c054 	str.w	ip, [r7, #84]	; 0x54
 800babe:	4240      	negs	r0, r0
 800bac0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800bac4:	469c      	mov	ip, r3
 800bac6:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 800baca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bace:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 800bad2:	f8b7 5130 	ldrh.w	r5, [r7, #304]	; 0x130
 800bad6:	f8c7 50f8 	str.w	r5, [r7, #248]	; 0xf8
 800bada:	fb00 f303 	mul.w	r3, r0, r3
 800bade:	460d      	mov	r5, r1
 800bae0:	fb0c fc04 	mul.w	ip, ip, r4
 800bae4:	62bb      	str	r3, [r7, #40]	; 0x28
 800bae6:	fb04 f305 	mul.w	r3, r4, r5
 800baea:	f8c7 c07c 	str.w	ip, [r7, #124]	; 0x7c
 800baee:	f8d7 50f8 	ldr.w	r5, [r7, #248]	; 0xf8
 800baf2:	627b      	str	r3, [r7, #36]	; 0x24
 800baf4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800baf8:	46a6      	mov	lr, r4
 800bafa:	f8d7 40fc 	ldr.w	r4, [r7, #252]	; 0xfc
 800bafe:	fb05 f503 	mul.w	r5, r5, r3
 800bb02:	667d      	str	r5, [r7, #100]	; 0x64
 800bb04:	4625      	mov	r5, r4
 800bb06:	fb05 f503 	mul.w	r5, r5, r3
 800bb0a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800bb0e:	66bd      	str	r5, [r7, #104]	; 0x68
 800bb10:	fb00 f101 	mul.w	r1, r0, r1
 800bb14:	fb03 f306 	mul.w	r3, r3, r6
 800bb18:	617b      	str	r3, [r7, #20]
 800bb1a:	008b      	lsls	r3, r1, #2
 800bb1c:	637b      	str	r3, [r7, #52]	; 0x34
 800bb1e:	0093      	lsls	r3, r2, #2
 800bb20:	653b      	str	r3, [r7, #80]	; 0x50
 800bb22:	0083      	lsls	r3, r0, #2
 800bb24:	623b      	str	r3, [r7, #32]
 800bb26:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bb2a:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800bb2e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800bb32:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800bb36:	2400      	movs	r4, #0
 800bb38:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	fb03 f301 	mul.w	r3, r3, r1
 800bb40:	f8c7 40d0 	str.w	r4, [r7, #208]	; 0xd0
 800bb44:	f8d7 40cc 	ldr.w	r4, [r7, #204]	; 0xcc
 800bb48:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800bb4c:	00d1      	lsls	r1, r2, #3
 800bb4e:	0113      	lsls	r3, r2, #4
 800bb50:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 800bb54:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800bb58:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800bb5c:	fb00 f004 	mul.w	r0, r0, r4
 800bb60:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800bb64:	66f8      	str	r0, [r7, #108]	; 0x6c
 800bb66:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 800bb6a:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 800bb6e:	469a      	mov	sl, r3
 800bb70:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	f340 81d5 	ble.w	800bf24 <forward_conv2d_nl_pool+0x744>
 800bb7a:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800bb7e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800bb82:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800bb86:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800bb8a:	2900      	cmp	r1, #0
 800bb8c:	441a      	add	r2, r3
 800bb8e:	bfb4      	ite	lt
 800bb90:	2100      	movlt	r1, #0
 800bb92:	2300      	movge	r3, #0
 800bb94:	4282      	cmp	r2, r0
 800bb96:	bf28      	it	cs
 800bb98:	4602      	movcs	r2, r0
 800bb9a:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800bb9e:	2801      	cmp	r0, #1
 800bba0:	f000 840c 	beq.w	800c3bc <forward_conv2d_nl_pool+0xbdc>
 800bba4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800bba8:	4281      	cmp	r1, r0
 800bbaa:	f000 82c6 	beq.w	800c13a <forward_conv2d_nl_pool+0x95a>
 800bbae:	e003      	b.n	800bbb8 <forward_conv2d_nl_pool+0x3d8>
 800bbb0:	0800b425 	.word	0x0800b425
 800bbb4:	00000000 	.word	0x00000000
 800bbb8:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800bbbc:	2900      	cmp	r1, #0
 800bbbe:	f000 81a4 	beq.w	800bf0a <forward_conv2d_nl_pool+0x72a>
 800bbc2:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 800bbc6:	fb93 f1f0 	sdiv	r1, r3, r0
 800bbca:	fb00 3111 	mls	r1, r0, r1, r3
 800bbce:	1a41      	subs	r1, r0, r1
 800bbd0:	1ad2      	subs	r2, r2, r3
 800bbd2:	fb91 f5f0 	sdiv	r5, r1, r0
 800bbd6:	fb00 1515 	mls	r5, r0, r5, r1
 800bbda:	1b52      	subs	r2, r2, r5
 800bbdc:	4601      	mov	r1, r0
 800bbde:	4402      	add	r2, r0
 800bbe0:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 800bbe4:	f8d7 6120 	ldr.w	r6, [r7, #288]	; 0x120
 800bbe8:	f8c7 a010 	str.w	sl, [r7, #16]
 800bbec:	4604      	mov	r4, r0
 800bbee:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800bbf2:	fbb4 f4f0 	udiv	r4, r4, r0
 800bbf6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bbf8:	f8c7 b018 	str.w	fp, [r7, #24]
 800bbfc:	3a01      	subs	r2, #1
 800bbfe:	fb92 f8f1 	sdiv	r8, r2, r1
 800bc02:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800bc06:	eba0 0c04 	sub.w	ip, r0, r4
 800bc0a:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800bc0e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800bc12:	4614      	mov	r4, r2
 800bc14:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800bc18:	fbb4 f2f2 	udiv	r2, r4, r2
 800bc1c:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 800bc20:	663a      	str	r2, [r7, #96]	; 0x60
 800bc22:	441d      	add	r5, r3
 800bc24:	fb0e f000 	mul.w	r0, lr, r0
 800bc28:	440b      	add	r3, r1
 800bc2a:	eba6 0608 	sub.w	r6, r6, r8
 800bc2e:	fb04 f505 	mul.w	r5, r4, r5
 800bc32:	3b01      	subs	r3, #1
 800bc34:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 800bc38:	fb93 f3f4 	sdiv	r3, r3, r4
 800bc3c:	fb00 f406 	mul.w	r4, r0, r6
 800bc40:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800bc44:	677d      	str	r5, [r7, #116]	; 0x74
 800bc46:	0091      	lsls	r1, r2, #2
 800bc48:	fb00 f003 	mul.w	r0, r0, r3
 800bc4c:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 800bc50:	65f8      	str	r0, [r7, #92]	; 0x5c
 800bc52:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bc56:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 800bc5a:	f8c7 40e4 	str.w	r4, [r7, #228]	; 0xe4
 800bc5e:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 800bc62:	1ac3      	subs	r3, r0, r3
 800bc64:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 800bc68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bc6c:	008b      	lsls	r3, r1, #2
 800bc6e:	633b      	str	r3, [r7, #48]	; 0x30
 800bc70:	00d3      	lsls	r3, r2, #3
 800bc72:	61fb      	str	r3, [r7, #28]
 800bc74:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800bc78:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bc7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bc80:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bc84:	2300      	movs	r3, #0
 800bc86:	ea4f 098c 	mov.w	r9, ip, lsl #2
 800bc8a:	67bb      	str	r3, [r7, #120]	; 0x78
 800bc8c:	46c2      	mov	sl, r8
 800bc8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bc92:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800bc96:	eb03 0c02 	add.w	ip, r3, r2
 800bc9a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	f2c0 811f 	blt.w	800bee2 <forward_conv2d_nl_pool+0x702>
 800bca4:	2000      	movs	r0, #0
 800bca6:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 800bca8:	f8d7 80f4 	ldr.w	r8, [r7, #244]	; 0xf4
 800bcac:	4605      	mov	r5, r0
 800bcae:	4606      	mov	r6, r0
 800bcb0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bcb4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800bcb8:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 800bcbc:	4413      	add	r3, r2
 800bcbe:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800bcc2:	440a      	add	r2, r1
 800bcc4:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800bcc8:	428b      	cmp	r3, r1
 800bcca:	bf94      	ite	ls
 800bccc:	ebc6 0303 	rsbls	r3, r6, r3
 800bcd0:	ebc6 0301 	rsbhi	r3, r6, r1
 800bcd4:	4415      	add	r5, r2
 800bcd6:	1a1b      	subs	r3, r3, r0
 800bcd8:	00a4      	lsls	r4, r4, #2
 800bcda:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 800bcde:	f8d7 60c0 	ldr.w	r6, [r7, #192]	; 0xc0
 800bce2:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800bce6:	6dfd      	ldr	r5, [r7, #92]	; 0x5c
 800bce8:	4602      	mov	r2, r0
 800bcea:	2800      	cmp	r0, #0
 800bcec:	bf08      	it	eq
 800bcee:	4662      	moveq	r2, ip
 800bcf0:	f108 31ff 	add.w	r1, r8, #4294967295
 800bcf4:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bcf8:	fb91 f1f0 	sdiv	r1, r1, r0
 800bcfc:	4429      	add	r1, r5
 800bcfe:	f8d7 5128 	ldr.w	r5, [r7, #296]	; 0x128
 800bd02:	fb0e 5501 	mla	r5, lr, r1, r5
 800bd06:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800bd0a:	4403      	add	r3, r0
 800bd0c:	fb01 6104 	mla	r1, r1, r4, r6
 800bd10:	3b01      	subs	r3, #1
 800bd12:	fb93 f6f0 	sdiv	r6, r3, r0
 800bd16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd18:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 800bd1c:	fb06 3110 	mls	r1, r6, r0, r3
 800bd20:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800bd24:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800bd28:	4562      	cmp	r2, ip
 800bd2a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800bd2e:	bf08      	it	eq
 800bd30:	eeb0 6a48 	vmoveq.f32	s12, s16
 800bd34:	1b9b      	subs	r3, r3, r6
 800bd36:	2800      	cmp	r0, #0
 800bd38:	d070      	beq.n	800be1c <forward_conv2d_nl_pool+0x63c>
 800bd3a:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 800bd3e:	fb0e f803 	mul.w	r8, lr, r3
 800bd42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bd44:	fb01 fb00 	mul.w	fp, r1, r0
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d067      	beq.n	800be1c <forward_conv2d_nl_pool+0x63c>
 800bd4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bd50:	18d3      	adds	r3, r2, r3
 800bd52:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800bd56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bd5a:	1a9b      	subs	r3, r3, r2
 800bd5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bd5e:	2300      	movs	r3, #0
 800bd60:	673b      	str	r3, [r7, #112]	; 0x70
 800bd62:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800bd66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd68:	4413      	add	r3, r2
 800bd6a:	65bb      	str	r3, [r7, #88]	; 0x58
 800bd6c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800bd70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd72:	4413      	add	r3, r2
 800bd74:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800bd78:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800bd7c:	ecf3 7a01 	vldmia	r3!, {s15}
 800bd80:	f1ba 0f00 	cmp.w	sl, #0
 800bd84:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800bd88:	ee67 7a86 	vmul.f32	s15, s15, s12
 800bd8c:	f340 80a7 	ble.w	800bede <forward_conv2d_nl_pool+0x6fe>
 800bd90:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800bd94:	f04f 0c00 	mov.w	ip, #0
 800bd98:	2e00      	cmp	r6, #0
 800bd9a:	dd19      	ble.n	800bdd0 <forward_conv2d_nl_pool+0x5f0>
 800bd9c:	2100      	movs	r1, #0
 800bd9e:	eb00 040e 	add.w	r4, r0, lr
 800bda2:	4284      	cmp	r4, r0
 800bda4:	d910      	bls.n	800bdc8 <forward_conv2d_nl_pool+0x5e8>
 800bda6:	4603      	mov	r3, r0
 800bda8:	462a      	mov	r2, r5
 800bdaa:	ecb3 7a01 	vldmia	r3!, {s14}
 800bdae:	ecf2 6a01 	vldmia	r2!, {s13}
 800bdb2:	429c      	cmp	r4, r3
 800bdb4:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bdb8:	d8f7      	bhi.n	800bdaa <forward_conv2d_nl_pool+0x5ca>
 800bdba:	43c3      	mvns	r3, r0
 800bdbc:	441c      	add	r4, r3
 800bdbe:	f024 0403 	bic.w	r4, r4, #3
 800bdc2:	3404      	adds	r4, #4
 800bdc4:	4425      	add	r5, r4
 800bdc6:	4420      	add	r0, r4
 800bdc8:	3101      	adds	r1, #1
 800bdca:	428e      	cmp	r6, r1
 800bdcc:	4448      	add	r0, r9
 800bdce:	d1e6      	bne.n	800bd9e <forward_conv2d_nl_pool+0x5be>
 800bdd0:	f10c 0c01 	add.w	ip, ip, #1
 800bdd4:	45e2      	cmp	sl, ip
 800bdd6:	4458      	add	r0, fp
 800bdd8:	4445      	add	r5, r8
 800bdda:	d1dd      	bne.n	800bd98 <forward_conv2d_nl_pool+0x5b8>
 800bddc:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800bde0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bde4:	441d      	add	r5, r3
 800bde6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800bdea:	ece3 7a01 	vstmia	r3!, {s15}
 800bdee:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800bdf2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bdf6:	4293      	cmp	r3, r2
 800bdf8:	d1be      	bne.n	800bd78 <forward_conv2d_nl_pool+0x598>
 800bdfa:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800bdfe:	69f9      	ldr	r1, [r7, #28]
 800be00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800be02:	4472      	add	r2, lr
 800be04:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800be08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800be0a:	1a52      	subs	r2, r2, r1
 800be0c:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 800be10:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800be14:	3301      	adds	r3, #1
 800be16:	429a      	cmp	r2, r3
 800be18:	673b      	str	r3, [r7, #112]	; 0x70
 800be1a:	d1a2      	bne.n	800bd62 <forward_conv2d_nl_pool+0x582>
 800be1c:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800be20:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800be24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be26:	4608      	mov	r0, r1
 800be28:	4410      	add	r0, r2
 800be2a:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800be2e:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
 800be32:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800be36:	4401      	add	r1, r0
 800be38:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800be3c:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800be40:	1a8a      	subs	r2, r1, r2
 800be42:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800be46:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800be4a:	3301      	adds	r3, #1
 800be4c:	429a      	cmp	r2, r3
 800be4e:	67bb      	str	r3, [r7, #120]	; 0x78
 800be50:	f47f af1d 	bne.w	800bc8e <forward_conv2d_nl_pool+0x4ae>
 800be54:	f8d7 b018 	ldr.w	fp, [r7, #24]
 800be58:	f8d7 a010 	ldr.w	sl, [r7, #16]
 800be5c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800be60:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800be64:	699b      	ldr	r3, [r3, #24]
 800be66:	2a00      	cmp	r2, #0
 800be68:	f000 8165 	beq.w	800c136 <forward_conv2d_nl_pool+0x956>
 800be6c:	2400      	movs	r4, #0
 800be6e:	f8d7 5098 	ldr.w	r5, [r7, #152]	; 0x98
 800be72:	f8d7 614c 	ldr.w	r6, [r7, #332]	; 0x14c
 800be76:	f8d7 8134 	ldr.w	r8, [r7, #308]	; 0x134
 800be7a:	f8d7 90e0 	ldr.w	r9, [r7, #224]	; 0xe0
 800be7e:	f8c7 4150 	str.w	r4, [r7, #336]	; 0x150
 800be82:	609e      	str	r6, [r3, #8]
 800be84:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800be88:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800be8c:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 800be90:	462b      	mov	r3, r5
 800be92:	4608      	mov	r0, r1
 800be94:	47a0      	blx	r4
 800be96:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800be9a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800be9e:	6859      	ldr	r1, [r3, #4]
 800bea0:	68da      	ldr	r2, [r3, #12]
 800bea2:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 800bea6:	4405      	add	r5, r0
 800bea8:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800beac:	0089      	lsls	r1, r1, #2
 800beae:	4406      	add	r6, r0
 800beb0:	eba5 0c09 	sub.w	ip, r5, r9
 800beb4:	1850      	adds	r0, r2, r1
 800beb6:	45a4      	cmp	ip, r4
 800beb8:	bfa8      	it	ge
 800beba:	464d      	movge	r5, r9
 800bebc:	4286      	cmp	r6, r0
 800bebe:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 800bec2:	bf28      	it	cs
 800bec4:	1a76      	subcs	r6, r6, r1
 800bec6:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800beca:	3001      	adds	r0, #1
 800becc:	4281      	cmp	r1, r0
 800bece:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
 800bed2:	d1d6      	bne.n	800be82 <forward_conv2d_nl_pool+0x6a2>
 800bed4:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
 800bed8:	f8c7 614c 	str.w	r6, [r7, #332]	; 0x14c
 800bedc:	e019      	b.n	800bf12 <forward_conv2d_nl_pool+0x732>
 800bede:	461a      	mov	r2, r3
 800bee0:	e77e      	b.n	800bde0 <forward_conv2d_nl_pool+0x600>
 800bee2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800bee6:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800beea:	fb90 f3f2 	sdiv	r3, r0, r2
 800beee:	fb02 0313 	mls	r3, r2, r3, r0
 800bef2:	1ad3      	subs	r3, r2, r3
 800bef4:	4605      	mov	r5, r0
 800bef6:	fb93 f0f2 	sdiv	r0, r3, r2
 800befa:	fb02 3010 	mls	r0, r2, r0, r3
 800befe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf00:	462e      	mov	r6, r5
 800bf02:	18c4      	adds	r4, r0, r3
 800bf04:	eb02 0805 	add.w	r8, r2, r5
 800bf08:	e6d2      	b.n	800bcb0 <forward_conv2d_nl_pool+0x4d0>
 800bf0a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800bf0e:	699b      	ldr	r3, [r3, #24]
 800bf10:	68da      	ldr	r2, [r3, #12]
 800bf12:	609a      	str	r2, [r3, #8]
 800bf14:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800bf18:	3301      	adds	r3, #1
 800bf1a:	b21b      	sxth	r3, r3
 800bf1c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800bf20:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800bf24:	3b01      	subs	r3, #1
 800bf26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bf2a:	f100 8089 	bmi.w	800c040 <forward_conv2d_nl_pool+0x860>
 800bf2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bf32:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 800bf36:	42a3      	cmp	r3, r4
 800bf38:	d867      	bhi.n	800c00a <forward_conv2d_nl_pool+0x82a>
 800bf3a:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800bf3e:	b29b      	uxth	r3, r3
 800bf40:	6990      	ldr	r0, [r2, #24]
 800bf42:	9301      	str	r3, [sp, #4]
 800bf44:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bf48:	f8d7 80c4 	ldr.w	r8, [r7, #196]	; 0xc4
 800bf4c:	f8b7 5094 	ldrh.w	r5, [r7, #148]	; 0x94
 800bf50:	1a9b      	subs	r3, r3, r2
 800bf52:	fa1f f188 	uxth.w	r1, r8
 800bf56:	b29a      	uxth	r2, r3
 800bf58:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bf5c:	9308      	str	r3, [sp, #32]
 800bf5e:	9105      	str	r1, [sp, #20]
 800bf60:	2601      	movs	r6, #1
 800bf62:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800bf66:	9607      	str	r6, [sp, #28]
 800bf68:	f8d7 6084 	ldr.w	r6, [r7, #132]	; 0x84
 800bf6c:	9506      	str	r5, [sp, #24]
 800bf6e:	f8b7 5044 	ldrh.w	r5, [r7, #68]	; 0x44
 800bf72:	9304      	str	r3, [sp, #16]
 800bf74:	1a64      	subs	r4, r4, r1
 800bf76:	b2b1      	uxth	r1, r6
 800bf78:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800bf7c:	9300      	str	r3, [sp, #0]
 800bf7e:	e9cd 5102 	strd	r5, r1, [sp, #8]
 800bf82:	b224      	sxth	r4, r4
 800bf84:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 800bf88:	f8b7 1144 	ldrh.w	r1, [r7, #324]	; 0x144
 800bf8c:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 800bf90:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800bf92:	47a0      	blx	r4
 800bf94:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800bf98:	f8d7 511c 	ldr.w	r5, [r7, #284]	; 0x11c
 800bf9c:	688a      	ldr	r2, [r1, #8]
 800bf9e:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 800bfa0:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800bfa4:	fa0f f388 	sxth.w	r3, r8
 800bfa8:	1af3      	subs	r3, r6, r3
 800bfaa:	4422      	add	r2, r4
 800bfac:	462e      	mov	r6, r5
 800bfae:	f8d7 40cc 	ldr.w	r4, [r7, #204]	; 0xcc
 800bfb2:	f8d7 5118 	ldr.w	r5, [r7, #280]	; 0x118
 800bfb6:	608a      	str	r2, [r1, #8]
 800bfb8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800bfbc:	4426      	add	r6, r4
 800bfbe:	b21b      	sxth	r3, r3
 800bfc0:	1b2c      	subs	r4, r5, r4
 800bfc2:	f8c7 4118 	str.w	r4, [r7, #280]	; 0x118
 800bfc6:	6efd      	ldr	r5, [r7, #108]	; 0x6c
 800bfc8:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 800bfcc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bfd0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bfd4:	f8c7 611c 	str.w	r6, [r7, #284]	; 0x11c
 800bfd8:	3001      	adds	r0, #1
 800bfda:	442c      	add	r4, r5
 800bfdc:	4283      	cmp	r3, r0
 800bfde:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 800bfe2:	f8c7 4114 	str.w	r4, [r7, #276]	; 0x114
 800bfe6:	f63f adc3 	bhi.w	800bb70 <forward_conv2d_nl_pool+0x390>
 800bfea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800bfee:	699b      	ldr	r3, [r3, #24]
 800bff0:	68da      	ldr	r2, [r3, #12]
 800bff2:	609a      	str	r2, [r3, #8]
 800bff4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bff8:	68d3      	ldr	r3, [r2, #12]
 800bffa:	6093      	str	r3, [r2, #8]
 800bffc:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 800c000:	46bd      	mov	sp, r7
 800c002:	ecbd 8b10 	vpop	{d8-d15}
 800c006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c00a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800c00e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c012:	4611      	mov	r1, r2
 800c014:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800c018:	4419      	add	r1, r3
 800c01a:	1ad3      	subs	r3, r2, r3
 800c01c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800c020:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c022:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c026:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 800c02a:	4413      	add	r3, r2
 800c02c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800c030:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 800c034:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c038:	4293      	cmp	r3, r2
 800c03a:	f63f ad99 	bhi.w	800bb70 <forward_conv2d_nl_pool+0x390>
 800c03e:	e7d4      	b.n	800bfea <forward_conv2d_nl_pool+0x80a>
 800c040:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c044:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 800c048:	699a      	ldr	r2, [r3, #24]
 800c04a:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 800c04e:	68d1      	ldr	r1, [r2, #12]
 800c050:	6853      	ldr	r3, [r2, #4]
 800c052:	697a      	ldr	r2, [r7, #20]
 800c054:	fb00 4012 	mls	r0, r0, r2, r4
 800c058:	009b      	lsls	r3, r3, #2
 800c05a:	4281      	cmp	r1, r0
 800c05c:	bf88      	it	hi
 800c05e:	18c0      	addhi	r0, r0, r3
 800c060:	4281      	cmp	r1, r0
 800c062:	eb01 0203 	add.w	r2, r1, r3
 800c066:	d216      	bcs.n	800c096 <forward_conv2d_nl_pool+0x8b6>
 800c068:	f9b7 10b8 	ldrsh.w	r1, [r7, #184]	; 0xb8
 800c06c:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 800c070:	42a1      	cmp	r1, r4
 800c072:	d010      	beq.n	800c096 <forward_conv2d_nl_pool+0x8b6>
 800c074:	4290      	cmp	r0, r2
 800c076:	d20e      	bcs.n	800c096 <forward_conv2d_nl_pool+0x8b6>
 800c078:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 800c07c:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 800c080:	f850 3b04 	ldr.w	r3, [r0], #4
 800c084:	f841 3b04 	str.w	r3, [r1], #4
 800c088:	69a2      	ldr	r2, [r4, #24]
 800c08a:	6853      	ldr	r3, [r2, #4]
 800c08c:	68d2      	ldr	r2, [r2, #12]
 800c08e:	009b      	lsls	r3, r3, #2
 800c090:	441a      	add	r2, r3
 800c092:	4282      	cmp	r2, r0
 800c094:	d8f4      	bhi.n	800c080 <forward_conv2d_nl_pool+0x8a0>
 800c096:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800c09a:	f8d7 40b8 	ldr.w	r4, [r7, #184]	; 0xb8
 800c09e:	f8b7 1140 	ldrh.w	r1, [r7, #320]	; 0x140
 800c0a2:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 800c0a4:	4420      	add	r0, r4
 800c0a6:	f8d7 40c4 	ldr.w	r4, [r7, #196]	; 0xc4
 800c0aa:	1a40      	subs	r0, r0, r1
 800c0ac:	4421      	add	r1, r4
 800c0ae:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 800c0b2:	442c      	add	r4, r5
 800c0b4:	b209      	sxth	r1, r1
 800c0b6:	b200      	sxth	r0, r0
 800c0b8:	4294      	cmp	r4, r2
 800c0ba:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 800c0be:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
 800c0c2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 800c0c6:	4621      	mov	r1, r4
 800c0c8:	f4ff af31 	bcc.w	800bf2e <forward_conv2d_nl_pool+0x74e>
 800c0cc:	425b      	negs	r3, r3
 800c0ce:	4419      	add	r1, r3
 800c0d0:	4291      	cmp	r1, r2
 800c0d2:	d2fc      	bcs.n	800c0ce <forward_conv2d_nl_pool+0x8ee>
 800c0d4:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 800c0d8:	e729      	b.n	800bf2e <forward_conv2d_nl_pool+0x74e>
 800c0da:	68db      	ldr	r3, [r3, #12]
 800c0dc:	deff      	udf	#255	; 0xff
 800c0de:	f8dc 200c 	ldr.w	r2, [ip, #12]
 800c0e2:	2a00      	cmp	r2, #0
 800c0e4:	f43f ac7c 	beq.w	800b9e0 <forward_conv2d_nl_pool+0x200>
 800c0e8:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800c0ec:	2903      	cmp	r1, #3
 800c0ee:	f240 8484 	bls.w	800c9fa <forward_conv2d_nl_pool+0x121a>
 800c0f2:	685b      	ldr	r3, [r3, #4]
 800c0f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0f6:	b1db      	cbz	r3, 800c130 <forward_conv2d_nl_pool+0x950>
 800c0f8:	685b      	ldr	r3, [r3, #4]
 800c0fa:	b1cb      	cbz	r3, 800c130 <forward_conv2d_nl_pool+0x950>
 800c0fc:	699b      	ldr	r3, [r3, #24]
 800c0fe:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800c102:	e9d3 3401 	ldrd	r3, r4, [r3, #4]
 800c106:	9301      	str	r3, [sp, #4]
 800c108:	4603      	mov	r3, r0
 800c10a:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 800c10e:	9000      	str	r0, [sp, #0]
 800c110:	4620      	mov	r0, r4
 800c112:	f7ff fb15 	bl	800b740 <ai_dict_decompress_f32>
 800c116:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800c11a:	b12c      	cbz	r4, 800c128 <forward_conv2d_nl_pool+0x948>
 800c11c:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 800c120:	881a      	ldrh	r2, [r3, #0]
 800c122:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 800c126:	e45b      	b.n	800b9e0 <forward_conv2d_nl_pool+0x200>
 800c128:	881a      	ldrh	r2, [r3, #0]
 800c12a:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 800c12e:	e457      	b.n	800b9e0 <forward_conv2d_nl_pool+0x200>
 800c130:	2300      	movs	r3, #0
 800c132:	699b      	ldr	r3, [r3, #24]
 800c134:	deff      	udf	#255	; 0xff
 800c136:	68da      	ldr	r2, [r3, #12]
 800c138:	e6eb      	b.n	800bf12 <forward_conv2d_nl_pool+0x732>
 800c13a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c13c:	2901      	cmp	r1, #1
 800c13e:	f47f ad3b 	bne.w	800bbb8 <forward_conv2d_nl_pool+0x3d8>
 800c142:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800c146:	2900      	cmp	r1, #0
 800c148:	f43f aedf 	beq.w	800bf0a <forward_conv2d_nl_pool+0x72a>
 800c14c:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800c150:	f8d7 6154 	ldr.w	r6, [r7, #340]	; 0x154
 800c154:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 800c158:	1ad2      	subs	r2, r2, r3
 800c15a:	1a8c      	subs	r4, r1, r2
 800c15c:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800c160:	00b2      	lsls	r2, r6, #2
 800c162:	fb02 f204 	mul.w	r2, r2, r4
 800c166:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 800c16a:	fbb1 f1f0 	udiv	r1, r1, r0
 800c16e:	ebc1 7081 	rsb	r0, r1, r1, lsl #30
 800c172:	460d      	mov	r5, r1
 800c174:	6339      	str	r1, [r7, #48]	; 0x30
 800c176:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c178:	ebc1 7141 	rsb	r1, r1, r1, lsl #29
 800c17c:	0082      	lsls	r2, r0, #2
 800c17e:	65ba      	str	r2, [r7, #88]	; 0x58
 800c180:	00ca      	lsls	r2, r1, #3
 800c182:	607a      	str	r2, [r7, #4]
 800c184:	00aa      	lsls	r2, r5, #2
 800c186:	60ba      	str	r2, [r7, #8]
 800c188:	fb03 f206 	mul.w	r2, r3, r6
 800c18c:	67ba      	str	r2, [r7, #120]	; 0x78
 800c18e:	6a3a      	ldr	r2, [r7, #32]
 800c190:	fb02 f303 	mul.w	r3, r2, r3
 800c194:	61bb      	str	r3, [r7, #24]
 800c196:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c19a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800c19e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c1a2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800c1a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c1aa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c1b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	f2c0 826e 	blt.w	800c69a <forward_conv2d_nl_pool+0xeba>
 800c1be:	2100      	movs	r1, #0
 800c1c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c1c2:	460a      	mov	r2, r1
 800c1c4:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 800c1c8:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 800c1cc:	f8d7 5088 	ldr.w	r5, [r7, #136]	; 0x88
 800c1d0:	4420      	add	r0, r4
 800c1d2:	4408      	add	r0, r1
 800c1d4:	f8d7 4108 	ldr.w	r4, [r7, #264]	; 0x108
 800c1d8:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800c1dc:	190c      	adds	r4, r1, r4
 800c1de:	42ac      	cmp	r4, r5
 800c1e0:	bf28      	it	cs
 800c1e2:	462c      	movcs	r4, r5
 800c1e4:	f8d7 512c 	ldr.w	r5, [r7, #300]	; 0x12c
 800c1e8:	0080      	lsls	r0, r0, #2
 800c1ea:	1aa4      	subs	r4, r4, r2
 800c1ec:	2d00      	cmp	r5, #0
 800c1ee:	f000 8245 	beq.w	800c67c <forward_conv2d_nl_pool+0xe9c>
 800c1f2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800c1f6:	f8d7 6150 	ldr.w	r6, [r7, #336]	; 0x150
 800c1fa:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 800c1fe:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800c202:	42b5      	cmp	r5, r6
 800c204:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 800c208:	eba3 0204 	sub.w	r2, r3, r4
 800c20c:	eba1 0104 	sub.w	r1, r1, r4
 800c210:	bf08      	it	eq
 800c212:	eef0 3a48 	vmoveq.f32	s7, s16
 800c216:	462b      	mov	r3, r5
 800c218:	69bd      	ldr	r5, [r7, #24]
 800c21a:	f8d7 60c0 	ldr.w	r6, [r7, #192]	; 0xc0
 800c21e:	4428      	add	r0, r5
 800c220:	f8d7 513c 	ldr.w	r5, [r7, #316]	; 0x13c
 800c224:	fb05 6e00 	mla	lr, r5, r0, r6
 800c228:	eb0e 000b 	add.w	r0, lr, fp
 800c22c:	4586      	cmp	lr, r0
 800c22e:	61f8      	str	r0, [r7, #28]
 800c230:	f080 80a5 	bcs.w	800c37e <forward_conv2d_nl_pool+0xb9e>
 800c234:	0092      	lsls	r2, r2, #2
 800c236:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800c23a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c23c:	fb01 f10b 	mul.w	r1, r1, fp
 800c240:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 800c244:	f024 0803 	bic.w	r8, r4, #3
 800c248:	2a00      	cmp	r2, #0
 800c24a:	f000 8098 	beq.w	800c37e <forward_conv2d_nl_pool+0xb9e>
 800c24e:	f108 32ff 	add.w	r2, r8, #4294967295
 800c252:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800c254:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800c258:	0892      	lsrs	r2, r2, #2
 800c25a:	3201      	adds	r2, #1
 800c25c:	4401      	add	r1, r0
 800c25e:	fb02 f00a 	mul.w	r0, r2, sl
 800c262:	6638      	str	r0, [r7, #96]	; 0x60
 800c264:	0110      	lsls	r0, r2, #4
 800c266:	0092      	lsls	r2, r2, #2
 800c268:	65fa      	str	r2, [r7, #92]	; 0x5c
 800c26a:	1aca      	subs	r2, r1, r3
 800c26c:	613a      	str	r2, [r7, #16]
 800c26e:	68ba      	ldr	r2, [r7, #8]
 800c270:	6738      	str	r0, [r7, #112]	; 0x70
 800c272:	4413      	add	r3, r2
 800c274:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c278:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c27c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c27e:	4413      	add	r3, r2
 800c280:	60fb      	str	r3, [r7, #12]
 800c282:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c286:	693b      	ldr	r3, [r7, #16]
 800c288:	4413      	add	r3, r2
 800c28a:	677b      	str	r3, [r7, #116]	; 0x74
 800c28c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c290:	ecf3 6a01 	vldmia	r3!, {s13}
 800c294:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c298:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800c2a2:	dd57      	ble.n	800c354 <forward_conv2d_nl_pool+0xb74>
 800c2a4:	4676      	mov	r6, lr
 800c2a6:	f04f 0c00 	mov.w	ip, #0
 800c2aa:	f1b8 0f00 	cmp.w	r8, #0
 800c2ae:	f340 81e3 	ble.w	800c678 <forward_conv2d_nl_pool+0xe98>
 800c2b2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800c2b6:	f109 0310 	add.w	r3, r9, #16
 800c2ba:	18b1      	adds	r1, r6, r2
 800c2bc:	2000      	movs	r0, #0
 800c2be:	4632      	mov	r2, r6
 800c2c0:	eb02 050b 	add.w	r5, r2, fp
 800c2c4:	ed95 7a00 	vldr	s14, [r5]
 800c2c8:	ed53 7a03 	vldr	s15, [r3, #-12]
 800c2cc:	ed92 4a00 	vldr	s8, [r2]
 800c2d0:	ed53 4a04 	vldr	s9, [r3, #-16]
 800c2d4:	ed91 5a00 	vldr	s10, [r1]
 800c2d8:	ed53 5a02 	vldr	s11, [r3, #-8]
 800c2dc:	ed13 6a01 	vldr	s12, [r3, #-4]
 800c2e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2e4:	eb01 050b 	add.w	r5, r1, fp
 800c2e8:	eee4 7a24 	vfma.f32	s15, s8, s9
 800c2ec:	3004      	adds	r0, #4
 800c2ee:	4540      	cmp	r0, r8
 800c2f0:	ed95 7a00 	vldr	s14, [r5]
 800c2f4:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c2f8:	4452      	add	r2, sl
 800c2fa:	4451      	add	r1, sl
 800c2fc:	f103 0310 	add.w	r3, r3, #16
 800c300:	eee7 7a06 	vfma.f32	s15, s14, s12
 800c304:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800c308:	dbda      	blt.n	800c2c0 <forward_conv2d_nl_pool+0xae0>
 800c30a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c30c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800c30e:	441e      	add	r6, r3
 800c310:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c312:	4499      	add	r9, r3
 800c314:	42a0      	cmp	r0, r4
 800c316:	da11      	bge.n	800c33c <forward_conv2d_nl_pool+0xb5c>
 800c318:	4602      	mov	r2, r0
 800c31a:	4633      	mov	r3, r6
 800c31c:	4649      	mov	r1, r9
 800c31e:	edd3 7a00 	vldr	s15, [r3]
 800c322:	ecb1 7a01 	vldmia	r1!, {s14}
 800c326:	3201      	adds	r2, #1
 800c328:	42a2      	cmp	r2, r4
 800c32a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c32e:	445b      	add	r3, fp
 800c330:	d1f5      	bne.n	800c31e <forward_conv2d_nl_pool+0xb3e>
 800c332:	1a20      	subs	r0, r4, r0
 800c334:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 800c338:	fb00 660b 	mla	r6, r0, fp, r6
 800c33c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c340:	441e      	add	r6, r3
 800c342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c346:	4499      	add	r9, r3
 800c348:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c34c:	f10c 0c01 	add.w	ip, ip, #1
 800c350:	4563      	cmp	r3, ip
 800c352:	d1aa      	bne.n	800c2aa <forward_conv2d_nl_pool+0xaca>
 800c354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c356:	4499      	add	r9, r3
 800c358:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c35a:	ece3 6a01 	vstmia	r3!, {s13}
 800c35e:	677b      	str	r3, [r7, #116]	; 0x74
 800c360:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800c364:	4293      	cmp	r3, r2
 800c366:	d191      	bne.n	800c28c <forward_conv2d_nl_pool+0xaac>
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	687a      	ldr	r2, [r7, #4]
 800c36c:	1a9b      	subs	r3, r3, r2
 800c36e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c372:	69fb      	ldr	r3, [r7, #28]
 800c374:	f10e 0e04 	add.w	lr, lr, #4
 800c378:	459e      	cmp	lr, r3
 800c37a:	f4ff af7d 	bcc.w	800c278 <forward_conv2d_nl_pool+0xa98>
 800c37e:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800c382:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800c386:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c38a:	440a      	add	r2, r1
 800c38c:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 800c390:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 800c394:	4608      	mov	r0, r1
 800c396:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800c39a:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 800c39e:	4410      	add	r0, r2
 800c3a0:	1a8a      	subs	r2, r1, r2
 800c3a2:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 800c3a6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800c3aa:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
 800c3ae:	3301      	adds	r3, #1
 800c3b0:	429a      	cmp	r2, r3
 800c3b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c3b6:	f47f aefd 	bne.w	800c1b4 <forward_conv2d_nl_pool+0x9d4>
 800c3ba:	e54f      	b.n	800be5c <forward_conv2d_nl_pool+0x67c>
 800c3bc:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800c3be:	2801      	cmp	r0, #1
 800c3c0:	f47f abfa 	bne.w	800bbb8 <forward_conv2d_nl_pool+0x3d8>
 800c3c4:	1ad2      	subs	r2, r2, r3
 800c3c6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c3c8:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 800c3cc:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 800c3d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c3d2:	fb00 4101 	mla	r1, r0, r1, r4
 800c3d6:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800c3da:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 800c3de:	f080 8173 	bcs.w	800c6c8 <forward_conv2d_nl_pool+0xee8>
 800c3e2:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800c3e6:	2a00      	cmp	r2, #0
 800c3e8:	f43f ad38 	beq.w	800be5c <forward_conv2d_nl_pool+0x67c>
 800c3ec:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c3f0:	fb02 f303 	mul.w	r3, r2, r3
 800c3f4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c3f6:	677b      	str	r3, [r7, #116]	; 0x74
 800c3f8:	1a9b      	subs	r3, r3, r2
 800c3fa:	663b      	str	r3, [r7, #96]	; 0x60
 800c3fc:	188b      	adds	r3, r1, r2
 800c3fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c400:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c404:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800c408:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c40c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800c410:	e9c7 ab0b 	strd	sl, fp, [r7, #44]	; 0x2c
 800c414:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c418:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c41c:	2300      	movs	r3, #0
 800c41e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c422:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c426:	2b00      	cmp	r3, #0
 800c428:	f000 814b 	beq.w	800c6c2 <forward_conv2d_nl_pool+0xee2>
 800c42c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c430:	ed93 6a00 	vldr	s12, [r3]
 800c434:	3304      	adds	r3, #4
 800c436:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c43a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800c43e:	2b00      	cmp	r3, #0
 800c440:	f000 8101 	beq.w	800c646 <forward_conv2d_nl_pool+0xe66>
 800c444:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c448:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800c44c:	eb03 0802 	add.w	r8, r3, r2
 800c450:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c452:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c456:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c458:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c45c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c460:	67bb      	str	r3, [r7, #120]	; 0x78
 800c462:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c466:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c46a:	f04f 0b00 	mov.w	fp, #0
 800c46e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c472:	2b00      	cmp	r3, #0
 800c474:	f2c0 811c 	blt.w	800c6b0 <forward_conv2d_nl_pool+0xed0>
 800c478:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800c47c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c47e:	2300      	movs	r3, #0
 800c480:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 800c484:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800c488:	eb02 0c04 	add.w	ip, r2, r4
 800c48c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800c490:	4540      	cmp	r0, r8
 800c492:	bf94      	ite	ls
 800c494:	ebc3 0300 	rsbls	r3, r3, r0
 800c498:	ebc3 0308 	rsbhi	r3, r3, r8
 800c49c:	eba2 0903 	sub.w	r9, r2, r3
 800c4a0:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800c4a4:	1ac4      	subs	r4, r0, r3
 800c4a6:	fb03 f302 	mul.w	r3, r3, r2
 800c4aa:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800c4ae:	2a00      	cmp	r2, #0
 800c4b0:	f340 80fb 	ble.w	800c6aa <forward_conv2d_nl_pool+0xeca>
 800c4b4:	f023 050f 	bic.w	r5, r3, #15
 800c4b8:	f8d7 60e8 	ldr.w	r6, [r7, #232]	; 0xe8
 800c4bc:	1e68      	subs	r0, r5, #1
 800c4be:	0900      	lsrs	r0, r0, #4
 800c4c0:	3001      	adds	r0, #1
 800c4c2:	fb06 f204 	mul.w	r2, r6, r4
 800c4c6:	673a      	str	r2, [r7, #112]	; 0x70
 800c4c8:	0102      	lsls	r2, r0, #4
 800c4ca:	65ba      	str	r2, [r7, #88]	; 0x58
 800c4cc:	fb06 f909 	mul.w	r9, r6, r9
 800c4d0:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 800c4d4:	eef0 6a46 	vmov.f32	s13, s12
 800c4d8:	f04f 0e00 	mov.w	lr, #0
 800c4dc:	4662      	mov	r2, ip
 800c4de:	2d00      	cmp	r5, #0
 800c4e0:	f340 80e1 	ble.w	800c6a6 <forward_conv2d_nl_pool+0xec6>
 800c4e4:	f101 0440 	add.w	r4, r1, #64	; 0x40
 800c4e8:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800c4ec:	2600      	movs	r6, #0
 800c4ee:	ed50 fa0f 	vldr	s31, [r0, #-60]	; 0xffffffc4
 800c4f2:	ed54 7a0f 	vldr	s15, [r4, #-60]	; 0xffffffc4
 800c4f6:	ed10 fa10 	vldr	s30, [r0, #-64]	; 0xffffffc0
 800c4fa:	ed54 ea10 	vldr	s29, [r4, #-64]	; 0xffffffc0
 800c4fe:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 800c502:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 800c506:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 800c50a:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 800c50e:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 800c512:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 800c516:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 800c51a:	ed50 aa0a 	vldr	s21, [r0, #-40]	; 0xffffffd8
 800c51e:	ed14 aa0a 	vldr	s20, [r4, #-40]	; 0xffffffd8
 800c522:	ed50 9a09 	vldr	s19, [r0, #-36]	; 0xffffffdc
 800c526:	ed14 9a09 	vldr	s18, [r4, #-36]	; 0xffffffdc
 800c52a:	ed54 8a08 	vldr	s17, [r4, #-32]	; 0xffffffe0
 800c52e:	ed10 0a08 	vldr	s0, [r0, #-32]	; 0xffffffe0
 800c532:	ed54 0a07 	vldr	s1, [r4, #-28]	; 0xffffffe4
 800c536:	ed10 1a07 	vldr	s2, [r0, #-28]	; 0xffffffe4
 800c53a:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 800c53e:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 800c542:	ed50 2a05 	vldr	s5, [r0, #-20]	; 0xffffffec
 800c546:	ed14 3a05 	vldr	s6, [r4, #-20]	; 0xffffffec
 800c54a:	ed50 3a04 	vldr	s7, [r0, #-16]
 800c54e:	ed14 4a04 	vldr	s8, [r4, #-16]
 800c552:	ed50 4a03 	vldr	s9, [r0, #-12]
 800c556:	ed14 5a03 	vldr	s10, [r4, #-12]
 800c55a:	ed50 5a02 	vldr	s11, [r0, #-8]
 800c55e:	ed14 7a02 	vldr	s14, [r4, #-8]
 800c562:	ee67 7aaf 	vmul.f32	s15, s15, s31
 800c566:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 800c56a:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800c56e:	3610      	adds	r6, #16
 800c570:	42b5      	cmp	r5, r6
 800c572:	ed14 fa01 	vldr	s30, [r4, #-4]
 800c576:	ed50 ea01 	vldr	s29, [r0, #-4]
 800c57a:	eeee 7a2f 	vfma.f32	s15, s28, s31
 800c57e:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800c582:	f100 0040 	add.w	r0, r0, #64	; 0x40
 800c586:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800c58a:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800c58e:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800c592:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800c596:	eee9 7a89 	vfma.f32	s15, s19, s18
 800c59a:	eee8 7a80 	vfma.f32	s15, s17, s0
 800c59e:	eee0 7a81 	vfma.f32	s15, s1, s2
 800c5a2:	eee1 7a82 	vfma.f32	s15, s3, s4
 800c5a6:	eee2 7a83 	vfma.f32	s15, s5, s6
 800c5aa:	eee3 7a84 	vfma.f32	s15, s7, s8
 800c5ae:	eee4 7a85 	vfma.f32	s15, s9, s10
 800c5b2:	eee5 7a87 	vfma.f32	s15, s11, s14
 800c5b6:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800c5ba:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800c5be:	dc96      	bgt.n	800c4ee <forward_conv2d_nl_pool+0xd0e>
 800c5c0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800c5c2:	4451      	add	r1, sl
 800c5c4:	4452      	add	r2, sl
 800c5c6:	4283      	cmp	r3, r0
 800c5c8:	dd0f      	ble.n	800c5ea <forward_conv2d_nl_pool+0xe0a>
 800c5ca:	4604      	mov	r4, r0
 800c5cc:	468c      	mov	ip, r1
 800c5ce:	4616      	mov	r6, r2
 800c5d0:	ecb6 7a01 	vldmia	r6!, {s14}
 800c5d4:	ecfc 7a01 	vldmia	ip!, {s15}
 800c5d8:	3401      	adds	r4, #1
 800c5da:	42a3      	cmp	r3, r4
 800c5dc:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c5e0:	d1f6      	bne.n	800c5d0 <forward_conv2d_nl_pool+0xdf0>
 800c5e2:	1a18      	subs	r0, r3, r0
 800c5e4:	0080      	lsls	r0, r0, #2
 800c5e6:	4402      	add	r2, r0
 800c5e8:	4401      	add	r1, r0
 800c5ea:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800c5ec:	4402      	add	r2, r0
 800c5ee:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 800c5f2:	f10e 0e01 	add.w	lr, lr, #1
 800c5f6:	4570      	cmp	r0, lr
 800c5f8:	4449      	add	r1, r9
 800c5fa:	f47f af70 	bne.w	800c4de <forward_conv2d_nl_pool+0xcfe>
 800c5fe:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800c602:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c604:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800c608:	edc3 6a00 	vstr	s13, [r3]
 800c60c:	4608      	mov	r0, r1
 800c60e:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800c612:	440b      	add	r3, r1
 800c614:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800c618:	67bb      	str	r3, [r7, #120]	; 0x78
 800c61a:	4410      	add	r0, r2
 800c61c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c61e:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
 800c622:	4608      	mov	r0, r1
 800c624:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800c628:	4418      	add	r0, r3
 800c62a:	1acb      	subs	r3, r1, r3
 800c62c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c630:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800c634:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 800c638:	f10b 0b01 	add.w	fp, fp, #1
 800c63c:	455b      	cmp	r3, fp
 800c63e:	eba8 0802 	sub.w	r8, r8, r2
 800c642:	f47f af14 	bne.w	800c46e <forward_conv2d_nl_pool+0xc8e>
 800c646:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800c64a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c64c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c650:	440a      	add	r2, r1
 800c652:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800c656:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800c65a:	3204      	adds	r2, #4
 800c65c:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 800c660:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800c664:	3301      	adds	r3, #1
 800c666:	429a      	cmp	r2, r3
 800c668:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c66c:	f47f aed9 	bne.w	800c422 <forward_conv2d_nl_pool+0xc42>
 800c670:	e9d7 ab0b 	ldrd	sl, fp, [r7, #44]	; 0x2c
 800c674:	f7ff bbf2 	b.w	800be5c <forward_conv2d_nl_pool+0x67c>
 800c678:	2000      	movs	r0, #0
 800c67a:	e64b      	b.n	800c314 <forward_conv2d_nl_pool+0xb34>
 800c67c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800c680:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 800c684:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c688:	1b19      	subs	r1, r3, r4
 800c68a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800c68e:	eef0 3a48 	vmov.f32	s7, s16
 800c692:	1b1a      	subs	r2, r3, r4
 800c694:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800c698:	e5be      	b.n	800c218 <forward_conv2d_nl_pool+0xa38>
 800c69a:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 800c69e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c6a0:	460a      	mov	r2, r1
 800c6a2:	440b      	add	r3, r1
 800c6a4:	e58e      	b.n	800c1c4 <forward_conv2d_nl_pool+0x9e4>
 800c6a6:	2000      	movs	r0, #0
 800c6a8:	e78d      	b.n	800c5c6 <forward_conv2d_nl_pool+0xde6>
 800c6aa:	eef0 6a46 	vmov.f32	s13, s12
 800c6ae:	e7a6      	b.n	800c5fe <forward_conv2d_nl_pool+0xe1e>
 800c6b0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c6b4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c6b8:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 800c6bc:	eba8 0303 	sub.w	r3, r8, r3
 800c6c0:	e6de      	b.n	800c480 <forward_conv2d_nl_pool+0xca0>
 800c6c2:	eeb0 6a48 	vmov.f32	s12, s16
 800c6c6:	e6b8      	b.n	800c43a <forward_conv2d_nl_pool+0xc5a>
 800c6c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c6cc:	f8c7 d070 	str.w	sp, [r7, #112]	; 0x70
 800c6d0:	320a      	adds	r2, #10
 800c6d2:	f022 0207 	bic.w	r2, r2, #7
 800c6d6:	ebad 0d02 	sub.w	sp, sp, r2
 800c6da:	aa0a      	add	r2, sp, #40	; 0x28
 800c6dc:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800c6e0:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800c6e4:	2a00      	cmp	r2, #0
 800c6e6:	f000 814f 	beq.w	800c988 <forward_conv2d_nl_pool+0x11a8>
 800c6ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c6ee:	fb02 f303 	mul.w	r3, r2, r3
 800c6f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c6f4:	663b      	str	r3, [r7, #96]	; 0x60
 800c6f6:	1a9b      	subs	r3, r3, r2
 800c6f8:	65bb      	str	r3, [r7, #88]	; 0x58
 800c6fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c6fe:	4413      	add	r3, r2
 800c700:	633b      	str	r3, [r7, #48]	; 0x30
 800c702:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c706:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800c70a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c70e:	67bb      	str	r3, [r7, #120]	; 0x78
 800c710:	e9c7 ab06 	strd	sl, fp, [r7, #24]
 800c714:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c718:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800c71c:	2300      	movs	r3, #0
 800c71e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c722:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c726:	b13b      	cbz	r3, 800c738 <forward_conv2d_nl_pool+0xf58>
 800c728:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c72c:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 800c730:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800c734:	f000 feb2 	bl	800d49c <memcpy>
 800c738:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	f000 8135 	beq.w	800c9ac <forward_conv2d_nl_pool+0x11cc>
 800c742:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c744:	ed93 6a00 	vldr	s12, [r3]
 800c748:	3304      	adds	r3, #4
 800c74a:	67bb      	str	r3, [r7, #120]	; 0x78
 800c74c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800c750:	2b00      	cmp	r3, #0
 800c752:	f000 8101 	beq.w	800c958 <forward_conv2d_nl_pool+0x1178>
 800c756:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c75a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800c75e:	eb03 0802 	add.w	r8, r3, r2
 800c762:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c764:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c76a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c76e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c772:	677b      	str	r3, [r7, #116]	; 0x74
 800c774:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c778:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c77c:	f04f 0b00 	mov.w	fp, #0
 800c780:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c784:	2b00      	cmp	r3, #0
 800c786:	f2c0 8108 	blt.w	800c99a <forward_conv2d_nl_pool+0x11ba>
 800c78a:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800c78e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c790:	2300      	movs	r3, #0
 800c792:	f8d7 40d8 	ldr.w	r4, [r7, #216]	; 0xd8
 800c796:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800c79a:	eb02 0c04 	add.w	ip, r2, r4
 800c79e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800c7a2:	4540      	cmp	r0, r8
 800c7a4:	bf94      	ite	ls
 800c7a6:	ebc3 0300 	rsbls	r3, r3, r0
 800c7aa:	ebc3 0308 	rsbhi	r3, r3, r8
 800c7ae:	eba2 0903 	sub.w	r9, r2, r3
 800c7b2:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800c7b6:	1ac4      	subs	r4, r0, r3
 800c7b8:	fb03 f302 	mul.w	r3, r3, r2
 800c7bc:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800c7c0:	2a00      	cmp	r2, #0
 800c7c2:	f340 80e7 	ble.w	800c994 <forward_conv2d_nl_pool+0x11b4>
 800c7c6:	f023 050f 	bic.w	r5, r3, #15
 800c7ca:	f8d7 60e8 	ldr.w	r6, [r7, #232]	; 0xe8
 800c7ce:	1e68      	subs	r0, r5, #1
 800c7d0:	0900      	lsrs	r0, r0, #4
 800c7d2:	3001      	adds	r0, #1
 800c7d4:	fb06 f204 	mul.w	r2, r6, r4
 800c7d8:	65fa      	str	r2, [r7, #92]	; 0x5c
 800c7da:	0102      	lsls	r2, r0, #4
 800c7dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c7de:	fb06 f909 	mul.w	r9, r6, r9
 800c7e2:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 800c7e6:	eef0 6a46 	vmov.f32	s13, s12
 800c7ea:	f04f 0e00 	mov.w	lr, #0
 800c7ee:	4662      	mov	r2, ip
 800c7f0:	2d00      	cmp	r5, #0
 800c7f2:	f340 80cd 	ble.w	800c990 <forward_conv2d_nl_pool+0x11b0>
 800c7f6:	f101 0440 	add.w	r4, r1, #64	; 0x40
 800c7fa:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800c7fe:	2600      	movs	r6, #0
 800c800:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 800c804:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 800c808:	ed10 fa10 	vldr	s30, [r0, #-64]	; 0xffffffc0
 800c80c:	ed54 ea10 	vldr	s29, [r4, #-64]	; 0xffffffc0
 800c810:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 800c814:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 800c818:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 800c81c:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 800c820:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 800c824:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 800c828:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 800c82c:	ed50 aa0a 	vldr	s21, [r0, #-40]	; 0xffffffd8
 800c830:	ed14 aa0a 	vldr	s20, [r4, #-40]	; 0xffffffd8
 800c834:	ed50 9a09 	vldr	s19, [r0, #-36]	; 0xffffffdc
 800c838:	ed14 9a09 	vldr	s18, [r4, #-36]	; 0xffffffdc
 800c83c:	ed54 8a08 	vldr	s17, [r4, #-32]	; 0xffffffe0
 800c840:	ed10 0a08 	vldr	s0, [r0, #-32]	; 0xffffffe0
 800c844:	ed50 0a07 	vldr	s1, [r0, #-28]	; 0xffffffe4
 800c848:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 800c84c:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 800c850:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 800c854:	ed50 2a05 	vldr	s5, [r0, #-20]	; 0xffffffec
 800c858:	ed14 3a05 	vldr	s6, [r4, #-20]	; 0xffffffec
 800c85c:	ed54 3a04 	vldr	s7, [r4, #-16]
 800c860:	ed10 4a04 	vldr	s8, [r0, #-16]
 800c864:	ed54 4a03 	vldr	s9, [r4, #-12]
 800c868:	ed10 5a03 	vldr	s10, [r0, #-12]
 800c86c:	ed50 5a02 	vldr	s11, [r0, #-8]
 800c870:	ed14 7a02 	vldr	s14, [r4, #-8]
 800c874:	ee67 7aaf 	vmul.f32	s15, s15, s31
 800c878:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 800c87c:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800c880:	3610      	adds	r6, #16
 800c882:	42ae      	cmp	r6, r5
 800c884:	ed14 fa01 	vldr	s30, [r4, #-4]
 800c888:	ed50 ea01 	vldr	s29, [r0, #-4]
 800c88c:	eeee 7a2f 	vfma.f32	s15, s28, s31
 800c890:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800c894:	f100 0040 	add.w	r0, r0, #64	; 0x40
 800c898:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800c89c:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800c8a0:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800c8a4:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800c8a8:	eee9 7a89 	vfma.f32	s15, s19, s18
 800c8ac:	eee8 7a80 	vfma.f32	s15, s17, s0
 800c8b0:	eee0 7a81 	vfma.f32	s15, s1, s2
 800c8b4:	eee1 7a82 	vfma.f32	s15, s3, s4
 800c8b8:	eee2 7a83 	vfma.f32	s15, s5, s6
 800c8bc:	eee3 7a84 	vfma.f32	s15, s7, s8
 800c8c0:	eee4 7a85 	vfma.f32	s15, s9, s10
 800c8c4:	eee5 7a87 	vfma.f32	s15, s11, s14
 800c8c8:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800c8cc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800c8d0:	db96      	blt.n	800c800 <forward_conv2d_nl_pool+0x1020>
 800c8d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c8d4:	4451      	add	r1, sl
 800c8d6:	4452      	add	r2, sl
 800c8d8:	4283      	cmp	r3, r0
 800c8da:	dd0f      	ble.n	800c8fc <forward_conv2d_nl_pool+0x111c>
 800c8dc:	4604      	mov	r4, r0
 800c8de:	468c      	mov	ip, r1
 800c8e0:	4616      	mov	r6, r2
 800c8e2:	ecb6 7a01 	vldmia	r6!, {s14}
 800c8e6:	ecfc 7a01 	vldmia	ip!, {s15}
 800c8ea:	3401      	adds	r4, #1
 800c8ec:	42a3      	cmp	r3, r4
 800c8ee:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c8f2:	d1f6      	bne.n	800c8e2 <forward_conv2d_nl_pool+0x1102>
 800c8f4:	1a18      	subs	r0, r3, r0
 800c8f6:	0080      	lsls	r0, r0, #2
 800c8f8:	4402      	add	r2, r0
 800c8fa:	4401      	add	r1, r0
 800c8fc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800c8fe:	4402      	add	r2, r0
 800c900:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 800c904:	f10e 0e01 	add.w	lr, lr, #1
 800c908:	4570      	cmp	r0, lr
 800c90a:	4449      	add	r1, r9
 800c90c:	f47f af70 	bne.w	800c7f0 <forward_conv2d_nl_pool+0x1010>
 800c910:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800c914:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c916:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800c91a:	edc3 6a00 	vstr	s13, [r3]
 800c91e:	4608      	mov	r0, r1
 800c920:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800c924:	440b      	add	r3, r1
 800c926:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800c92a:	677b      	str	r3, [r7, #116]	; 0x74
 800c92c:	4410      	add	r0, r2
 800c92e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c930:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
 800c934:	4608      	mov	r0, r1
 800c936:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800c93a:	4418      	add	r0, r3
 800c93c:	1acb      	subs	r3, r1, r3
 800c93e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c942:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800c946:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 800c94a:	f10b 0b01 	add.w	fp, fp, #1
 800c94e:	455b      	cmp	r3, fp
 800c950:	eba8 0802 	sub.w	r8, r8, r2
 800c954:	f47f af14 	bne.w	800c780 <forward_conv2d_nl_pool+0xfa0>
 800c958:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800c95c:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800c960:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c964:	440a      	add	r2, r1
 800c966:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800c96a:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800c96e:	3204      	adds	r2, #4
 800c970:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 800c974:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800c978:	3301      	adds	r3, #1
 800c97a:	429a      	cmp	r2, r3
 800c97c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c980:	f47f aecf 	bne.w	800c722 <forward_conv2d_nl_pool+0xf42>
 800c984:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800c988:	f8d7 d070 	ldr.w	sp, [r7, #112]	; 0x70
 800c98c:	f7ff ba66 	b.w	800be5c <forward_conv2d_nl_pool+0x67c>
 800c990:	2000      	movs	r0, #0
 800c992:	e7a1      	b.n	800c8d8 <forward_conv2d_nl_pool+0x10f8>
 800c994:	eef0 6a46 	vmov.f32	s13, s12
 800c998:	e7ba      	b.n	800c910 <forward_conv2d_nl_pool+0x1130>
 800c99a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c99e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c9a2:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 800c9a6:	eba8 0303 	sub.w	r3, r8, r3
 800c9aa:	e6f2      	b.n	800c792 <forward_conv2d_nl_pool+0xfb2>
 800c9ac:	eeb0 6a48 	vmov.f32	s12, s16
 800c9b0:	e6cc      	b.n	800c74c <forward_conv2d_nl_pool+0xf6c>
 800c9b2:	b16a      	cbz	r2, 800c9d0 <forward_conv2d_nl_pool+0x11f0>
 800c9b4:	6892      	ldr	r2, [r2, #8]
 800c9b6:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 800c9ba:	2201      	movs	r2, #1
 800c9bc:	f8c7 40a4 	str.w	r4, [r7, #164]	; 0xa4
 800c9c0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c9c4:	f7fe bfb2 	b.w	800b92c <forward_conv2d_nl_pool+0x14c>
 800c9c8:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800c9cc:	f7fe bf94 	b.w	800b8f8 <forward_conv2d_nl_pool+0x118>
 800c9d0:	2201      	movs	r2, #1
 800c9d2:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 800c9d6:	f8c7 40a4 	str.w	r4, [r7, #164]	; 0xa4
 800c9da:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c9de:	f7fe bfa5 	b.w	800b92c <forward_conv2d_nl_pool+0x14c>
 800c9e2:	3418      	adds	r4, #24
 800c9e4:	d007      	beq.n	800c9f6 <forward_conv2d_nl_pool+0x1216>
 800c9e6:	4632      	mov	r2, r6
 800c9e8:	4635      	mov	r5, r6
 800c9ea:	4634      	mov	r4, r6
 800c9ec:	f7fe bf2a 	b.w	800b844 <forward_conv2d_nl_pool+0x64>
 800c9f0:	4691      	mov	r9, r2
 800c9f2:	f7fe bf14 	b.w	800b81e <forward_conv2d_nl_pool+0x3e>
 800c9f6:	68e3      	ldr	r3, [r4, #12]
 800c9f8:	deff      	udf	#255	; 0xff
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	685b      	ldr	r3, [r3, #4]
 800c9fe:	deff      	udf	#255	; 0xff
 800ca00:	4694      	mov	ip, r2
 800ca02:	f7fe bf01 	b.w	800b808 <forward_conv2d_nl_pool+0x28>
 800ca06:	4613      	mov	r3, r2
 800ca08:	685b      	ldr	r3, [r3, #4]
 800ca0a:	deff      	udf	#255	; 0xff
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	f7fe bf18 	b.w	800b842 <forward_conv2d_nl_pool+0x62>
 800ca12:	bf00      	nop

0800ca14 <forward_dense>:
 800ca14:	6942      	ldr	r2, [r0, #20]
 800ca16:	8813      	ldrh	r3, [r2, #0]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	f000 81ca 	beq.w	800cdb2 <forward_dense+0x39e>
 800ca1e:	6852      	ldr	r2, [r2, #4]
 800ca20:	6850      	ldr	r0, [r2, #4]
 800ca22:	b100      	cbz	r0, 800ca26 <forward_dense+0x12>
 800ca24:	6800      	ldr	r0, [r0, #0]
 800ca26:	2b01      	cmp	r3, #1
 800ca28:	f240 81c0 	bls.w	800cdac <forward_dense+0x398>
 800ca2c:	6911      	ldr	r1, [r2, #16]
 800ca2e:	b101      	cbz	r1, 800ca32 <forward_dense+0x1e>
 800ca30:	6809      	ldr	r1, [r1, #0]
 800ca32:	2b02      	cmp	r3, #2
 800ca34:	f000 81bf 	beq.w	800cdb6 <forward_dense+0x3a2>
 800ca38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca3c:	ed2d 8b10 	vpush	{d8-d15}
 800ca40:	69d3      	ldr	r3, [r2, #28]
 800ca42:	b091      	sub	sp, #68	; 0x44
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	f000 820b 	beq.w	800ce60 <forward_dense+0x44c>
 800ca4a:	681c      	ldr	r4, [r3, #0]
 800ca4c:	9408      	str	r4, [sp, #32]
 800ca4e:	f112 0418 	adds.w	r4, r2, #24
 800ca52:	f000 81df 	beq.w	800ce14 <forward_dense+0x400>
 800ca56:	8b12      	ldrh	r2, [r2, #24]
 800ca58:	2a01      	cmp	r2, #1
 800ca5a:	f240 81fe 	bls.w	800ce5a <forward_dense+0x446>
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	f000 81da 	beq.w	800ce18 <forward_dense+0x404>
 800ca64:	685b      	ldr	r3, [r3, #4]
 800ca66:	9306      	str	r3, [sp, #24]
 800ca68:	9b08      	ldr	r3, [sp, #32]
 800ca6a:	68cc      	ldr	r4, [r1, #12]
 800ca6c:	699b      	ldr	r3, [r3, #24]
 800ca6e:	68c5      	ldr	r5, [r0, #12]
 800ca70:	681a      	ldr	r2, [r3, #0]
 800ca72:	f8d5 8004 	ldr.w	r8, [r5, #4]
 800ca76:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800ca7a:	f3c2 1cc6 	ubfx	ip, r2, #7, #7
 800ca7e:	f3c2 5541 	ubfx	r5, r2, #21, #2
 800ca82:	fa4c f505 	asr.w	r5, ip, r5
 800ca86:	f3c2 4243 	ubfx	r2, r2, #17, #4
 800ca8a:	950b      	str	r5, [sp, #44]	; 0x2c
 800ca8c:	2a04      	cmp	r2, #4
 800ca8e:	fb07 f506 	mul.w	r5, r7, r6
 800ca92:	6864      	ldr	r4, [r4, #4]
 800ca94:	9507      	str	r5, [sp, #28]
 800ca96:	f000 81dd 	beq.w	800ce54 <forward_dense+0x440>
 800ca9a:	2a08      	cmp	r2, #8
 800ca9c:	f000 81da 	beq.w	800ce54 <forward_dense+0x440>
 800caa0:	f04f 0a00 	mov.w	sl, #0
 800caa4:	698a      	ldr	r2, [r1, #24]
 800caa6:	6981      	ldr	r1, [r0, #24]
 800caa8:	6890      	ldr	r0, [r2, #8]
 800caaa:	9a08      	ldr	r2, [sp, #32]
 800caac:	9004      	str	r0, [sp, #16]
 800caae:	6952      	ldr	r2, [r2, #20]
 800cab0:	688f      	ldr	r7, [r1, #8]
 800cab2:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800cab6:	00a2      	lsls	r2, r4, #2
 800cab8:	9209      	str	r2, [sp, #36]	; 0x24
 800caba:	1886      	adds	r6, r0, r2
 800cabc:	9a07      	ldr	r2, [sp, #28]
 800cabe:	2a00      	cmp	r2, #0
 800cac0:	f000 81c3 	beq.w	800ce4a <forward_dense+0x436>
 800cac4:	f1a8 0210 	sub.w	r2, r8, #16
 800cac8:	0912      	lsrs	r2, r2, #4
 800caca:	3201      	adds	r2, #1
 800cacc:	0192      	lsls	r2, r2, #6
 800cace:	920c      	str	r2, [sp, #48]	; 0x30
 800cad0:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800cad4:	920a      	str	r2, [sp, #40]	; 0x28
 800cad6:	689d      	ldr	r5, [r3, #8]
 800cad8:	9b06      	ldr	r3, [sp, #24]
 800cada:	eddf aad0 	vldr	s21, [pc, #832]	; 800ce1c <forward_dense+0x408>
 800cade:	2200      	movs	r2, #0
 800cae0:	9205      	str	r2, [sp, #20]
 800cae2:	f008 020f 	and.w	r2, r8, #15
 800cae6:	920d      	str	r2, [sp, #52]	; 0x34
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d043      	beq.n	800cb74 <forward_dense+0x160>
 800caec:	699b      	ldr	r3, [r3, #24]
 800caee:	689c      	ldr	r4, [r3, #8]
 800caf0:	9b04      	ldr	r3, [sp, #16]
 800caf2:	f1ba 0f00 	cmp.w	sl, #0
 800caf6:	d042      	beq.n	800cb7e <forward_dense+0x16a>
 800caf8:	42b3      	cmp	r3, r6
 800cafa:	d22a      	bcs.n	800cb52 <forward_dense+0x13e>
 800cafc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cafe:	469b      	mov	fp, r3
 800cb00:	ab0f      	add	r3, sp, #60	; 0x3c
 800cb02:	9303      	str	r3, [sp, #12]
 800cb04:	2a04      	cmp	r2, #4
 800cb06:	4633      	mov	r3, r6
 800cb08:	4646      	mov	r6, r8
 800cb0a:	4698      	mov	r8, r3
 800cb0c:	f000 8156 	beq.w	800cdbc <forward_dense+0x3a8>
 800cb10:	2c00      	cmp	r4, #0
 800cb12:	f000 8185 	beq.w	800ce20 <forward_dense+0x40c>
 800cb16:	f8d4 c000 	ldr.w	ip, [r4]
 800cb1a:	9803      	ldr	r0, [sp, #12]
 800cb1c:	9600      	str	r6, [sp, #0]
 800cb1e:	463b      	mov	r3, r7
 800cb20:	4629      	mov	r1, r5
 800cb22:	4652      	mov	r2, sl
 800cb24:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800cb28:	f7fe fc7e 	bl	800b428 <ai_dict8_dot_array_f32>
 800cb2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb2e:	f84b 3b04 	str.w	r3, [fp], #4
 800cb32:	45c3      	cmp	fp, r8
 800cb34:	f104 0404 	add.w	r4, r4, #4
 800cb38:	444d      	add	r5, r9
 800cb3a:	d3e9      	bcc.n	800cb10 <forward_dense+0xfc>
 800cb3c:	4643      	mov	r3, r8
 800cb3e:	46b0      	mov	r8, r6
 800cb40:	461e      	mov	r6, r3
 800cb42:	9a04      	ldr	r2, [sp, #16]
 800cb44:	43d3      	mvns	r3, r2
 800cb46:	4433      	add	r3, r6
 800cb48:	f023 0303 	bic.w	r3, r3, #3
 800cb4c:	3304      	adds	r3, #4
 800cb4e:	18d3      	adds	r3, r2, r3
 800cb50:	9304      	str	r3, [sp, #16]
 800cb52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb54:	9b05      	ldr	r3, [sp, #20]
 800cb56:	4417      	add	r7, r2
 800cb58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb5a:	4416      	add	r6, r2
 800cb5c:	9a07      	ldr	r2, [sp, #28]
 800cb5e:	3301      	adds	r3, #1
 800cb60:	4293      	cmp	r3, r2
 800cb62:	9305      	str	r3, [sp, #20]
 800cb64:	f000 8171 	beq.w	800ce4a <forward_dense+0x436>
 800cb68:	9b08      	ldr	r3, [sp, #32]
 800cb6a:	699b      	ldr	r3, [r3, #24]
 800cb6c:	689d      	ldr	r5, [r3, #8]
 800cb6e:	9b06      	ldr	r3, [sp, #24]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d1bb      	bne.n	800caec <forward_dense+0xd8>
 800cb74:	461c      	mov	r4, r3
 800cb76:	9b04      	ldr	r3, [sp, #16]
 800cb78:	f1ba 0f00 	cmp.w	sl, #0
 800cb7c:	d1bc      	bne.n	800caf8 <forward_dense+0xe4>
 800cb7e:	42b3      	cmp	r3, r6
 800cb80:	d2e7      	bcs.n	800cb52 <forward_dense+0x13e>
 800cb82:	4618      	mov	r0, r3
 800cb84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb86:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800cb8a:	eb07 0c03 	add.w	ip, r7, r3
 800cb8e:	469e      	mov	lr, r3
 800cb90:	2c00      	cmp	r4, #0
 800cb92:	f000 80ff 	beq.w	800cd94 <forward_dense+0x380>
 800cb96:	f1b8 0f0f 	cmp.w	r8, #15
 800cb9a:	edd4 fa00 	vldr	s31, [r4]
 800cb9e:	eddf 6a9f 	vldr	s13, [pc, #636]	; 800ce1c <forward_dense+0x408>
 800cba2:	f104 0404 	add.w	r4, r4, #4
 800cba6:	f240 80fd 	bls.w	800cda4 <forward_dense+0x390>
 800cbaa:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800cbae:	f105 0340 	add.w	r3, r5, #64	; 0x40
 800cbb2:	4641      	mov	r1, r8
 800cbb4:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 800cbb8:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 800cbbc:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 800cbc0:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 800cbc4:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 800cbc8:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 800cbcc:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 800cbd0:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 800cbd4:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 800cbd8:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 800cbdc:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 800cbe0:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 800cbe4:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 800cbe8:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 800cbec:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 800cbf0:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 800cbf4:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 800cbf8:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 800cbfc:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 800cc00:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 800cc04:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 800cc08:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 800cc0c:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 800cc10:	ed13 4a04 	vldr	s8, [r3, #-16]
 800cc14:	ed52 4a04 	vldr	s9, [r2, #-16]
 800cc18:	ed12 5a03 	vldr	s10, [r2, #-12]
 800cc1c:	ed53 5a03 	vldr	s11, [r3, #-12]
 800cc20:	ed12 6a02 	vldr	s12, [r2, #-8]
 800cc24:	ed13 7a02 	vldr	s14, [r3, #-8]
 800cc28:	ee67 7a8f 	vmul.f32	s15, s15, s30
 800cc2c:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 800cc30:	eeee 7a8e 	vfma.f32	s15, s29, s28
 800cc34:	3910      	subs	r1, #16
 800cc36:	290f      	cmp	r1, #15
 800cc38:	ed53 ea01 	vldr	s29, [r3, #-4]
 800cc3c:	ed12 ea01 	vldr	s28, [r2, #-4]
 800cc40:	eeed 7a8f 	vfma.f32	s15, s27, s30
 800cc44:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800cc48:	f102 0240 	add.w	r2, r2, #64	; 0x40
 800cc4c:	eeed 7a2c 	vfma.f32	s15, s26, s25
 800cc50:	eeec 7a2b 	vfma.f32	s15, s24, s23
 800cc54:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 800cc58:	eee9 7a89 	vfma.f32	s15, s19, s18
 800cc5c:	eee8 7a88 	vfma.f32	s15, s17, s16
 800cc60:	eee0 7a20 	vfma.f32	s15, s0, s1
 800cc64:	eee1 7a21 	vfma.f32	s15, s2, s3
 800cc68:	eee2 7a22 	vfma.f32	s15, s4, s5
 800cc6c:	eee3 7a23 	vfma.f32	s15, s6, s7
 800cc70:	eee4 7a24 	vfma.f32	s15, s8, s9
 800cc74:	eee5 7a25 	vfma.f32	s15, s10, s11
 800cc78:	eee6 7a07 	vfma.f32	s15, s12, s14
 800cc7c:	eeee 7a8e 	vfma.f32	s15, s29, s28
 800cc80:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800cc84:	d896      	bhi.n	800cbb4 <forward_dense+0x1a0>
 800cc86:	eb05 010e 	add.w	r1, r5, lr
 800cc8a:	465b      	mov	r3, fp
 800cc8c:	4662      	mov	r2, ip
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d075      	beq.n	800cd7e <forward_dense+0x36a>
 800cc92:	ed91 7a00 	vldr	s14, [r1]
 800cc96:	edd2 7a00 	vldr	s15, [r2]
 800cc9a:	2b01      	cmp	r3, #1
 800cc9c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800cca0:	d06d      	beq.n	800cd7e <forward_dense+0x36a>
 800cca2:	ed91 7a01 	vldr	s14, [r1, #4]
 800cca6:	edd2 7a01 	vldr	s15, [r2, #4]
 800ccaa:	2b02      	cmp	r3, #2
 800ccac:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ccb0:	d065      	beq.n	800cd7e <forward_dense+0x36a>
 800ccb2:	ed91 7a02 	vldr	s14, [r1, #8]
 800ccb6:	edd2 7a02 	vldr	s15, [r2, #8]
 800ccba:	2b03      	cmp	r3, #3
 800ccbc:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ccc0:	d05d      	beq.n	800cd7e <forward_dense+0x36a>
 800ccc2:	ed91 7a03 	vldr	s14, [r1, #12]
 800ccc6:	edd2 7a03 	vldr	s15, [r2, #12]
 800ccca:	2b04      	cmp	r3, #4
 800cccc:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ccd0:	d055      	beq.n	800cd7e <forward_dense+0x36a>
 800ccd2:	ed91 7a04 	vldr	s14, [r1, #16]
 800ccd6:	edd2 7a04 	vldr	s15, [r2, #16]
 800ccda:	2b05      	cmp	r3, #5
 800ccdc:	eee7 6a27 	vfma.f32	s13, s14, s15
 800cce0:	d04d      	beq.n	800cd7e <forward_dense+0x36a>
 800cce2:	ed91 7a05 	vldr	s14, [r1, #20]
 800cce6:	edd2 7a05 	vldr	s15, [r2, #20]
 800ccea:	2b06      	cmp	r3, #6
 800ccec:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ccf0:	d045      	beq.n	800cd7e <forward_dense+0x36a>
 800ccf2:	ed91 7a06 	vldr	s14, [r1, #24]
 800ccf6:	edd2 7a06 	vldr	s15, [r2, #24]
 800ccfa:	2b07      	cmp	r3, #7
 800ccfc:	eee7 6a27 	vfma.f32	s13, s14, s15
 800cd00:	d03d      	beq.n	800cd7e <forward_dense+0x36a>
 800cd02:	ed91 7a07 	vldr	s14, [r1, #28]
 800cd06:	edd2 7a07 	vldr	s15, [r2, #28]
 800cd0a:	2b08      	cmp	r3, #8
 800cd0c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800cd10:	d035      	beq.n	800cd7e <forward_dense+0x36a>
 800cd12:	ed91 7a08 	vldr	s14, [r1, #32]
 800cd16:	edd2 7a08 	vldr	s15, [r2, #32]
 800cd1a:	2b09      	cmp	r3, #9
 800cd1c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800cd20:	d02d      	beq.n	800cd7e <forward_dense+0x36a>
 800cd22:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 800cd26:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 800cd2a:	2b0a      	cmp	r3, #10
 800cd2c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800cd30:	d025      	beq.n	800cd7e <forward_dense+0x36a>
 800cd32:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 800cd36:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 800cd3a:	2b0b      	cmp	r3, #11
 800cd3c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800cd40:	d01d      	beq.n	800cd7e <forward_dense+0x36a>
 800cd42:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 800cd46:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 800cd4a:	2b0c      	cmp	r3, #12
 800cd4c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800cd50:	d015      	beq.n	800cd7e <forward_dense+0x36a>
 800cd52:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 800cd56:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 800cd5a:	2b0d      	cmp	r3, #13
 800cd5c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800cd60:	d00d      	beq.n	800cd7e <forward_dense+0x36a>
 800cd62:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 800cd66:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800cd6a:	2b0e      	cmp	r3, #14
 800cd6c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800cd70:	d005      	beq.n	800cd7e <forward_dense+0x36a>
 800cd72:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 800cd76:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 800cd7a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800cd7e:	444d      	add	r5, r9
 800cd80:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 800cd84:	ece0 6a01 	vstmia	r0!, {s13}
 800cd88:	42b0      	cmp	r0, r6
 800cd8a:	f4bf aeda 	bcs.w	800cb42 <forward_dense+0x12e>
 800cd8e:	2c00      	cmp	r4, #0
 800cd90:	f47f af01 	bne.w	800cb96 <forward_dense+0x182>
 800cd94:	f1b8 0f0f 	cmp.w	r8, #15
 800cd98:	eef0 fa6a 	vmov.f32	s31, s21
 800cd9c:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800ce1c <forward_dense+0x408>
 800cda0:	f63f af03 	bhi.w	800cbaa <forward_dense+0x196>
 800cda4:	4643      	mov	r3, r8
 800cda6:	4629      	mov	r1, r5
 800cda8:	463a      	mov	r2, r7
 800cdaa:	e770      	b.n	800cc8e <forward_dense+0x27a>
 800cdac:	2300      	movs	r3, #0
 800cdae:	685b      	ldr	r3, [r3, #4]
 800cdb0:	deff      	udf	#255	; 0xff
 800cdb2:	685b      	ldr	r3, [r3, #4]
 800cdb4:	deff      	udf	#255	; 0xff
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	685b      	ldr	r3, [r3, #4]
 800cdba:	deff      	udf	#255	; 0xff
 800cdbc:	b1ac      	cbz	r4, 800cdea <forward_dense+0x3d6>
 800cdbe:	f8d4 c000 	ldr.w	ip, [r4]
 800cdc2:	9803      	ldr	r0, [sp, #12]
 800cdc4:	9600      	str	r6, [sp, #0]
 800cdc6:	463b      	mov	r3, r7
 800cdc8:	4629      	mov	r1, r5
 800cdca:	4652      	mov	r2, sl
 800cdcc:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800cdd0:	f7fe fbf8 	bl	800b5c4 <ai_dict4_dot_array_f32>
 800cdd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cdd6:	f84b 3b04 	str.w	r3, [fp], #4
 800cdda:	45c3      	cmp	fp, r8
 800cddc:	f104 0404 	add.w	r4, r4, #4
 800cde0:	444d      	add	r5, r9
 800cde2:	f4bf aeab 	bcs.w	800cb3c <forward_dense+0x128>
 800cde6:	2c00      	cmp	r4, #0
 800cde8:	d1e9      	bne.n	800cdbe <forward_dense+0x3aa>
 800cdea:	4634      	mov	r4, r6
 800cdec:	4646      	mov	r6, r8
 800cdee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800cdf2:	9400      	str	r4, [sp, #0]
 800cdf4:	463b      	mov	r3, r7
 800cdf6:	4629      	mov	r1, r5
 800cdf8:	4652      	mov	r2, sl
 800cdfa:	4640      	mov	r0, r8
 800cdfc:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 800ce00:	f7fe fbe0 	bl	800b5c4 <ai_dict4_dot_array_f32>
 800ce04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ce06:	f84b 3b04 	str.w	r3, [fp], #4
 800ce0a:	45b3      	cmp	fp, r6
 800ce0c:	444d      	add	r5, r9
 800ce0e:	d3f0      	bcc.n	800cdf2 <forward_dense+0x3de>
 800ce10:	46a0      	mov	r8, r4
 800ce12:	e696      	b.n	800cb42 <forward_dense+0x12e>
 800ce14:	9406      	str	r4, [sp, #24]
 800ce16:	e627      	b.n	800ca68 <forward_dense+0x54>
 800ce18:	9306      	str	r3, [sp, #24]
 800ce1a:	e625      	b.n	800ca68 <forward_dense+0x54>
 800ce1c:	00000000 	.word	0x00000000
 800ce20:	4634      	mov	r4, r6
 800ce22:	4646      	mov	r6, r8
 800ce24:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ce28:	9400      	str	r4, [sp, #0]
 800ce2a:	463b      	mov	r3, r7
 800ce2c:	4629      	mov	r1, r5
 800ce2e:	4652      	mov	r2, sl
 800ce30:	4640      	mov	r0, r8
 800ce32:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 800ce36:	f7fe faf7 	bl	800b428 <ai_dict8_dot_array_f32>
 800ce3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ce3c:	f84b 3b04 	str.w	r3, [fp], #4
 800ce40:	45b3      	cmp	fp, r6
 800ce42:	444d      	add	r5, r9
 800ce44:	d3f0      	bcc.n	800ce28 <forward_dense+0x414>
 800ce46:	46a0      	mov	r8, r4
 800ce48:	e67b      	b.n	800cb42 <forward_dense+0x12e>
 800ce4a:	b011      	add	sp, #68	; 0x44
 800ce4c:	ecbd 8b10 	vpop	{d8-d15}
 800ce50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce54:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 800ce58:	e624      	b.n	800caa4 <forward_dense+0x90>
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	9306      	str	r3, [sp, #24]
 800ce5e:	e603      	b.n	800ca68 <forward_dense+0x54>
 800ce60:	9308      	str	r3, [sp, #32]
 800ce62:	e5f4      	b.n	800ca4e <forward_dense+0x3a>

0800ce64 <nl_func_relu_array_f32>:
 800ce64:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800ce68:	3a01      	subs	r2, #1
 800ce6a:	688b      	ldr	r3, [r1, #8]
 800ce6c:	6880      	ldr	r0, [r0, #8]
 800ce6e:	0092      	lsls	r2, r2, #2
 800ce70:	189b      	adds	r3, r3, r2
 800ce72:	d21a      	bcs.n	800ceaa <nl_func_relu_array_f32+0x46>
 800ce74:	b410      	push	{r4}
 800ce76:	3204      	adds	r2, #4
 800ce78:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800ceac <nl_func_relu_array_f32+0x48>
 800ce7c:	4410      	add	r0, r2
 800ce7e:	3304      	adds	r3, #4
 800ce80:	ed53 7a01 	vldr	s15, [r3, #-4]
 800ce84:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ce88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce8c:	bfb8      	it	lt
 800ce8e:	eef0 7a47 	vmovlt.f32	s15, s14
 800ce92:	ed60 7a01 	vstmdb	r0!, {s15}
 800ce96:	688c      	ldr	r4, [r1, #8]
 800ce98:	f1a3 0208 	sub.w	r2, r3, #8
 800ce9c:	4294      	cmp	r4, r2
 800ce9e:	f1a3 0304 	sub.w	r3, r3, #4
 800cea2:	d9ed      	bls.n	800ce80 <nl_func_relu_array_f32+0x1c>
 800cea4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cea8:	4770      	bx	lr
 800ceaa:	4770      	bx	lr
 800ceac:	00000000 	.word	0x00000000

0800ceb0 <forward_sm>:
 800ceb0:	6942      	ldr	r2, [r0, #20]
 800ceb2:	8813      	ldrh	r3, [r2, #0]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	f000 808a 	beq.w	800cfce <forward_sm+0x11e>
 800ceba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cebe:	ed2d 8b04 	vpush	{d8-d9}
 800cec2:	6852      	ldr	r2, [r2, #4]
 800cec4:	6855      	ldr	r5, [r2, #4]
 800cec6:	b085      	sub	sp, #20
 800cec8:	b105      	cbz	r5, 800cecc <forward_sm+0x1c>
 800ceca:	682d      	ldr	r5, [r5, #0]
 800cecc:	2b01      	cmp	r3, #1
 800cece:	d976      	bls.n	800cfbe <forward_sm+0x10e>
 800ced0:	6913      	ldr	r3, [r2, #16]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d071      	beq.n	800cfba <forward_sm+0x10a>
 800ced6:	681f      	ldr	r7, [r3, #0]
 800ced8:	68ec      	ldr	r4, [r5, #12]
 800ceda:	68fa      	ldr	r2, [r7, #12]
 800cedc:	68ab      	ldr	r3, [r5, #8]
 800cede:	6850      	ldr	r0, [r2, #4]
 800cee0:	6862      	ldr	r2, [r4, #4]
 800cee2:	9201      	str	r2, [sp, #4]
 800cee4:	0a1b      	lsrs	r3, r3, #8
 800cee6:	d074      	beq.n	800cfd2 <forward_sm+0x122>
 800cee8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ceec:	2201      	movs	r2, #1
 800ceee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cef2:	429c      	cmp	r4, r3
 800cef4:	fb01 f202 	mul.w	r2, r1, r2
 800cef8:	d1f9      	bne.n	800ceee <forward_sm+0x3e>
 800cefa:	69ae      	ldr	r6, [r5, #24]
 800cefc:	f8d7 9018 	ldr.w	r9, [r7, #24]
 800cf00:	9f01      	ldr	r7, [sp, #4]
 800cf02:	68b5      	ldr	r5, [r6, #8]
 800cf04:	68f3      	ldr	r3, [r6, #12]
 800cf06:	f8d9 4008 	ldr.w	r4, [r9, #8]
 800cf0a:	1bd1      	subs	r1, r2, r7
 800cf0c:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 800cf10:	1a12      	subs	r2, r2, r0
 800cf12:	429d      	cmp	r5, r3
 800cf14:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800cf18:	d345      	bcc.n	800cfa6 <forward_sm+0xf6>
 800cf1a:	00bb      	lsls	r3, r7, #2
 800cf1c:	ea4f 0880 	mov.w	r8, r0, lsl #2
 800cf20:	9300      	str	r3, [sp, #0]
 800cf22:	f1c8 0200 	rsb	r2, r8, #0
 800cf26:	425b      	negs	r3, r3
 800cf28:	9203      	str	r2, [sp, #12]
 800cf2a:	9302      	str	r3, [sp, #8]
 800cf2c:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800cf30:	60b5      	str	r5, [r6, #8]
 800cf32:	9b01      	ldr	r3, [sp, #4]
 800cf34:	f8c9 4008 	str.w	r4, [r9, #8]
 800cf38:	68b2      	ldr	r2, [r6, #8]
 800cf3a:	2b01      	cmp	r3, #1
 800cf3c:	ed92 8a00 	vldr	s16, [r2]
 800cf40:	d940      	bls.n	800cfc4 <forward_sm+0x114>
 800cf42:	9900      	ldr	r1, [sp, #0]
 800cf44:	1d13      	adds	r3, r2, #4
 800cf46:	1857      	adds	r7, r2, r1
 800cf48:	ecf3 7a01 	vldmia	r3!, {s15}
 800cf4c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800cf50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf54:	bfb8      	it	lt
 800cf56:	eeb0 8a67 	vmovlt.f32	s16, s15
 800cf5a:	429f      	cmp	r7, r3
 800cf5c:	d1f4      	bne.n	800cf48 <forward_sm+0x98>
 800cf5e:	eddf 8a1e 	vldr	s17, [pc, #120]	; 800cfd8 <forward_sm+0x128>
 800cf62:	4692      	mov	sl, r2
 800cf64:	46a3      	mov	fp, r4
 800cf66:	46a0      	mov	r8, r4
 800cf68:	ecba 0a01 	vldmia	sl!, {s0}
 800cf6c:	ee30 0a48 	vsub.f32	s0, s0, s16
 800cf70:	f002 fe22 	bl	800fbb8 <expf>
 800cf74:	4557      	cmp	r7, sl
 800cf76:	eca8 0a01 	vstmia	r8!, {s0}
 800cf7a:	ee78 8a80 	vadd.f32	s17, s17, s0
 800cf7e:	d1f3      	bne.n	800cf68 <forward_sm+0xb8>
 800cf80:	ee89 7a28 	vdiv.f32	s14, s18, s17
 800cf84:	9b00      	ldr	r3, [sp, #0]
 800cf86:	18e2      	adds	r2, r4, r3
 800cf88:	eddb 7a00 	vldr	s15, [fp]
 800cf8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf90:	eceb 7a01 	vstmia	fp!, {s15}
 800cf94:	455a      	cmp	r2, fp
 800cf96:	d1f7      	bne.n	800cf88 <forward_sm+0xd8>
 800cf98:	9a02      	ldr	r2, [sp, #8]
 800cf9a:	68f3      	ldr	r3, [r6, #12]
 800cf9c:	4415      	add	r5, r2
 800cf9e:	9a03      	ldr	r2, [sp, #12]
 800cfa0:	429d      	cmp	r5, r3
 800cfa2:	4414      	add	r4, r2
 800cfa4:	d2c4      	bcs.n	800cf30 <forward_sm+0x80>
 800cfa6:	60b3      	str	r3, [r6, #8]
 800cfa8:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800cfac:	f8c9 3008 	str.w	r3, [r9, #8]
 800cfb0:	b005      	add	sp, #20
 800cfb2:	ecbd 8b04 	vpop	{d8-d9}
 800cfb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfba:	68db      	ldr	r3, [r3, #12]
 800cfbc:	deff      	udf	#255	; 0xff
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	685b      	ldr	r3, [r3, #4]
 800cfc2:	deff      	udf	#255	; 0xff
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d0e7      	beq.n	800cf98 <forward_sm+0xe8>
 800cfc8:	9b00      	ldr	r3, [sp, #0]
 800cfca:	18d7      	adds	r7, r2, r3
 800cfcc:	e7c7      	b.n	800cf5e <forward_sm+0xae>
 800cfce:	685b      	ldr	r3, [r3, #4]
 800cfd0:	deff      	udf	#255	; 0xff
 800cfd2:	2201      	movs	r2, #1
 800cfd4:	e791      	b.n	800cefa <forward_sm+0x4a>
 800cfd6:	bf00      	nop
 800cfd8:	00000000 	.word	0x00000000

0800cfdc <pool_func_mp_array_f32>:
 800cfdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfe0:	b093      	sub	sp, #76	; 0x4c
 800cfe2:	f8d0 b008 	ldr.w	fp, [r0, #8]
 800cfe6:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800cfe8:	f8bd 407c 	ldrh.w	r4, [sp, #124]	; 0x7c
 800cfec:	68a8      	ldr	r0, [r5, #8]
 800cfee:	f8bd 5080 	ldrh.w	r5, [sp, #128]	; 0x80
 800cff2:	9508      	str	r5, [sp, #32]
 800cff4:	f8bd 5084 	ldrh.w	r5, [sp, #132]	; 0x84
 800cff8:	9002      	str	r0, [sp, #8]
 800cffa:	950d      	str	r5, [sp, #52]	; 0x34
 800cffc:	f8bd 0070 	ldrh.w	r0, [sp, #112]	; 0x70
 800d000:	f8bd 5088 	ldrh.w	r5, [sp, #136]	; 0x88
 800d004:	9004      	str	r0, [sp, #16]
 800d006:	9506      	str	r5, [sp, #24]
 800d008:	f8bd 0074 	ldrh.w	r0, [sp, #116]	; 0x74
 800d00c:	f8bd 508c 	ldrh.w	r5, [sp, #140]	; 0x8c
 800d010:	9009      	str	r0, [sp, #36]	; 0x24
 800d012:	950b      	str	r5, [sp, #44]	; 0x2c
 800d014:	f8bd 0078 	ldrh.w	r0, [sp, #120]	; 0x78
 800d018:	9200      	str	r2, [sp, #0]
 800d01a:	468a      	mov	sl, r1
 800d01c:	4699      	mov	r9, r3
 800d01e:	b95c      	cbnz	r4, 800d038 <pool_func_mp_array_f32+0x5c>
 800d020:	b950      	cbnz	r0, 800d038 <pool_func_mp_array_f32+0x5c>
 800d022:	9b04      	ldr	r3, [sp, #16]
 800d024:	1a5a      	subs	r2, r3, r1
 800d026:	9b06      	ldr	r3, [sp, #24]
 800d028:	9908      	ldr	r1, [sp, #32]
 800d02a:	3a01      	subs	r2, #1
 800d02c:	3b01      	subs	r3, #1
 800d02e:	fb13 2301 	smlabb	r3, r3, r1, r2
 800d032:	041a      	lsls	r2, r3, #16
 800d034:	f100 809b 	bmi.w	800d16e <pool_func_mp_array_f32+0x192>
 800d038:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	f000 808b 	beq.w	800d156 <pool_func_mp_array_f32+0x17a>
 800d040:	9b06      	ldr	r3, [sp, #24]
 800d042:	2b00      	cmp	r3, #0
 800d044:	f000 8087 	beq.w	800d156 <pool_func_mp_array_f32+0x17a>
 800d048:	f1b9 0f00 	cmp.w	r9, #0
 800d04c:	f000 8083 	beq.w	800d156 <pool_func_mp_array_f32+0x17a>
 800d050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d052:	1b1c      	subs	r4, r3, r4
 800d054:	9b04      	ldr	r3, [sp, #16]
 800d056:	1a1b      	subs	r3, r3, r0
 800d058:	b29b      	uxth	r3, r3
 800d05a:	4240      	negs	r0, r0
 800d05c:	2200      	movs	r2, #0
 800d05e:	b2a1      	uxth	r1, r4
 800d060:	930f      	str	r3, [sp, #60]	; 0x3c
 800d062:	b283      	uxth	r3, r0
 800d064:	920e      	str	r2, [sp, #56]	; 0x38
 800d066:	910c      	str	r1, [sp, #48]	; 0x30
 800d068:	9310      	str	r3, [sp, #64]	; 0x40
 800d06a:	9c06      	ldr	r4, [sp, #24]
 800d06c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d06e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d070:	fb02 f204 	mul.w	r2, r2, r4
 800d074:	1acb      	subs	r3, r1, r3
 800d076:	920a      	str	r2, [sp, #40]	; 0x28
 800d078:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d07a:	9205      	str	r2, [sp, #20]
 800d07c:	2000      	movs	r0, #0
 800d07e:	b21b      	sxth	r3, r3
 800d080:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d082:	9303      	str	r3, [sp, #12]
 800d084:	9007      	str	r0, [sp, #28]
 800d086:	4603      	mov	r3, r0
 800d088:	fa0f f881 	sxth.w	r8, r1
 800d08c:	9204      	str	r2, [sp, #16]
 800d08e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d090:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 800d094:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 800d098:	4413      	add	r3, r2
 800d09a:	f04f 0e00 	mov.w	lr, #0
 800d09e:	fb09 f303 	mul.w	r3, r9, r3
 800d0a2:	9301      	str	r3, [sp, #4]
 800d0a4:	ea04 77e4 	and.w	r7, r4, r4, asr #31
 800d0a8:	4675      	mov	r5, lr
 800d0aa:	9903      	ldr	r1, [sp, #12]
 800d0ac:	eddf 7a78 	vldr	s15, [pc, #480]	; 800d290 <pool_func_mp_array_f32+0x2b4>
 800d0b0:	4588      	cmp	r8, r1
 800d0b2:	dd24      	ble.n	800d0fe <pool_func_mp_array_f32+0x122>
 800d0b4:	4564      	cmp	r4, ip
 800d0b6:	dd1e      	ble.n	800d0f6 <pool_func_mp_array_f32+0x11a>
 800d0b8:	2900      	cmp	r1, #0
 800d0ba:	fb0a f601 	mul.w	r6, sl, r1
 800d0be:	db1a      	blt.n	800d0f6 <pool_func_mp_array_f32+0x11a>
 800d0c0:	9b00      	ldr	r3, [sp, #0]
 800d0c2:	4299      	cmp	r1, r3
 800d0c4:	da17      	bge.n	800d0f6 <pool_func_mp_array_f32+0x11a>
 800d0c6:	f1bc 0f00 	cmp.w	ip, #0
 800d0ca:	4663      	mov	r3, ip
 800d0cc:	db46      	blt.n	800d15c <pool_func_mp_array_f32+0x180>
 800d0ce:	18f2      	adds	r2, r6, r3
 800d0d0:	fb09 5202 	mla	r2, r9, r2, r5
 800d0d4:	1c58      	adds	r0, r3, #1
 800d0d6:	459a      	cmp	sl, r3
 800d0d8:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 800d0dc:	b203      	sxth	r3, r0
 800d0de:	dd08      	ble.n	800d0f2 <pool_func_mp_array_f32+0x116>
 800d0e0:	ed92 7a00 	vldr	s14, [r2]
 800d0e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d0e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0ec:	bfb8      	it	lt
 800d0ee:	eef0 7a47 	vmovlt.f32	s15, s14
 800d0f2:	429c      	cmp	r4, r3
 800d0f4:	dceb      	bgt.n	800d0ce <pool_func_mp_array_f32+0xf2>
 800d0f6:	3101      	adds	r1, #1
 800d0f8:	b209      	sxth	r1, r1
 800d0fa:	4588      	cmp	r8, r1
 800d0fc:	dcda      	bgt.n	800d0b4 <pool_func_mp_array_f32+0xd8>
 800d0fe:	9b01      	ldr	r3, [sp, #4]
 800d100:	f10e 0e01 	add.w	lr, lr, #1
 800d104:	441d      	add	r5, r3
 800d106:	9b02      	ldr	r3, [sp, #8]
 800d108:	fa0f fe8e 	sxth.w	lr, lr
 800d10c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800d110:	45ce      	cmp	lr, r9
 800d112:	edc5 7a00 	vstr	s15, [r5]
 800d116:	4675      	mov	r5, lr
 800d118:	dbc7      	blt.n	800d0aa <pool_func_mp_array_f32+0xce>
 800d11a:	9b07      	ldr	r3, [sp, #28]
 800d11c:	9808      	ldr	r0, [sp, #32]
 800d11e:	3301      	adds	r3, #1
 800d120:	b219      	sxth	r1, r3
 800d122:	9b05      	ldr	r3, [sp, #20]
 800d124:	9107      	str	r1, [sp, #28]
 800d126:	461a      	mov	r2, r3
 800d128:	4402      	add	r2, r0
 800d12a:	9b04      	ldr	r3, [sp, #16]
 800d12c:	b292      	uxth	r2, r2
 800d12e:	9205      	str	r2, [sp, #20]
 800d130:	9a06      	ldr	r2, [sp, #24]
 800d132:	4403      	add	r3, r0
 800d134:	b29b      	uxth	r3, r3
 800d136:	428a      	cmp	r2, r1
 800d138:	9304      	str	r3, [sp, #16]
 800d13a:	460b      	mov	r3, r1
 800d13c:	dca7      	bgt.n	800d08e <pool_func_mp_array_f32+0xb2>
 800d13e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d140:	3301      	adds	r3, #1
 800d142:	b21a      	sxth	r2, r3
 800d144:	e9dd 310c 	ldrd	r3, r1, [sp, #48]	; 0x30
 800d148:	440b      	add	r3, r1
 800d14a:	b29b      	uxth	r3, r3
 800d14c:	930c      	str	r3, [sp, #48]	; 0x30
 800d14e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d150:	920e      	str	r2, [sp, #56]	; 0x38
 800d152:	4293      	cmp	r3, r2
 800d154:	dc89      	bgt.n	800d06a <pool_func_mp_array_f32+0x8e>
 800d156:	b013      	add	sp, #76	; 0x4c
 800d158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d15c:	3301      	adds	r3, #1
 800d15e:	b21b      	sxth	r3, r3
 800d160:	42bb      	cmp	r3, r7
 800d162:	dac6      	bge.n	800d0f2 <pool_func_mp_array_f32+0x116>
 800d164:	3301      	adds	r3, #1
 800d166:	b21b      	sxth	r3, r3
 800d168:	42bb      	cmp	r3, r7
 800d16a:	dbf7      	blt.n	800d15c <pool_func_mp_array_f32+0x180>
 800d16c:	e7c1      	b.n	800d0f2 <pool_func_mp_array_f32+0x116>
 800d16e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d170:	9a00      	ldr	r2, [sp, #0]
 800d172:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d174:	1a9a      	subs	r2, r3, r2
 800d176:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d178:	3a01      	subs	r2, #1
 800d17a:	3b01      	subs	r3, #1
 800d17c:	fb13 2301 	smlabb	r3, r3, r1, r2
 800d180:	041b      	lsls	r3, r3, #16
 800d182:	f57f af59 	bpl.w	800d038 <pool_func_mp_array_f32+0x5c>
 800d186:	fb0a f309 	mul.w	r3, sl, r9
 800d18a:	009b      	lsls	r3, r3, #2
 800d18c:	e9cd ba0f 	strd	fp, sl, [sp, #60]	; 0x3c
 800d190:	930e      	str	r3, [sp, #56]	; 0x38
 800d192:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d194:	9001      	str	r0, [sp, #4]
 800d196:	ea4f 0c89 	mov.w	ip, r9, lsl #2
 800d19a:	9300      	str	r3, [sp, #0]
 800d19c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800d1a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d1a2:	429a      	cmp	r2, r3
 800d1a4:	ddd7      	ble.n	800d156 <pool_func_mp_array_f32+0x17a>
 800d1a6:	9a00      	ldr	r2, [sp, #0]
 800d1a8:	9906      	ldr	r1, [sp, #24]
 800d1aa:	fa0f f882 	sxth.w	r8, r2
 800d1ae:	2900      	cmp	r1, #0
 800d1b0:	d062      	beq.n	800d278 <pool_func_mp_array_f32+0x29c>
 800d1b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d1b4:	fb01 f303 	mul.w	r3, r1, r3
 800d1b8:	1a12      	subs	r2, r2, r0
 800d1ba:	9305      	str	r3, [sp, #20]
 800d1bc:	b213      	sxth	r3, r2
 800d1be:	9307      	str	r3, [sp, #28]
 800d1c0:	f1b9 0f00 	cmp.w	r9, #0
 800d1c4:	d058      	beq.n	800d278 <pool_func_mp_array_f32+0x29c>
 800d1c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d1c8:	fb02 f303 	mul.w	r3, r2, r3
 800d1cc:	2600      	movs	r6, #0
 800d1ce:	930c      	str	r3, [sp, #48]	; 0x30
 800d1d0:	9b04      	ldr	r3, [sp, #16]
 800d1d2:	9303      	str	r3, [sp, #12]
 800d1d4:	4637      	mov	r7, r6
 800d1d6:	46b2      	mov	sl, r6
 800d1d8:	9b05      	ldr	r3, [sp, #20]
 800d1da:	9611      	str	r6, [sp, #68]	; 0x44
 800d1dc:	eb0a 0b03 	add.w	fp, sl, r3
 800d1e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d1e2:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 800d1e6:	b235      	sxth	r5, r6
 800d1e8:	18eb      	adds	r3, r5, r3
 800d1ea:	f04f 0a00 	mov.w	sl, #0
 800d1ee:	fb09 f303 	mul.w	r3, r9, r3
 800d1f2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800d1f4:	930a      	str	r3, [sp, #40]	; 0x28
 800d1f6:	fb09 fb0b 	mul.w	fp, r9, fp
 800d1fa:	46d6      	mov	lr, sl
 800d1fc:	9807      	ldr	r0, [sp, #28]
 800d1fe:	4580      	cmp	r8, r0
 800d200:	dd43      	ble.n	800d28a <pool_func_mp_array_f32+0x2ae>
 800d202:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d204:	eddf 7a22 	vldr	s15, [pc, #136]	; 800d290 <pool_func_mp_array_f32+0x2b4>
 800d208:	eb0e 0403 	add.w	r4, lr, r3
 800d20c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d20e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d212:	42a9      	cmp	r1, r5
 800d214:	dd0f      	ble.n	800d236 <pool_func_mp_array_f32+0x25a>
 800d216:	4622      	mov	r2, r4
 800d218:	462b      	mov	r3, r5
 800d21a:	ed92 7a00 	vldr	s14, [r2]
 800d21e:	3301      	adds	r3, #1
 800d220:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d228:	b21b      	sxth	r3, r3
 800d22a:	bfb8      	it	lt
 800d22c:	eef0 7a47 	vmovlt.f32	s15, s14
 800d230:	4299      	cmp	r1, r3
 800d232:	4462      	add	r2, ip
 800d234:	d1f1      	bne.n	800d21a <pool_func_mp_array_f32+0x23e>
 800d236:	3001      	adds	r0, #1
 800d238:	b200      	sxth	r0, r0
 800d23a:	4580      	cmp	r8, r0
 800d23c:	4434      	add	r4, r6
 800d23e:	d1e8      	bne.n	800d212 <pool_func_mp_array_f32+0x236>
 800d240:	f10a 0a01 	add.w	sl, sl, #1
 800d244:	9a02      	ldr	r2, [sp, #8]
 800d246:	eb0b 030e 	add.w	r3, fp, lr
 800d24a:	fa0f fa8a 	sxth.w	sl, sl
 800d24e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d252:	45ca      	cmp	sl, r9
 800d254:	edc3 7a00 	vstr	s15, [r3]
 800d258:	46d6      	mov	lr, sl
 800d25a:	dbcf      	blt.n	800d1fc <pool_func_mp_array_f32+0x220>
 800d25c:	9b03      	ldr	r3, [sp, #12]
 800d25e:	9a08      	ldr	r2, [sp, #32]
 800d260:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800d262:	4413      	add	r3, r2
 800d264:	b29b      	uxth	r3, r3
 800d266:	3701      	adds	r7, #1
 800d268:	9303      	str	r3, [sp, #12]
 800d26a:	9b06      	ldr	r3, [sp, #24]
 800d26c:	b23f      	sxth	r7, r7
 800d26e:	4416      	add	r6, r2
 800d270:	42bb      	cmp	r3, r7
 800d272:	b2b6      	uxth	r6, r6
 800d274:	46ba      	mov	sl, r7
 800d276:	dcaf      	bgt.n	800d1d8 <pool_func_mp_array_f32+0x1fc>
 800d278:	9b00      	ldr	r3, [sp, #0]
 800d27a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d27c:	4413      	add	r3, r2
 800d27e:	b29b      	uxth	r3, r3
 800d280:	9300      	str	r3, [sp, #0]
 800d282:	9b01      	ldr	r3, [sp, #4]
 800d284:	3301      	adds	r3, #1
 800d286:	9301      	str	r3, [sp, #4]
 800d288:	e788      	b.n	800d19c <pool_func_mp_array_f32+0x1c0>
 800d28a:	eddf 7a01 	vldr	s15, [pc, #4]	; 800d290 <pool_func_mp_array_f32+0x2b4>
 800d28e:	e7d7      	b.n	800d240 <pool_func_mp_array_f32+0x264>
 800d290:	cf000000 	.word	0xcf000000

0800d294 <ai_check_custom_types>:
 800d294:	4b13      	ldr	r3, [pc, #76]	; (800d2e4 <ai_check_custom_types+0x50>)
 800d296:	b082      	sub	sp, #8
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	9301      	str	r3, [sp, #4]
 800d29c:	b118      	cbz	r0, 800d2a6 <ai_check_custom_types+0x12>
 800d29e:	7803      	ldrb	r3, [r0, #0]
 800d2a0:	2b03      	cmp	r3, #3
 800d2a2:	d002      	beq.n	800d2aa <ai_check_custom_types+0x16>
 800d2a4:	2000      	movs	r0, #0
 800d2a6:	b002      	add	sp, #8
 800d2a8:	4770      	bx	lr
 800d2aa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d2ae:	4293      	cmp	r3, r2
 800d2b0:	d004      	beq.n	800d2bc <ai_check_custom_types+0x28>
 800d2b2:	2001      	movs	r0, #1
 800d2b4:	f080 0001 	eor.w	r0, r0, #1
 800d2b8:	b002      	add	sp, #8
 800d2ba:	4770      	bx	lr
 800d2bc:	7842      	ldrb	r2, [r0, #1]
 800d2be:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d2c2:	429a      	cmp	r2, r3
 800d2c4:	f100 0001 	add.w	r0, r0, #1
 800d2c8:	d1f3      	bne.n	800d2b2 <ai_check_custom_types+0x1e>
 800d2ca:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800d2ce:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d2d2:	429a      	cmp	r2, r3
 800d2d4:	d1ed      	bne.n	800d2b2 <ai_check_custom_types+0x1e>
 800d2d6:	7842      	ldrb	r2, [r0, #1]
 800d2d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d2dc:	429a      	cmp	r2, r3
 800d2de:	d1e8      	bne.n	800d2b2 <ai_check_custom_types+0x1e>
 800d2e0:	2000      	movs	r0, #0
 800d2e2:	e7e7      	b.n	800d2b4 <ai_check_custom_types+0x20>
 800d2e4:	0800ffc8 	.word	0x0800ffc8

0800d2e8 <ai_layers_forward_all>:
 800d2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2ea:	6d86      	ldr	r6, [r0, #88]	; 0x58
 800d2ec:	6d05      	ldr	r5, [r0, #80]	; 0x50
 800d2ee:	4604      	mov	r4, r0
 800d2f0:	b31e      	cbz	r6, 800d33a <ai_layers_forward_all+0x52>
 800d2f2:	b1cd      	cbz	r5, 800d328 <ai_layers_forward_all+0x40>
 800d2f4:	6545      	str	r5, [r0, #84]	; 0x54
 800d2f6:	4629      	mov	r1, r5
 800d2f8:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800d2fa:	2001      	movs	r0, #1
 800d2fc:	47b0      	blx	r6
 800d2fe:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800d300:	2700      	movs	r7, #0
 800d302:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800d304:	2002      	movs	r0, #2
 800d306:	47b0      	blx	r6
 800d308:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800d30a:	692b      	ldr	r3, [r5, #16]
 800d30c:	4628      	mov	r0, r5
 800d30e:	4798      	blx	r3
 800d310:	68eb      	ldr	r3, [r5, #12]
 800d312:	429d      	cmp	r5, r3
 800d314:	f04f 0003 	mov.w	r0, #3
 800d318:	4619      	mov	r1, r3
 800d31a:	d006      	beq.n	800d32a <ai_layers_forward_all+0x42>
 800d31c:	6563      	str	r3, [r4, #84]	; 0x54
 800d31e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800d320:	47b0      	blx	r6
 800d322:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800d324:	2900      	cmp	r1, #0
 800d326:	d1ec      	bne.n	800d302 <ai_layers_forward_all+0x1a>
 800d328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d32a:	2100      	movs	r1, #0
 800d32c:	6567      	str	r7, [r4, #84]	; 0x54
 800d32e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800d330:	47b0      	blx	r6
 800d332:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800d334:	2900      	cmp	r1, #0
 800d336:	d1e4      	bne.n	800d302 <ai_layers_forward_all+0x1a>
 800d338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d33a:	2d00      	cmp	r5, #0
 800d33c:	d0f4      	beq.n	800d328 <ai_layers_forward_all+0x40>
 800d33e:	6545      	str	r5, [r0, #84]	; 0x54
 800d340:	692b      	ldr	r3, [r5, #16]
 800d342:	4628      	mov	r0, r5
 800d344:	4798      	blx	r3
 800d346:	68eb      	ldr	r3, [r5, #12]
 800d348:	42ab      	cmp	r3, r5
 800d34a:	d004      	beq.n	800d356 <ai_layers_forward_all+0x6e>
 800d34c:	6563      	str	r3, [r4, #84]	; 0x54
 800d34e:	461d      	mov	r5, r3
 800d350:	2b00      	cmp	r3, #0
 800d352:	d1f5      	bne.n	800d340 <ai_layers_forward_all+0x58>
 800d354:	e7e8      	b.n	800d328 <ai_layers_forward_all+0x40>
 800d356:	2300      	movs	r3, #0
 800d358:	6563      	str	r3, [r4, #84]	; 0x54
 800d35a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d35c <ai_array_to_buffer_fmt>:
 800d35c:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800d360:	2b02      	cmp	r3, #2
 800d362:	d01f      	beq.n	800d3a4 <ai_array_to_buffer_fmt+0x48>
 800d364:	4a1c      	ldr	r2, [pc, #112]	; (800d3d8 <ai_array_to_buffer_fmt+0x7c>)
 800d366:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 800d36a:	4293      	cmp	r3, r2
 800d36c:	d00a      	beq.n	800d384 <ai_array_to_buffer_fmt+0x28>
 800d36e:	dc0d      	bgt.n	800d38c <ai_array_to_buffer_fmt+0x30>
 800d370:	4a1a      	ldr	r2, [pc, #104]	; (800d3dc <ai_array_to_buffer_fmt+0x80>)
 800d372:	4293      	cmp	r3, r2
 800d374:	d006      	beq.n	800d384 <ai_array_to_buffer_fmt+0x28>
 800d376:	dd1d      	ble.n	800d3b4 <ai_array_to_buffer_fmt+0x58>
 800d378:	4a19      	ldr	r2, [pc, #100]	; (800d3e0 <ai_array_to_buffer_fmt+0x84>)
 800d37a:	4293      	cmp	r3, r2
 800d37c:	d002      	beq.n	800d384 <ai_array_to_buffer_fmt+0x28>
 800d37e:	320f      	adds	r2, #15
 800d380:	4293      	cmp	r3, r2
 800d382:	d10d      	bne.n	800d3a0 <ai_array_to_buffer_fmt+0x44>
 800d384:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800d388:	4318      	orrs	r0, r3
 800d38a:	4770      	bx	lr
 800d38c:	4a15      	ldr	r2, [pc, #84]	; (800d3e4 <ai_array_to_buffer_fmt+0x88>)
 800d38e:	4293      	cmp	r3, r2
 800d390:	d0f8      	beq.n	800d384 <ai_array_to_buffer_fmt+0x28>
 800d392:	dd18      	ble.n	800d3c6 <ai_array_to_buffer_fmt+0x6a>
 800d394:	4a14      	ldr	r2, [pc, #80]	; (800d3e8 <ai_array_to_buffer_fmt+0x8c>)
 800d396:	4293      	cmp	r3, r2
 800d398:	d0f4      	beq.n	800d384 <ai_array_to_buffer_fmt+0x28>
 800d39a:	4a14      	ldr	r2, [pc, #80]	; (800d3ec <ai_array_to_buffer_fmt+0x90>)
 800d39c:	4293      	cmp	r3, r2
 800d39e:	d0f1      	beq.n	800d384 <ai_array_to_buffer_fmt+0x28>
 800d3a0:	2340      	movs	r3, #64	; 0x40
 800d3a2:	e7ef      	b.n	800d384 <ai_array_to_buffer_fmt+0x28>
 800d3a4:	4b12      	ldr	r3, [pc, #72]	; (800d3f0 <ai_array_to_buffer_fmt+0x94>)
 800d3a6:	4003      	ands	r3, r0
 800d3a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d3ac:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800d3b0:	4318      	orrs	r0, r3
 800d3b2:	4770      	bx	lr
 800d3b4:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 800d3b8:	4293      	cmp	r3, r2
 800d3ba:	d0e3      	beq.n	800d384 <ai_array_to_buffer_fmt+0x28>
 800d3bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d3c0:	4293      	cmp	r3, r2
 800d3c2:	d0df      	beq.n	800d384 <ai_array_to_buffer_fmt+0x28>
 800d3c4:	e7ec      	b.n	800d3a0 <ai_array_to_buffer_fmt+0x44>
 800d3c6:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800d3ca:	4293      	cmp	r3, r2
 800d3cc:	d0da      	beq.n	800d384 <ai_array_to_buffer_fmt+0x28>
 800d3ce:	3207      	adds	r2, #7
 800d3d0:	4293      	cmp	r3, r2
 800d3d2:	d0d7      	beq.n	800d384 <ai_array_to_buffer_fmt+0x28>
 800d3d4:	e7e4      	b.n	800d3a0 <ai_array_to_buffer_fmt+0x44>
 800d3d6:	bf00      	nop
 800d3d8:	00840040 	.word	0x00840040
 800d3dc:	00040447 	.word	0x00040447
 800d3e0:	00040840 	.word	0x00040840
 800d3e4:	00840840 	.word	0x00840840
 800d3e8:	0084084f 	.word	0x0084084f
 800d3ec:	01821040 	.word	0x01821040
 800d3f0:	00803fff 	.word	0x00803fff

0800d3f4 <ai_array_get_byte_size>:
 800d3f4:	b1c1      	cbz	r1, 800d428 <ai_array_get_byte_size+0x34>
 800d3f6:	f3c0 3282 	ubfx	r2, r0, #14, #3
 800d3fa:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800d3fe:	4413      	add	r3, r2
 800d400:	fb01 f103 	mul.w	r1, r1, r3
 800d404:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800d408:	3107      	adds	r1, #7
 800d40a:	f3c0 4043 	ubfx	r0, r0, #17, #4
 800d40e:	f021 0107 	bic.w	r1, r1, #7
 800d412:	2804      	cmp	r0, #4
 800d414:	fa21 f102 	lsr.w	r1, r1, r2
 800d418:	d008      	beq.n	800d42c <ai_array_get_byte_size+0x38>
 800d41a:	2808      	cmp	r0, #8
 800d41c:	d101      	bne.n	800d422 <ai_array_get_byte_size+0x2e>
 800d41e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800d422:	3107      	adds	r1, #7
 800d424:	08c8      	lsrs	r0, r1, #3
 800d426:	4770      	bx	lr
 800d428:	4608      	mov	r0, r1
 800d42a:	4770      	bx	lr
 800d42c:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800d430:	3107      	adds	r1, #7
 800d432:	08c8      	lsrs	r0, r1, #3
 800d434:	4770      	bx	lr
 800d436:	bf00      	nop

0800d438 <__errno>:
 800d438:	4b01      	ldr	r3, [pc, #4]	; (800d440 <__errno+0x8>)
 800d43a:	6818      	ldr	r0, [r3, #0]
 800d43c:	4770      	bx	lr
 800d43e:	bf00      	nop
 800d440:	20000620 	.word	0x20000620

0800d444 <__libc_init_array>:
 800d444:	b570      	push	{r4, r5, r6, lr}
 800d446:	4e0d      	ldr	r6, [pc, #52]	; (800d47c <__libc_init_array+0x38>)
 800d448:	4c0d      	ldr	r4, [pc, #52]	; (800d480 <__libc_init_array+0x3c>)
 800d44a:	1ba4      	subs	r4, r4, r6
 800d44c:	10a4      	asrs	r4, r4, #2
 800d44e:	2500      	movs	r5, #0
 800d450:	42a5      	cmp	r5, r4
 800d452:	d109      	bne.n	800d468 <__libc_init_array+0x24>
 800d454:	4e0b      	ldr	r6, [pc, #44]	; (800d484 <__libc_init_array+0x40>)
 800d456:	4c0c      	ldr	r4, [pc, #48]	; (800d488 <__libc_init_array+0x44>)
 800d458:	f002 fd08 	bl	800fe6c <_init>
 800d45c:	1ba4      	subs	r4, r4, r6
 800d45e:	10a4      	asrs	r4, r4, #2
 800d460:	2500      	movs	r5, #0
 800d462:	42a5      	cmp	r5, r4
 800d464:	d105      	bne.n	800d472 <__libc_init_array+0x2e>
 800d466:	bd70      	pop	{r4, r5, r6, pc}
 800d468:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d46c:	4798      	blx	r3
 800d46e:	3501      	adds	r5, #1
 800d470:	e7ee      	b.n	800d450 <__libc_init_array+0xc>
 800d472:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d476:	4798      	blx	r3
 800d478:	3501      	adds	r5, #1
 800d47a:	e7f2      	b.n	800d462 <__libc_init_array+0x1e>
 800d47c:	080132b0 	.word	0x080132b0
 800d480:	080132b0 	.word	0x080132b0
 800d484:	080132b0 	.word	0x080132b0
 800d488:	080132b4 	.word	0x080132b4

0800d48c <malloc>:
 800d48c:	4b02      	ldr	r3, [pc, #8]	; (800d498 <malloc+0xc>)
 800d48e:	4601      	mov	r1, r0
 800d490:	6818      	ldr	r0, [r3, #0]
 800d492:	f000 b865 	b.w	800d560 <_malloc_r>
 800d496:	bf00      	nop
 800d498:	20000620 	.word	0x20000620

0800d49c <memcpy>:
 800d49c:	b510      	push	{r4, lr}
 800d49e:	1e43      	subs	r3, r0, #1
 800d4a0:	440a      	add	r2, r1
 800d4a2:	4291      	cmp	r1, r2
 800d4a4:	d100      	bne.n	800d4a8 <memcpy+0xc>
 800d4a6:	bd10      	pop	{r4, pc}
 800d4a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d4ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d4b0:	e7f7      	b.n	800d4a2 <memcpy+0x6>

0800d4b2 <memset>:
 800d4b2:	4402      	add	r2, r0
 800d4b4:	4603      	mov	r3, r0
 800d4b6:	4293      	cmp	r3, r2
 800d4b8:	d100      	bne.n	800d4bc <memset+0xa>
 800d4ba:	4770      	bx	lr
 800d4bc:	f803 1b01 	strb.w	r1, [r3], #1
 800d4c0:	e7f9      	b.n	800d4b6 <memset+0x4>
	...

0800d4c4 <_free_r>:
 800d4c4:	b538      	push	{r3, r4, r5, lr}
 800d4c6:	4605      	mov	r5, r0
 800d4c8:	2900      	cmp	r1, #0
 800d4ca:	d045      	beq.n	800d558 <_free_r+0x94>
 800d4cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4d0:	1f0c      	subs	r4, r1, #4
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	bfb8      	it	lt
 800d4d6:	18e4      	addlt	r4, r4, r3
 800d4d8:	f001 fe76 	bl	800f1c8 <__malloc_lock>
 800d4dc:	4a1f      	ldr	r2, [pc, #124]	; (800d55c <_free_r+0x98>)
 800d4de:	6813      	ldr	r3, [r2, #0]
 800d4e0:	4610      	mov	r0, r2
 800d4e2:	b933      	cbnz	r3, 800d4f2 <_free_r+0x2e>
 800d4e4:	6063      	str	r3, [r4, #4]
 800d4e6:	6014      	str	r4, [r2, #0]
 800d4e8:	4628      	mov	r0, r5
 800d4ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d4ee:	f001 be6c 	b.w	800f1ca <__malloc_unlock>
 800d4f2:	42a3      	cmp	r3, r4
 800d4f4:	d90c      	bls.n	800d510 <_free_r+0x4c>
 800d4f6:	6821      	ldr	r1, [r4, #0]
 800d4f8:	1862      	adds	r2, r4, r1
 800d4fa:	4293      	cmp	r3, r2
 800d4fc:	bf04      	itt	eq
 800d4fe:	681a      	ldreq	r2, [r3, #0]
 800d500:	685b      	ldreq	r3, [r3, #4]
 800d502:	6063      	str	r3, [r4, #4]
 800d504:	bf04      	itt	eq
 800d506:	1852      	addeq	r2, r2, r1
 800d508:	6022      	streq	r2, [r4, #0]
 800d50a:	6004      	str	r4, [r0, #0]
 800d50c:	e7ec      	b.n	800d4e8 <_free_r+0x24>
 800d50e:	4613      	mov	r3, r2
 800d510:	685a      	ldr	r2, [r3, #4]
 800d512:	b10a      	cbz	r2, 800d518 <_free_r+0x54>
 800d514:	42a2      	cmp	r2, r4
 800d516:	d9fa      	bls.n	800d50e <_free_r+0x4a>
 800d518:	6819      	ldr	r1, [r3, #0]
 800d51a:	1858      	adds	r0, r3, r1
 800d51c:	42a0      	cmp	r0, r4
 800d51e:	d10b      	bne.n	800d538 <_free_r+0x74>
 800d520:	6820      	ldr	r0, [r4, #0]
 800d522:	4401      	add	r1, r0
 800d524:	1858      	adds	r0, r3, r1
 800d526:	4282      	cmp	r2, r0
 800d528:	6019      	str	r1, [r3, #0]
 800d52a:	d1dd      	bne.n	800d4e8 <_free_r+0x24>
 800d52c:	6810      	ldr	r0, [r2, #0]
 800d52e:	6852      	ldr	r2, [r2, #4]
 800d530:	605a      	str	r2, [r3, #4]
 800d532:	4401      	add	r1, r0
 800d534:	6019      	str	r1, [r3, #0]
 800d536:	e7d7      	b.n	800d4e8 <_free_r+0x24>
 800d538:	d902      	bls.n	800d540 <_free_r+0x7c>
 800d53a:	230c      	movs	r3, #12
 800d53c:	602b      	str	r3, [r5, #0]
 800d53e:	e7d3      	b.n	800d4e8 <_free_r+0x24>
 800d540:	6820      	ldr	r0, [r4, #0]
 800d542:	1821      	adds	r1, r4, r0
 800d544:	428a      	cmp	r2, r1
 800d546:	bf04      	itt	eq
 800d548:	6811      	ldreq	r1, [r2, #0]
 800d54a:	6852      	ldreq	r2, [r2, #4]
 800d54c:	6062      	str	r2, [r4, #4]
 800d54e:	bf04      	itt	eq
 800d550:	1809      	addeq	r1, r1, r0
 800d552:	6021      	streq	r1, [r4, #0]
 800d554:	605c      	str	r4, [r3, #4]
 800d556:	e7c7      	b.n	800d4e8 <_free_r+0x24>
 800d558:	bd38      	pop	{r3, r4, r5, pc}
 800d55a:	bf00      	nop
 800d55c:	20000cb4 	.word	0x20000cb4

0800d560 <_malloc_r>:
 800d560:	b570      	push	{r4, r5, r6, lr}
 800d562:	1ccd      	adds	r5, r1, #3
 800d564:	f025 0503 	bic.w	r5, r5, #3
 800d568:	3508      	adds	r5, #8
 800d56a:	2d0c      	cmp	r5, #12
 800d56c:	bf38      	it	cc
 800d56e:	250c      	movcc	r5, #12
 800d570:	2d00      	cmp	r5, #0
 800d572:	4606      	mov	r6, r0
 800d574:	db01      	blt.n	800d57a <_malloc_r+0x1a>
 800d576:	42a9      	cmp	r1, r5
 800d578:	d903      	bls.n	800d582 <_malloc_r+0x22>
 800d57a:	230c      	movs	r3, #12
 800d57c:	6033      	str	r3, [r6, #0]
 800d57e:	2000      	movs	r0, #0
 800d580:	bd70      	pop	{r4, r5, r6, pc}
 800d582:	f001 fe21 	bl	800f1c8 <__malloc_lock>
 800d586:	4a21      	ldr	r2, [pc, #132]	; (800d60c <_malloc_r+0xac>)
 800d588:	6814      	ldr	r4, [r2, #0]
 800d58a:	4621      	mov	r1, r4
 800d58c:	b991      	cbnz	r1, 800d5b4 <_malloc_r+0x54>
 800d58e:	4c20      	ldr	r4, [pc, #128]	; (800d610 <_malloc_r+0xb0>)
 800d590:	6823      	ldr	r3, [r4, #0]
 800d592:	b91b      	cbnz	r3, 800d59c <_malloc_r+0x3c>
 800d594:	4630      	mov	r0, r6
 800d596:	f000 fd15 	bl	800dfc4 <_sbrk_r>
 800d59a:	6020      	str	r0, [r4, #0]
 800d59c:	4629      	mov	r1, r5
 800d59e:	4630      	mov	r0, r6
 800d5a0:	f000 fd10 	bl	800dfc4 <_sbrk_r>
 800d5a4:	1c43      	adds	r3, r0, #1
 800d5a6:	d124      	bne.n	800d5f2 <_malloc_r+0x92>
 800d5a8:	230c      	movs	r3, #12
 800d5aa:	6033      	str	r3, [r6, #0]
 800d5ac:	4630      	mov	r0, r6
 800d5ae:	f001 fe0c 	bl	800f1ca <__malloc_unlock>
 800d5b2:	e7e4      	b.n	800d57e <_malloc_r+0x1e>
 800d5b4:	680b      	ldr	r3, [r1, #0]
 800d5b6:	1b5b      	subs	r3, r3, r5
 800d5b8:	d418      	bmi.n	800d5ec <_malloc_r+0x8c>
 800d5ba:	2b0b      	cmp	r3, #11
 800d5bc:	d90f      	bls.n	800d5de <_malloc_r+0x7e>
 800d5be:	600b      	str	r3, [r1, #0]
 800d5c0:	50cd      	str	r5, [r1, r3]
 800d5c2:	18cc      	adds	r4, r1, r3
 800d5c4:	4630      	mov	r0, r6
 800d5c6:	f001 fe00 	bl	800f1ca <__malloc_unlock>
 800d5ca:	f104 000b 	add.w	r0, r4, #11
 800d5ce:	1d23      	adds	r3, r4, #4
 800d5d0:	f020 0007 	bic.w	r0, r0, #7
 800d5d4:	1ac3      	subs	r3, r0, r3
 800d5d6:	d0d3      	beq.n	800d580 <_malloc_r+0x20>
 800d5d8:	425a      	negs	r2, r3
 800d5da:	50e2      	str	r2, [r4, r3]
 800d5dc:	e7d0      	b.n	800d580 <_malloc_r+0x20>
 800d5de:	428c      	cmp	r4, r1
 800d5e0:	684b      	ldr	r3, [r1, #4]
 800d5e2:	bf16      	itet	ne
 800d5e4:	6063      	strne	r3, [r4, #4]
 800d5e6:	6013      	streq	r3, [r2, #0]
 800d5e8:	460c      	movne	r4, r1
 800d5ea:	e7eb      	b.n	800d5c4 <_malloc_r+0x64>
 800d5ec:	460c      	mov	r4, r1
 800d5ee:	6849      	ldr	r1, [r1, #4]
 800d5f0:	e7cc      	b.n	800d58c <_malloc_r+0x2c>
 800d5f2:	1cc4      	adds	r4, r0, #3
 800d5f4:	f024 0403 	bic.w	r4, r4, #3
 800d5f8:	42a0      	cmp	r0, r4
 800d5fa:	d005      	beq.n	800d608 <_malloc_r+0xa8>
 800d5fc:	1a21      	subs	r1, r4, r0
 800d5fe:	4630      	mov	r0, r6
 800d600:	f000 fce0 	bl	800dfc4 <_sbrk_r>
 800d604:	3001      	adds	r0, #1
 800d606:	d0cf      	beq.n	800d5a8 <_malloc_r+0x48>
 800d608:	6025      	str	r5, [r4, #0]
 800d60a:	e7db      	b.n	800d5c4 <_malloc_r+0x64>
 800d60c:	20000cb4 	.word	0x20000cb4
 800d610:	20000cb8 	.word	0x20000cb8

0800d614 <__cvt>:
 800d614:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d618:	ec55 4b10 	vmov	r4, r5, d0
 800d61c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800d61e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d622:	2d00      	cmp	r5, #0
 800d624:	460e      	mov	r6, r1
 800d626:	4691      	mov	r9, r2
 800d628:	4619      	mov	r1, r3
 800d62a:	bfb8      	it	lt
 800d62c:	4622      	movlt	r2, r4
 800d62e:	462b      	mov	r3, r5
 800d630:	f027 0720 	bic.w	r7, r7, #32
 800d634:	bfbb      	ittet	lt
 800d636:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d63a:	461d      	movlt	r5, r3
 800d63c:	2300      	movge	r3, #0
 800d63e:	232d      	movlt	r3, #45	; 0x2d
 800d640:	bfb8      	it	lt
 800d642:	4614      	movlt	r4, r2
 800d644:	2f46      	cmp	r7, #70	; 0x46
 800d646:	700b      	strb	r3, [r1, #0]
 800d648:	d004      	beq.n	800d654 <__cvt+0x40>
 800d64a:	2f45      	cmp	r7, #69	; 0x45
 800d64c:	d100      	bne.n	800d650 <__cvt+0x3c>
 800d64e:	3601      	adds	r6, #1
 800d650:	2102      	movs	r1, #2
 800d652:	e000      	b.n	800d656 <__cvt+0x42>
 800d654:	2103      	movs	r1, #3
 800d656:	ab03      	add	r3, sp, #12
 800d658:	9301      	str	r3, [sp, #4]
 800d65a:	ab02      	add	r3, sp, #8
 800d65c:	9300      	str	r3, [sp, #0]
 800d65e:	4632      	mov	r2, r6
 800d660:	4653      	mov	r3, sl
 800d662:	ec45 4b10 	vmov	d0, r4, r5
 800d666:	f000 fe0b 	bl	800e280 <_dtoa_r>
 800d66a:	2f47      	cmp	r7, #71	; 0x47
 800d66c:	4680      	mov	r8, r0
 800d66e:	d102      	bne.n	800d676 <__cvt+0x62>
 800d670:	f019 0f01 	tst.w	r9, #1
 800d674:	d026      	beq.n	800d6c4 <__cvt+0xb0>
 800d676:	2f46      	cmp	r7, #70	; 0x46
 800d678:	eb08 0906 	add.w	r9, r8, r6
 800d67c:	d111      	bne.n	800d6a2 <__cvt+0x8e>
 800d67e:	f898 3000 	ldrb.w	r3, [r8]
 800d682:	2b30      	cmp	r3, #48	; 0x30
 800d684:	d10a      	bne.n	800d69c <__cvt+0x88>
 800d686:	2200      	movs	r2, #0
 800d688:	2300      	movs	r3, #0
 800d68a:	4620      	mov	r0, r4
 800d68c:	4629      	mov	r1, r5
 800d68e:	f7f3 fa33 	bl	8000af8 <__aeabi_dcmpeq>
 800d692:	b918      	cbnz	r0, 800d69c <__cvt+0x88>
 800d694:	f1c6 0601 	rsb	r6, r6, #1
 800d698:	f8ca 6000 	str.w	r6, [sl]
 800d69c:	f8da 3000 	ldr.w	r3, [sl]
 800d6a0:	4499      	add	r9, r3
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	4620      	mov	r0, r4
 800d6a8:	4629      	mov	r1, r5
 800d6aa:	f7f3 fa25 	bl	8000af8 <__aeabi_dcmpeq>
 800d6ae:	b938      	cbnz	r0, 800d6c0 <__cvt+0xac>
 800d6b0:	2230      	movs	r2, #48	; 0x30
 800d6b2:	9b03      	ldr	r3, [sp, #12]
 800d6b4:	454b      	cmp	r3, r9
 800d6b6:	d205      	bcs.n	800d6c4 <__cvt+0xb0>
 800d6b8:	1c59      	adds	r1, r3, #1
 800d6ba:	9103      	str	r1, [sp, #12]
 800d6bc:	701a      	strb	r2, [r3, #0]
 800d6be:	e7f8      	b.n	800d6b2 <__cvt+0x9e>
 800d6c0:	f8cd 900c 	str.w	r9, [sp, #12]
 800d6c4:	9b03      	ldr	r3, [sp, #12]
 800d6c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d6c8:	eba3 0308 	sub.w	r3, r3, r8
 800d6cc:	4640      	mov	r0, r8
 800d6ce:	6013      	str	r3, [r2, #0]
 800d6d0:	b004      	add	sp, #16
 800d6d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800d6d6 <__exponent>:
 800d6d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d6d8:	2900      	cmp	r1, #0
 800d6da:	4604      	mov	r4, r0
 800d6dc:	bfba      	itte	lt
 800d6de:	4249      	neglt	r1, r1
 800d6e0:	232d      	movlt	r3, #45	; 0x2d
 800d6e2:	232b      	movge	r3, #43	; 0x2b
 800d6e4:	2909      	cmp	r1, #9
 800d6e6:	f804 2b02 	strb.w	r2, [r4], #2
 800d6ea:	7043      	strb	r3, [r0, #1]
 800d6ec:	dd20      	ble.n	800d730 <__exponent+0x5a>
 800d6ee:	f10d 0307 	add.w	r3, sp, #7
 800d6f2:	461f      	mov	r7, r3
 800d6f4:	260a      	movs	r6, #10
 800d6f6:	fb91 f5f6 	sdiv	r5, r1, r6
 800d6fa:	fb06 1115 	mls	r1, r6, r5, r1
 800d6fe:	3130      	adds	r1, #48	; 0x30
 800d700:	2d09      	cmp	r5, #9
 800d702:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d706:	f103 32ff 	add.w	r2, r3, #4294967295
 800d70a:	4629      	mov	r1, r5
 800d70c:	dc09      	bgt.n	800d722 <__exponent+0x4c>
 800d70e:	3130      	adds	r1, #48	; 0x30
 800d710:	3b02      	subs	r3, #2
 800d712:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d716:	42bb      	cmp	r3, r7
 800d718:	4622      	mov	r2, r4
 800d71a:	d304      	bcc.n	800d726 <__exponent+0x50>
 800d71c:	1a10      	subs	r0, r2, r0
 800d71e:	b003      	add	sp, #12
 800d720:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d722:	4613      	mov	r3, r2
 800d724:	e7e7      	b.n	800d6f6 <__exponent+0x20>
 800d726:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d72a:	f804 2b01 	strb.w	r2, [r4], #1
 800d72e:	e7f2      	b.n	800d716 <__exponent+0x40>
 800d730:	2330      	movs	r3, #48	; 0x30
 800d732:	4419      	add	r1, r3
 800d734:	7083      	strb	r3, [r0, #2]
 800d736:	1d02      	adds	r2, r0, #4
 800d738:	70c1      	strb	r1, [r0, #3]
 800d73a:	e7ef      	b.n	800d71c <__exponent+0x46>

0800d73c <_printf_float>:
 800d73c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d740:	b08d      	sub	sp, #52	; 0x34
 800d742:	460c      	mov	r4, r1
 800d744:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800d748:	4616      	mov	r6, r2
 800d74a:	461f      	mov	r7, r3
 800d74c:	4605      	mov	r5, r0
 800d74e:	f001 fcc9 	bl	800f0e4 <_localeconv_r>
 800d752:	6803      	ldr	r3, [r0, #0]
 800d754:	9304      	str	r3, [sp, #16]
 800d756:	4618      	mov	r0, r3
 800d758:	f7f2 fd52 	bl	8000200 <strlen>
 800d75c:	2300      	movs	r3, #0
 800d75e:	930a      	str	r3, [sp, #40]	; 0x28
 800d760:	f8d8 3000 	ldr.w	r3, [r8]
 800d764:	9005      	str	r0, [sp, #20]
 800d766:	3307      	adds	r3, #7
 800d768:	f023 0307 	bic.w	r3, r3, #7
 800d76c:	f103 0208 	add.w	r2, r3, #8
 800d770:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d774:	f8d4 b000 	ldr.w	fp, [r4]
 800d778:	f8c8 2000 	str.w	r2, [r8]
 800d77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d780:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d784:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d788:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d78c:	9307      	str	r3, [sp, #28]
 800d78e:	f8cd 8018 	str.w	r8, [sp, #24]
 800d792:	f04f 32ff 	mov.w	r2, #4294967295
 800d796:	4ba7      	ldr	r3, [pc, #668]	; (800da34 <_printf_float+0x2f8>)
 800d798:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d79c:	f7f3 f9de 	bl	8000b5c <__aeabi_dcmpun>
 800d7a0:	bb70      	cbnz	r0, 800d800 <_printf_float+0xc4>
 800d7a2:	f04f 32ff 	mov.w	r2, #4294967295
 800d7a6:	4ba3      	ldr	r3, [pc, #652]	; (800da34 <_printf_float+0x2f8>)
 800d7a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d7ac:	f7f3 f9b8 	bl	8000b20 <__aeabi_dcmple>
 800d7b0:	bb30      	cbnz	r0, 800d800 <_printf_float+0xc4>
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	4640      	mov	r0, r8
 800d7b8:	4649      	mov	r1, r9
 800d7ba:	f7f3 f9a7 	bl	8000b0c <__aeabi_dcmplt>
 800d7be:	b110      	cbz	r0, 800d7c6 <_printf_float+0x8a>
 800d7c0:	232d      	movs	r3, #45	; 0x2d
 800d7c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d7c6:	4a9c      	ldr	r2, [pc, #624]	; (800da38 <_printf_float+0x2fc>)
 800d7c8:	4b9c      	ldr	r3, [pc, #624]	; (800da3c <_printf_float+0x300>)
 800d7ca:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800d7ce:	bf8c      	ite	hi
 800d7d0:	4690      	movhi	r8, r2
 800d7d2:	4698      	movls	r8, r3
 800d7d4:	2303      	movs	r3, #3
 800d7d6:	f02b 0204 	bic.w	r2, fp, #4
 800d7da:	6123      	str	r3, [r4, #16]
 800d7dc:	6022      	str	r2, [r4, #0]
 800d7de:	f04f 0900 	mov.w	r9, #0
 800d7e2:	9700      	str	r7, [sp, #0]
 800d7e4:	4633      	mov	r3, r6
 800d7e6:	aa0b      	add	r2, sp, #44	; 0x2c
 800d7e8:	4621      	mov	r1, r4
 800d7ea:	4628      	mov	r0, r5
 800d7ec:	f000 f9e6 	bl	800dbbc <_printf_common>
 800d7f0:	3001      	adds	r0, #1
 800d7f2:	f040 808d 	bne.w	800d910 <_printf_float+0x1d4>
 800d7f6:	f04f 30ff 	mov.w	r0, #4294967295
 800d7fa:	b00d      	add	sp, #52	; 0x34
 800d7fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d800:	4642      	mov	r2, r8
 800d802:	464b      	mov	r3, r9
 800d804:	4640      	mov	r0, r8
 800d806:	4649      	mov	r1, r9
 800d808:	f7f3 f9a8 	bl	8000b5c <__aeabi_dcmpun>
 800d80c:	b110      	cbz	r0, 800d814 <_printf_float+0xd8>
 800d80e:	4a8c      	ldr	r2, [pc, #560]	; (800da40 <_printf_float+0x304>)
 800d810:	4b8c      	ldr	r3, [pc, #560]	; (800da44 <_printf_float+0x308>)
 800d812:	e7da      	b.n	800d7ca <_printf_float+0x8e>
 800d814:	6861      	ldr	r1, [r4, #4]
 800d816:	1c4b      	adds	r3, r1, #1
 800d818:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800d81c:	a80a      	add	r0, sp, #40	; 0x28
 800d81e:	d13e      	bne.n	800d89e <_printf_float+0x162>
 800d820:	2306      	movs	r3, #6
 800d822:	6063      	str	r3, [r4, #4]
 800d824:	2300      	movs	r3, #0
 800d826:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800d82a:	ab09      	add	r3, sp, #36	; 0x24
 800d82c:	9300      	str	r3, [sp, #0]
 800d82e:	ec49 8b10 	vmov	d0, r8, r9
 800d832:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d836:	6022      	str	r2, [r4, #0]
 800d838:	f8cd a004 	str.w	sl, [sp, #4]
 800d83c:	6861      	ldr	r1, [r4, #4]
 800d83e:	4628      	mov	r0, r5
 800d840:	f7ff fee8 	bl	800d614 <__cvt>
 800d844:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800d848:	2b47      	cmp	r3, #71	; 0x47
 800d84a:	4680      	mov	r8, r0
 800d84c:	d109      	bne.n	800d862 <_printf_float+0x126>
 800d84e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d850:	1cd8      	adds	r0, r3, #3
 800d852:	db02      	blt.n	800d85a <_printf_float+0x11e>
 800d854:	6862      	ldr	r2, [r4, #4]
 800d856:	4293      	cmp	r3, r2
 800d858:	dd47      	ble.n	800d8ea <_printf_float+0x1ae>
 800d85a:	f1aa 0a02 	sub.w	sl, sl, #2
 800d85e:	fa5f fa8a 	uxtb.w	sl, sl
 800d862:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800d866:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d868:	d824      	bhi.n	800d8b4 <_printf_float+0x178>
 800d86a:	3901      	subs	r1, #1
 800d86c:	4652      	mov	r2, sl
 800d86e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d872:	9109      	str	r1, [sp, #36]	; 0x24
 800d874:	f7ff ff2f 	bl	800d6d6 <__exponent>
 800d878:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d87a:	1813      	adds	r3, r2, r0
 800d87c:	2a01      	cmp	r2, #1
 800d87e:	4681      	mov	r9, r0
 800d880:	6123      	str	r3, [r4, #16]
 800d882:	dc02      	bgt.n	800d88a <_printf_float+0x14e>
 800d884:	6822      	ldr	r2, [r4, #0]
 800d886:	07d1      	lsls	r1, r2, #31
 800d888:	d501      	bpl.n	800d88e <_printf_float+0x152>
 800d88a:	3301      	adds	r3, #1
 800d88c:	6123      	str	r3, [r4, #16]
 800d88e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d892:	2b00      	cmp	r3, #0
 800d894:	d0a5      	beq.n	800d7e2 <_printf_float+0xa6>
 800d896:	232d      	movs	r3, #45	; 0x2d
 800d898:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d89c:	e7a1      	b.n	800d7e2 <_printf_float+0xa6>
 800d89e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800d8a2:	f000 8177 	beq.w	800db94 <_printf_float+0x458>
 800d8a6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800d8aa:	d1bb      	bne.n	800d824 <_printf_float+0xe8>
 800d8ac:	2900      	cmp	r1, #0
 800d8ae:	d1b9      	bne.n	800d824 <_printf_float+0xe8>
 800d8b0:	2301      	movs	r3, #1
 800d8b2:	e7b6      	b.n	800d822 <_printf_float+0xe6>
 800d8b4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800d8b8:	d119      	bne.n	800d8ee <_printf_float+0x1b2>
 800d8ba:	2900      	cmp	r1, #0
 800d8bc:	6863      	ldr	r3, [r4, #4]
 800d8be:	dd0c      	ble.n	800d8da <_printf_float+0x19e>
 800d8c0:	6121      	str	r1, [r4, #16]
 800d8c2:	b913      	cbnz	r3, 800d8ca <_printf_float+0x18e>
 800d8c4:	6822      	ldr	r2, [r4, #0]
 800d8c6:	07d2      	lsls	r2, r2, #31
 800d8c8:	d502      	bpl.n	800d8d0 <_printf_float+0x194>
 800d8ca:	3301      	adds	r3, #1
 800d8cc:	440b      	add	r3, r1
 800d8ce:	6123      	str	r3, [r4, #16]
 800d8d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8d2:	65a3      	str	r3, [r4, #88]	; 0x58
 800d8d4:	f04f 0900 	mov.w	r9, #0
 800d8d8:	e7d9      	b.n	800d88e <_printf_float+0x152>
 800d8da:	b913      	cbnz	r3, 800d8e2 <_printf_float+0x1a6>
 800d8dc:	6822      	ldr	r2, [r4, #0]
 800d8de:	07d0      	lsls	r0, r2, #31
 800d8e0:	d501      	bpl.n	800d8e6 <_printf_float+0x1aa>
 800d8e2:	3302      	adds	r3, #2
 800d8e4:	e7f3      	b.n	800d8ce <_printf_float+0x192>
 800d8e6:	2301      	movs	r3, #1
 800d8e8:	e7f1      	b.n	800d8ce <_printf_float+0x192>
 800d8ea:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800d8ee:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d8f2:	4293      	cmp	r3, r2
 800d8f4:	db05      	blt.n	800d902 <_printf_float+0x1c6>
 800d8f6:	6822      	ldr	r2, [r4, #0]
 800d8f8:	6123      	str	r3, [r4, #16]
 800d8fa:	07d1      	lsls	r1, r2, #31
 800d8fc:	d5e8      	bpl.n	800d8d0 <_printf_float+0x194>
 800d8fe:	3301      	adds	r3, #1
 800d900:	e7e5      	b.n	800d8ce <_printf_float+0x192>
 800d902:	2b00      	cmp	r3, #0
 800d904:	bfd4      	ite	le
 800d906:	f1c3 0302 	rsble	r3, r3, #2
 800d90a:	2301      	movgt	r3, #1
 800d90c:	4413      	add	r3, r2
 800d90e:	e7de      	b.n	800d8ce <_printf_float+0x192>
 800d910:	6823      	ldr	r3, [r4, #0]
 800d912:	055a      	lsls	r2, r3, #21
 800d914:	d407      	bmi.n	800d926 <_printf_float+0x1ea>
 800d916:	6923      	ldr	r3, [r4, #16]
 800d918:	4642      	mov	r2, r8
 800d91a:	4631      	mov	r1, r6
 800d91c:	4628      	mov	r0, r5
 800d91e:	47b8      	blx	r7
 800d920:	3001      	adds	r0, #1
 800d922:	d12b      	bne.n	800d97c <_printf_float+0x240>
 800d924:	e767      	b.n	800d7f6 <_printf_float+0xba>
 800d926:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800d92a:	f240 80dc 	bls.w	800dae6 <_printf_float+0x3aa>
 800d92e:	2200      	movs	r2, #0
 800d930:	2300      	movs	r3, #0
 800d932:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d936:	f7f3 f8df 	bl	8000af8 <__aeabi_dcmpeq>
 800d93a:	2800      	cmp	r0, #0
 800d93c:	d033      	beq.n	800d9a6 <_printf_float+0x26a>
 800d93e:	2301      	movs	r3, #1
 800d940:	4a41      	ldr	r2, [pc, #260]	; (800da48 <_printf_float+0x30c>)
 800d942:	4631      	mov	r1, r6
 800d944:	4628      	mov	r0, r5
 800d946:	47b8      	blx	r7
 800d948:	3001      	adds	r0, #1
 800d94a:	f43f af54 	beq.w	800d7f6 <_printf_float+0xba>
 800d94e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d952:	429a      	cmp	r2, r3
 800d954:	db02      	blt.n	800d95c <_printf_float+0x220>
 800d956:	6823      	ldr	r3, [r4, #0]
 800d958:	07d8      	lsls	r0, r3, #31
 800d95a:	d50f      	bpl.n	800d97c <_printf_float+0x240>
 800d95c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d960:	4631      	mov	r1, r6
 800d962:	4628      	mov	r0, r5
 800d964:	47b8      	blx	r7
 800d966:	3001      	adds	r0, #1
 800d968:	f43f af45 	beq.w	800d7f6 <_printf_float+0xba>
 800d96c:	f04f 0800 	mov.w	r8, #0
 800d970:	f104 091a 	add.w	r9, r4, #26
 800d974:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d976:	3b01      	subs	r3, #1
 800d978:	4543      	cmp	r3, r8
 800d97a:	dc09      	bgt.n	800d990 <_printf_float+0x254>
 800d97c:	6823      	ldr	r3, [r4, #0]
 800d97e:	079b      	lsls	r3, r3, #30
 800d980:	f100 8103 	bmi.w	800db8a <_printf_float+0x44e>
 800d984:	68e0      	ldr	r0, [r4, #12]
 800d986:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d988:	4298      	cmp	r0, r3
 800d98a:	bfb8      	it	lt
 800d98c:	4618      	movlt	r0, r3
 800d98e:	e734      	b.n	800d7fa <_printf_float+0xbe>
 800d990:	2301      	movs	r3, #1
 800d992:	464a      	mov	r2, r9
 800d994:	4631      	mov	r1, r6
 800d996:	4628      	mov	r0, r5
 800d998:	47b8      	blx	r7
 800d99a:	3001      	adds	r0, #1
 800d99c:	f43f af2b 	beq.w	800d7f6 <_printf_float+0xba>
 800d9a0:	f108 0801 	add.w	r8, r8, #1
 800d9a4:	e7e6      	b.n	800d974 <_printf_float+0x238>
 800d9a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	dc2b      	bgt.n	800da04 <_printf_float+0x2c8>
 800d9ac:	2301      	movs	r3, #1
 800d9ae:	4a26      	ldr	r2, [pc, #152]	; (800da48 <_printf_float+0x30c>)
 800d9b0:	4631      	mov	r1, r6
 800d9b2:	4628      	mov	r0, r5
 800d9b4:	47b8      	blx	r7
 800d9b6:	3001      	adds	r0, #1
 800d9b8:	f43f af1d 	beq.w	800d7f6 <_printf_float+0xba>
 800d9bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9be:	b923      	cbnz	r3, 800d9ca <_printf_float+0x28e>
 800d9c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9c2:	b913      	cbnz	r3, 800d9ca <_printf_float+0x28e>
 800d9c4:	6823      	ldr	r3, [r4, #0]
 800d9c6:	07d9      	lsls	r1, r3, #31
 800d9c8:	d5d8      	bpl.n	800d97c <_printf_float+0x240>
 800d9ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d9ce:	4631      	mov	r1, r6
 800d9d0:	4628      	mov	r0, r5
 800d9d2:	47b8      	blx	r7
 800d9d4:	3001      	adds	r0, #1
 800d9d6:	f43f af0e 	beq.w	800d7f6 <_printf_float+0xba>
 800d9da:	f04f 0900 	mov.w	r9, #0
 800d9de:	f104 0a1a 	add.w	sl, r4, #26
 800d9e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9e4:	425b      	negs	r3, r3
 800d9e6:	454b      	cmp	r3, r9
 800d9e8:	dc01      	bgt.n	800d9ee <_printf_float+0x2b2>
 800d9ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9ec:	e794      	b.n	800d918 <_printf_float+0x1dc>
 800d9ee:	2301      	movs	r3, #1
 800d9f0:	4652      	mov	r2, sl
 800d9f2:	4631      	mov	r1, r6
 800d9f4:	4628      	mov	r0, r5
 800d9f6:	47b8      	blx	r7
 800d9f8:	3001      	adds	r0, #1
 800d9fa:	f43f aefc 	beq.w	800d7f6 <_printf_float+0xba>
 800d9fe:	f109 0901 	add.w	r9, r9, #1
 800da02:	e7ee      	b.n	800d9e2 <_printf_float+0x2a6>
 800da04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800da06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800da08:	429a      	cmp	r2, r3
 800da0a:	bfa8      	it	ge
 800da0c:	461a      	movge	r2, r3
 800da0e:	2a00      	cmp	r2, #0
 800da10:	4691      	mov	r9, r2
 800da12:	dd07      	ble.n	800da24 <_printf_float+0x2e8>
 800da14:	4613      	mov	r3, r2
 800da16:	4631      	mov	r1, r6
 800da18:	4642      	mov	r2, r8
 800da1a:	4628      	mov	r0, r5
 800da1c:	47b8      	blx	r7
 800da1e:	3001      	adds	r0, #1
 800da20:	f43f aee9 	beq.w	800d7f6 <_printf_float+0xba>
 800da24:	f104 031a 	add.w	r3, r4, #26
 800da28:	f04f 0b00 	mov.w	fp, #0
 800da2c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800da30:	9306      	str	r3, [sp, #24]
 800da32:	e015      	b.n	800da60 <_printf_float+0x324>
 800da34:	7fefffff 	.word	0x7fefffff
 800da38:	08012fcc 	.word	0x08012fcc
 800da3c:	08012fc8 	.word	0x08012fc8
 800da40:	08012fd4 	.word	0x08012fd4
 800da44:	08012fd0 	.word	0x08012fd0
 800da48:	08012fd8 	.word	0x08012fd8
 800da4c:	2301      	movs	r3, #1
 800da4e:	9a06      	ldr	r2, [sp, #24]
 800da50:	4631      	mov	r1, r6
 800da52:	4628      	mov	r0, r5
 800da54:	47b8      	blx	r7
 800da56:	3001      	adds	r0, #1
 800da58:	f43f aecd 	beq.w	800d7f6 <_printf_float+0xba>
 800da5c:	f10b 0b01 	add.w	fp, fp, #1
 800da60:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800da64:	ebaa 0309 	sub.w	r3, sl, r9
 800da68:	455b      	cmp	r3, fp
 800da6a:	dcef      	bgt.n	800da4c <_printf_float+0x310>
 800da6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800da70:	429a      	cmp	r2, r3
 800da72:	44d0      	add	r8, sl
 800da74:	db15      	blt.n	800daa2 <_printf_float+0x366>
 800da76:	6823      	ldr	r3, [r4, #0]
 800da78:	07da      	lsls	r2, r3, #31
 800da7a:	d412      	bmi.n	800daa2 <_printf_float+0x366>
 800da7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800da80:	eba3 020a 	sub.w	r2, r3, sl
 800da84:	eba3 0a01 	sub.w	sl, r3, r1
 800da88:	4592      	cmp	sl, r2
 800da8a:	bfa8      	it	ge
 800da8c:	4692      	movge	sl, r2
 800da8e:	f1ba 0f00 	cmp.w	sl, #0
 800da92:	dc0e      	bgt.n	800dab2 <_printf_float+0x376>
 800da94:	f04f 0800 	mov.w	r8, #0
 800da98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800da9c:	f104 091a 	add.w	r9, r4, #26
 800daa0:	e019      	b.n	800dad6 <_printf_float+0x39a>
 800daa2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800daa6:	4631      	mov	r1, r6
 800daa8:	4628      	mov	r0, r5
 800daaa:	47b8      	blx	r7
 800daac:	3001      	adds	r0, #1
 800daae:	d1e5      	bne.n	800da7c <_printf_float+0x340>
 800dab0:	e6a1      	b.n	800d7f6 <_printf_float+0xba>
 800dab2:	4653      	mov	r3, sl
 800dab4:	4642      	mov	r2, r8
 800dab6:	4631      	mov	r1, r6
 800dab8:	4628      	mov	r0, r5
 800daba:	47b8      	blx	r7
 800dabc:	3001      	adds	r0, #1
 800dabe:	d1e9      	bne.n	800da94 <_printf_float+0x358>
 800dac0:	e699      	b.n	800d7f6 <_printf_float+0xba>
 800dac2:	2301      	movs	r3, #1
 800dac4:	464a      	mov	r2, r9
 800dac6:	4631      	mov	r1, r6
 800dac8:	4628      	mov	r0, r5
 800daca:	47b8      	blx	r7
 800dacc:	3001      	adds	r0, #1
 800dace:	f43f ae92 	beq.w	800d7f6 <_printf_float+0xba>
 800dad2:	f108 0801 	add.w	r8, r8, #1
 800dad6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dada:	1a9b      	subs	r3, r3, r2
 800dadc:	eba3 030a 	sub.w	r3, r3, sl
 800dae0:	4543      	cmp	r3, r8
 800dae2:	dcee      	bgt.n	800dac2 <_printf_float+0x386>
 800dae4:	e74a      	b.n	800d97c <_printf_float+0x240>
 800dae6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dae8:	2a01      	cmp	r2, #1
 800daea:	dc01      	bgt.n	800daf0 <_printf_float+0x3b4>
 800daec:	07db      	lsls	r3, r3, #31
 800daee:	d53a      	bpl.n	800db66 <_printf_float+0x42a>
 800daf0:	2301      	movs	r3, #1
 800daf2:	4642      	mov	r2, r8
 800daf4:	4631      	mov	r1, r6
 800daf6:	4628      	mov	r0, r5
 800daf8:	47b8      	blx	r7
 800dafa:	3001      	adds	r0, #1
 800dafc:	f43f ae7b 	beq.w	800d7f6 <_printf_float+0xba>
 800db00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800db04:	4631      	mov	r1, r6
 800db06:	4628      	mov	r0, r5
 800db08:	47b8      	blx	r7
 800db0a:	3001      	adds	r0, #1
 800db0c:	f108 0801 	add.w	r8, r8, #1
 800db10:	f43f ae71 	beq.w	800d7f6 <_printf_float+0xba>
 800db14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db16:	2200      	movs	r2, #0
 800db18:	f103 3aff 	add.w	sl, r3, #4294967295
 800db1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800db20:	2300      	movs	r3, #0
 800db22:	f7f2 ffe9 	bl	8000af8 <__aeabi_dcmpeq>
 800db26:	b9c8      	cbnz	r0, 800db5c <_printf_float+0x420>
 800db28:	4653      	mov	r3, sl
 800db2a:	4642      	mov	r2, r8
 800db2c:	4631      	mov	r1, r6
 800db2e:	4628      	mov	r0, r5
 800db30:	47b8      	blx	r7
 800db32:	3001      	adds	r0, #1
 800db34:	d10e      	bne.n	800db54 <_printf_float+0x418>
 800db36:	e65e      	b.n	800d7f6 <_printf_float+0xba>
 800db38:	2301      	movs	r3, #1
 800db3a:	4652      	mov	r2, sl
 800db3c:	4631      	mov	r1, r6
 800db3e:	4628      	mov	r0, r5
 800db40:	47b8      	blx	r7
 800db42:	3001      	adds	r0, #1
 800db44:	f43f ae57 	beq.w	800d7f6 <_printf_float+0xba>
 800db48:	f108 0801 	add.w	r8, r8, #1
 800db4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db4e:	3b01      	subs	r3, #1
 800db50:	4543      	cmp	r3, r8
 800db52:	dcf1      	bgt.n	800db38 <_printf_float+0x3fc>
 800db54:	464b      	mov	r3, r9
 800db56:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800db5a:	e6de      	b.n	800d91a <_printf_float+0x1de>
 800db5c:	f04f 0800 	mov.w	r8, #0
 800db60:	f104 0a1a 	add.w	sl, r4, #26
 800db64:	e7f2      	b.n	800db4c <_printf_float+0x410>
 800db66:	2301      	movs	r3, #1
 800db68:	e7df      	b.n	800db2a <_printf_float+0x3ee>
 800db6a:	2301      	movs	r3, #1
 800db6c:	464a      	mov	r2, r9
 800db6e:	4631      	mov	r1, r6
 800db70:	4628      	mov	r0, r5
 800db72:	47b8      	blx	r7
 800db74:	3001      	adds	r0, #1
 800db76:	f43f ae3e 	beq.w	800d7f6 <_printf_float+0xba>
 800db7a:	f108 0801 	add.w	r8, r8, #1
 800db7e:	68e3      	ldr	r3, [r4, #12]
 800db80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800db82:	1a9b      	subs	r3, r3, r2
 800db84:	4543      	cmp	r3, r8
 800db86:	dcf0      	bgt.n	800db6a <_printf_float+0x42e>
 800db88:	e6fc      	b.n	800d984 <_printf_float+0x248>
 800db8a:	f04f 0800 	mov.w	r8, #0
 800db8e:	f104 0919 	add.w	r9, r4, #25
 800db92:	e7f4      	b.n	800db7e <_printf_float+0x442>
 800db94:	2900      	cmp	r1, #0
 800db96:	f43f ae8b 	beq.w	800d8b0 <_printf_float+0x174>
 800db9a:	2300      	movs	r3, #0
 800db9c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800dba0:	ab09      	add	r3, sp, #36	; 0x24
 800dba2:	9300      	str	r3, [sp, #0]
 800dba4:	ec49 8b10 	vmov	d0, r8, r9
 800dba8:	6022      	str	r2, [r4, #0]
 800dbaa:	f8cd a004 	str.w	sl, [sp, #4]
 800dbae:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800dbb2:	4628      	mov	r0, r5
 800dbb4:	f7ff fd2e 	bl	800d614 <__cvt>
 800dbb8:	4680      	mov	r8, r0
 800dbba:	e648      	b.n	800d84e <_printf_float+0x112>

0800dbbc <_printf_common>:
 800dbbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbc0:	4691      	mov	r9, r2
 800dbc2:	461f      	mov	r7, r3
 800dbc4:	688a      	ldr	r2, [r1, #8]
 800dbc6:	690b      	ldr	r3, [r1, #16]
 800dbc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dbcc:	4293      	cmp	r3, r2
 800dbce:	bfb8      	it	lt
 800dbd0:	4613      	movlt	r3, r2
 800dbd2:	f8c9 3000 	str.w	r3, [r9]
 800dbd6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dbda:	4606      	mov	r6, r0
 800dbdc:	460c      	mov	r4, r1
 800dbde:	b112      	cbz	r2, 800dbe6 <_printf_common+0x2a>
 800dbe0:	3301      	adds	r3, #1
 800dbe2:	f8c9 3000 	str.w	r3, [r9]
 800dbe6:	6823      	ldr	r3, [r4, #0]
 800dbe8:	0699      	lsls	r1, r3, #26
 800dbea:	bf42      	ittt	mi
 800dbec:	f8d9 3000 	ldrmi.w	r3, [r9]
 800dbf0:	3302      	addmi	r3, #2
 800dbf2:	f8c9 3000 	strmi.w	r3, [r9]
 800dbf6:	6825      	ldr	r5, [r4, #0]
 800dbf8:	f015 0506 	ands.w	r5, r5, #6
 800dbfc:	d107      	bne.n	800dc0e <_printf_common+0x52>
 800dbfe:	f104 0a19 	add.w	sl, r4, #25
 800dc02:	68e3      	ldr	r3, [r4, #12]
 800dc04:	f8d9 2000 	ldr.w	r2, [r9]
 800dc08:	1a9b      	subs	r3, r3, r2
 800dc0a:	42ab      	cmp	r3, r5
 800dc0c:	dc28      	bgt.n	800dc60 <_printf_common+0xa4>
 800dc0e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800dc12:	6822      	ldr	r2, [r4, #0]
 800dc14:	3300      	adds	r3, #0
 800dc16:	bf18      	it	ne
 800dc18:	2301      	movne	r3, #1
 800dc1a:	0692      	lsls	r2, r2, #26
 800dc1c:	d42d      	bmi.n	800dc7a <_printf_common+0xbe>
 800dc1e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dc22:	4639      	mov	r1, r7
 800dc24:	4630      	mov	r0, r6
 800dc26:	47c0      	blx	r8
 800dc28:	3001      	adds	r0, #1
 800dc2a:	d020      	beq.n	800dc6e <_printf_common+0xb2>
 800dc2c:	6823      	ldr	r3, [r4, #0]
 800dc2e:	68e5      	ldr	r5, [r4, #12]
 800dc30:	f8d9 2000 	ldr.w	r2, [r9]
 800dc34:	f003 0306 	and.w	r3, r3, #6
 800dc38:	2b04      	cmp	r3, #4
 800dc3a:	bf08      	it	eq
 800dc3c:	1aad      	subeq	r5, r5, r2
 800dc3e:	68a3      	ldr	r3, [r4, #8]
 800dc40:	6922      	ldr	r2, [r4, #16]
 800dc42:	bf0c      	ite	eq
 800dc44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dc48:	2500      	movne	r5, #0
 800dc4a:	4293      	cmp	r3, r2
 800dc4c:	bfc4      	itt	gt
 800dc4e:	1a9b      	subgt	r3, r3, r2
 800dc50:	18ed      	addgt	r5, r5, r3
 800dc52:	f04f 0900 	mov.w	r9, #0
 800dc56:	341a      	adds	r4, #26
 800dc58:	454d      	cmp	r5, r9
 800dc5a:	d11a      	bne.n	800dc92 <_printf_common+0xd6>
 800dc5c:	2000      	movs	r0, #0
 800dc5e:	e008      	b.n	800dc72 <_printf_common+0xb6>
 800dc60:	2301      	movs	r3, #1
 800dc62:	4652      	mov	r2, sl
 800dc64:	4639      	mov	r1, r7
 800dc66:	4630      	mov	r0, r6
 800dc68:	47c0      	blx	r8
 800dc6a:	3001      	adds	r0, #1
 800dc6c:	d103      	bne.n	800dc76 <_printf_common+0xba>
 800dc6e:	f04f 30ff 	mov.w	r0, #4294967295
 800dc72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc76:	3501      	adds	r5, #1
 800dc78:	e7c3      	b.n	800dc02 <_printf_common+0x46>
 800dc7a:	18e1      	adds	r1, r4, r3
 800dc7c:	1c5a      	adds	r2, r3, #1
 800dc7e:	2030      	movs	r0, #48	; 0x30
 800dc80:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dc84:	4422      	add	r2, r4
 800dc86:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dc8a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dc8e:	3302      	adds	r3, #2
 800dc90:	e7c5      	b.n	800dc1e <_printf_common+0x62>
 800dc92:	2301      	movs	r3, #1
 800dc94:	4622      	mov	r2, r4
 800dc96:	4639      	mov	r1, r7
 800dc98:	4630      	mov	r0, r6
 800dc9a:	47c0      	blx	r8
 800dc9c:	3001      	adds	r0, #1
 800dc9e:	d0e6      	beq.n	800dc6e <_printf_common+0xb2>
 800dca0:	f109 0901 	add.w	r9, r9, #1
 800dca4:	e7d8      	b.n	800dc58 <_printf_common+0x9c>
	...

0800dca8 <_printf_i>:
 800dca8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dcac:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800dcb0:	460c      	mov	r4, r1
 800dcb2:	7e09      	ldrb	r1, [r1, #24]
 800dcb4:	b085      	sub	sp, #20
 800dcb6:	296e      	cmp	r1, #110	; 0x6e
 800dcb8:	4617      	mov	r7, r2
 800dcba:	4606      	mov	r6, r0
 800dcbc:	4698      	mov	r8, r3
 800dcbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dcc0:	f000 80b3 	beq.w	800de2a <_printf_i+0x182>
 800dcc4:	d822      	bhi.n	800dd0c <_printf_i+0x64>
 800dcc6:	2963      	cmp	r1, #99	; 0x63
 800dcc8:	d036      	beq.n	800dd38 <_printf_i+0x90>
 800dcca:	d80a      	bhi.n	800dce2 <_printf_i+0x3a>
 800dccc:	2900      	cmp	r1, #0
 800dcce:	f000 80b9 	beq.w	800de44 <_printf_i+0x19c>
 800dcd2:	2958      	cmp	r1, #88	; 0x58
 800dcd4:	f000 8083 	beq.w	800ddde <_printf_i+0x136>
 800dcd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dcdc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800dce0:	e032      	b.n	800dd48 <_printf_i+0xa0>
 800dce2:	2964      	cmp	r1, #100	; 0x64
 800dce4:	d001      	beq.n	800dcea <_printf_i+0x42>
 800dce6:	2969      	cmp	r1, #105	; 0x69
 800dce8:	d1f6      	bne.n	800dcd8 <_printf_i+0x30>
 800dcea:	6820      	ldr	r0, [r4, #0]
 800dcec:	6813      	ldr	r3, [r2, #0]
 800dcee:	0605      	lsls	r5, r0, #24
 800dcf0:	f103 0104 	add.w	r1, r3, #4
 800dcf4:	d52a      	bpl.n	800dd4c <_printf_i+0xa4>
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	6011      	str	r1, [r2, #0]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	da03      	bge.n	800dd06 <_printf_i+0x5e>
 800dcfe:	222d      	movs	r2, #45	; 0x2d
 800dd00:	425b      	negs	r3, r3
 800dd02:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800dd06:	486f      	ldr	r0, [pc, #444]	; (800dec4 <_printf_i+0x21c>)
 800dd08:	220a      	movs	r2, #10
 800dd0a:	e039      	b.n	800dd80 <_printf_i+0xd8>
 800dd0c:	2973      	cmp	r1, #115	; 0x73
 800dd0e:	f000 809d 	beq.w	800de4c <_printf_i+0x1a4>
 800dd12:	d808      	bhi.n	800dd26 <_printf_i+0x7e>
 800dd14:	296f      	cmp	r1, #111	; 0x6f
 800dd16:	d020      	beq.n	800dd5a <_printf_i+0xb2>
 800dd18:	2970      	cmp	r1, #112	; 0x70
 800dd1a:	d1dd      	bne.n	800dcd8 <_printf_i+0x30>
 800dd1c:	6823      	ldr	r3, [r4, #0]
 800dd1e:	f043 0320 	orr.w	r3, r3, #32
 800dd22:	6023      	str	r3, [r4, #0]
 800dd24:	e003      	b.n	800dd2e <_printf_i+0x86>
 800dd26:	2975      	cmp	r1, #117	; 0x75
 800dd28:	d017      	beq.n	800dd5a <_printf_i+0xb2>
 800dd2a:	2978      	cmp	r1, #120	; 0x78
 800dd2c:	d1d4      	bne.n	800dcd8 <_printf_i+0x30>
 800dd2e:	2378      	movs	r3, #120	; 0x78
 800dd30:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dd34:	4864      	ldr	r0, [pc, #400]	; (800dec8 <_printf_i+0x220>)
 800dd36:	e055      	b.n	800dde4 <_printf_i+0x13c>
 800dd38:	6813      	ldr	r3, [r2, #0]
 800dd3a:	1d19      	adds	r1, r3, #4
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	6011      	str	r1, [r2, #0]
 800dd40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dd44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dd48:	2301      	movs	r3, #1
 800dd4a:	e08c      	b.n	800de66 <_printf_i+0x1be>
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	6011      	str	r1, [r2, #0]
 800dd50:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dd54:	bf18      	it	ne
 800dd56:	b21b      	sxthne	r3, r3
 800dd58:	e7cf      	b.n	800dcfa <_printf_i+0x52>
 800dd5a:	6813      	ldr	r3, [r2, #0]
 800dd5c:	6825      	ldr	r5, [r4, #0]
 800dd5e:	1d18      	adds	r0, r3, #4
 800dd60:	6010      	str	r0, [r2, #0]
 800dd62:	0628      	lsls	r0, r5, #24
 800dd64:	d501      	bpl.n	800dd6a <_printf_i+0xc2>
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	e002      	b.n	800dd70 <_printf_i+0xc8>
 800dd6a:	0668      	lsls	r0, r5, #25
 800dd6c:	d5fb      	bpl.n	800dd66 <_printf_i+0xbe>
 800dd6e:	881b      	ldrh	r3, [r3, #0]
 800dd70:	4854      	ldr	r0, [pc, #336]	; (800dec4 <_printf_i+0x21c>)
 800dd72:	296f      	cmp	r1, #111	; 0x6f
 800dd74:	bf14      	ite	ne
 800dd76:	220a      	movne	r2, #10
 800dd78:	2208      	moveq	r2, #8
 800dd7a:	2100      	movs	r1, #0
 800dd7c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dd80:	6865      	ldr	r5, [r4, #4]
 800dd82:	60a5      	str	r5, [r4, #8]
 800dd84:	2d00      	cmp	r5, #0
 800dd86:	f2c0 8095 	blt.w	800deb4 <_printf_i+0x20c>
 800dd8a:	6821      	ldr	r1, [r4, #0]
 800dd8c:	f021 0104 	bic.w	r1, r1, #4
 800dd90:	6021      	str	r1, [r4, #0]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d13d      	bne.n	800de12 <_printf_i+0x16a>
 800dd96:	2d00      	cmp	r5, #0
 800dd98:	f040 808e 	bne.w	800deb8 <_printf_i+0x210>
 800dd9c:	4665      	mov	r5, ip
 800dd9e:	2a08      	cmp	r2, #8
 800dda0:	d10b      	bne.n	800ddba <_printf_i+0x112>
 800dda2:	6823      	ldr	r3, [r4, #0]
 800dda4:	07db      	lsls	r3, r3, #31
 800dda6:	d508      	bpl.n	800ddba <_printf_i+0x112>
 800dda8:	6923      	ldr	r3, [r4, #16]
 800ddaa:	6862      	ldr	r2, [r4, #4]
 800ddac:	429a      	cmp	r2, r3
 800ddae:	bfde      	ittt	le
 800ddb0:	2330      	movle	r3, #48	; 0x30
 800ddb2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ddb6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ddba:	ebac 0305 	sub.w	r3, ip, r5
 800ddbe:	6123      	str	r3, [r4, #16]
 800ddc0:	f8cd 8000 	str.w	r8, [sp]
 800ddc4:	463b      	mov	r3, r7
 800ddc6:	aa03      	add	r2, sp, #12
 800ddc8:	4621      	mov	r1, r4
 800ddca:	4630      	mov	r0, r6
 800ddcc:	f7ff fef6 	bl	800dbbc <_printf_common>
 800ddd0:	3001      	adds	r0, #1
 800ddd2:	d14d      	bne.n	800de70 <_printf_i+0x1c8>
 800ddd4:	f04f 30ff 	mov.w	r0, #4294967295
 800ddd8:	b005      	add	sp, #20
 800ddda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ddde:	4839      	ldr	r0, [pc, #228]	; (800dec4 <_printf_i+0x21c>)
 800dde0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800dde4:	6813      	ldr	r3, [r2, #0]
 800dde6:	6821      	ldr	r1, [r4, #0]
 800dde8:	1d1d      	adds	r5, r3, #4
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	6015      	str	r5, [r2, #0]
 800ddee:	060a      	lsls	r2, r1, #24
 800ddf0:	d50b      	bpl.n	800de0a <_printf_i+0x162>
 800ddf2:	07ca      	lsls	r2, r1, #31
 800ddf4:	bf44      	itt	mi
 800ddf6:	f041 0120 	orrmi.w	r1, r1, #32
 800ddfa:	6021      	strmi	r1, [r4, #0]
 800ddfc:	b91b      	cbnz	r3, 800de06 <_printf_i+0x15e>
 800ddfe:	6822      	ldr	r2, [r4, #0]
 800de00:	f022 0220 	bic.w	r2, r2, #32
 800de04:	6022      	str	r2, [r4, #0]
 800de06:	2210      	movs	r2, #16
 800de08:	e7b7      	b.n	800dd7a <_printf_i+0xd2>
 800de0a:	064d      	lsls	r5, r1, #25
 800de0c:	bf48      	it	mi
 800de0e:	b29b      	uxthmi	r3, r3
 800de10:	e7ef      	b.n	800ddf2 <_printf_i+0x14a>
 800de12:	4665      	mov	r5, ip
 800de14:	fbb3 f1f2 	udiv	r1, r3, r2
 800de18:	fb02 3311 	mls	r3, r2, r1, r3
 800de1c:	5cc3      	ldrb	r3, [r0, r3]
 800de1e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800de22:	460b      	mov	r3, r1
 800de24:	2900      	cmp	r1, #0
 800de26:	d1f5      	bne.n	800de14 <_printf_i+0x16c>
 800de28:	e7b9      	b.n	800dd9e <_printf_i+0xf6>
 800de2a:	6813      	ldr	r3, [r2, #0]
 800de2c:	6825      	ldr	r5, [r4, #0]
 800de2e:	6961      	ldr	r1, [r4, #20]
 800de30:	1d18      	adds	r0, r3, #4
 800de32:	6010      	str	r0, [r2, #0]
 800de34:	0628      	lsls	r0, r5, #24
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	d501      	bpl.n	800de3e <_printf_i+0x196>
 800de3a:	6019      	str	r1, [r3, #0]
 800de3c:	e002      	b.n	800de44 <_printf_i+0x19c>
 800de3e:	066a      	lsls	r2, r5, #25
 800de40:	d5fb      	bpl.n	800de3a <_printf_i+0x192>
 800de42:	8019      	strh	r1, [r3, #0]
 800de44:	2300      	movs	r3, #0
 800de46:	6123      	str	r3, [r4, #16]
 800de48:	4665      	mov	r5, ip
 800de4a:	e7b9      	b.n	800ddc0 <_printf_i+0x118>
 800de4c:	6813      	ldr	r3, [r2, #0]
 800de4e:	1d19      	adds	r1, r3, #4
 800de50:	6011      	str	r1, [r2, #0]
 800de52:	681d      	ldr	r5, [r3, #0]
 800de54:	6862      	ldr	r2, [r4, #4]
 800de56:	2100      	movs	r1, #0
 800de58:	4628      	mov	r0, r5
 800de5a:	f7f2 f9d9 	bl	8000210 <memchr>
 800de5e:	b108      	cbz	r0, 800de64 <_printf_i+0x1bc>
 800de60:	1b40      	subs	r0, r0, r5
 800de62:	6060      	str	r0, [r4, #4]
 800de64:	6863      	ldr	r3, [r4, #4]
 800de66:	6123      	str	r3, [r4, #16]
 800de68:	2300      	movs	r3, #0
 800de6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800de6e:	e7a7      	b.n	800ddc0 <_printf_i+0x118>
 800de70:	6923      	ldr	r3, [r4, #16]
 800de72:	462a      	mov	r2, r5
 800de74:	4639      	mov	r1, r7
 800de76:	4630      	mov	r0, r6
 800de78:	47c0      	blx	r8
 800de7a:	3001      	adds	r0, #1
 800de7c:	d0aa      	beq.n	800ddd4 <_printf_i+0x12c>
 800de7e:	6823      	ldr	r3, [r4, #0]
 800de80:	079b      	lsls	r3, r3, #30
 800de82:	d413      	bmi.n	800deac <_printf_i+0x204>
 800de84:	68e0      	ldr	r0, [r4, #12]
 800de86:	9b03      	ldr	r3, [sp, #12]
 800de88:	4298      	cmp	r0, r3
 800de8a:	bfb8      	it	lt
 800de8c:	4618      	movlt	r0, r3
 800de8e:	e7a3      	b.n	800ddd8 <_printf_i+0x130>
 800de90:	2301      	movs	r3, #1
 800de92:	464a      	mov	r2, r9
 800de94:	4639      	mov	r1, r7
 800de96:	4630      	mov	r0, r6
 800de98:	47c0      	blx	r8
 800de9a:	3001      	adds	r0, #1
 800de9c:	d09a      	beq.n	800ddd4 <_printf_i+0x12c>
 800de9e:	3501      	adds	r5, #1
 800dea0:	68e3      	ldr	r3, [r4, #12]
 800dea2:	9a03      	ldr	r2, [sp, #12]
 800dea4:	1a9b      	subs	r3, r3, r2
 800dea6:	42ab      	cmp	r3, r5
 800dea8:	dcf2      	bgt.n	800de90 <_printf_i+0x1e8>
 800deaa:	e7eb      	b.n	800de84 <_printf_i+0x1dc>
 800deac:	2500      	movs	r5, #0
 800deae:	f104 0919 	add.w	r9, r4, #25
 800deb2:	e7f5      	b.n	800dea0 <_printf_i+0x1f8>
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d1ac      	bne.n	800de12 <_printf_i+0x16a>
 800deb8:	7803      	ldrb	r3, [r0, #0]
 800deba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800debe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dec2:	e76c      	b.n	800dd9e <_printf_i+0xf6>
 800dec4:	08012fda 	.word	0x08012fda
 800dec8:	08012feb 	.word	0x08012feb

0800decc <iprintf>:
 800decc:	b40f      	push	{r0, r1, r2, r3}
 800dece:	4b0a      	ldr	r3, [pc, #40]	; (800def8 <iprintf+0x2c>)
 800ded0:	b513      	push	{r0, r1, r4, lr}
 800ded2:	681c      	ldr	r4, [r3, #0]
 800ded4:	b124      	cbz	r4, 800dee0 <iprintf+0x14>
 800ded6:	69a3      	ldr	r3, [r4, #24]
 800ded8:	b913      	cbnz	r3, 800dee0 <iprintf+0x14>
 800deda:	4620      	mov	r0, r4
 800dedc:	f001 f878 	bl	800efd0 <__sinit>
 800dee0:	ab05      	add	r3, sp, #20
 800dee2:	9a04      	ldr	r2, [sp, #16]
 800dee4:	68a1      	ldr	r1, [r4, #8]
 800dee6:	9301      	str	r3, [sp, #4]
 800dee8:	4620      	mov	r0, r4
 800deea:	f001 fc83 	bl	800f7f4 <_vfiprintf_r>
 800deee:	b002      	add	sp, #8
 800def0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800def4:	b004      	add	sp, #16
 800def6:	4770      	bx	lr
 800def8:	20000620 	.word	0x20000620

0800defc <_puts_r>:
 800defc:	b570      	push	{r4, r5, r6, lr}
 800defe:	460e      	mov	r6, r1
 800df00:	4605      	mov	r5, r0
 800df02:	b118      	cbz	r0, 800df0c <_puts_r+0x10>
 800df04:	6983      	ldr	r3, [r0, #24]
 800df06:	b90b      	cbnz	r3, 800df0c <_puts_r+0x10>
 800df08:	f001 f862 	bl	800efd0 <__sinit>
 800df0c:	69ab      	ldr	r3, [r5, #24]
 800df0e:	68ac      	ldr	r4, [r5, #8]
 800df10:	b913      	cbnz	r3, 800df18 <_puts_r+0x1c>
 800df12:	4628      	mov	r0, r5
 800df14:	f001 f85c 	bl	800efd0 <__sinit>
 800df18:	4b23      	ldr	r3, [pc, #140]	; (800dfa8 <_puts_r+0xac>)
 800df1a:	429c      	cmp	r4, r3
 800df1c:	d117      	bne.n	800df4e <_puts_r+0x52>
 800df1e:	686c      	ldr	r4, [r5, #4]
 800df20:	89a3      	ldrh	r3, [r4, #12]
 800df22:	071b      	lsls	r3, r3, #28
 800df24:	d51d      	bpl.n	800df62 <_puts_r+0x66>
 800df26:	6923      	ldr	r3, [r4, #16]
 800df28:	b1db      	cbz	r3, 800df62 <_puts_r+0x66>
 800df2a:	3e01      	subs	r6, #1
 800df2c:	68a3      	ldr	r3, [r4, #8]
 800df2e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800df32:	3b01      	subs	r3, #1
 800df34:	60a3      	str	r3, [r4, #8]
 800df36:	b9e9      	cbnz	r1, 800df74 <_puts_r+0x78>
 800df38:	2b00      	cmp	r3, #0
 800df3a:	da2e      	bge.n	800df9a <_puts_r+0x9e>
 800df3c:	4622      	mov	r2, r4
 800df3e:	210a      	movs	r1, #10
 800df40:	4628      	mov	r0, r5
 800df42:	f000 f84f 	bl	800dfe4 <__swbuf_r>
 800df46:	3001      	adds	r0, #1
 800df48:	d011      	beq.n	800df6e <_puts_r+0x72>
 800df4a:	200a      	movs	r0, #10
 800df4c:	e011      	b.n	800df72 <_puts_r+0x76>
 800df4e:	4b17      	ldr	r3, [pc, #92]	; (800dfac <_puts_r+0xb0>)
 800df50:	429c      	cmp	r4, r3
 800df52:	d101      	bne.n	800df58 <_puts_r+0x5c>
 800df54:	68ac      	ldr	r4, [r5, #8]
 800df56:	e7e3      	b.n	800df20 <_puts_r+0x24>
 800df58:	4b15      	ldr	r3, [pc, #84]	; (800dfb0 <_puts_r+0xb4>)
 800df5a:	429c      	cmp	r4, r3
 800df5c:	bf08      	it	eq
 800df5e:	68ec      	ldreq	r4, [r5, #12]
 800df60:	e7de      	b.n	800df20 <_puts_r+0x24>
 800df62:	4621      	mov	r1, r4
 800df64:	4628      	mov	r0, r5
 800df66:	f000 f88f 	bl	800e088 <__swsetup_r>
 800df6a:	2800      	cmp	r0, #0
 800df6c:	d0dd      	beq.n	800df2a <_puts_r+0x2e>
 800df6e:	f04f 30ff 	mov.w	r0, #4294967295
 800df72:	bd70      	pop	{r4, r5, r6, pc}
 800df74:	2b00      	cmp	r3, #0
 800df76:	da04      	bge.n	800df82 <_puts_r+0x86>
 800df78:	69a2      	ldr	r2, [r4, #24]
 800df7a:	429a      	cmp	r2, r3
 800df7c:	dc06      	bgt.n	800df8c <_puts_r+0x90>
 800df7e:	290a      	cmp	r1, #10
 800df80:	d004      	beq.n	800df8c <_puts_r+0x90>
 800df82:	6823      	ldr	r3, [r4, #0]
 800df84:	1c5a      	adds	r2, r3, #1
 800df86:	6022      	str	r2, [r4, #0]
 800df88:	7019      	strb	r1, [r3, #0]
 800df8a:	e7cf      	b.n	800df2c <_puts_r+0x30>
 800df8c:	4622      	mov	r2, r4
 800df8e:	4628      	mov	r0, r5
 800df90:	f000 f828 	bl	800dfe4 <__swbuf_r>
 800df94:	3001      	adds	r0, #1
 800df96:	d1c9      	bne.n	800df2c <_puts_r+0x30>
 800df98:	e7e9      	b.n	800df6e <_puts_r+0x72>
 800df9a:	6823      	ldr	r3, [r4, #0]
 800df9c:	200a      	movs	r0, #10
 800df9e:	1c5a      	adds	r2, r3, #1
 800dfa0:	6022      	str	r2, [r4, #0]
 800dfa2:	7018      	strb	r0, [r3, #0]
 800dfa4:	e7e5      	b.n	800df72 <_puts_r+0x76>
 800dfa6:	bf00      	nop
 800dfa8:	0801302c 	.word	0x0801302c
 800dfac:	0801304c 	.word	0x0801304c
 800dfb0:	0801300c 	.word	0x0801300c

0800dfb4 <puts>:
 800dfb4:	4b02      	ldr	r3, [pc, #8]	; (800dfc0 <puts+0xc>)
 800dfb6:	4601      	mov	r1, r0
 800dfb8:	6818      	ldr	r0, [r3, #0]
 800dfba:	f7ff bf9f 	b.w	800defc <_puts_r>
 800dfbe:	bf00      	nop
 800dfc0:	20000620 	.word	0x20000620

0800dfc4 <_sbrk_r>:
 800dfc4:	b538      	push	{r3, r4, r5, lr}
 800dfc6:	4c06      	ldr	r4, [pc, #24]	; (800dfe0 <_sbrk_r+0x1c>)
 800dfc8:	2300      	movs	r3, #0
 800dfca:	4605      	mov	r5, r0
 800dfcc:	4608      	mov	r0, r1
 800dfce:	6023      	str	r3, [r4, #0]
 800dfd0:	f7f4 fb56 	bl	8002680 <_sbrk>
 800dfd4:	1c43      	adds	r3, r0, #1
 800dfd6:	d102      	bne.n	800dfde <_sbrk_r+0x1a>
 800dfd8:	6823      	ldr	r3, [r4, #0]
 800dfda:	b103      	cbz	r3, 800dfde <_sbrk_r+0x1a>
 800dfdc:	602b      	str	r3, [r5, #0]
 800dfde:	bd38      	pop	{r3, r4, r5, pc}
 800dfe0:	200017f8 	.word	0x200017f8

0800dfe4 <__swbuf_r>:
 800dfe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfe6:	460e      	mov	r6, r1
 800dfe8:	4614      	mov	r4, r2
 800dfea:	4605      	mov	r5, r0
 800dfec:	b118      	cbz	r0, 800dff6 <__swbuf_r+0x12>
 800dfee:	6983      	ldr	r3, [r0, #24]
 800dff0:	b90b      	cbnz	r3, 800dff6 <__swbuf_r+0x12>
 800dff2:	f000 ffed 	bl	800efd0 <__sinit>
 800dff6:	4b21      	ldr	r3, [pc, #132]	; (800e07c <__swbuf_r+0x98>)
 800dff8:	429c      	cmp	r4, r3
 800dffa:	d12a      	bne.n	800e052 <__swbuf_r+0x6e>
 800dffc:	686c      	ldr	r4, [r5, #4]
 800dffe:	69a3      	ldr	r3, [r4, #24]
 800e000:	60a3      	str	r3, [r4, #8]
 800e002:	89a3      	ldrh	r3, [r4, #12]
 800e004:	071a      	lsls	r2, r3, #28
 800e006:	d52e      	bpl.n	800e066 <__swbuf_r+0x82>
 800e008:	6923      	ldr	r3, [r4, #16]
 800e00a:	b363      	cbz	r3, 800e066 <__swbuf_r+0x82>
 800e00c:	6923      	ldr	r3, [r4, #16]
 800e00e:	6820      	ldr	r0, [r4, #0]
 800e010:	1ac0      	subs	r0, r0, r3
 800e012:	6963      	ldr	r3, [r4, #20]
 800e014:	b2f6      	uxtb	r6, r6
 800e016:	4283      	cmp	r3, r0
 800e018:	4637      	mov	r7, r6
 800e01a:	dc04      	bgt.n	800e026 <__swbuf_r+0x42>
 800e01c:	4621      	mov	r1, r4
 800e01e:	4628      	mov	r0, r5
 800e020:	f000 ff6c 	bl	800eefc <_fflush_r>
 800e024:	bb28      	cbnz	r0, 800e072 <__swbuf_r+0x8e>
 800e026:	68a3      	ldr	r3, [r4, #8]
 800e028:	3b01      	subs	r3, #1
 800e02a:	60a3      	str	r3, [r4, #8]
 800e02c:	6823      	ldr	r3, [r4, #0]
 800e02e:	1c5a      	adds	r2, r3, #1
 800e030:	6022      	str	r2, [r4, #0]
 800e032:	701e      	strb	r6, [r3, #0]
 800e034:	6963      	ldr	r3, [r4, #20]
 800e036:	3001      	adds	r0, #1
 800e038:	4283      	cmp	r3, r0
 800e03a:	d004      	beq.n	800e046 <__swbuf_r+0x62>
 800e03c:	89a3      	ldrh	r3, [r4, #12]
 800e03e:	07db      	lsls	r3, r3, #31
 800e040:	d519      	bpl.n	800e076 <__swbuf_r+0x92>
 800e042:	2e0a      	cmp	r6, #10
 800e044:	d117      	bne.n	800e076 <__swbuf_r+0x92>
 800e046:	4621      	mov	r1, r4
 800e048:	4628      	mov	r0, r5
 800e04a:	f000 ff57 	bl	800eefc <_fflush_r>
 800e04e:	b190      	cbz	r0, 800e076 <__swbuf_r+0x92>
 800e050:	e00f      	b.n	800e072 <__swbuf_r+0x8e>
 800e052:	4b0b      	ldr	r3, [pc, #44]	; (800e080 <__swbuf_r+0x9c>)
 800e054:	429c      	cmp	r4, r3
 800e056:	d101      	bne.n	800e05c <__swbuf_r+0x78>
 800e058:	68ac      	ldr	r4, [r5, #8]
 800e05a:	e7d0      	b.n	800dffe <__swbuf_r+0x1a>
 800e05c:	4b09      	ldr	r3, [pc, #36]	; (800e084 <__swbuf_r+0xa0>)
 800e05e:	429c      	cmp	r4, r3
 800e060:	bf08      	it	eq
 800e062:	68ec      	ldreq	r4, [r5, #12]
 800e064:	e7cb      	b.n	800dffe <__swbuf_r+0x1a>
 800e066:	4621      	mov	r1, r4
 800e068:	4628      	mov	r0, r5
 800e06a:	f000 f80d 	bl	800e088 <__swsetup_r>
 800e06e:	2800      	cmp	r0, #0
 800e070:	d0cc      	beq.n	800e00c <__swbuf_r+0x28>
 800e072:	f04f 37ff 	mov.w	r7, #4294967295
 800e076:	4638      	mov	r0, r7
 800e078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e07a:	bf00      	nop
 800e07c:	0801302c 	.word	0x0801302c
 800e080:	0801304c 	.word	0x0801304c
 800e084:	0801300c 	.word	0x0801300c

0800e088 <__swsetup_r>:
 800e088:	4b32      	ldr	r3, [pc, #200]	; (800e154 <__swsetup_r+0xcc>)
 800e08a:	b570      	push	{r4, r5, r6, lr}
 800e08c:	681d      	ldr	r5, [r3, #0]
 800e08e:	4606      	mov	r6, r0
 800e090:	460c      	mov	r4, r1
 800e092:	b125      	cbz	r5, 800e09e <__swsetup_r+0x16>
 800e094:	69ab      	ldr	r3, [r5, #24]
 800e096:	b913      	cbnz	r3, 800e09e <__swsetup_r+0x16>
 800e098:	4628      	mov	r0, r5
 800e09a:	f000 ff99 	bl	800efd0 <__sinit>
 800e09e:	4b2e      	ldr	r3, [pc, #184]	; (800e158 <__swsetup_r+0xd0>)
 800e0a0:	429c      	cmp	r4, r3
 800e0a2:	d10f      	bne.n	800e0c4 <__swsetup_r+0x3c>
 800e0a4:	686c      	ldr	r4, [r5, #4]
 800e0a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e0aa:	b29a      	uxth	r2, r3
 800e0ac:	0715      	lsls	r5, r2, #28
 800e0ae:	d42c      	bmi.n	800e10a <__swsetup_r+0x82>
 800e0b0:	06d0      	lsls	r0, r2, #27
 800e0b2:	d411      	bmi.n	800e0d8 <__swsetup_r+0x50>
 800e0b4:	2209      	movs	r2, #9
 800e0b6:	6032      	str	r2, [r6, #0]
 800e0b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0bc:	81a3      	strh	r3, [r4, #12]
 800e0be:	f04f 30ff 	mov.w	r0, #4294967295
 800e0c2:	e03e      	b.n	800e142 <__swsetup_r+0xba>
 800e0c4:	4b25      	ldr	r3, [pc, #148]	; (800e15c <__swsetup_r+0xd4>)
 800e0c6:	429c      	cmp	r4, r3
 800e0c8:	d101      	bne.n	800e0ce <__swsetup_r+0x46>
 800e0ca:	68ac      	ldr	r4, [r5, #8]
 800e0cc:	e7eb      	b.n	800e0a6 <__swsetup_r+0x1e>
 800e0ce:	4b24      	ldr	r3, [pc, #144]	; (800e160 <__swsetup_r+0xd8>)
 800e0d0:	429c      	cmp	r4, r3
 800e0d2:	bf08      	it	eq
 800e0d4:	68ec      	ldreq	r4, [r5, #12]
 800e0d6:	e7e6      	b.n	800e0a6 <__swsetup_r+0x1e>
 800e0d8:	0751      	lsls	r1, r2, #29
 800e0da:	d512      	bpl.n	800e102 <__swsetup_r+0x7a>
 800e0dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e0de:	b141      	cbz	r1, 800e0f2 <__swsetup_r+0x6a>
 800e0e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e0e4:	4299      	cmp	r1, r3
 800e0e6:	d002      	beq.n	800e0ee <__swsetup_r+0x66>
 800e0e8:	4630      	mov	r0, r6
 800e0ea:	f7ff f9eb 	bl	800d4c4 <_free_r>
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	6363      	str	r3, [r4, #52]	; 0x34
 800e0f2:	89a3      	ldrh	r3, [r4, #12]
 800e0f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e0f8:	81a3      	strh	r3, [r4, #12]
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	6063      	str	r3, [r4, #4]
 800e0fe:	6923      	ldr	r3, [r4, #16]
 800e100:	6023      	str	r3, [r4, #0]
 800e102:	89a3      	ldrh	r3, [r4, #12]
 800e104:	f043 0308 	orr.w	r3, r3, #8
 800e108:	81a3      	strh	r3, [r4, #12]
 800e10a:	6923      	ldr	r3, [r4, #16]
 800e10c:	b94b      	cbnz	r3, 800e122 <__swsetup_r+0x9a>
 800e10e:	89a3      	ldrh	r3, [r4, #12]
 800e110:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e114:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e118:	d003      	beq.n	800e122 <__swsetup_r+0x9a>
 800e11a:	4621      	mov	r1, r4
 800e11c:	4630      	mov	r0, r6
 800e11e:	f001 f813 	bl	800f148 <__smakebuf_r>
 800e122:	89a2      	ldrh	r2, [r4, #12]
 800e124:	f012 0301 	ands.w	r3, r2, #1
 800e128:	d00c      	beq.n	800e144 <__swsetup_r+0xbc>
 800e12a:	2300      	movs	r3, #0
 800e12c:	60a3      	str	r3, [r4, #8]
 800e12e:	6963      	ldr	r3, [r4, #20]
 800e130:	425b      	negs	r3, r3
 800e132:	61a3      	str	r3, [r4, #24]
 800e134:	6923      	ldr	r3, [r4, #16]
 800e136:	b953      	cbnz	r3, 800e14e <__swsetup_r+0xc6>
 800e138:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e13c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800e140:	d1ba      	bne.n	800e0b8 <__swsetup_r+0x30>
 800e142:	bd70      	pop	{r4, r5, r6, pc}
 800e144:	0792      	lsls	r2, r2, #30
 800e146:	bf58      	it	pl
 800e148:	6963      	ldrpl	r3, [r4, #20]
 800e14a:	60a3      	str	r3, [r4, #8]
 800e14c:	e7f2      	b.n	800e134 <__swsetup_r+0xac>
 800e14e:	2000      	movs	r0, #0
 800e150:	e7f7      	b.n	800e142 <__swsetup_r+0xba>
 800e152:	bf00      	nop
 800e154:	20000620 	.word	0x20000620
 800e158:	0801302c 	.word	0x0801302c
 800e15c:	0801304c 	.word	0x0801304c
 800e160:	0801300c 	.word	0x0801300c

0800e164 <quorem>:
 800e164:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e168:	6903      	ldr	r3, [r0, #16]
 800e16a:	690c      	ldr	r4, [r1, #16]
 800e16c:	42a3      	cmp	r3, r4
 800e16e:	4680      	mov	r8, r0
 800e170:	f2c0 8082 	blt.w	800e278 <quorem+0x114>
 800e174:	3c01      	subs	r4, #1
 800e176:	f101 0714 	add.w	r7, r1, #20
 800e17a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800e17e:	f100 0614 	add.w	r6, r0, #20
 800e182:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800e186:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800e18a:	eb06 030c 	add.w	r3, r6, ip
 800e18e:	3501      	adds	r5, #1
 800e190:	eb07 090c 	add.w	r9, r7, ip
 800e194:	9301      	str	r3, [sp, #4]
 800e196:	fbb0 f5f5 	udiv	r5, r0, r5
 800e19a:	b395      	cbz	r5, 800e202 <quorem+0x9e>
 800e19c:	f04f 0a00 	mov.w	sl, #0
 800e1a0:	4638      	mov	r0, r7
 800e1a2:	46b6      	mov	lr, r6
 800e1a4:	46d3      	mov	fp, sl
 800e1a6:	f850 2b04 	ldr.w	r2, [r0], #4
 800e1aa:	b293      	uxth	r3, r2
 800e1ac:	fb05 a303 	mla	r3, r5, r3, sl
 800e1b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e1b4:	b29b      	uxth	r3, r3
 800e1b6:	ebab 0303 	sub.w	r3, fp, r3
 800e1ba:	0c12      	lsrs	r2, r2, #16
 800e1bc:	f8de b000 	ldr.w	fp, [lr]
 800e1c0:	fb05 a202 	mla	r2, r5, r2, sl
 800e1c4:	fa13 f38b 	uxtah	r3, r3, fp
 800e1c8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800e1cc:	fa1f fb82 	uxth.w	fp, r2
 800e1d0:	f8de 2000 	ldr.w	r2, [lr]
 800e1d4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800e1d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e1dc:	b29b      	uxth	r3, r3
 800e1de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e1e2:	4581      	cmp	r9, r0
 800e1e4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800e1e8:	f84e 3b04 	str.w	r3, [lr], #4
 800e1ec:	d2db      	bcs.n	800e1a6 <quorem+0x42>
 800e1ee:	f856 300c 	ldr.w	r3, [r6, ip]
 800e1f2:	b933      	cbnz	r3, 800e202 <quorem+0x9e>
 800e1f4:	9b01      	ldr	r3, [sp, #4]
 800e1f6:	3b04      	subs	r3, #4
 800e1f8:	429e      	cmp	r6, r3
 800e1fa:	461a      	mov	r2, r3
 800e1fc:	d330      	bcc.n	800e260 <quorem+0xfc>
 800e1fe:	f8c8 4010 	str.w	r4, [r8, #16]
 800e202:	4640      	mov	r0, r8
 800e204:	f001 f9f8 	bl	800f5f8 <__mcmp>
 800e208:	2800      	cmp	r0, #0
 800e20a:	db25      	blt.n	800e258 <quorem+0xf4>
 800e20c:	3501      	adds	r5, #1
 800e20e:	4630      	mov	r0, r6
 800e210:	f04f 0c00 	mov.w	ip, #0
 800e214:	f857 2b04 	ldr.w	r2, [r7], #4
 800e218:	f8d0 e000 	ldr.w	lr, [r0]
 800e21c:	b293      	uxth	r3, r2
 800e21e:	ebac 0303 	sub.w	r3, ip, r3
 800e222:	0c12      	lsrs	r2, r2, #16
 800e224:	fa13 f38e 	uxtah	r3, r3, lr
 800e228:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e22c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e230:	b29b      	uxth	r3, r3
 800e232:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e236:	45b9      	cmp	r9, r7
 800e238:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e23c:	f840 3b04 	str.w	r3, [r0], #4
 800e240:	d2e8      	bcs.n	800e214 <quorem+0xb0>
 800e242:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800e246:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800e24a:	b92a      	cbnz	r2, 800e258 <quorem+0xf4>
 800e24c:	3b04      	subs	r3, #4
 800e24e:	429e      	cmp	r6, r3
 800e250:	461a      	mov	r2, r3
 800e252:	d30b      	bcc.n	800e26c <quorem+0x108>
 800e254:	f8c8 4010 	str.w	r4, [r8, #16]
 800e258:	4628      	mov	r0, r5
 800e25a:	b003      	add	sp, #12
 800e25c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e260:	6812      	ldr	r2, [r2, #0]
 800e262:	3b04      	subs	r3, #4
 800e264:	2a00      	cmp	r2, #0
 800e266:	d1ca      	bne.n	800e1fe <quorem+0x9a>
 800e268:	3c01      	subs	r4, #1
 800e26a:	e7c5      	b.n	800e1f8 <quorem+0x94>
 800e26c:	6812      	ldr	r2, [r2, #0]
 800e26e:	3b04      	subs	r3, #4
 800e270:	2a00      	cmp	r2, #0
 800e272:	d1ef      	bne.n	800e254 <quorem+0xf0>
 800e274:	3c01      	subs	r4, #1
 800e276:	e7ea      	b.n	800e24e <quorem+0xea>
 800e278:	2000      	movs	r0, #0
 800e27a:	e7ee      	b.n	800e25a <quorem+0xf6>
 800e27c:	0000      	movs	r0, r0
	...

0800e280 <_dtoa_r>:
 800e280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e284:	ec57 6b10 	vmov	r6, r7, d0
 800e288:	b097      	sub	sp, #92	; 0x5c
 800e28a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e28c:	9106      	str	r1, [sp, #24]
 800e28e:	4604      	mov	r4, r0
 800e290:	920b      	str	r2, [sp, #44]	; 0x2c
 800e292:	9312      	str	r3, [sp, #72]	; 0x48
 800e294:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e298:	e9cd 6700 	strd	r6, r7, [sp]
 800e29c:	b93d      	cbnz	r5, 800e2ae <_dtoa_r+0x2e>
 800e29e:	2010      	movs	r0, #16
 800e2a0:	f7ff f8f4 	bl	800d48c <malloc>
 800e2a4:	6260      	str	r0, [r4, #36]	; 0x24
 800e2a6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e2aa:	6005      	str	r5, [r0, #0]
 800e2ac:	60c5      	str	r5, [r0, #12]
 800e2ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e2b0:	6819      	ldr	r1, [r3, #0]
 800e2b2:	b151      	cbz	r1, 800e2ca <_dtoa_r+0x4a>
 800e2b4:	685a      	ldr	r2, [r3, #4]
 800e2b6:	604a      	str	r2, [r1, #4]
 800e2b8:	2301      	movs	r3, #1
 800e2ba:	4093      	lsls	r3, r2
 800e2bc:	608b      	str	r3, [r1, #8]
 800e2be:	4620      	mov	r0, r4
 800e2c0:	f000 ffb8 	bl	800f234 <_Bfree>
 800e2c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	601a      	str	r2, [r3, #0]
 800e2ca:	1e3b      	subs	r3, r7, #0
 800e2cc:	bfbb      	ittet	lt
 800e2ce:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e2d2:	9301      	strlt	r3, [sp, #4]
 800e2d4:	2300      	movge	r3, #0
 800e2d6:	2201      	movlt	r2, #1
 800e2d8:	bfac      	ite	ge
 800e2da:	f8c8 3000 	strge.w	r3, [r8]
 800e2de:	f8c8 2000 	strlt.w	r2, [r8]
 800e2e2:	4baf      	ldr	r3, [pc, #700]	; (800e5a0 <_dtoa_r+0x320>)
 800e2e4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e2e8:	ea33 0308 	bics.w	r3, r3, r8
 800e2ec:	d114      	bne.n	800e318 <_dtoa_r+0x98>
 800e2ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e2f0:	f242 730f 	movw	r3, #9999	; 0x270f
 800e2f4:	6013      	str	r3, [r2, #0]
 800e2f6:	9b00      	ldr	r3, [sp, #0]
 800e2f8:	b923      	cbnz	r3, 800e304 <_dtoa_r+0x84>
 800e2fa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800e2fe:	2800      	cmp	r0, #0
 800e300:	f000 8542 	beq.w	800ed88 <_dtoa_r+0xb08>
 800e304:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e306:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800e5b4 <_dtoa_r+0x334>
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	f000 8544 	beq.w	800ed98 <_dtoa_r+0xb18>
 800e310:	f10b 0303 	add.w	r3, fp, #3
 800e314:	f000 bd3e 	b.w	800ed94 <_dtoa_r+0xb14>
 800e318:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e31c:	2200      	movs	r2, #0
 800e31e:	2300      	movs	r3, #0
 800e320:	4630      	mov	r0, r6
 800e322:	4639      	mov	r1, r7
 800e324:	f7f2 fbe8 	bl	8000af8 <__aeabi_dcmpeq>
 800e328:	4681      	mov	r9, r0
 800e32a:	b168      	cbz	r0, 800e348 <_dtoa_r+0xc8>
 800e32c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e32e:	2301      	movs	r3, #1
 800e330:	6013      	str	r3, [r2, #0]
 800e332:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e334:	2b00      	cmp	r3, #0
 800e336:	f000 8524 	beq.w	800ed82 <_dtoa_r+0xb02>
 800e33a:	4b9a      	ldr	r3, [pc, #616]	; (800e5a4 <_dtoa_r+0x324>)
 800e33c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e33e:	f103 3bff 	add.w	fp, r3, #4294967295
 800e342:	6013      	str	r3, [r2, #0]
 800e344:	f000 bd28 	b.w	800ed98 <_dtoa_r+0xb18>
 800e348:	aa14      	add	r2, sp, #80	; 0x50
 800e34a:	a915      	add	r1, sp, #84	; 0x54
 800e34c:	ec47 6b10 	vmov	d0, r6, r7
 800e350:	4620      	mov	r0, r4
 800e352:	f001 f9c8 	bl	800f6e6 <__d2b>
 800e356:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800e35a:	9004      	str	r0, [sp, #16]
 800e35c:	2d00      	cmp	r5, #0
 800e35e:	d07c      	beq.n	800e45a <_dtoa_r+0x1da>
 800e360:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e364:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800e368:	46b2      	mov	sl, r6
 800e36a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800e36e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e372:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800e376:	2200      	movs	r2, #0
 800e378:	4b8b      	ldr	r3, [pc, #556]	; (800e5a8 <_dtoa_r+0x328>)
 800e37a:	4650      	mov	r0, sl
 800e37c:	4659      	mov	r1, fp
 800e37e:	f7f1 ff9b 	bl	80002b8 <__aeabi_dsub>
 800e382:	a381      	add	r3, pc, #516	; (adr r3, 800e588 <_dtoa_r+0x308>)
 800e384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e388:	f7f2 f94e 	bl	8000628 <__aeabi_dmul>
 800e38c:	a380      	add	r3, pc, #512	; (adr r3, 800e590 <_dtoa_r+0x310>)
 800e38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e392:	f7f1 ff93 	bl	80002bc <__adddf3>
 800e396:	4606      	mov	r6, r0
 800e398:	4628      	mov	r0, r5
 800e39a:	460f      	mov	r7, r1
 800e39c:	f7f2 f8da 	bl	8000554 <__aeabi_i2d>
 800e3a0:	a37d      	add	r3, pc, #500	; (adr r3, 800e598 <_dtoa_r+0x318>)
 800e3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3a6:	f7f2 f93f 	bl	8000628 <__aeabi_dmul>
 800e3aa:	4602      	mov	r2, r0
 800e3ac:	460b      	mov	r3, r1
 800e3ae:	4630      	mov	r0, r6
 800e3b0:	4639      	mov	r1, r7
 800e3b2:	f7f1 ff83 	bl	80002bc <__adddf3>
 800e3b6:	4606      	mov	r6, r0
 800e3b8:	460f      	mov	r7, r1
 800e3ba:	f7f2 fbe5 	bl	8000b88 <__aeabi_d2iz>
 800e3be:	2200      	movs	r2, #0
 800e3c0:	4682      	mov	sl, r0
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	4630      	mov	r0, r6
 800e3c6:	4639      	mov	r1, r7
 800e3c8:	f7f2 fba0 	bl	8000b0c <__aeabi_dcmplt>
 800e3cc:	b148      	cbz	r0, 800e3e2 <_dtoa_r+0x162>
 800e3ce:	4650      	mov	r0, sl
 800e3d0:	f7f2 f8c0 	bl	8000554 <__aeabi_i2d>
 800e3d4:	4632      	mov	r2, r6
 800e3d6:	463b      	mov	r3, r7
 800e3d8:	f7f2 fb8e 	bl	8000af8 <__aeabi_dcmpeq>
 800e3dc:	b908      	cbnz	r0, 800e3e2 <_dtoa_r+0x162>
 800e3de:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e3e2:	f1ba 0f16 	cmp.w	sl, #22
 800e3e6:	d859      	bhi.n	800e49c <_dtoa_r+0x21c>
 800e3e8:	4970      	ldr	r1, [pc, #448]	; (800e5ac <_dtoa_r+0x32c>)
 800e3ea:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800e3ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e3f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e3f6:	f7f2 fba7 	bl	8000b48 <__aeabi_dcmpgt>
 800e3fa:	2800      	cmp	r0, #0
 800e3fc:	d050      	beq.n	800e4a0 <_dtoa_r+0x220>
 800e3fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e402:	2300      	movs	r3, #0
 800e404:	930f      	str	r3, [sp, #60]	; 0x3c
 800e406:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e408:	1b5d      	subs	r5, r3, r5
 800e40a:	f1b5 0801 	subs.w	r8, r5, #1
 800e40e:	bf49      	itett	mi
 800e410:	f1c5 0301 	rsbmi	r3, r5, #1
 800e414:	2300      	movpl	r3, #0
 800e416:	9305      	strmi	r3, [sp, #20]
 800e418:	f04f 0800 	movmi.w	r8, #0
 800e41c:	bf58      	it	pl
 800e41e:	9305      	strpl	r3, [sp, #20]
 800e420:	f1ba 0f00 	cmp.w	sl, #0
 800e424:	db3e      	blt.n	800e4a4 <_dtoa_r+0x224>
 800e426:	2300      	movs	r3, #0
 800e428:	44d0      	add	r8, sl
 800e42a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800e42e:	9307      	str	r3, [sp, #28]
 800e430:	9b06      	ldr	r3, [sp, #24]
 800e432:	2b09      	cmp	r3, #9
 800e434:	f200 8090 	bhi.w	800e558 <_dtoa_r+0x2d8>
 800e438:	2b05      	cmp	r3, #5
 800e43a:	bfc4      	itt	gt
 800e43c:	3b04      	subgt	r3, #4
 800e43e:	9306      	strgt	r3, [sp, #24]
 800e440:	9b06      	ldr	r3, [sp, #24]
 800e442:	f1a3 0302 	sub.w	r3, r3, #2
 800e446:	bfcc      	ite	gt
 800e448:	2500      	movgt	r5, #0
 800e44a:	2501      	movle	r5, #1
 800e44c:	2b03      	cmp	r3, #3
 800e44e:	f200 808f 	bhi.w	800e570 <_dtoa_r+0x2f0>
 800e452:	e8df f003 	tbb	[pc, r3]
 800e456:	7f7d      	.short	0x7f7d
 800e458:	7131      	.short	0x7131
 800e45a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800e45e:	441d      	add	r5, r3
 800e460:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800e464:	2820      	cmp	r0, #32
 800e466:	dd13      	ble.n	800e490 <_dtoa_r+0x210>
 800e468:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800e46c:	9b00      	ldr	r3, [sp, #0]
 800e46e:	fa08 f800 	lsl.w	r8, r8, r0
 800e472:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800e476:	fa23 f000 	lsr.w	r0, r3, r0
 800e47a:	ea48 0000 	orr.w	r0, r8, r0
 800e47e:	f7f2 f859 	bl	8000534 <__aeabi_ui2d>
 800e482:	2301      	movs	r3, #1
 800e484:	4682      	mov	sl, r0
 800e486:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800e48a:	3d01      	subs	r5, #1
 800e48c:	9313      	str	r3, [sp, #76]	; 0x4c
 800e48e:	e772      	b.n	800e376 <_dtoa_r+0xf6>
 800e490:	9b00      	ldr	r3, [sp, #0]
 800e492:	f1c0 0020 	rsb	r0, r0, #32
 800e496:	fa03 f000 	lsl.w	r0, r3, r0
 800e49a:	e7f0      	b.n	800e47e <_dtoa_r+0x1fe>
 800e49c:	2301      	movs	r3, #1
 800e49e:	e7b1      	b.n	800e404 <_dtoa_r+0x184>
 800e4a0:	900f      	str	r0, [sp, #60]	; 0x3c
 800e4a2:	e7b0      	b.n	800e406 <_dtoa_r+0x186>
 800e4a4:	9b05      	ldr	r3, [sp, #20]
 800e4a6:	eba3 030a 	sub.w	r3, r3, sl
 800e4aa:	9305      	str	r3, [sp, #20]
 800e4ac:	f1ca 0300 	rsb	r3, sl, #0
 800e4b0:	9307      	str	r3, [sp, #28]
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	930e      	str	r3, [sp, #56]	; 0x38
 800e4b6:	e7bb      	b.n	800e430 <_dtoa_r+0x1b0>
 800e4b8:	2301      	movs	r3, #1
 800e4ba:	930a      	str	r3, [sp, #40]	; 0x28
 800e4bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	dd59      	ble.n	800e576 <_dtoa_r+0x2f6>
 800e4c2:	9302      	str	r3, [sp, #8]
 800e4c4:	4699      	mov	r9, r3
 800e4c6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e4c8:	2200      	movs	r2, #0
 800e4ca:	6072      	str	r2, [r6, #4]
 800e4cc:	2204      	movs	r2, #4
 800e4ce:	f102 0014 	add.w	r0, r2, #20
 800e4d2:	4298      	cmp	r0, r3
 800e4d4:	6871      	ldr	r1, [r6, #4]
 800e4d6:	d953      	bls.n	800e580 <_dtoa_r+0x300>
 800e4d8:	4620      	mov	r0, r4
 800e4da:	f000 fe77 	bl	800f1cc <_Balloc>
 800e4de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e4e0:	6030      	str	r0, [r6, #0]
 800e4e2:	f1b9 0f0e 	cmp.w	r9, #14
 800e4e6:	f8d3 b000 	ldr.w	fp, [r3]
 800e4ea:	f200 80e6 	bhi.w	800e6ba <_dtoa_r+0x43a>
 800e4ee:	2d00      	cmp	r5, #0
 800e4f0:	f000 80e3 	beq.w	800e6ba <_dtoa_r+0x43a>
 800e4f4:	ed9d 7b00 	vldr	d7, [sp]
 800e4f8:	f1ba 0f00 	cmp.w	sl, #0
 800e4fc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800e500:	dd74      	ble.n	800e5ec <_dtoa_r+0x36c>
 800e502:	4a2a      	ldr	r2, [pc, #168]	; (800e5ac <_dtoa_r+0x32c>)
 800e504:	f00a 030f 	and.w	r3, sl, #15
 800e508:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e50c:	ed93 7b00 	vldr	d7, [r3]
 800e510:	ea4f 162a 	mov.w	r6, sl, asr #4
 800e514:	06f0      	lsls	r0, r6, #27
 800e516:	ed8d 7b08 	vstr	d7, [sp, #32]
 800e51a:	d565      	bpl.n	800e5e8 <_dtoa_r+0x368>
 800e51c:	4b24      	ldr	r3, [pc, #144]	; (800e5b0 <_dtoa_r+0x330>)
 800e51e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e522:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e526:	f7f2 f9a9 	bl	800087c <__aeabi_ddiv>
 800e52a:	e9cd 0100 	strd	r0, r1, [sp]
 800e52e:	f006 060f 	and.w	r6, r6, #15
 800e532:	2503      	movs	r5, #3
 800e534:	4f1e      	ldr	r7, [pc, #120]	; (800e5b0 <_dtoa_r+0x330>)
 800e536:	e04c      	b.n	800e5d2 <_dtoa_r+0x352>
 800e538:	2301      	movs	r3, #1
 800e53a:	930a      	str	r3, [sp, #40]	; 0x28
 800e53c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e53e:	4453      	add	r3, sl
 800e540:	f103 0901 	add.w	r9, r3, #1
 800e544:	9302      	str	r3, [sp, #8]
 800e546:	464b      	mov	r3, r9
 800e548:	2b01      	cmp	r3, #1
 800e54a:	bfb8      	it	lt
 800e54c:	2301      	movlt	r3, #1
 800e54e:	e7ba      	b.n	800e4c6 <_dtoa_r+0x246>
 800e550:	2300      	movs	r3, #0
 800e552:	e7b2      	b.n	800e4ba <_dtoa_r+0x23a>
 800e554:	2300      	movs	r3, #0
 800e556:	e7f0      	b.n	800e53a <_dtoa_r+0x2ba>
 800e558:	2501      	movs	r5, #1
 800e55a:	2300      	movs	r3, #0
 800e55c:	9306      	str	r3, [sp, #24]
 800e55e:	950a      	str	r5, [sp, #40]	; 0x28
 800e560:	f04f 33ff 	mov.w	r3, #4294967295
 800e564:	9302      	str	r3, [sp, #8]
 800e566:	4699      	mov	r9, r3
 800e568:	2200      	movs	r2, #0
 800e56a:	2312      	movs	r3, #18
 800e56c:	920b      	str	r2, [sp, #44]	; 0x2c
 800e56e:	e7aa      	b.n	800e4c6 <_dtoa_r+0x246>
 800e570:	2301      	movs	r3, #1
 800e572:	930a      	str	r3, [sp, #40]	; 0x28
 800e574:	e7f4      	b.n	800e560 <_dtoa_r+0x2e0>
 800e576:	2301      	movs	r3, #1
 800e578:	9302      	str	r3, [sp, #8]
 800e57a:	4699      	mov	r9, r3
 800e57c:	461a      	mov	r2, r3
 800e57e:	e7f5      	b.n	800e56c <_dtoa_r+0x2ec>
 800e580:	3101      	adds	r1, #1
 800e582:	6071      	str	r1, [r6, #4]
 800e584:	0052      	lsls	r2, r2, #1
 800e586:	e7a2      	b.n	800e4ce <_dtoa_r+0x24e>
 800e588:	636f4361 	.word	0x636f4361
 800e58c:	3fd287a7 	.word	0x3fd287a7
 800e590:	8b60c8b3 	.word	0x8b60c8b3
 800e594:	3fc68a28 	.word	0x3fc68a28
 800e598:	509f79fb 	.word	0x509f79fb
 800e59c:	3fd34413 	.word	0x3fd34413
 800e5a0:	7ff00000 	.word	0x7ff00000
 800e5a4:	08012fd9 	.word	0x08012fd9
 800e5a8:	3ff80000 	.word	0x3ff80000
 800e5ac:	08013098 	.word	0x08013098
 800e5b0:	08013070 	.word	0x08013070
 800e5b4:	08013005 	.word	0x08013005
 800e5b8:	07f1      	lsls	r1, r6, #31
 800e5ba:	d508      	bpl.n	800e5ce <_dtoa_r+0x34e>
 800e5bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e5c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e5c4:	f7f2 f830 	bl	8000628 <__aeabi_dmul>
 800e5c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e5cc:	3501      	adds	r5, #1
 800e5ce:	1076      	asrs	r6, r6, #1
 800e5d0:	3708      	adds	r7, #8
 800e5d2:	2e00      	cmp	r6, #0
 800e5d4:	d1f0      	bne.n	800e5b8 <_dtoa_r+0x338>
 800e5d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e5da:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e5de:	f7f2 f94d 	bl	800087c <__aeabi_ddiv>
 800e5e2:	e9cd 0100 	strd	r0, r1, [sp]
 800e5e6:	e01a      	b.n	800e61e <_dtoa_r+0x39e>
 800e5e8:	2502      	movs	r5, #2
 800e5ea:	e7a3      	b.n	800e534 <_dtoa_r+0x2b4>
 800e5ec:	f000 80a0 	beq.w	800e730 <_dtoa_r+0x4b0>
 800e5f0:	f1ca 0600 	rsb	r6, sl, #0
 800e5f4:	4b9f      	ldr	r3, [pc, #636]	; (800e874 <_dtoa_r+0x5f4>)
 800e5f6:	4fa0      	ldr	r7, [pc, #640]	; (800e878 <_dtoa_r+0x5f8>)
 800e5f8:	f006 020f 	and.w	r2, r6, #15
 800e5fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e604:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e608:	f7f2 f80e 	bl	8000628 <__aeabi_dmul>
 800e60c:	e9cd 0100 	strd	r0, r1, [sp]
 800e610:	1136      	asrs	r6, r6, #4
 800e612:	2300      	movs	r3, #0
 800e614:	2502      	movs	r5, #2
 800e616:	2e00      	cmp	r6, #0
 800e618:	d17f      	bne.n	800e71a <_dtoa_r+0x49a>
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d1e1      	bne.n	800e5e2 <_dtoa_r+0x362>
 800e61e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e620:	2b00      	cmp	r3, #0
 800e622:	f000 8087 	beq.w	800e734 <_dtoa_r+0x4b4>
 800e626:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e62a:	2200      	movs	r2, #0
 800e62c:	4b93      	ldr	r3, [pc, #588]	; (800e87c <_dtoa_r+0x5fc>)
 800e62e:	4630      	mov	r0, r6
 800e630:	4639      	mov	r1, r7
 800e632:	f7f2 fa6b 	bl	8000b0c <__aeabi_dcmplt>
 800e636:	2800      	cmp	r0, #0
 800e638:	d07c      	beq.n	800e734 <_dtoa_r+0x4b4>
 800e63a:	f1b9 0f00 	cmp.w	r9, #0
 800e63e:	d079      	beq.n	800e734 <_dtoa_r+0x4b4>
 800e640:	9b02      	ldr	r3, [sp, #8]
 800e642:	2b00      	cmp	r3, #0
 800e644:	dd35      	ble.n	800e6b2 <_dtoa_r+0x432>
 800e646:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e64a:	9308      	str	r3, [sp, #32]
 800e64c:	4639      	mov	r1, r7
 800e64e:	2200      	movs	r2, #0
 800e650:	4b8b      	ldr	r3, [pc, #556]	; (800e880 <_dtoa_r+0x600>)
 800e652:	4630      	mov	r0, r6
 800e654:	f7f1 ffe8 	bl	8000628 <__aeabi_dmul>
 800e658:	e9cd 0100 	strd	r0, r1, [sp]
 800e65c:	9f02      	ldr	r7, [sp, #8]
 800e65e:	3501      	adds	r5, #1
 800e660:	4628      	mov	r0, r5
 800e662:	f7f1 ff77 	bl	8000554 <__aeabi_i2d>
 800e666:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e66a:	f7f1 ffdd 	bl	8000628 <__aeabi_dmul>
 800e66e:	2200      	movs	r2, #0
 800e670:	4b84      	ldr	r3, [pc, #528]	; (800e884 <_dtoa_r+0x604>)
 800e672:	f7f1 fe23 	bl	80002bc <__adddf3>
 800e676:	4605      	mov	r5, r0
 800e678:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800e67c:	2f00      	cmp	r7, #0
 800e67e:	d15d      	bne.n	800e73c <_dtoa_r+0x4bc>
 800e680:	2200      	movs	r2, #0
 800e682:	4b81      	ldr	r3, [pc, #516]	; (800e888 <_dtoa_r+0x608>)
 800e684:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e688:	f7f1 fe16 	bl	80002b8 <__aeabi_dsub>
 800e68c:	462a      	mov	r2, r5
 800e68e:	4633      	mov	r3, r6
 800e690:	e9cd 0100 	strd	r0, r1, [sp]
 800e694:	f7f2 fa58 	bl	8000b48 <__aeabi_dcmpgt>
 800e698:	2800      	cmp	r0, #0
 800e69a:	f040 8288 	bne.w	800ebae <_dtoa_r+0x92e>
 800e69e:	462a      	mov	r2, r5
 800e6a0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800e6a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e6a8:	f7f2 fa30 	bl	8000b0c <__aeabi_dcmplt>
 800e6ac:	2800      	cmp	r0, #0
 800e6ae:	f040 827c 	bne.w	800ebaa <_dtoa_r+0x92a>
 800e6b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e6b6:	e9cd 2300 	strd	r2, r3, [sp]
 800e6ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	f2c0 8150 	blt.w	800e962 <_dtoa_r+0x6e2>
 800e6c2:	f1ba 0f0e 	cmp.w	sl, #14
 800e6c6:	f300 814c 	bgt.w	800e962 <_dtoa_r+0x6e2>
 800e6ca:	4b6a      	ldr	r3, [pc, #424]	; (800e874 <_dtoa_r+0x5f4>)
 800e6cc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e6d0:	ed93 7b00 	vldr	d7, [r3]
 800e6d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e6dc:	f280 80d8 	bge.w	800e890 <_dtoa_r+0x610>
 800e6e0:	f1b9 0f00 	cmp.w	r9, #0
 800e6e4:	f300 80d4 	bgt.w	800e890 <_dtoa_r+0x610>
 800e6e8:	f040 825e 	bne.w	800eba8 <_dtoa_r+0x928>
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	4b66      	ldr	r3, [pc, #408]	; (800e888 <_dtoa_r+0x608>)
 800e6f0:	ec51 0b17 	vmov	r0, r1, d7
 800e6f4:	f7f1 ff98 	bl	8000628 <__aeabi_dmul>
 800e6f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e6fc:	f7f2 fa1a 	bl	8000b34 <__aeabi_dcmpge>
 800e700:	464f      	mov	r7, r9
 800e702:	464e      	mov	r6, r9
 800e704:	2800      	cmp	r0, #0
 800e706:	f040 8234 	bne.w	800eb72 <_dtoa_r+0x8f2>
 800e70a:	2331      	movs	r3, #49	; 0x31
 800e70c:	f10b 0501 	add.w	r5, fp, #1
 800e710:	f88b 3000 	strb.w	r3, [fp]
 800e714:	f10a 0a01 	add.w	sl, sl, #1
 800e718:	e22f      	b.n	800eb7a <_dtoa_r+0x8fa>
 800e71a:	07f2      	lsls	r2, r6, #31
 800e71c:	d505      	bpl.n	800e72a <_dtoa_r+0x4aa>
 800e71e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e722:	f7f1 ff81 	bl	8000628 <__aeabi_dmul>
 800e726:	3501      	adds	r5, #1
 800e728:	2301      	movs	r3, #1
 800e72a:	1076      	asrs	r6, r6, #1
 800e72c:	3708      	adds	r7, #8
 800e72e:	e772      	b.n	800e616 <_dtoa_r+0x396>
 800e730:	2502      	movs	r5, #2
 800e732:	e774      	b.n	800e61e <_dtoa_r+0x39e>
 800e734:	f8cd a020 	str.w	sl, [sp, #32]
 800e738:	464f      	mov	r7, r9
 800e73a:	e791      	b.n	800e660 <_dtoa_r+0x3e0>
 800e73c:	4b4d      	ldr	r3, [pc, #308]	; (800e874 <_dtoa_r+0x5f4>)
 800e73e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e742:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800e746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d047      	beq.n	800e7dc <_dtoa_r+0x55c>
 800e74c:	4602      	mov	r2, r0
 800e74e:	460b      	mov	r3, r1
 800e750:	2000      	movs	r0, #0
 800e752:	494e      	ldr	r1, [pc, #312]	; (800e88c <_dtoa_r+0x60c>)
 800e754:	f7f2 f892 	bl	800087c <__aeabi_ddiv>
 800e758:	462a      	mov	r2, r5
 800e75a:	4633      	mov	r3, r6
 800e75c:	f7f1 fdac 	bl	80002b8 <__aeabi_dsub>
 800e760:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e764:	465d      	mov	r5, fp
 800e766:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e76a:	f7f2 fa0d 	bl	8000b88 <__aeabi_d2iz>
 800e76e:	4606      	mov	r6, r0
 800e770:	f7f1 fef0 	bl	8000554 <__aeabi_i2d>
 800e774:	4602      	mov	r2, r0
 800e776:	460b      	mov	r3, r1
 800e778:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e77c:	f7f1 fd9c 	bl	80002b8 <__aeabi_dsub>
 800e780:	3630      	adds	r6, #48	; 0x30
 800e782:	f805 6b01 	strb.w	r6, [r5], #1
 800e786:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e78a:	e9cd 0100 	strd	r0, r1, [sp]
 800e78e:	f7f2 f9bd 	bl	8000b0c <__aeabi_dcmplt>
 800e792:	2800      	cmp	r0, #0
 800e794:	d163      	bne.n	800e85e <_dtoa_r+0x5de>
 800e796:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e79a:	2000      	movs	r0, #0
 800e79c:	4937      	ldr	r1, [pc, #220]	; (800e87c <_dtoa_r+0x5fc>)
 800e79e:	f7f1 fd8b 	bl	80002b8 <__aeabi_dsub>
 800e7a2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e7a6:	f7f2 f9b1 	bl	8000b0c <__aeabi_dcmplt>
 800e7aa:	2800      	cmp	r0, #0
 800e7ac:	f040 80b7 	bne.w	800e91e <_dtoa_r+0x69e>
 800e7b0:	eba5 030b 	sub.w	r3, r5, fp
 800e7b4:	429f      	cmp	r7, r3
 800e7b6:	f77f af7c 	ble.w	800e6b2 <_dtoa_r+0x432>
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	4b30      	ldr	r3, [pc, #192]	; (800e880 <_dtoa_r+0x600>)
 800e7be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e7c2:	f7f1 ff31 	bl	8000628 <__aeabi_dmul>
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e7cc:	4b2c      	ldr	r3, [pc, #176]	; (800e880 <_dtoa_r+0x600>)
 800e7ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e7d2:	f7f1 ff29 	bl	8000628 <__aeabi_dmul>
 800e7d6:	e9cd 0100 	strd	r0, r1, [sp]
 800e7da:	e7c4      	b.n	800e766 <_dtoa_r+0x4e6>
 800e7dc:	462a      	mov	r2, r5
 800e7de:	4633      	mov	r3, r6
 800e7e0:	f7f1 ff22 	bl	8000628 <__aeabi_dmul>
 800e7e4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e7e8:	eb0b 0507 	add.w	r5, fp, r7
 800e7ec:	465e      	mov	r6, fp
 800e7ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e7f2:	f7f2 f9c9 	bl	8000b88 <__aeabi_d2iz>
 800e7f6:	4607      	mov	r7, r0
 800e7f8:	f7f1 feac 	bl	8000554 <__aeabi_i2d>
 800e7fc:	3730      	adds	r7, #48	; 0x30
 800e7fe:	4602      	mov	r2, r0
 800e800:	460b      	mov	r3, r1
 800e802:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e806:	f7f1 fd57 	bl	80002b8 <__aeabi_dsub>
 800e80a:	f806 7b01 	strb.w	r7, [r6], #1
 800e80e:	42ae      	cmp	r6, r5
 800e810:	e9cd 0100 	strd	r0, r1, [sp]
 800e814:	f04f 0200 	mov.w	r2, #0
 800e818:	d126      	bne.n	800e868 <_dtoa_r+0x5e8>
 800e81a:	4b1c      	ldr	r3, [pc, #112]	; (800e88c <_dtoa_r+0x60c>)
 800e81c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e820:	f7f1 fd4c 	bl	80002bc <__adddf3>
 800e824:	4602      	mov	r2, r0
 800e826:	460b      	mov	r3, r1
 800e828:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e82c:	f7f2 f98c 	bl	8000b48 <__aeabi_dcmpgt>
 800e830:	2800      	cmp	r0, #0
 800e832:	d174      	bne.n	800e91e <_dtoa_r+0x69e>
 800e834:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e838:	2000      	movs	r0, #0
 800e83a:	4914      	ldr	r1, [pc, #80]	; (800e88c <_dtoa_r+0x60c>)
 800e83c:	f7f1 fd3c 	bl	80002b8 <__aeabi_dsub>
 800e840:	4602      	mov	r2, r0
 800e842:	460b      	mov	r3, r1
 800e844:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e848:	f7f2 f960 	bl	8000b0c <__aeabi_dcmplt>
 800e84c:	2800      	cmp	r0, #0
 800e84e:	f43f af30 	beq.w	800e6b2 <_dtoa_r+0x432>
 800e852:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e856:	2b30      	cmp	r3, #48	; 0x30
 800e858:	f105 32ff 	add.w	r2, r5, #4294967295
 800e85c:	d002      	beq.n	800e864 <_dtoa_r+0x5e4>
 800e85e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800e862:	e04a      	b.n	800e8fa <_dtoa_r+0x67a>
 800e864:	4615      	mov	r5, r2
 800e866:	e7f4      	b.n	800e852 <_dtoa_r+0x5d2>
 800e868:	4b05      	ldr	r3, [pc, #20]	; (800e880 <_dtoa_r+0x600>)
 800e86a:	f7f1 fedd 	bl	8000628 <__aeabi_dmul>
 800e86e:	e9cd 0100 	strd	r0, r1, [sp]
 800e872:	e7bc      	b.n	800e7ee <_dtoa_r+0x56e>
 800e874:	08013098 	.word	0x08013098
 800e878:	08013070 	.word	0x08013070
 800e87c:	3ff00000 	.word	0x3ff00000
 800e880:	40240000 	.word	0x40240000
 800e884:	401c0000 	.word	0x401c0000
 800e888:	40140000 	.word	0x40140000
 800e88c:	3fe00000 	.word	0x3fe00000
 800e890:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e894:	465d      	mov	r5, fp
 800e896:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e89a:	4630      	mov	r0, r6
 800e89c:	4639      	mov	r1, r7
 800e89e:	f7f1 ffed 	bl	800087c <__aeabi_ddiv>
 800e8a2:	f7f2 f971 	bl	8000b88 <__aeabi_d2iz>
 800e8a6:	4680      	mov	r8, r0
 800e8a8:	f7f1 fe54 	bl	8000554 <__aeabi_i2d>
 800e8ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e8b0:	f7f1 feba 	bl	8000628 <__aeabi_dmul>
 800e8b4:	4602      	mov	r2, r0
 800e8b6:	460b      	mov	r3, r1
 800e8b8:	4630      	mov	r0, r6
 800e8ba:	4639      	mov	r1, r7
 800e8bc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800e8c0:	f7f1 fcfa 	bl	80002b8 <__aeabi_dsub>
 800e8c4:	f805 6b01 	strb.w	r6, [r5], #1
 800e8c8:	eba5 060b 	sub.w	r6, r5, fp
 800e8cc:	45b1      	cmp	r9, r6
 800e8ce:	4602      	mov	r2, r0
 800e8d0:	460b      	mov	r3, r1
 800e8d2:	d139      	bne.n	800e948 <_dtoa_r+0x6c8>
 800e8d4:	f7f1 fcf2 	bl	80002bc <__adddf3>
 800e8d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e8dc:	4606      	mov	r6, r0
 800e8de:	460f      	mov	r7, r1
 800e8e0:	f7f2 f932 	bl	8000b48 <__aeabi_dcmpgt>
 800e8e4:	b9c8      	cbnz	r0, 800e91a <_dtoa_r+0x69a>
 800e8e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e8ea:	4630      	mov	r0, r6
 800e8ec:	4639      	mov	r1, r7
 800e8ee:	f7f2 f903 	bl	8000af8 <__aeabi_dcmpeq>
 800e8f2:	b110      	cbz	r0, 800e8fa <_dtoa_r+0x67a>
 800e8f4:	f018 0f01 	tst.w	r8, #1
 800e8f8:	d10f      	bne.n	800e91a <_dtoa_r+0x69a>
 800e8fa:	9904      	ldr	r1, [sp, #16]
 800e8fc:	4620      	mov	r0, r4
 800e8fe:	f000 fc99 	bl	800f234 <_Bfree>
 800e902:	2300      	movs	r3, #0
 800e904:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e906:	702b      	strb	r3, [r5, #0]
 800e908:	f10a 0301 	add.w	r3, sl, #1
 800e90c:	6013      	str	r3, [r2, #0]
 800e90e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e910:	2b00      	cmp	r3, #0
 800e912:	f000 8241 	beq.w	800ed98 <_dtoa_r+0xb18>
 800e916:	601d      	str	r5, [r3, #0]
 800e918:	e23e      	b.n	800ed98 <_dtoa_r+0xb18>
 800e91a:	f8cd a020 	str.w	sl, [sp, #32]
 800e91e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e922:	2a39      	cmp	r2, #57	; 0x39
 800e924:	f105 33ff 	add.w	r3, r5, #4294967295
 800e928:	d108      	bne.n	800e93c <_dtoa_r+0x6bc>
 800e92a:	459b      	cmp	fp, r3
 800e92c:	d10a      	bne.n	800e944 <_dtoa_r+0x6c4>
 800e92e:	9b08      	ldr	r3, [sp, #32]
 800e930:	3301      	adds	r3, #1
 800e932:	9308      	str	r3, [sp, #32]
 800e934:	2330      	movs	r3, #48	; 0x30
 800e936:	f88b 3000 	strb.w	r3, [fp]
 800e93a:	465b      	mov	r3, fp
 800e93c:	781a      	ldrb	r2, [r3, #0]
 800e93e:	3201      	adds	r2, #1
 800e940:	701a      	strb	r2, [r3, #0]
 800e942:	e78c      	b.n	800e85e <_dtoa_r+0x5de>
 800e944:	461d      	mov	r5, r3
 800e946:	e7ea      	b.n	800e91e <_dtoa_r+0x69e>
 800e948:	2200      	movs	r2, #0
 800e94a:	4b9b      	ldr	r3, [pc, #620]	; (800ebb8 <_dtoa_r+0x938>)
 800e94c:	f7f1 fe6c 	bl	8000628 <__aeabi_dmul>
 800e950:	2200      	movs	r2, #0
 800e952:	2300      	movs	r3, #0
 800e954:	4606      	mov	r6, r0
 800e956:	460f      	mov	r7, r1
 800e958:	f7f2 f8ce 	bl	8000af8 <__aeabi_dcmpeq>
 800e95c:	2800      	cmp	r0, #0
 800e95e:	d09a      	beq.n	800e896 <_dtoa_r+0x616>
 800e960:	e7cb      	b.n	800e8fa <_dtoa_r+0x67a>
 800e962:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e964:	2a00      	cmp	r2, #0
 800e966:	f000 808b 	beq.w	800ea80 <_dtoa_r+0x800>
 800e96a:	9a06      	ldr	r2, [sp, #24]
 800e96c:	2a01      	cmp	r2, #1
 800e96e:	dc6e      	bgt.n	800ea4e <_dtoa_r+0x7ce>
 800e970:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e972:	2a00      	cmp	r2, #0
 800e974:	d067      	beq.n	800ea46 <_dtoa_r+0x7c6>
 800e976:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e97a:	9f07      	ldr	r7, [sp, #28]
 800e97c:	9d05      	ldr	r5, [sp, #20]
 800e97e:	9a05      	ldr	r2, [sp, #20]
 800e980:	2101      	movs	r1, #1
 800e982:	441a      	add	r2, r3
 800e984:	4620      	mov	r0, r4
 800e986:	9205      	str	r2, [sp, #20]
 800e988:	4498      	add	r8, r3
 800e98a:	f000 fcf3 	bl	800f374 <__i2b>
 800e98e:	4606      	mov	r6, r0
 800e990:	2d00      	cmp	r5, #0
 800e992:	dd0c      	ble.n	800e9ae <_dtoa_r+0x72e>
 800e994:	f1b8 0f00 	cmp.w	r8, #0
 800e998:	dd09      	ble.n	800e9ae <_dtoa_r+0x72e>
 800e99a:	4545      	cmp	r5, r8
 800e99c:	9a05      	ldr	r2, [sp, #20]
 800e99e:	462b      	mov	r3, r5
 800e9a0:	bfa8      	it	ge
 800e9a2:	4643      	movge	r3, r8
 800e9a4:	1ad2      	subs	r2, r2, r3
 800e9a6:	9205      	str	r2, [sp, #20]
 800e9a8:	1aed      	subs	r5, r5, r3
 800e9aa:	eba8 0803 	sub.w	r8, r8, r3
 800e9ae:	9b07      	ldr	r3, [sp, #28]
 800e9b0:	b1eb      	cbz	r3, 800e9ee <_dtoa_r+0x76e>
 800e9b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d067      	beq.n	800ea88 <_dtoa_r+0x808>
 800e9b8:	b18f      	cbz	r7, 800e9de <_dtoa_r+0x75e>
 800e9ba:	4631      	mov	r1, r6
 800e9bc:	463a      	mov	r2, r7
 800e9be:	4620      	mov	r0, r4
 800e9c0:	f000 fd78 	bl	800f4b4 <__pow5mult>
 800e9c4:	9a04      	ldr	r2, [sp, #16]
 800e9c6:	4601      	mov	r1, r0
 800e9c8:	4606      	mov	r6, r0
 800e9ca:	4620      	mov	r0, r4
 800e9cc:	f000 fcdb 	bl	800f386 <__multiply>
 800e9d0:	9904      	ldr	r1, [sp, #16]
 800e9d2:	9008      	str	r0, [sp, #32]
 800e9d4:	4620      	mov	r0, r4
 800e9d6:	f000 fc2d 	bl	800f234 <_Bfree>
 800e9da:	9b08      	ldr	r3, [sp, #32]
 800e9dc:	9304      	str	r3, [sp, #16]
 800e9de:	9b07      	ldr	r3, [sp, #28]
 800e9e0:	1bda      	subs	r2, r3, r7
 800e9e2:	d004      	beq.n	800e9ee <_dtoa_r+0x76e>
 800e9e4:	9904      	ldr	r1, [sp, #16]
 800e9e6:	4620      	mov	r0, r4
 800e9e8:	f000 fd64 	bl	800f4b4 <__pow5mult>
 800e9ec:	9004      	str	r0, [sp, #16]
 800e9ee:	2101      	movs	r1, #1
 800e9f0:	4620      	mov	r0, r4
 800e9f2:	f000 fcbf 	bl	800f374 <__i2b>
 800e9f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e9f8:	4607      	mov	r7, r0
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	f000 81d0 	beq.w	800eda0 <_dtoa_r+0xb20>
 800ea00:	461a      	mov	r2, r3
 800ea02:	4601      	mov	r1, r0
 800ea04:	4620      	mov	r0, r4
 800ea06:	f000 fd55 	bl	800f4b4 <__pow5mult>
 800ea0a:	9b06      	ldr	r3, [sp, #24]
 800ea0c:	2b01      	cmp	r3, #1
 800ea0e:	4607      	mov	r7, r0
 800ea10:	dc40      	bgt.n	800ea94 <_dtoa_r+0x814>
 800ea12:	9b00      	ldr	r3, [sp, #0]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d139      	bne.n	800ea8c <_dtoa_r+0x80c>
 800ea18:	9b01      	ldr	r3, [sp, #4]
 800ea1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d136      	bne.n	800ea90 <_dtoa_r+0x810>
 800ea22:	9b01      	ldr	r3, [sp, #4]
 800ea24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ea28:	0d1b      	lsrs	r3, r3, #20
 800ea2a:	051b      	lsls	r3, r3, #20
 800ea2c:	b12b      	cbz	r3, 800ea3a <_dtoa_r+0x7ba>
 800ea2e:	9b05      	ldr	r3, [sp, #20]
 800ea30:	3301      	adds	r3, #1
 800ea32:	9305      	str	r3, [sp, #20]
 800ea34:	f108 0801 	add.w	r8, r8, #1
 800ea38:	2301      	movs	r3, #1
 800ea3a:	9307      	str	r3, [sp, #28]
 800ea3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d12a      	bne.n	800ea98 <_dtoa_r+0x818>
 800ea42:	2001      	movs	r0, #1
 800ea44:	e030      	b.n	800eaa8 <_dtoa_r+0x828>
 800ea46:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ea48:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ea4c:	e795      	b.n	800e97a <_dtoa_r+0x6fa>
 800ea4e:	9b07      	ldr	r3, [sp, #28]
 800ea50:	f109 37ff 	add.w	r7, r9, #4294967295
 800ea54:	42bb      	cmp	r3, r7
 800ea56:	bfbf      	itttt	lt
 800ea58:	9b07      	ldrlt	r3, [sp, #28]
 800ea5a:	9707      	strlt	r7, [sp, #28]
 800ea5c:	1afa      	sublt	r2, r7, r3
 800ea5e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800ea60:	bfbb      	ittet	lt
 800ea62:	189b      	addlt	r3, r3, r2
 800ea64:	930e      	strlt	r3, [sp, #56]	; 0x38
 800ea66:	1bdf      	subge	r7, r3, r7
 800ea68:	2700      	movlt	r7, #0
 800ea6a:	f1b9 0f00 	cmp.w	r9, #0
 800ea6e:	bfb5      	itete	lt
 800ea70:	9b05      	ldrlt	r3, [sp, #20]
 800ea72:	9d05      	ldrge	r5, [sp, #20]
 800ea74:	eba3 0509 	sublt.w	r5, r3, r9
 800ea78:	464b      	movge	r3, r9
 800ea7a:	bfb8      	it	lt
 800ea7c:	2300      	movlt	r3, #0
 800ea7e:	e77e      	b.n	800e97e <_dtoa_r+0x6fe>
 800ea80:	9f07      	ldr	r7, [sp, #28]
 800ea82:	9d05      	ldr	r5, [sp, #20]
 800ea84:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800ea86:	e783      	b.n	800e990 <_dtoa_r+0x710>
 800ea88:	9a07      	ldr	r2, [sp, #28]
 800ea8a:	e7ab      	b.n	800e9e4 <_dtoa_r+0x764>
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	e7d4      	b.n	800ea3a <_dtoa_r+0x7ba>
 800ea90:	9b00      	ldr	r3, [sp, #0]
 800ea92:	e7d2      	b.n	800ea3a <_dtoa_r+0x7ba>
 800ea94:	2300      	movs	r3, #0
 800ea96:	9307      	str	r3, [sp, #28]
 800ea98:	693b      	ldr	r3, [r7, #16]
 800ea9a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800ea9e:	6918      	ldr	r0, [r3, #16]
 800eaa0:	f000 fc1a 	bl	800f2d8 <__hi0bits>
 800eaa4:	f1c0 0020 	rsb	r0, r0, #32
 800eaa8:	4440      	add	r0, r8
 800eaaa:	f010 001f 	ands.w	r0, r0, #31
 800eaae:	d047      	beq.n	800eb40 <_dtoa_r+0x8c0>
 800eab0:	f1c0 0320 	rsb	r3, r0, #32
 800eab4:	2b04      	cmp	r3, #4
 800eab6:	dd3b      	ble.n	800eb30 <_dtoa_r+0x8b0>
 800eab8:	9b05      	ldr	r3, [sp, #20]
 800eaba:	f1c0 001c 	rsb	r0, r0, #28
 800eabe:	4403      	add	r3, r0
 800eac0:	9305      	str	r3, [sp, #20]
 800eac2:	4405      	add	r5, r0
 800eac4:	4480      	add	r8, r0
 800eac6:	9b05      	ldr	r3, [sp, #20]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	dd05      	ble.n	800ead8 <_dtoa_r+0x858>
 800eacc:	461a      	mov	r2, r3
 800eace:	9904      	ldr	r1, [sp, #16]
 800ead0:	4620      	mov	r0, r4
 800ead2:	f000 fd3d 	bl	800f550 <__lshift>
 800ead6:	9004      	str	r0, [sp, #16]
 800ead8:	f1b8 0f00 	cmp.w	r8, #0
 800eadc:	dd05      	ble.n	800eaea <_dtoa_r+0x86a>
 800eade:	4639      	mov	r1, r7
 800eae0:	4642      	mov	r2, r8
 800eae2:	4620      	mov	r0, r4
 800eae4:	f000 fd34 	bl	800f550 <__lshift>
 800eae8:	4607      	mov	r7, r0
 800eaea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eaec:	b353      	cbz	r3, 800eb44 <_dtoa_r+0x8c4>
 800eaee:	4639      	mov	r1, r7
 800eaf0:	9804      	ldr	r0, [sp, #16]
 800eaf2:	f000 fd81 	bl	800f5f8 <__mcmp>
 800eaf6:	2800      	cmp	r0, #0
 800eaf8:	da24      	bge.n	800eb44 <_dtoa_r+0x8c4>
 800eafa:	2300      	movs	r3, #0
 800eafc:	220a      	movs	r2, #10
 800eafe:	9904      	ldr	r1, [sp, #16]
 800eb00:	4620      	mov	r0, r4
 800eb02:	f000 fbae 	bl	800f262 <__multadd>
 800eb06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb08:	9004      	str	r0, [sp, #16]
 800eb0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	f000 814d 	beq.w	800edae <_dtoa_r+0xb2e>
 800eb14:	2300      	movs	r3, #0
 800eb16:	4631      	mov	r1, r6
 800eb18:	220a      	movs	r2, #10
 800eb1a:	4620      	mov	r0, r4
 800eb1c:	f000 fba1 	bl	800f262 <__multadd>
 800eb20:	9b02      	ldr	r3, [sp, #8]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	4606      	mov	r6, r0
 800eb26:	dc4f      	bgt.n	800ebc8 <_dtoa_r+0x948>
 800eb28:	9b06      	ldr	r3, [sp, #24]
 800eb2a:	2b02      	cmp	r3, #2
 800eb2c:	dd4c      	ble.n	800ebc8 <_dtoa_r+0x948>
 800eb2e:	e011      	b.n	800eb54 <_dtoa_r+0x8d4>
 800eb30:	d0c9      	beq.n	800eac6 <_dtoa_r+0x846>
 800eb32:	9a05      	ldr	r2, [sp, #20]
 800eb34:	331c      	adds	r3, #28
 800eb36:	441a      	add	r2, r3
 800eb38:	9205      	str	r2, [sp, #20]
 800eb3a:	441d      	add	r5, r3
 800eb3c:	4498      	add	r8, r3
 800eb3e:	e7c2      	b.n	800eac6 <_dtoa_r+0x846>
 800eb40:	4603      	mov	r3, r0
 800eb42:	e7f6      	b.n	800eb32 <_dtoa_r+0x8b2>
 800eb44:	f1b9 0f00 	cmp.w	r9, #0
 800eb48:	dc38      	bgt.n	800ebbc <_dtoa_r+0x93c>
 800eb4a:	9b06      	ldr	r3, [sp, #24]
 800eb4c:	2b02      	cmp	r3, #2
 800eb4e:	dd35      	ble.n	800ebbc <_dtoa_r+0x93c>
 800eb50:	f8cd 9008 	str.w	r9, [sp, #8]
 800eb54:	9b02      	ldr	r3, [sp, #8]
 800eb56:	b963      	cbnz	r3, 800eb72 <_dtoa_r+0x8f2>
 800eb58:	4639      	mov	r1, r7
 800eb5a:	2205      	movs	r2, #5
 800eb5c:	4620      	mov	r0, r4
 800eb5e:	f000 fb80 	bl	800f262 <__multadd>
 800eb62:	4601      	mov	r1, r0
 800eb64:	4607      	mov	r7, r0
 800eb66:	9804      	ldr	r0, [sp, #16]
 800eb68:	f000 fd46 	bl	800f5f8 <__mcmp>
 800eb6c:	2800      	cmp	r0, #0
 800eb6e:	f73f adcc 	bgt.w	800e70a <_dtoa_r+0x48a>
 800eb72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb74:	465d      	mov	r5, fp
 800eb76:	ea6f 0a03 	mvn.w	sl, r3
 800eb7a:	f04f 0900 	mov.w	r9, #0
 800eb7e:	4639      	mov	r1, r7
 800eb80:	4620      	mov	r0, r4
 800eb82:	f000 fb57 	bl	800f234 <_Bfree>
 800eb86:	2e00      	cmp	r6, #0
 800eb88:	f43f aeb7 	beq.w	800e8fa <_dtoa_r+0x67a>
 800eb8c:	f1b9 0f00 	cmp.w	r9, #0
 800eb90:	d005      	beq.n	800eb9e <_dtoa_r+0x91e>
 800eb92:	45b1      	cmp	r9, r6
 800eb94:	d003      	beq.n	800eb9e <_dtoa_r+0x91e>
 800eb96:	4649      	mov	r1, r9
 800eb98:	4620      	mov	r0, r4
 800eb9a:	f000 fb4b 	bl	800f234 <_Bfree>
 800eb9e:	4631      	mov	r1, r6
 800eba0:	4620      	mov	r0, r4
 800eba2:	f000 fb47 	bl	800f234 <_Bfree>
 800eba6:	e6a8      	b.n	800e8fa <_dtoa_r+0x67a>
 800eba8:	2700      	movs	r7, #0
 800ebaa:	463e      	mov	r6, r7
 800ebac:	e7e1      	b.n	800eb72 <_dtoa_r+0x8f2>
 800ebae:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ebb2:	463e      	mov	r6, r7
 800ebb4:	e5a9      	b.n	800e70a <_dtoa_r+0x48a>
 800ebb6:	bf00      	nop
 800ebb8:	40240000 	.word	0x40240000
 800ebbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebbe:	f8cd 9008 	str.w	r9, [sp, #8]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	f000 80fa 	beq.w	800edbc <_dtoa_r+0xb3c>
 800ebc8:	2d00      	cmp	r5, #0
 800ebca:	dd05      	ble.n	800ebd8 <_dtoa_r+0x958>
 800ebcc:	4631      	mov	r1, r6
 800ebce:	462a      	mov	r2, r5
 800ebd0:	4620      	mov	r0, r4
 800ebd2:	f000 fcbd 	bl	800f550 <__lshift>
 800ebd6:	4606      	mov	r6, r0
 800ebd8:	9b07      	ldr	r3, [sp, #28]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d04c      	beq.n	800ec78 <_dtoa_r+0x9f8>
 800ebde:	6871      	ldr	r1, [r6, #4]
 800ebe0:	4620      	mov	r0, r4
 800ebe2:	f000 faf3 	bl	800f1cc <_Balloc>
 800ebe6:	6932      	ldr	r2, [r6, #16]
 800ebe8:	3202      	adds	r2, #2
 800ebea:	4605      	mov	r5, r0
 800ebec:	0092      	lsls	r2, r2, #2
 800ebee:	f106 010c 	add.w	r1, r6, #12
 800ebf2:	300c      	adds	r0, #12
 800ebf4:	f7fe fc52 	bl	800d49c <memcpy>
 800ebf8:	2201      	movs	r2, #1
 800ebfa:	4629      	mov	r1, r5
 800ebfc:	4620      	mov	r0, r4
 800ebfe:	f000 fca7 	bl	800f550 <__lshift>
 800ec02:	9b00      	ldr	r3, [sp, #0]
 800ec04:	f8cd b014 	str.w	fp, [sp, #20]
 800ec08:	f003 0301 	and.w	r3, r3, #1
 800ec0c:	46b1      	mov	r9, r6
 800ec0e:	9307      	str	r3, [sp, #28]
 800ec10:	4606      	mov	r6, r0
 800ec12:	4639      	mov	r1, r7
 800ec14:	9804      	ldr	r0, [sp, #16]
 800ec16:	f7ff faa5 	bl	800e164 <quorem>
 800ec1a:	4649      	mov	r1, r9
 800ec1c:	4605      	mov	r5, r0
 800ec1e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ec22:	9804      	ldr	r0, [sp, #16]
 800ec24:	f000 fce8 	bl	800f5f8 <__mcmp>
 800ec28:	4632      	mov	r2, r6
 800ec2a:	9000      	str	r0, [sp, #0]
 800ec2c:	4639      	mov	r1, r7
 800ec2e:	4620      	mov	r0, r4
 800ec30:	f000 fcfc 	bl	800f62c <__mdiff>
 800ec34:	68c3      	ldr	r3, [r0, #12]
 800ec36:	4602      	mov	r2, r0
 800ec38:	bb03      	cbnz	r3, 800ec7c <_dtoa_r+0x9fc>
 800ec3a:	4601      	mov	r1, r0
 800ec3c:	9008      	str	r0, [sp, #32]
 800ec3e:	9804      	ldr	r0, [sp, #16]
 800ec40:	f000 fcda 	bl	800f5f8 <__mcmp>
 800ec44:	9a08      	ldr	r2, [sp, #32]
 800ec46:	4603      	mov	r3, r0
 800ec48:	4611      	mov	r1, r2
 800ec4a:	4620      	mov	r0, r4
 800ec4c:	9308      	str	r3, [sp, #32]
 800ec4e:	f000 faf1 	bl	800f234 <_Bfree>
 800ec52:	9b08      	ldr	r3, [sp, #32]
 800ec54:	b9a3      	cbnz	r3, 800ec80 <_dtoa_r+0xa00>
 800ec56:	9a06      	ldr	r2, [sp, #24]
 800ec58:	b992      	cbnz	r2, 800ec80 <_dtoa_r+0xa00>
 800ec5a:	9a07      	ldr	r2, [sp, #28]
 800ec5c:	b982      	cbnz	r2, 800ec80 <_dtoa_r+0xa00>
 800ec5e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ec62:	d029      	beq.n	800ecb8 <_dtoa_r+0xa38>
 800ec64:	9b00      	ldr	r3, [sp, #0]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	dd01      	ble.n	800ec6e <_dtoa_r+0x9ee>
 800ec6a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800ec6e:	9b05      	ldr	r3, [sp, #20]
 800ec70:	1c5d      	adds	r5, r3, #1
 800ec72:	f883 8000 	strb.w	r8, [r3]
 800ec76:	e782      	b.n	800eb7e <_dtoa_r+0x8fe>
 800ec78:	4630      	mov	r0, r6
 800ec7a:	e7c2      	b.n	800ec02 <_dtoa_r+0x982>
 800ec7c:	2301      	movs	r3, #1
 800ec7e:	e7e3      	b.n	800ec48 <_dtoa_r+0x9c8>
 800ec80:	9a00      	ldr	r2, [sp, #0]
 800ec82:	2a00      	cmp	r2, #0
 800ec84:	db04      	blt.n	800ec90 <_dtoa_r+0xa10>
 800ec86:	d125      	bne.n	800ecd4 <_dtoa_r+0xa54>
 800ec88:	9a06      	ldr	r2, [sp, #24]
 800ec8a:	bb1a      	cbnz	r2, 800ecd4 <_dtoa_r+0xa54>
 800ec8c:	9a07      	ldr	r2, [sp, #28]
 800ec8e:	bb0a      	cbnz	r2, 800ecd4 <_dtoa_r+0xa54>
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	ddec      	ble.n	800ec6e <_dtoa_r+0x9ee>
 800ec94:	2201      	movs	r2, #1
 800ec96:	9904      	ldr	r1, [sp, #16]
 800ec98:	4620      	mov	r0, r4
 800ec9a:	f000 fc59 	bl	800f550 <__lshift>
 800ec9e:	4639      	mov	r1, r7
 800eca0:	9004      	str	r0, [sp, #16]
 800eca2:	f000 fca9 	bl	800f5f8 <__mcmp>
 800eca6:	2800      	cmp	r0, #0
 800eca8:	dc03      	bgt.n	800ecb2 <_dtoa_r+0xa32>
 800ecaa:	d1e0      	bne.n	800ec6e <_dtoa_r+0x9ee>
 800ecac:	f018 0f01 	tst.w	r8, #1
 800ecb0:	d0dd      	beq.n	800ec6e <_dtoa_r+0x9ee>
 800ecb2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ecb6:	d1d8      	bne.n	800ec6a <_dtoa_r+0x9ea>
 800ecb8:	9b05      	ldr	r3, [sp, #20]
 800ecba:	9a05      	ldr	r2, [sp, #20]
 800ecbc:	1c5d      	adds	r5, r3, #1
 800ecbe:	2339      	movs	r3, #57	; 0x39
 800ecc0:	7013      	strb	r3, [r2, #0]
 800ecc2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ecc6:	2b39      	cmp	r3, #57	; 0x39
 800ecc8:	f105 32ff 	add.w	r2, r5, #4294967295
 800eccc:	d04f      	beq.n	800ed6e <_dtoa_r+0xaee>
 800ecce:	3301      	adds	r3, #1
 800ecd0:	7013      	strb	r3, [r2, #0]
 800ecd2:	e754      	b.n	800eb7e <_dtoa_r+0x8fe>
 800ecd4:	9a05      	ldr	r2, [sp, #20]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	f102 0501 	add.w	r5, r2, #1
 800ecdc:	dd06      	ble.n	800ecec <_dtoa_r+0xa6c>
 800ecde:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ece2:	d0e9      	beq.n	800ecb8 <_dtoa_r+0xa38>
 800ece4:	f108 0801 	add.w	r8, r8, #1
 800ece8:	9b05      	ldr	r3, [sp, #20]
 800ecea:	e7c2      	b.n	800ec72 <_dtoa_r+0x9f2>
 800ecec:	9a02      	ldr	r2, [sp, #8]
 800ecee:	f805 8c01 	strb.w	r8, [r5, #-1]
 800ecf2:	eba5 030b 	sub.w	r3, r5, fp
 800ecf6:	4293      	cmp	r3, r2
 800ecf8:	d021      	beq.n	800ed3e <_dtoa_r+0xabe>
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	220a      	movs	r2, #10
 800ecfe:	9904      	ldr	r1, [sp, #16]
 800ed00:	4620      	mov	r0, r4
 800ed02:	f000 faae 	bl	800f262 <__multadd>
 800ed06:	45b1      	cmp	r9, r6
 800ed08:	9004      	str	r0, [sp, #16]
 800ed0a:	f04f 0300 	mov.w	r3, #0
 800ed0e:	f04f 020a 	mov.w	r2, #10
 800ed12:	4649      	mov	r1, r9
 800ed14:	4620      	mov	r0, r4
 800ed16:	d105      	bne.n	800ed24 <_dtoa_r+0xaa4>
 800ed18:	f000 faa3 	bl	800f262 <__multadd>
 800ed1c:	4681      	mov	r9, r0
 800ed1e:	4606      	mov	r6, r0
 800ed20:	9505      	str	r5, [sp, #20]
 800ed22:	e776      	b.n	800ec12 <_dtoa_r+0x992>
 800ed24:	f000 fa9d 	bl	800f262 <__multadd>
 800ed28:	4631      	mov	r1, r6
 800ed2a:	4681      	mov	r9, r0
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	220a      	movs	r2, #10
 800ed30:	4620      	mov	r0, r4
 800ed32:	f000 fa96 	bl	800f262 <__multadd>
 800ed36:	4606      	mov	r6, r0
 800ed38:	e7f2      	b.n	800ed20 <_dtoa_r+0xaa0>
 800ed3a:	f04f 0900 	mov.w	r9, #0
 800ed3e:	2201      	movs	r2, #1
 800ed40:	9904      	ldr	r1, [sp, #16]
 800ed42:	4620      	mov	r0, r4
 800ed44:	f000 fc04 	bl	800f550 <__lshift>
 800ed48:	4639      	mov	r1, r7
 800ed4a:	9004      	str	r0, [sp, #16]
 800ed4c:	f000 fc54 	bl	800f5f8 <__mcmp>
 800ed50:	2800      	cmp	r0, #0
 800ed52:	dcb6      	bgt.n	800ecc2 <_dtoa_r+0xa42>
 800ed54:	d102      	bne.n	800ed5c <_dtoa_r+0xadc>
 800ed56:	f018 0f01 	tst.w	r8, #1
 800ed5a:	d1b2      	bne.n	800ecc2 <_dtoa_r+0xa42>
 800ed5c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ed60:	2b30      	cmp	r3, #48	; 0x30
 800ed62:	f105 32ff 	add.w	r2, r5, #4294967295
 800ed66:	f47f af0a 	bne.w	800eb7e <_dtoa_r+0x8fe>
 800ed6a:	4615      	mov	r5, r2
 800ed6c:	e7f6      	b.n	800ed5c <_dtoa_r+0xadc>
 800ed6e:	4593      	cmp	fp, r2
 800ed70:	d105      	bne.n	800ed7e <_dtoa_r+0xafe>
 800ed72:	2331      	movs	r3, #49	; 0x31
 800ed74:	f10a 0a01 	add.w	sl, sl, #1
 800ed78:	f88b 3000 	strb.w	r3, [fp]
 800ed7c:	e6ff      	b.n	800eb7e <_dtoa_r+0x8fe>
 800ed7e:	4615      	mov	r5, r2
 800ed80:	e79f      	b.n	800ecc2 <_dtoa_r+0xa42>
 800ed82:	f8df b064 	ldr.w	fp, [pc, #100]	; 800ede8 <_dtoa_r+0xb68>
 800ed86:	e007      	b.n	800ed98 <_dtoa_r+0xb18>
 800ed88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ed8a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800edec <_dtoa_r+0xb6c>
 800ed8e:	b11b      	cbz	r3, 800ed98 <_dtoa_r+0xb18>
 800ed90:	f10b 0308 	add.w	r3, fp, #8
 800ed94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ed96:	6013      	str	r3, [r2, #0]
 800ed98:	4658      	mov	r0, fp
 800ed9a:	b017      	add	sp, #92	; 0x5c
 800ed9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eda0:	9b06      	ldr	r3, [sp, #24]
 800eda2:	2b01      	cmp	r3, #1
 800eda4:	f77f ae35 	ble.w	800ea12 <_dtoa_r+0x792>
 800eda8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800edaa:	9307      	str	r3, [sp, #28]
 800edac:	e649      	b.n	800ea42 <_dtoa_r+0x7c2>
 800edae:	9b02      	ldr	r3, [sp, #8]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	dc03      	bgt.n	800edbc <_dtoa_r+0xb3c>
 800edb4:	9b06      	ldr	r3, [sp, #24]
 800edb6:	2b02      	cmp	r3, #2
 800edb8:	f73f aecc 	bgt.w	800eb54 <_dtoa_r+0x8d4>
 800edbc:	465d      	mov	r5, fp
 800edbe:	4639      	mov	r1, r7
 800edc0:	9804      	ldr	r0, [sp, #16]
 800edc2:	f7ff f9cf 	bl	800e164 <quorem>
 800edc6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800edca:	f805 8b01 	strb.w	r8, [r5], #1
 800edce:	9a02      	ldr	r2, [sp, #8]
 800edd0:	eba5 030b 	sub.w	r3, r5, fp
 800edd4:	429a      	cmp	r2, r3
 800edd6:	ddb0      	ble.n	800ed3a <_dtoa_r+0xaba>
 800edd8:	2300      	movs	r3, #0
 800edda:	220a      	movs	r2, #10
 800eddc:	9904      	ldr	r1, [sp, #16]
 800edde:	4620      	mov	r0, r4
 800ede0:	f000 fa3f 	bl	800f262 <__multadd>
 800ede4:	9004      	str	r0, [sp, #16]
 800ede6:	e7ea      	b.n	800edbe <_dtoa_r+0xb3e>
 800ede8:	08012fd8 	.word	0x08012fd8
 800edec:	08012ffc 	.word	0x08012ffc

0800edf0 <__sflush_r>:
 800edf0:	898a      	ldrh	r2, [r1, #12]
 800edf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edf6:	4605      	mov	r5, r0
 800edf8:	0710      	lsls	r0, r2, #28
 800edfa:	460c      	mov	r4, r1
 800edfc:	d458      	bmi.n	800eeb0 <__sflush_r+0xc0>
 800edfe:	684b      	ldr	r3, [r1, #4]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	dc05      	bgt.n	800ee10 <__sflush_r+0x20>
 800ee04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	dc02      	bgt.n	800ee10 <__sflush_r+0x20>
 800ee0a:	2000      	movs	r0, #0
 800ee0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ee12:	2e00      	cmp	r6, #0
 800ee14:	d0f9      	beq.n	800ee0a <__sflush_r+0x1a>
 800ee16:	2300      	movs	r3, #0
 800ee18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ee1c:	682f      	ldr	r7, [r5, #0]
 800ee1e:	6a21      	ldr	r1, [r4, #32]
 800ee20:	602b      	str	r3, [r5, #0]
 800ee22:	d032      	beq.n	800ee8a <__sflush_r+0x9a>
 800ee24:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ee26:	89a3      	ldrh	r3, [r4, #12]
 800ee28:	075a      	lsls	r2, r3, #29
 800ee2a:	d505      	bpl.n	800ee38 <__sflush_r+0x48>
 800ee2c:	6863      	ldr	r3, [r4, #4]
 800ee2e:	1ac0      	subs	r0, r0, r3
 800ee30:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ee32:	b10b      	cbz	r3, 800ee38 <__sflush_r+0x48>
 800ee34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ee36:	1ac0      	subs	r0, r0, r3
 800ee38:	2300      	movs	r3, #0
 800ee3a:	4602      	mov	r2, r0
 800ee3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ee3e:	6a21      	ldr	r1, [r4, #32]
 800ee40:	4628      	mov	r0, r5
 800ee42:	47b0      	blx	r6
 800ee44:	1c43      	adds	r3, r0, #1
 800ee46:	89a3      	ldrh	r3, [r4, #12]
 800ee48:	d106      	bne.n	800ee58 <__sflush_r+0x68>
 800ee4a:	6829      	ldr	r1, [r5, #0]
 800ee4c:	291d      	cmp	r1, #29
 800ee4e:	d848      	bhi.n	800eee2 <__sflush_r+0xf2>
 800ee50:	4a29      	ldr	r2, [pc, #164]	; (800eef8 <__sflush_r+0x108>)
 800ee52:	40ca      	lsrs	r2, r1
 800ee54:	07d6      	lsls	r6, r2, #31
 800ee56:	d544      	bpl.n	800eee2 <__sflush_r+0xf2>
 800ee58:	2200      	movs	r2, #0
 800ee5a:	6062      	str	r2, [r4, #4]
 800ee5c:	04d9      	lsls	r1, r3, #19
 800ee5e:	6922      	ldr	r2, [r4, #16]
 800ee60:	6022      	str	r2, [r4, #0]
 800ee62:	d504      	bpl.n	800ee6e <__sflush_r+0x7e>
 800ee64:	1c42      	adds	r2, r0, #1
 800ee66:	d101      	bne.n	800ee6c <__sflush_r+0x7c>
 800ee68:	682b      	ldr	r3, [r5, #0]
 800ee6a:	b903      	cbnz	r3, 800ee6e <__sflush_r+0x7e>
 800ee6c:	6560      	str	r0, [r4, #84]	; 0x54
 800ee6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ee70:	602f      	str	r7, [r5, #0]
 800ee72:	2900      	cmp	r1, #0
 800ee74:	d0c9      	beq.n	800ee0a <__sflush_r+0x1a>
 800ee76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ee7a:	4299      	cmp	r1, r3
 800ee7c:	d002      	beq.n	800ee84 <__sflush_r+0x94>
 800ee7e:	4628      	mov	r0, r5
 800ee80:	f7fe fb20 	bl	800d4c4 <_free_r>
 800ee84:	2000      	movs	r0, #0
 800ee86:	6360      	str	r0, [r4, #52]	; 0x34
 800ee88:	e7c0      	b.n	800ee0c <__sflush_r+0x1c>
 800ee8a:	2301      	movs	r3, #1
 800ee8c:	4628      	mov	r0, r5
 800ee8e:	47b0      	blx	r6
 800ee90:	1c41      	adds	r1, r0, #1
 800ee92:	d1c8      	bne.n	800ee26 <__sflush_r+0x36>
 800ee94:	682b      	ldr	r3, [r5, #0]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d0c5      	beq.n	800ee26 <__sflush_r+0x36>
 800ee9a:	2b1d      	cmp	r3, #29
 800ee9c:	d001      	beq.n	800eea2 <__sflush_r+0xb2>
 800ee9e:	2b16      	cmp	r3, #22
 800eea0:	d101      	bne.n	800eea6 <__sflush_r+0xb6>
 800eea2:	602f      	str	r7, [r5, #0]
 800eea4:	e7b1      	b.n	800ee0a <__sflush_r+0x1a>
 800eea6:	89a3      	ldrh	r3, [r4, #12]
 800eea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eeac:	81a3      	strh	r3, [r4, #12]
 800eeae:	e7ad      	b.n	800ee0c <__sflush_r+0x1c>
 800eeb0:	690f      	ldr	r7, [r1, #16]
 800eeb2:	2f00      	cmp	r7, #0
 800eeb4:	d0a9      	beq.n	800ee0a <__sflush_r+0x1a>
 800eeb6:	0793      	lsls	r3, r2, #30
 800eeb8:	680e      	ldr	r6, [r1, #0]
 800eeba:	bf08      	it	eq
 800eebc:	694b      	ldreq	r3, [r1, #20]
 800eebe:	600f      	str	r7, [r1, #0]
 800eec0:	bf18      	it	ne
 800eec2:	2300      	movne	r3, #0
 800eec4:	eba6 0807 	sub.w	r8, r6, r7
 800eec8:	608b      	str	r3, [r1, #8]
 800eeca:	f1b8 0f00 	cmp.w	r8, #0
 800eece:	dd9c      	ble.n	800ee0a <__sflush_r+0x1a>
 800eed0:	4643      	mov	r3, r8
 800eed2:	463a      	mov	r2, r7
 800eed4:	6a21      	ldr	r1, [r4, #32]
 800eed6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800eed8:	4628      	mov	r0, r5
 800eeda:	47b0      	blx	r6
 800eedc:	2800      	cmp	r0, #0
 800eede:	dc06      	bgt.n	800eeee <__sflush_r+0xfe>
 800eee0:	89a3      	ldrh	r3, [r4, #12]
 800eee2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eee6:	81a3      	strh	r3, [r4, #12]
 800eee8:	f04f 30ff 	mov.w	r0, #4294967295
 800eeec:	e78e      	b.n	800ee0c <__sflush_r+0x1c>
 800eeee:	4407      	add	r7, r0
 800eef0:	eba8 0800 	sub.w	r8, r8, r0
 800eef4:	e7e9      	b.n	800eeca <__sflush_r+0xda>
 800eef6:	bf00      	nop
 800eef8:	20400001 	.word	0x20400001

0800eefc <_fflush_r>:
 800eefc:	b538      	push	{r3, r4, r5, lr}
 800eefe:	690b      	ldr	r3, [r1, #16]
 800ef00:	4605      	mov	r5, r0
 800ef02:	460c      	mov	r4, r1
 800ef04:	b1db      	cbz	r3, 800ef3e <_fflush_r+0x42>
 800ef06:	b118      	cbz	r0, 800ef10 <_fflush_r+0x14>
 800ef08:	6983      	ldr	r3, [r0, #24]
 800ef0a:	b90b      	cbnz	r3, 800ef10 <_fflush_r+0x14>
 800ef0c:	f000 f860 	bl	800efd0 <__sinit>
 800ef10:	4b0c      	ldr	r3, [pc, #48]	; (800ef44 <_fflush_r+0x48>)
 800ef12:	429c      	cmp	r4, r3
 800ef14:	d109      	bne.n	800ef2a <_fflush_r+0x2e>
 800ef16:	686c      	ldr	r4, [r5, #4]
 800ef18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef1c:	b17b      	cbz	r3, 800ef3e <_fflush_r+0x42>
 800ef1e:	4621      	mov	r1, r4
 800ef20:	4628      	mov	r0, r5
 800ef22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ef26:	f7ff bf63 	b.w	800edf0 <__sflush_r>
 800ef2a:	4b07      	ldr	r3, [pc, #28]	; (800ef48 <_fflush_r+0x4c>)
 800ef2c:	429c      	cmp	r4, r3
 800ef2e:	d101      	bne.n	800ef34 <_fflush_r+0x38>
 800ef30:	68ac      	ldr	r4, [r5, #8]
 800ef32:	e7f1      	b.n	800ef18 <_fflush_r+0x1c>
 800ef34:	4b05      	ldr	r3, [pc, #20]	; (800ef4c <_fflush_r+0x50>)
 800ef36:	429c      	cmp	r4, r3
 800ef38:	bf08      	it	eq
 800ef3a:	68ec      	ldreq	r4, [r5, #12]
 800ef3c:	e7ec      	b.n	800ef18 <_fflush_r+0x1c>
 800ef3e:	2000      	movs	r0, #0
 800ef40:	bd38      	pop	{r3, r4, r5, pc}
 800ef42:	bf00      	nop
 800ef44:	0801302c 	.word	0x0801302c
 800ef48:	0801304c 	.word	0x0801304c
 800ef4c:	0801300c 	.word	0x0801300c

0800ef50 <std>:
 800ef50:	2300      	movs	r3, #0
 800ef52:	b510      	push	{r4, lr}
 800ef54:	4604      	mov	r4, r0
 800ef56:	e9c0 3300 	strd	r3, r3, [r0]
 800ef5a:	6083      	str	r3, [r0, #8]
 800ef5c:	8181      	strh	r1, [r0, #12]
 800ef5e:	6643      	str	r3, [r0, #100]	; 0x64
 800ef60:	81c2      	strh	r2, [r0, #14]
 800ef62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ef66:	6183      	str	r3, [r0, #24]
 800ef68:	4619      	mov	r1, r3
 800ef6a:	2208      	movs	r2, #8
 800ef6c:	305c      	adds	r0, #92	; 0x5c
 800ef6e:	f7fe faa0 	bl	800d4b2 <memset>
 800ef72:	4b05      	ldr	r3, [pc, #20]	; (800ef88 <std+0x38>)
 800ef74:	6263      	str	r3, [r4, #36]	; 0x24
 800ef76:	4b05      	ldr	r3, [pc, #20]	; (800ef8c <std+0x3c>)
 800ef78:	62a3      	str	r3, [r4, #40]	; 0x28
 800ef7a:	4b05      	ldr	r3, [pc, #20]	; (800ef90 <std+0x40>)
 800ef7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ef7e:	4b05      	ldr	r3, [pc, #20]	; (800ef94 <std+0x44>)
 800ef80:	6224      	str	r4, [r4, #32]
 800ef82:	6323      	str	r3, [r4, #48]	; 0x30
 800ef84:	bd10      	pop	{r4, pc}
 800ef86:	bf00      	nop
 800ef88:	0800fa21 	.word	0x0800fa21
 800ef8c:	0800fa43 	.word	0x0800fa43
 800ef90:	0800fa7b 	.word	0x0800fa7b
 800ef94:	0800fa9f 	.word	0x0800fa9f

0800ef98 <_cleanup_r>:
 800ef98:	4901      	ldr	r1, [pc, #4]	; (800efa0 <_cleanup_r+0x8>)
 800ef9a:	f000 b885 	b.w	800f0a8 <_fwalk_reent>
 800ef9e:	bf00      	nop
 800efa0:	0800eefd 	.word	0x0800eefd

0800efa4 <__sfmoreglue>:
 800efa4:	b570      	push	{r4, r5, r6, lr}
 800efa6:	1e4a      	subs	r2, r1, #1
 800efa8:	2568      	movs	r5, #104	; 0x68
 800efaa:	4355      	muls	r5, r2
 800efac:	460e      	mov	r6, r1
 800efae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800efb2:	f7fe fad5 	bl	800d560 <_malloc_r>
 800efb6:	4604      	mov	r4, r0
 800efb8:	b140      	cbz	r0, 800efcc <__sfmoreglue+0x28>
 800efba:	2100      	movs	r1, #0
 800efbc:	e9c0 1600 	strd	r1, r6, [r0]
 800efc0:	300c      	adds	r0, #12
 800efc2:	60a0      	str	r0, [r4, #8]
 800efc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800efc8:	f7fe fa73 	bl	800d4b2 <memset>
 800efcc:	4620      	mov	r0, r4
 800efce:	bd70      	pop	{r4, r5, r6, pc}

0800efd0 <__sinit>:
 800efd0:	6983      	ldr	r3, [r0, #24]
 800efd2:	b510      	push	{r4, lr}
 800efd4:	4604      	mov	r4, r0
 800efd6:	bb33      	cbnz	r3, 800f026 <__sinit+0x56>
 800efd8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800efdc:	6503      	str	r3, [r0, #80]	; 0x50
 800efde:	4b12      	ldr	r3, [pc, #72]	; (800f028 <__sinit+0x58>)
 800efe0:	4a12      	ldr	r2, [pc, #72]	; (800f02c <__sinit+0x5c>)
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	6282      	str	r2, [r0, #40]	; 0x28
 800efe6:	4298      	cmp	r0, r3
 800efe8:	bf04      	itt	eq
 800efea:	2301      	moveq	r3, #1
 800efec:	6183      	streq	r3, [r0, #24]
 800efee:	f000 f81f 	bl	800f030 <__sfp>
 800eff2:	6060      	str	r0, [r4, #4]
 800eff4:	4620      	mov	r0, r4
 800eff6:	f000 f81b 	bl	800f030 <__sfp>
 800effa:	60a0      	str	r0, [r4, #8]
 800effc:	4620      	mov	r0, r4
 800effe:	f000 f817 	bl	800f030 <__sfp>
 800f002:	2200      	movs	r2, #0
 800f004:	60e0      	str	r0, [r4, #12]
 800f006:	2104      	movs	r1, #4
 800f008:	6860      	ldr	r0, [r4, #4]
 800f00a:	f7ff ffa1 	bl	800ef50 <std>
 800f00e:	2201      	movs	r2, #1
 800f010:	2109      	movs	r1, #9
 800f012:	68a0      	ldr	r0, [r4, #8]
 800f014:	f7ff ff9c 	bl	800ef50 <std>
 800f018:	2202      	movs	r2, #2
 800f01a:	2112      	movs	r1, #18
 800f01c:	68e0      	ldr	r0, [r4, #12]
 800f01e:	f7ff ff97 	bl	800ef50 <std>
 800f022:	2301      	movs	r3, #1
 800f024:	61a3      	str	r3, [r4, #24]
 800f026:	bd10      	pop	{r4, pc}
 800f028:	08012fc4 	.word	0x08012fc4
 800f02c:	0800ef99 	.word	0x0800ef99

0800f030 <__sfp>:
 800f030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f032:	4b1b      	ldr	r3, [pc, #108]	; (800f0a0 <__sfp+0x70>)
 800f034:	681e      	ldr	r6, [r3, #0]
 800f036:	69b3      	ldr	r3, [r6, #24]
 800f038:	4607      	mov	r7, r0
 800f03a:	b913      	cbnz	r3, 800f042 <__sfp+0x12>
 800f03c:	4630      	mov	r0, r6
 800f03e:	f7ff ffc7 	bl	800efd0 <__sinit>
 800f042:	3648      	adds	r6, #72	; 0x48
 800f044:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f048:	3b01      	subs	r3, #1
 800f04a:	d503      	bpl.n	800f054 <__sfp+0x24>
 800f04c:	6833      	ldr	r3, [r6, #0]
 800f04e:	b133      	cbz	r3, 800f05e <__sfp+0x2e>
 800f050:	6836      	ldr	r6, [r6, #0]
 800f052:	e7f7      	b.n	800f044 <__sfp+0x14>
 800f054:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f058:	b16d      	cbz	r5, 800f076 <__sfp+0x46>
 800f05a:	3468      	adds	r4, #104	; 0x68
 800f05c:	e7f4      	b.n	800f048 <__sfp+0x18>
 800f05e:	2104      	movs	r1, #4
 800f060:	4638      	mov	r0, r7
 800f062:	f7ff ff9f 	bl	800efa4 <__sfmoreglue>
 800f066:	6030      	str	r0, [r6, #0]
 800f068:	2800      	cmp	r0, #0
 800f06a:	d1f1      	bne.n	800f050 <__sfp+0x20>
 800f06c:	230c      	movs	r3, #12
 800f06e:	603b      	str	r3, [r7, #0]
 800f070:	4604      	mov	r4, r0
 800f072:	4620      	mov	r0, r4
 800f074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f076:	4b0b      	ldr	r3, [pc, #44]	; (800f0a4 <__sfp+0x74>)
 800f078:	6665      	str	r5, [r4, #100]	; 0x64
 800f07a:	e9c4 5500 	strd	r5, r5, [r4]
 800f07e:	60a5      	str	r5, [r4, #8]
 800f080:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800f084:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800f088:	2208      	movs	r2, #8
 800f08a:	4629      	mov	r1, r5
 800f08c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f090:	f7fe fa0f 	bl	800d4b2 <memset>
 800f094:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f098:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f09c:	e7e9      	b.n	800f072 <__sfp+0x42>
 800f09e:	bf00      	nop
 800f0a0:	08012fc4 	.word	0x08012fc4
 800f0a4:	ffff0001 	.word	0xffff0001

0800f0a8 <_fwalk_reent>:
 800f0a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f0ac:	4680      	mov	r8, r0
 800f0ae:	4689      	mov	r9, r1
 800f0b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f0b4:	2600      	movs	r6, #0
 800f0b6:	b914      	cbnz	r4, 800f0be <_fwalk_reent+0x16>
 800f0b8:	4630      	mov	r0, r6
 800f0ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0be:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800f0c2:	3f01      	subs	r7, #1
 800f0c4:	d501      	bpl.n	800f0ca <_fwalk_reent+0x22>
 800f0c6:	6824      	ldr	r4, [r4, #0]
 800f0c8:	e7f5      	b.n	800f0b6 <_fwalk_reent+0xe>
 800f0ca:	89ab      	ldrh	r3, [r5, #12]
 800f0cc:	2b01      	cmp	r3, #1
 800f0ce:	d907      	bls.n	800f0e0 <_fwalk_reent+0x38>
 800f0d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f0d4:	3301      	adds	r3, #1
 800f0d6:	d003      	beq.n	800f0e0 <_fwalk_reent+0x38>
 800f0d8:	4629      	mov	r1, r5
 800f0da:	4640      	mov	r0, r8
 800f0dc:	47c8      	blx	r9
 800f0de:	4306      	orrs	r6, r0
 800f0e0:	3568      	adds	r5, #104	; 0x68
 800f0e2:	e7ee      	b.n	800f0c2 <_fwalk_reent+0x1a>

0800f0e4 <_localeconv_r>:
 800f0e4:	4b04      	ldr	r3, [pc, #16]	; (800f0f8 <_localeconv_r+0x14>)
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	6a18      	ldr	r0, [r3, #32]
 800f0ea:	4b04      	ldr	r3, [pc, #16]	; (800f0fc <_localeconv_r+0x18>)
 800f0ec:	2800      	cmp	r0, #0
 800f0ee:	bf08      	it	eq
 800f0f0:	4618      	moveq	r0, r3
 800f0f2:	30f0      	adds	r0, #240	; 0xf0
 800f0f4:	4770      	bx	lr
 800f0f6:	bf00      	nop
 800f0f8:	20000620 	.word	0x20000620
 800f0fc:	20000684 	.word	0x20000684

0800f100 <__swhatbuf_r>:
 800f100:	b570      	push	{r4, r5, r6, lr}
 800f102:	460e      	mov	r6, r1
 800f104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f108:	2900      	cmp	r1, #0
 800f10a:	b096      	sub	sp, #88	; 0x58
 800f10c:	4614      	mov	r4, r2
 800f10e:	461d      	mov	r5, r3
 800f110:	da07      	bge.n	800f122 <__swhatbuf_r+0x22>
 800f112:	2300      	movs	r3, #0
 800f114:	602b      	str	r3, [r5, #0]
 800f116:	89b3      	ldrh	r3, [r6, #12]
 800f118:	061a      	lsls	r2, r3, #24
 800f11a:	d410      	bmi.n	800f13e <__swhatbuf_r+0x3e>
 800f11c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f120:	e00e      	b.n	800f140 <__swhatbuf_r+0x40>
 800f122:	466a      	mov	r2, sp
 800f124:	f000 fce2 	bl	800faec <_fstat_r>
 800f128:	2800      	cmp	r0, #0
 800f12a:	dbf2      	blt.n	800f112 <__swhatbuf_r+0x12>
 800f12c:	9a01      	ldr	r2, [sp, #4]
 800f12e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f132:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f136:	425a      	negs	r2, r3
 800f138:	415a      	adcs	r2, r3
 800f13a:	602a      	str	r2, [r5, #0]
 800f13c:	e7ee      	b.n	800f11c <__swhatbuf_r+0x1c>
 800f13e:	2340      	movs	r3, #64	; 0x40
 800f140:	2000      	movs	r0, #0
 800f142:	6023      	str	r3, [r4, #0]
 800f144:	b016      	add	sp, #88	; 0x58
 800f146:	bd70      	pop	{r4, r5, r6, pc}

0800f148 <__smakebuf_r>:
 800f148:	898b      	ldrh	r3, [r1, #12]
 800f14a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f14c:	079d      	lsls	r5, r3, #30
 800f14e:	4606      	mov	r6, r0
 800f150:	460c      	mov	r4, r1
 800f152:	d507      	bpl.n	800f164 <__smakebuf_r+0x1c>
 800f154:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f158:	6023      	str	r3, [r4, #0]
 800f15a:	6123      	str	r3, [r4, #16]
 800f15c:	2301      	movs	r3, #1
 800f15e:	6163      	str	r3, [r4, #20]
 800f160:	b002      	add	sp, #8
 800f162:	bd70      	pop	{r4, r5, r6, pc}
 800f164:	ab01      	add	r3, sp, #4
 800f166:	466a      	mov	r2, sp
 800f168:	f7ff ffca 	bl	800f100 <__swhatbuf_r>
 800f16c:	9900      	ldr	r1, [sp, #0]
 800f16e:	4605      	mov	r5, r0
 800f170:	4630      	mov	r0, r6
 800f172:	f7fe f9f5 	bl	800d560 <_malloc_r>
 800f176:	b948      	cbnz	r0, 800f18c <__smakebuf_r+0x44>
 800f178:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f17c:	059a      	lsls	r2, r3, #22
 800f17e:	d4ef      	bmi.n	800f160 <__smakebuf_r+0x18>
 800f180:	f023 0303 	bic.w	r3, r3, #3
 800f184:	f043 0302 	orr.w	r3, r3, #2
 800f188:	81a3      	strh	r3, [r4, #12]
 800f18a:	e7e3      	b.n	800f154 <__smakebuf_r+0xc>
 800f18c:	4b0d      	ldr	r3, [pc, #52]	; (800f1c4 <__smakebuf_r+0x7c>)
 800f18e:	62b3      	str	r3, [r6, #40]	; 0x28
 800f190:	89a3      	ldrh	r3, [r4, #12]
 800f192:	6020      	str	r0, [r4, #0]
 800f194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f198:	81a3      	strh	r3, [r4, #12]
 800f19a:	9b00      	ldr	r3, [sp, #0]
 800f19c:	6163      	str	r3, [r4, #20]
 800f19e:	9b01      	ldr	r3, [sp, #4]
 800f1a0:	6120      	str	r0, [r4, #16]
 800f1a2:	b15b      	cbz	r3, 800f1bc <__smakebuf_r+0x74>
 800f1a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f1a8:	4630      	mov	r0, r6
 800f1aa:	f000 fcb1 	bl	800fb10 <_isatty_r>
 800f1ae:	b128      	cbz	r0, 800f1bc <__smakebuf_r+0x74>
 800f1b0:	89a3      	ldrh	r3, [r4, #12]
 800f1b2:	f023 0303 	bic.w	r3, r3, #3
 800f1b6:	f043 0301 	orr.w	r3, r3, #1
 800f1ba:	81a3      	strh	r3, [r4, #12]
 800f1bc:	89a3      	ldrh	r3, [r4, #12]
 800f1be:	431d      	orrs	r5, r3
 800f1c0:	81a5      	strh	r5, [r4, #12]
 800f1c2:	e7cd      	b.n	800f160 <__smakebuf_r+0x18>
 800f1c4:	0800ef99 	.word	0x0800ef99

0800f1c8 <__malloc_lock>:
 800f1c8:	4770      	bx	lr

0800f1ca <__malloc_unlock>:
 800f1ca:	4770      	bx	lr

0800f1cc <_Balloc>:
 800f1cc:	b570      	push	{r4, r5, r6, lr}
 800f1ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f1d0:	4604      	mov	r4, r0
 800f1d2:	460e      	mov	r6, r1
 800f1d4:	b93d      	cbnz	r5, 800f1e6 <_Balloc+0x1a>
 800f1d6:	2010      	movs	r0, #16
 800f1d8:	f7fe f958 	bl	800d48c <malloc>
 800f1dc:	6260      	str	r0, [r4, #36]	; 0x24
 800f1de:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f1e2:	6005      	str	r5, [r0, #0]
 800f1e4:	60c5      	str	r5, [r0, #12]
 800f1e6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800f1e8:	68eb      	ldr	r3, [r5, #12]
 800f1ea:	b183      	cbz	r3, 800f20e <_Balloc+0x42>
 800f1ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f1ee:	68db      	ldr	r3, [r3, #12]
 800f1f0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f1f4:	b9b8      	cbnz	r0, 800f226 <_Balloc+0x5a>
 800f1f6:	2101      	movs	r1, #1
 800f1f8:	fa01 f506 	lsl.w	r5, r1, r6
 800f1fc:	1d6a      	adds	r2, r5, #5
 800f1fe:	0092      	lsls	r2, r2, #2
 800f200:	4620      	mov	r0, r4
 800f202:	f000 fabf 	bl	800f784 <_calloc_r>
 800f206:	b160      	cbz	r0, 800f222 <_Balloc+0x56>
 800f208:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800f20c:	e00e      	b.n	800f22c <_Balloc+0x60>
 800f20e:	2221      	movs	r2, #33	; 0x21
 800f210:	2104      	movs	r1, #4
 800f212:	4620      	mov	r0, r4
 800f214:	f000 fab6 	bl	800f784 <_calloc_r>
 800f218:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f21a:	60e8      	str	r0, [r5, #12]
 800f21c:	68db      	ldr	r3, [r3, #12]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d1e4      	bne.n	800f1ec <_Balloc+0x20>
 800f222:	2000      	movs	r0, #0
 800f224:	bd70      	pop	{r4, r5, r6, pc}
 800f226:	6802      	ldr	r2, [r0, #0]
 800f228:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800f22c:	2300      	movs	r3, #0
 800f22e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f232:	e7f7      	b.n	800f224 <_Balloc+0x58>

0800f234 <_Bfree>:
 800f234:	b570      	push	{r4, r5, r6, lr}
 800f236:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800f238:	4606      	mov	r6, r0
 800f23a:	460d      	mov	r5, r1
 800f23c:	b93c      	cbnz	r4, 800f24e <_Bfree+0x1a>
 800f23e:	2010      	movs	r0, #16
 800f240:	f7fe f924 	bl	800d48c <malloc>
 800f244:	6270      	str	r0, [r6, #36]	; 0x24
 800f246:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f24a:	6004      	str	r4, [r0, #0]
 800f24c:	60c4      	str	r4, [r0, #12]
 800f24e:	b13d      	cbz	r5, 800f260 <_Bfree+0x2c>
 800f250:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f252:	686a      	ldr	r2, [r5, #4]
 800f254:	68db      	ldr	r3, [r3, #12]
 800f256:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f25a:	6029      	str	r1, [r5, #0]
 800f25c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800f260:	bd70      	pop	{r4, r5, r6, pc}

0800f262 <__multadd>:
 800f262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f266:	690d      	ldr	r5, [r1, #16]
 800f268:	461f      	mov	r7, r3
 800f26a:	4606      	mov	r6, r0
 800f26c:	460c      	mov	r4, r1
 800f26e:	f101 0c14 	add.w	ip, r1, #20
 800f272:	2300      	movs	r3, #0
 800f274:	f8dc 0000 	ldr.w	r0, [ip]
 800f278:	b281      	uxth	r1, r0
 800f27a:	fb02 7101 	mla	r1, r2, r1, r7
 800f27e:	0c0f      	lsrs	r7, r1, #16
 800f280:	0c00      	lsrs	r0, r0, #16
 800f282:	fb02 7000 	mla	r0, r2, r0, r7
 800f286:	b289      	uxth	r1, r1
 800f288:	3301      	adds	r3, #1
 800f28a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800f28e:	429d      	cmp	r5, r3
 800f290:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800f294:	f84c 1b04 	str.w	r1, [ip], #4
 800f298:	dcec      	bgt.n	800f274 <__multadd+0x12>
 800f29a:	b1d7      	cbz	r7, 800f2d2 <__multadd+0x70>
 800f29c:	68a3      	ldr	r3, [r4, #8]
 800f29e:	42ab      	cmp	r3, r5
 800f2a0:	dc12      	bgt.n	800f2c8 <__multadd+0x66>
 800f2a2:	6861      	ldr	r1, [r4, #4]
 800f2a4:	4630      	mov	r0, r6
 800f2a6:	3101      	adds	r1, #1
 800f2a8:	f7ff ff90 	bl	800f1cc <_Balloc>
 800f2ac:	6922      	ldr	r2, [r4, #16]
 800f2ae:	3202      	adds	r2, #2
 800f2b0:	f104 010c 	add.w	r1, r4, #12
 800f2b4:	4680      	mov	r8, r0
 800f2b6:	0092      	lsls	r2, r2, #2
 800f2b8:	300c      	adds	r0, #12
 800f2ba:	f7fe f8ef 	bl	800d49c <memcpy>
 800f2be:	4621      	mov	r1, r4
 800f2c0:	4630      	mov	r0, r6
 800f2c2:	f7ff ffb7 	bl	800f234 <_Bfree>
 800f2c6:	4644      	mov	r4, r8
 800f2c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f2cc:	3501      	adds	r5, #1
 800f2ce:	615f      	str	r7, [r3, #20]
 800f2d0:	6125      	str	r5, [r4, #16]
 800f2d2:	4620      	mov	r0, r4
 800f2d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f2d8 <__hi0bits>:
 800f2d8:	0c02      	lsrs	r2, r0, #16
 800f2da:	0412      	lsls	r2, r2, #16
 800f2dc:	4603      	mov	r3, r0
 800f2de:	b9b2      	cbnz	r2, 800f30e <__hi0bits+0x36>
 800f2e0:	0403      	lsls	r3, r0, #16
 800f2e2:	2010      	movs	r0, #16
 800f2e4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800f2e8:	bf04      	itt	eq
 800f2ea:	021b      	lsleq	r3, r3, #8
 800f2ec:	3008      	addeq	r0, #8
 800f2ee:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800f2f2:	bf04      	itt	eq
 800f2f4:	011b      	lsleq	r3, r3, #4
 800f2f6:	3004      	addeq	r0, #4
 800f2f8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800f2fc:	bf04      	itt	eq
 800f2fe:	009b      	lsleq	r3, r3, #2
 800f300:	3002      	addeq	r0, #2
 800f302:	2b00      	cmp	r3, #0
 800f304:	db06      	blt.n	800f314 <__hi0bits+0x3c>
 800f306:	005b      	lsls	r3, r3, #1
 800f308:	d503      	bpl.n	800f312 <__hi0bits+0x3a>
 800f30a:	3001      	adds	r0, #1
 800f30c:	4770      	bx	lr
 800f30e:	2000      	movs	r0, #0
 800f310:	e7e8      	b.n	800f2e4 <__hi0bits+0xc>
 800f312:	2020      	movs	r0, #32
 800f314:	4770      	bx	lr

0800f316 <__lo0bits>:
 800f316:	6803      	ldr	r3, [r0, #0]
 800f318:	f013 0207 	ands.w	r2, r3, #7
 800f31c:	4601      	mov	r1, r0
 800f31e:	d00b      	beq.n	800f338 <__lo0bits+0x22>
 800f320:	07da      	lsls	r2, r3, #31
 800f322:	d423      	bmi.n	800f36c <__lo0bits+0x56>
 800f324:	0798      	lsls	r0, r3, #30
 800f326:	bf49      	itett	mi
 800f328:	085b      	lsrmi	r3, r3, #1
 800f32a:	089b      	lsrpl	r3, r3, #2
 800f32c:	2001      	movmi	r0, #1
 800f32e:	600b      	strmi	r3, [r1, #0]
 800f330:	bf5c      	itt	pl
 800f332:	600b      	strpl	r3, [r1, #0]
 800f334:	2002      	movpl	r0, #2
 800f336:	4770      	bx	lr
 800f338:	b298      	uxth	r0, r3
 800f33a:	b9a8      	cbnz	r0, 800f368 <__lo0bits+0x52>
 800f33c:	0c1b      	lsrs	r3, r3, #16
 800f33e:	2010      	movs	r0, #16
 800f340:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f344:	bf04      	itt	eq
 800f346:	0a1b      	lsreq	r3, r3, #8
 800f348:	3008      	addeq	r0, #8
 800f34a:	071a      	lsls	r2, r3, #28
 800f34c:	bf04      	itt	eq
 800f34e:	091b      	lsreq	r3, r3, #4
 800f350:	3004      	addeq	r0, #4
 800f352:	079a      	lsls	r2, r3, #30
 800f354:	bf04      	itt	eq
 800f356:	089b      	lsreq	r3, r3, #2
 800f358:	3002      	addeq	r0, #2
 800f35a:	07da      	lsls	r2, r3, #31
 800f35c:	d402      	bmi.n	800f364 <__lo0bits+0x4e>
 800f35e:	085b      	lsrs	r3, r3, #1
 800f360:	d006      	beq.n	800f370 <__lo0bits+0x5a>
 800f362:	3001      	adds	r0, #1
 800f364:	600b      	str	r3, [r1, #0]
 800f366:	4770      	bx	lr
 800f368:	4610      	mov	r0, r2
 800f36a:	e7e9      	b.n	800f340 <__lo0bits+0x2a>
 800f36c:	2000      	movs	r0, #0
 800f36e:	4770      	bx	lr
 800f370:	2020      	movs	r0, #32
 800f372:	4770      	bx	lr

0800f374 <__i2b>:
 800f374:	b510      	push	{r4, lr}
 800f376:	460c      	mov	r4, r1
 800f378:	2101      	movs	r1, #1
 800f37a:	f7ff ff27 	bl	800f1cc <_Balloc>
 800f37e:	2201      	movs	r2, #1
 800f380:	6144      	str	r4, [r0, #20]
 800f382:	6102      	str	r2, [r0, #16]
 800f384:	bd10      	pop	{r4, pc}

0800f386 <__multiply>:
 800f386:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f38a:	4614      	mov	r4, r2
 800f38c:	690a      	ldr	r2, [r1, #16]
 800f38e:	6923      	ldr	r3, [r4, #16]
 800f390:	429a      	cmp	r2, r3
 800f392:	bfb8      	it	lt
 800f394:	460b      	movlt	r3, r1
 800f396:	4688      	mov	r8, r1
 800f398:	bfbc      	itt	lt
 800f39a:	46a0      	movlt	r8, r4
 800f39c:	461c      	movlt	r4, r3
 800f39e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f3a2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f3a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f3aa:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f3ae:	eb07 0609 	add.w	r6, r7, r9
 800f3b2:	42b3      	cmp	r3, r6
 800f3b4:	bfb8      	it	lt
 800f3b6:	3101      	addlt	r1, #1
 800f3b8:	f7ff ff08 	bl	800f1cc <_Balloc>
 800f3bc:	f100 0514 	add.w	r5, r0, #20
 800f3c0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800f3c4:	462b      	mov	r3, r5
 800f3c6:	2200      	movs	r2, #0
 800f3c8:	4573      	cmp	r3, lr
 800f3ca:	d316      	bcc.n	800f3fa <__multiply+0x74>
 800f3cc:	f104 0214 	add.w	r2, r4, #20
 800f3d0:	f108 0114 	add.w	r1, r8, #20
 800f3d4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800f3d8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800f3dc:	9300      	str	r3, [sp, #0]
 800f3de:	9b00      	ldr	r3, [sp, #0]
 800f3e0:	9201      	str	r2, [sp, #4]
 800f3e2:	4293      	cmp	r3, r2
 800f3e4:	d80c      	bhi.n	800f400 <__multiply+0x7a>
 800f3e6:	2e00      	cmp	r6, #0
 800f3e8:	dd03      	ble.n	800f3f2 <__multiply+0x6c>
 800f3ea:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d05d      	beq.n	800f4ae <__multiply+0x128>
 800f3f2:	6106      	str	r6, [r0, #16]
 800f3f4:	b003      	add	sp, #12
 800f3f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3fa:	f843 2b04 	str.w	r2, [r3], #4
 800f3fe:	e7e3      	b.n	800f3c8 <__multiply+0x42>
 800f400:	f8b2 b000 	ldrh.w	fp, [r2]
 800f404:	f1bb 0f00 	cmp.w	fp, #0
 800f408:	d023      	beq.n	800f452 <__multiply+0xcc>
 800f40a:	4689      	mov	r9, r1
 800f40c:	46ac      	mov	ip, r5
 800f40e:	f04f 0800 	mov.w	r8, #0
 800f412:	f859 4b04 	ldr.w	r4, [r9], #4
 800f416:	f8dc a000 	ldr.w	sl, [ip]
 800f41a:	b2a3      	uxth	r3, r4
 800f41c:	fa1f fa8a 	uxth.w	sl, sl
 800f420:	fb0b a303 	mla	r3, fp, r3, sl
 800f424:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f428:	f8dc 4000 	ldr.w	r4, [ip]
 800f42c:	4443      	add	r3, r8
 800f42e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f432:	fb0b 840a 	mla	r4, fp, sl, r8
 800f436:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800f43a:	46e2      	mov	sl, ip
 800f43c:	b29b      	uxth	r3, r3
 800f43e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f442:	454f      	cmp	r7, r9
 800f444:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f448:	f84a 3b04 	str.w	r3, [sl], #4
 800f44c:	d82b      	bhi.n	800f4a6 <__multiply+0x120>
 800f44e:	f8cc 8004 	str.w	r8, [ip, #4]
 800f452:	9b01      	ldr	r3, [sp, #4]
 800f454:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800f458:	3204      	adds	r2, #4
 800f45a:	f1ba 0f00 	cmp.w	sl, #0
 800f45e:	d020      	beq.n	800f4a2 <__multiply+0x11c>
 800f460:	682b      	ldr	r3, [r5, #0]
 800f462:	4689      	mov	r9, r1
 800f464:	46a8      	mov	r8, r5
 800f466:	f04f 0b00 	mov.w	fp, #0
 800f46a:	f8b9 c000 	ldrh.w	ip, [r9]
 800f46e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800f472:	fb0a 440c 	mla	r4, sl, ip, r4
 800f476:	445c      	add	r4, fp
 800f478:	46c4      	mov	ip, r8
 800f47a:	b29b      	uxth	r3, r3
 800f47c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f480:	f84c 3b04 	str.w	r3, [ip], #4
 800f484:	f859 3b04 	ldr.w	r3, [r9], #4
 800f488:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800f48c:	0c1b      	lsrs	r3, r3, #16
 800f48e:	fb0a b303 	mla	r3, sl, r3, fp
 800f492:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800f496:	454f      	cmp	r7, r9
 800f498:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800f49c:	d805      	bhi.n	800f4aa <__multiply+0x124>
 800f49e:	f8c8 3004 	str.w	r3, [r8, #4]
 800f4a2:	3504      	adds	r5, #4
 800f4a4:	e79b      	b.n	800f3de <__multiply+0x58>
 800f4a6:	46d4      	mov	ip, sl
 800f4a8:	e7b3      	b.n	800f412 <__multiply+0x8c>
 800f4aa:	46e0      	mov	r8, ip
 800f4ac:	e7dd      	b.n	800f46a <__multiply+0xe4>
 800f4ae:	3e01      	subs	r6, #1
 800f4b0:	e799      	b.n	800f3e6 <__multiply+0x60>
	...

0800f4b4 <__pow5mult>:
 800f4b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f4b8:	4615      	mov	r5, r2
 800f4ba:	f012 0203 	ands.w	r2, r2, #3
 800f4be:	4606      	mov	r6, r0
 800f4c0:	460f      	mov	r7, r1
 800f4c2:	d007      	beq.n	800f4d4 <__pow5mult+0x20>
 800f4c4:	3a01      	subs	r2, #1
 800f4c6:	4c21      	ldr	r4, [pc, #132]	; (800f54c <__pow5mult+0x98>)
 800f4c8:	2300      	movs	r3, #0
 800f4ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f4ce:	f7ff fec8 	bl	800f262 <__multadd>
 800f4d2:	4607      	mov	r7, r0
 800f4d4:	10ad      	asrs	r5, r5, #2
 800f4d6:	d035      	beq.n	800f544 <__pow5mult+0x90>
 800f4d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f4da:	b93c      	cbnz	r4, 800f4ec <__pow5mult+0x38>
 800f4dc:	2010      	movs	r0, #16
 800f4de:	f7fd ffd5 	bl	800d48c <malloc>
 800f4e2:	6270      	str	r0, [r6, #36]	; 0x24
 800f4e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f4e8:	6004      	str	r4, [r0, #0]
 800f4ea:	60c4      	str	r4, [r0, #12]
 800f4ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f4f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f4f4:	b94c      	cbnz	r4, 800f50a <__pow5mult+0x56>
 800f4f6:	f240 2171 	movw	r1, #625	; 0x271
 800f4fa:	4630      	mov	r0, r6
 800f4fc:	f7ff ff3a 	bl	800f374 <__i2b>
 800f500:	2300      	movs	r3, #0
 800f502:	f8c8 0008 	str.w	r0, [r8, #8]
 800f506:	4604      	mov	r4, r0
 800f508:	6003      	str	r3, [r0, #0]
 800f50a:	f04f 0800 	mov.w	r8, #0
 800f50e:	07eb      	lsls	r3, r5, #31
 800f510:	d50a      	bpl.n	800f528 <__pow5mult+0x74>
 800f512:	4639      	mov	r1, r7
 800f514:	4622      	mov	r2, r4
 800f516:	4630      	mov	r0, r6
 800f518:	f7ff ff35 	bl	800f386 <__multiply>
 800f51c:	4639      	mov	r1, r7
 800f51e:	4681      	mov	r9, r0
 800f520:	4630      	mov	r0, r6
 800f522:	f7ff fe87 	bl	800f234 <_Bfree>
 800f526:	464f      	mov	r7, r9
 800f528:	106d      	asrs	r5, r5, #1
 800f52a:	d00b      	beq.n	800f544 <__pow5mult+0x90>
 800f52c:	6820      	ldr	r0, [r4, #0]
 800f52e:	b938      	cbnz	r0, 800f540 <__pow5mult+0x8c>
 800f530:	4622      	mov	r2, r4
 800f532:	4621      	mov	r1, r4
 800f534:	4630      	mov	r0, r6
 800f536:	f7ff ff26 	bl	800f386 <__multiply>
 800f53a:	6020      	str	r0, [r4, #0]
 800f53c:	f8c0 8000 	str.w	r8, [r0]
 800f540:	4604      	mov	r4, r0
 800f542:	e7e4      	b.n	800f50e <__pow5mult+0x5a>
 800f544:	4638      	mov	r0, r7
 800f546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f54a:	bf00      	nop
 800f54c:	08013160 	.word	0x08013160

0800f550 <__lshift>:
 800f550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f554:	460c      	mov	r4, r1
 800f556:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f55a:	6923      	ldr	r3, [r4, #16]
 800f55c:	6849      	ldr	r1, [r1, #4]
 800f55e:	eb0a 0903 	add.w	r9, sl, r3
 800f562:	68a3      	ldr	r3, [r4, #8]
 800f564:	4607      	mov	r7, r0
 800f566:	4616      	mov	r6, r2
 800f568:	f109 0501 	add.w	r5, r9, #1
 800f56c:	42ab      	cmp	r3, r5
 800f56e:	db32      	blt.n	800f5d6 <__lshift+0x86>
 800f570:	4638      	mov	r0, r7
 800f572:	f7ff fe2b 	bl	800f1cc <_Balloc>
 800f576:	2300      	movs	r3, #0
 800f578:	4680      	mov	r8, r0
 800f57a:	f100 0114 	add.w	r1, r0, #20
 800f57e:	461a      	mov	r2, r3
 800f580:	4553      	cmp	r3, sl
 800f582:	db2b      	blt.n	800f5dc <__lshift+0x8c>
 800f584:	6920      	ldr	r0, [r4, #16]
 800f586:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f58a:	f104 0314 	add.w	r3, r4, #20
 800f58e:	f016 021f 	ands.w	r2, r6, #31
 800f592:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f596:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f59a:	d025      	beq.n	800f5e8 <__lshift+0x98>
 800f59c:	f1c2 0e20 	rsb	lr, r2, #32
 800f5a0:	2000      	movs	r0, #0
 800f5a2:	681e      	ldr	r6, [r3, #0]
 800f5a4:	468a      	mov	sl, r1
 800f5a6:	4096      	lsls	r6, r2
 800f5a8:	4330      	orrs	r0, r6
 800f5aa:	f84a 0b04 	str.w	r0, [sl], #4
 800f5ae:	f853 0b04 	ldr.w	r0, [r3], #4
 800f5b2:	459c      	cmp	ip, r3
 800f5b4:	fa20 f00e 	lsr.w	r0, r0, lr
 800f5b8:	d814      	bhi.n	800f5e4 <__lshift+0x94>
 800f5ba:	6048      	str	r0, [r1, #4]
 800f5bc:	b108      	cbz	r0, 800f5c2 <__lshift+0x72>
 800f5be:	f109 0502 	add.w	r5, r9, #2
 800f5c2:	3d01      	subs	r5, #1
 800f5c4:	4638      	mov	r0, r7
 800f5c6:	f8c8 5010 	str.w	r5, [r8, #16]
 800f5ca:	4621      	mov	r1, r4
 800f5cc:	f7ff fe32 	bl	800f234 <_Bfree>
 800f5d0:	4640      	mov	r0, r8
 800f5d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5d6:	3101      	adds	r1, #1
 800f5d8:	005b      	lsls	r3, r3, #1
 800f5da:	e7c7      	b.n	800f56c <__lshift+0x1c>
 800f5dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800f5e0:	3301      	adds	r3, #1
 800f5e2:	e7cd      	b.n	800f580 <__lshift+0x30>
 800f5e4:	4651      	mov	r1, sl
 800f5e6:	e7dc      	b.n	800f5a2 <__lshift+0x52>
 800f5e8:	3904      	subs	r1, #4
 800f5ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800f5ee:	f841 2f04 	str.w	r2, [r1, #4]!
 800f5f2:	459c      	cmp	ip, r3
 800f5f4:	d8f9      	bhi.n	800f5ea <__lshift+0x9a>
 800f5f6:	e7e4      	b.n	800f5c2 <__lshift+0x72>

0800f5f8 <__mcmp>:
 800f5f8:	6903      	ldr	r3, [r0, #16]
 800f5fa:	690a      	ldr	r2, [r1, #16]
 800f5fc:	1a9b      	subs	r3, r3, r2
 800f5fe:	b530      	push	{r4, r5, lr}
 800f600:	d10c      	bne.n	800f61c <__mcmp+0x24>
 800f602:	0092      	lsls	r2, r2, #2
 800f604:	3014      	adds	r0, #20
 800f606:	3114      	adds	r1, #20
 800f608:	1884      	adds	r4, r0, r2
 800f60a:	4411      	add	r1, r2
 800f60c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f610:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f614:	4295      	cmp	r5, r2
 800f616:	d003      	beq.n	800f620 <__mcmp+0x28>
 800f618:	d305      	bcc.n	800f626 <__mcmp+0x2e>
 800f61a:	2301      	movs	r3, #1
 800f61c:	4618      	mov	r0, r3
 800f61e:	bd30      	pop	{r4, r5, pc}
 800f620:	42a0      	cmp	r0, r4
 800f622:	d3f3      	bcc.n	800f60c <__mcmp+0x14>
 800f624:	e7fa      	b.n	800f61c <__mcmp+0x24>
 800f626:	f04f 33ff 	mov.w	r3, #4294967295
 800f62a:	e7f7      	b.n	800f61c <__mcmp+0x24>

0800f62c <__mdiff>:
 800f62c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f630:	460d      	mov	r5, r1
 800f632:	4607      	mov	r7, r0
 800f634:	4611      	mov	r1, r2
 800f636:	4628      	mov	r0, r5
 800f638:	4614      	mov	r4, r2
 800f63a:	f7ff ffdd 	bl	800f5f8 <__mcmp>
 800f63e:	1e06      	subs	r6, r0, #0
 800f640:	d108      	bne.n	800f654 <__mdiff+0x28>
 800f642:	4631      	mov	r1, r6
 800f644:	4638      	mov	r0, r7
 800f646:	f7ff fdc1 	bl	800f1cc <_Balloc>
 800f64a:	2301      	movs	r3, #1
 800f64c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800f650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f654:	bfa4      	itt	ge
 800f656:	4623      	movge	r3, r4
 800f658:	462c      	movge	r4, r5
 800f65a:	4638      	mov	r0, r7
 800f65c:	6861      	ldr	r1, [r4, #4]
 800f65e:	bfa6      	itte	ge
 800f660:	461d      	movge	r5, r3
 800f662:	2600      	movge	r6, #0
 800f664:	2601      	movlt	r6, #1
 800f666:	f7ff fdb1 	bl	800f1cc <_Balloc>
 800f66a:	692b      	ldr	r3, [r5, #16]
 800f66c:	60c6      	str	r6, [r0, #12]
 800f66e:	6926      	ldr	r6, [r4, #16]
 800f670:	f105 0914 	add.w	r9, r5, #20
 800f674:	f104 0214 	add.w	r2, r4, #20
 800f678:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800f67c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800f680:	f100 0514 	add.w	r5, r0, #20
 800f684:	f04f 0e00 	mov.w	lr, #0
 800f688:	f852 ab04 	ldr.w	sl, [r2], #4
 800f68c:	f859 4b04 	ldr.w	r4, [r9], #4
 800f690:	fa1e f18a 	uxtah	r1, lr, sl
 800f694:	b2a3      	uxth	r3, r4
 800f696:	1ac9      	subs	r1, r1, r3
 800f698:	0c23      	lsrs	r3, r4, #16
 800f69a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800f69e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800f6a2:	b289      	uxth	r1, r1
 800f6a4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800f6a8:	45c8      	cmp	r8, r9
 800f6aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800f6ae:	4694      	mov	ip, r2
 800f6b0:	f845 3b04 	str.w	r3, [r5], #4
 800f6b4:	d8e8      	bhi.n	800f688 <__mdiff+0x5c>
 800f6b6:	45bc      	cmp	ip, r7
 800f6b8:	d304      	bcc.n	800f6c4 <__mdiff+0x98>
 800f6ba:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800f6be:	b183      	cbz	r3, 800f6e2 <__mdiff+0xb6>
 800f6c0:	6106      	str	r6, [r0, #16]
 800f6c2:	e7c5      	b.n	800f650 <__mdiff+0x24>
 800f6c4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f6c8:	fa1e f381 	uxtah	r3, lr, r1
 800f6cc:	141a      	asrs	r2, r3, #16
 800f6ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f6d2:	b29b      	uxth	r3, r3
 800f6d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f6d8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800f6dc:	f845 3b04 	str.w	r3, [r5], #4
 800f6e0:	e7e9      	b.n	800f6b6 <__mdiff+0x8a>
 800f6e2:	3e01      	subs	r6, #1
 800f6e4:	e7e9      	b.n	800f6ba <__mdiff+0x8e>

0800f6e6 <__d2b>:
 800f6e6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f6ea:	460e      	mov	r6, r1
 800f6ec:	2101      	movs	r1, #1
 800f6ee:	ec59 8b10 	vmov	r8, r9, d0
 800f6f2:	4615      	mov	r5, r2
 800f6f4:	f7ff fd6a 	bl	800f1cc <_Balloc>
 800f6f8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800f6fc:	4607      	mov	r7, r0
 800f6fe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f702:	bb34      	cbnz	r4, 800f752 <__d2b+0x6c>
 800f704:	9301      	str	r3, [sp, #4]
 800f706:	f1b8 0300 	subs.w	r3, r8, #0
 800f70a:	d027      	beq.n	800f75c <__d2b+0x76>
 800f70c:	a802      	add	r0, sp, #8
 800f70e:	f840 3d08 	str.w	r3, [r0, #-8]!
 800f712:	f7ff fe00 	bl	800f316 <__lo0bits>
 800f716:	9900      	ldr	r1, [sp, #0]
 800f718:	b1f0      	cbz	r0, 800f758 <__d2b+0x72>
 800f71a:	9a01      	ldr	r2, [sp, #4]
 800f71c:	f1c0 0320 	rsb	r3, r0, #32
 800f720:	fa02 f303 	lsl.w	r3, r2, r3
 800f724:	430b      	orrs	r3, r1
 800f726:	40c2      	lsrs	r2, r0
 800f728:	617b      	str	r3, [r7, #20]
 800f72a:	9201      	str	r2, [sp, #4]
 800f72c:	9b01      	ldr	r3, [sp, #4]
 800f72e:	61bb      	str	r3, [r7, #24]
 800f730:	2b00      	cmp	r3, #0
 800f732:	bf14      	ite	ne
 800f734:	2102      	movne	r1, #2
 800f736:	2101      	moveq	r1, #1
 800f738:	6139      	str	r1, [r7, #16]
 800f73a:	b1c4      	cbz	r4, 800f76e <__d2b+0x88>
 800f73c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800f740:	4404      	add	r4, r0
 800f742:	6034      	str	r4, [r6, #0]
 800f744:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f748:	6028      	str	r0, [r5, #0]
 800f74a:	4638      	mov	r0, r7
 800f74c:	b003      	add	sp, #12
 800f74e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f752:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f756:	e7d5      	b.n	800f704 <__d2b+0x1e>
 800f758:	6179      	str	r1, [r7, #20]
 800f75a:	e7e7      	b.n	800f72c <__d2b+0x46>
 800f75c:	a801      	add	r0, sp, #4
 800f75e:	f7ff fdda 	bl	800f316 <__lo0bits>
 800f762:	9b01      	ldr	r3, [sp, #4]
 800f764:	617b      	str	r3, [r7, #20]
 800f766:	2101      	movs	r1, #1
 800f768:	6139      	str	r1, [r7, #16]
 800f76a:	3020      	adds	r0, #32
 800f76c:	e7e5      	b.n	800f73a <__d2b+0x54>
 800f76e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800f772:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f776:	6030      	str	r0, [r6, #0]
 800f778:	6918      	ldr	r0, [r3, #16]
 800f77a:	f7ff fdad 	bl	800f2d8 <__hi0bits>
 800f77e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800f782:	e7e1      	b.n	800f748 <__d2b+0x62>

0800f784 <_calloc_r>:
 800f784:	b538      	push	{r3, r4, r5, lr}
 800f786:	fb02 f401 	mul.w	r4, r2, r1
 800f78a:	4621      	mov	r1, r4
 800f78c:	f7fd fee8 	bl	800d560 <_malloc_r>
 800f790:	4605      	mov	r5, r0
 800f792:	b118      	cbz	r0, 800f79c <_calloc_r+0x18>
 800f794:	4622      	mov	r2, r4
 800f796:	2100      	movs	r1, #0
 800f798:	f7fd fe8b 	bl	800d4b2 <memset>
 800f79c:	4628      	mov	r0, r5
 800f79e:	bd38      	pop	{r3, r4, r5, pc}

0800f7a0 <__sfputc_r>:
 800f7a0:	6893      	ldr	r3, [r2, #8]
 800f7a2:	3b01      	subs	r3, #1
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	b410      	push	{r4}
 800f7a8:	6093      	str	r3, [r2, #8]
 800f7aa:	da08      	bge.n	800f7be <__sfputc_r+0x1e>
 800f7ac:	6994      	ldr	r4, [r2, #24]
 800f7ae:	42a3      	cmp	r3, r4
 800f7b0:	db01      	blt.n	800f7b6 <__sfputc_r+0x16>
 800f7b2:	290a      	cmp	r1, #10
 800f7b4:	d103      	bne.n	800f7be <__sfputc_r+0x1e>
 800f7b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f7ba:	f7fe bc13 	b.w	800dfe4 <__swbuf_r>
 800f7be:	6813      	ldr	r3, [r2, #0]
 800f7c0:	1c58      	adds	r0, r3, #1
 800f7c2:	6010      	str	r0, [r2, #0]
 800f7c4:	7019      	strb	r1, [r3, #0]
 800f7c6:	4608      	mov	r0, r1
 800f7c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f7cc:	4770      	bx	lr

0800f7ce <__sfputs_r>:
 800f7ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7d0:	4606      	mov	r6, r0
 800f7d2:	460f      	mov	r7, r1
 800f7d4:	4614      	mov	r4, r2
 800f7d6:	18d5      	adds	r5, r2, r3
 800f7d8:	42ac      	cmp	r4, r5
 800f7da:	d101      	bne.n	800f7e0 <__sfputs_r+0x12>
 800f7dc:	2000      	movs	r0, #0
 800f7de:	e007      	b.n	800f7f0 <__sfputs_r+0x22>
 800f7e0:	463a      	mov	r2, r7
 800f7e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7e6:	4630      	mov	r0, r6
 800f7e8:	f7ff ffda 	bl	800f7a0 <__sfputc_r>
 800f7ec:	1c43      	adds	r3, r0, #1
 800f7ee:	d1f3      	bne.n	800f7d8 <__sfputs_r+0xa>
 800f7f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f7f4 <_vfiprintf_r>:
 800f7f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7f8:	460c      	mov	r4, r1
 800f7fa:	b09d      	sub	sp, #116	; 0x74
 800f7fc:	4617      	mov	r7, r2
 800f7fe:	461d      	mov	r5, r3
 800f800:	4606      	mov	r6, r0
 800f802:	b118      	cbz	r0, 800f80c <_vfiprintf_r+0x18>
 800f804:	6983      	ldr	r3, [r0, #24]
 800f806:	b90b      	cbnz	r3, 800f80c <_vfiprintf_r+0x18>
 800f808:	f7ff fbe2 	bl	800efd0 <__sinit>
 800f80c:	4b7c      	ldr	r3, [pc, #496]	; (800fa00 <_vfiprintf_r+0x20c>)
 800f80e:	429c      	cmp	r4, r3
 800f810:	d158      	bne.n	800f8c4 <_vfiprintf_r+0xd0>
 800f812:	6874      	ldr	r4, [r6, #4]
 800f814:	89a3      	ldrh	r3, [r4, #12]
 800f816:	0718      	lsls	r0, r3, #28
 800f818:	d55e      	bpl.n	800f8d8 <_vfiprintf_r+0xe4>
 800f81a:	6923      	ldr	r3, [r4, #16]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d05b      	beq.n	800f8d8 <_vfiprintf_r+0xe4>
 800f820:	2300      	movs	r3, #0
 800f822:	9309      	str	r3, [sp, #36]	; 0x24
 800f824:	2320      	movs	r3, #32
 800f826:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f82a:	2330      	movs	r3, #48	; 0x30
 800f82c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f830:	9503      	str	r5, [sp, #12]
 800f832:	f04f 0b01 	mov.w	fp, #1
 800f836:	46b8      	mov	r8, r7
 800f838:	4645      	mov	r5, r8
 800f83a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f83e:	b10b      	cbz	r3, 800f844 <_vfiprintf_r+0x50>
 800f840:	2b25      	cmp	r3, #37	; 0x25
 800f842:	d154      	bne.n	800f8ee <_vfiprintf_r+0xfa>
 800f844:	ebb8 0a07 	subs.w	sl, r8, r7
 800f848:	d00b      	beq.n	800f862 <_vfiprintf_r+0x6e>
 800f84a:	4653      	mov	r3, sl
 800f84c:	463a      	mov	r2, r7
 800f84e:	4621      	mov	r1, r4
 800f850:	4630      	mov	r0, r6
 800f852:	f7ff ffbc 	bl	800f7ce <__sfputs_r>
 800f856:	3001      	adds	r0, #1
 800f858:	f000 80c2 	beq.w	800f9e0 <_vfiprintf_r+0x1ec>
 800f85c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f85e:	4453      	add	r3, sl
 800f860:	9309      	str	r3, [sp, #36]	; 0x24
 800f862:	f898 3000 	ldrb.w	r3, [r8]
 800f866:	2b00      	cmp	r3, #0
 800f868:	f000 80ba 	beq.w	800f9e0 <_vfiprintf_r+0x1ec>
 800f86c:	2300      	movs	r3, #0
 800f86e:	f04f 32ff 	mov.w	r2, #4294967295
 800f872:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f876:	9304      	str	r3, [sp, #16]
 800f878:	9307      	str	r3, [sp, #28]
 800f87a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f87e:	931a      	str	r3, [sp, #104]	; 0x68
 800f880:	46a8      	mov	r8, r5
 800f882:	2205      	movs	r2, #5
 800f884:	f818 1b01 	ldrb.w	r1, [r8], #1
 800f888:	485e      	ldr	r0, [pc, #376]	; (800fa04 <_vfiprintf_r+0x210>)
 800f88a:	f7f0 fcc1 	bl	8000210 <memchr>
 800f88e:	9b04      	ldr	r3, [sp, #16]
 800f890:	bb78      	cbnz	r0, 800f8f2 <_vfiprintf_r+0xfe>
 800f892:	06d9      	lsls	r1, r3, #27
 800f894:	bf44      	itt	mi
 800f896:	2220      	movmi	r2, #32
 800f898:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f89c:	071a      	lsls	r2, r3, #28
 800f89e:	bf44      	itt	mi
 800f8a0:	222b      	movmi	r2, #43	; 0x2b
 800f8a2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f8a6:	782a      	ldrb	r2, [r5, #0]
 800f8a8:	2a2a      	cmp	r2, #42	; 0x2a
 800f8aa:	d02a      	beq.n	800f902 <_vfiprintf_r+0x10e>
 800f8ac:	9a07      	ldr	r2, [sp, #28]
 800f8ae:	46a8      	mov	r8, r5
 800f8b0:	2000      	movs	r0, #0
 800f8b2:	250a      	movs	r5, #10
 800f8b4:	4641      	mov	r1, r8
 800f8b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f8ba:	3b30      	subs	r3, #48	; 0x30
 800f8bc:	2b09      	cmp	r3, #9
 800f8be:	d969      	bls.n	800f994 <_vfiprintf_r+0x1a0>
 800f8c0:	b360      	cbz	r0, 800f91c <_vfiprintf_r+0x128>
 800f8c2:	e024      	b.n	800f90e <_vfiprintf_r+0x11a>
 800f8c4:	4b50      	ldr	r3, [pc, #320]	; (800fa08 <_vfiprintf_r+0x214>)
 800f8c6:	429c      	cmp	r4, r3
 800f8c8:	d101      	bne.n	800f8ce <_vfiprintf_r+0xda>
 800f8ca:	68b4      	ldr	r4, [r6, #8]
 800f8cc:	e7a2      	b.n	800f814 <_vfiprintf_r+0x20>
 800f8ce:	4b4f      	ldr	r3, [pc, #316]	; (800fa0c <_vfiprintf_r+0x218>)
 800f8d0:	429c      	cmp	r4, r3
 800f8d2:	bf08      	it	eq
 800f8d4:	68f4      	ldreq	r4, [r6, #12]
 800f8d6:	e79d      	b.n	800f814 <_vfiprintf_r+0x20>
 800f8d8:	4621      	mov	r1, r4
 800f8da:	4630      	mov	r0, r6
 800f8dc:	f7fe fbd4 	bl	800e088 <__swsetup_r>
 800f8e0:	2800      	cmp	r0, #0
 800f8e2:	d09d      	beq.n	800f820 <_vfiprintf_r+0x2c>
 800f8e4:	f04f 30ff 	mov.w	r0, #4294967295
 800f8e8:	b01d      	add	sp, #116	; 0x74
 800f8ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8ee:	46a8      	mov	r8, r5
 800f8f0:	e7a2      	b.n	800f838 <_vfiprintf_r+0x44>
 800f8f2:	4a44      	ldr	r2, [pc, #272]	; (800fa04 <_vfiprintf_r+0x210>)
 800f8f4:	1a80      	subs	r0, r0, r2
 800f8f6:	fa0b f000 	lsl.w	r0, fp, r0
 800f8fa:	4318      	orrs	r0, r3
 800f8fc:	9004      	str	r0, [sp, #16]
 800f8fe:	4645      	mov	r5, r8
 800f900:	e7be      	b.n	800f880 <_vfiprintf_r+0x8c>
 800f902:	9a03      	ldr	r2, [sp, #12]
 800f904:	1d11      	adds	r1, r2, #4
 800f906:	6812      	ldr	r2, [r2, #0]
 800f908:	9103      	str	r1, [sp, #12]
 800f90a:	2a00      	cmp	r2, #0
 800f90c:	db01      	blt.n	800f912 <_vfiprintf_r+0x11e>
 800f90e:	9207      	str	r2, [sp, #28]
 800f910:	e004      	b.n	800f91c <_vfiprintf_r+0x128>
 800f912:	4252      	negs	r2, r2
 800f914:	f043 0302 	orr.w	r3, r3, #2
 800f918:	9207      	str	r2, [sp, #28]
 800f91a:	9304      	str	r3, [sp, #16]
 800f91c:	f898 3000 	ldrb.w	r3, [r8]
 800f920:	2b2e      	cmp	r3, #46	; 0x2e
 800f922:	d10e      	bne.n	800f942 <_vfiprintf_r+0x14e>
 800f924:	f898 3001 	ldrb.w	r3, [r8, #1]
 800f928:	2b2a      	cmp	r3, #42	; 0x2a
 800f92a:	d138      	bne.n	800f99e <_vfiprintf_r+0x1aa>
 800f92c:	9b03      	ldr	r3, [sp, #12]
 800f92e:	1d1a      	adds	r2, r3, #4
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	9203      	str	r2, [sp, #12]
 800f934:	2b00      	cmp	r3, #0
 800f936:	bfb8      	it	lt
 800f938:	f04f 33ff 	movlt.w	r3, #4294967295
 800f93c:	f108 0802 	add.w	r8, r8, #2
 800f940:	9305      	str	r3, [sp, #20]
 800f942:	4d33      	ldr	r5, [pc, #204]	; (800fa10 <_vfiprintf_r+0x21c>)
 800f944:	f898 1000 	ldrb.w	r1, [r8]
 800f948:	2203      	movs	r2, #3
 800f94a:	4628      	mov	r0, r5
 800f94c:	f7f0 fc60 	bl	8000210 <memchr>
 800f950:	b140      	cbz	r0, 800f964 <_vfiprintf_r+0x170>
 800f952:	2340      	movs	r3, #64	; 0x40
 800f954:	1b40      	subs	r0, r0, r5
 800f956:	fa03 f000 	lsl.w	r0, r3, r0
 800f95a:	9b04      	ldr	r3, [sp, #16]
 800f95c:	4303      	orrs	r3, r0
 800f95e:	f108 0801 	add.w	r8, r8, #1
 800f962:	9304      	str	r3, [sp, #16]
 800f964:	f898 1000 	ldrb.w	r1, [r8]
 800f968:	482a      	ldr	r0, [pc, #168]	; (800fa14 <_vfiprintf_r+0x220>)
 800f96a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f96e:	2206      	movs	r2, #6
 800f970:	f108 0701 	add.w	r7, r8, #1
 800f974:	f7f0 fc4c 	bl	8000210 <memchr>
 800f978:	2800      	cmp	r0, #0
 800f97a:	d037      	beq.n	800f9ec <_vfiprintf_r+0x1f8>
 800f97c:	4b26      	ldr	r3, [pc, #152]	; (800fa18 <_vfiprintf_r+0x224>)
 800f97e:	bb1b      	cbnz	r3, 800f9c8 <_vfiprintf_r+0x1d4>
 800f980:	9b03      	ldr	r3, [sp, #12]
 800f982:	3307      	adds	r3, #7
 800f984:	f023 0307 	bic.w	r3, r3, #7
 800f988:	3308      	adds	r3, #8
 800f98a:	9303      	str	r3, [sp, #12]
 800f98c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f98e:	444b      	add	r3, r9
 800f990:	9309      	str	r3, [sp, #36]	; 0x24
 800f992:	e750      	b.n	800f836 <_vfiprintf_r+0x42>
 800f994:	fb05 3202 	mla	r2, r5, r2, r3
 800f998:	2001      	movs	r0, #1
 800f99a:	4688      	mov	r8, r1
 800f99c:	e78a      	b.n	800f8b4 <_vfiprintf_r+0xc0>
 800f99e:	2300      	movs	r3, #0
 800f9a0:	f108 0801 	add.w	r8, r8, #1
 800f9a4:	9305      	str	r3, [sp, #20]
 800f9a6:	4619      	mov	r1, r3
 800f9a8:	250a      	movs	r5, #10
 800f9aa:	4640      	mov	r0, r8
 800f9ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f9b0:	3a30      	subs	r2, #48	; 0x30
 800f9b2:	2a09      	cmp	r2, #9
 800f9b4:	d903      	bls.n	800f9be <_vfiprintf_r+0x1ca>
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d0c3      	beq.n	800f942 <_vfiprintf_r+0x14e>
 800f9ba:	9105      	str	r1, [sp, #20]
 800f9bc:	e7c1      	b.n	800f942 <_vfiprintf_r+0x14e>
 800f9be:	fb05 2101 	mla	r1, r5, r1, r2
 800f9c2:	2301      	movs	r3, #1
 800f9c4:	4680      	mov	r8, r0
 800f9c6:	e7f0      	b.n	800f9aa <_vfiprintf_r+0x1b6>
 800f9c8:	ab03      	add	r3, sp, #12
 800f9ca:	9300      	str	r3, [sp, #0]
 800f9cc:	4622      	mov	r2, r4
 800f9ce:	4b13      	ldr	r3, [pc, #76]	; (800fa1c <_vfiprintf_r+0x228>)
 800f9d0:	a904      	add	r1, sp, #16
 800f9d2:	4630      	mov	r0, r6
 800f9d4:	f7fd feb2 	bl	800d73c <_printf_float>
 800f9d8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f9dc:	4681      	mov	r9, r0
 800f9de:	d1d5      	bne.n	800f98c <_vfiprintf_r+0x198>
 800f9e0:	89a3      	ldrh	r3, [r4, #12]
 800f9e2:	065b      	lsls	r3, r3, #25
 800f9e4:	f53f af7e 	bmi.w	800f8e4 <_vfiprintf_r+0xf0>
 800f9e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f9ea:	e77d      	b.n	800f8e8 <_vfiprintf_r+0xf4>
 800f9ec:	ab03      	add	r3, sp, #12
 800f9ee:	9300      	str	r3, [sp, #0]
 800f9f0:	4622      	mov	r2, r4
 800f9f2:	4b0a      	ldr	r3, [pc, #40]	; (800fa1c <_vfiprintf_r+0x228>)
 800f9f4:	a904      	add	r1, sp, #16
 800f9f6:	4630      	mov	r0, r6
 800f9f8:	f7fe f956 	bl	800dca8 <_printf_i>
 800f9fc:	e7ec      	b.n	800f9d8 <_vfiprintf_r+0x1e4>
 800f9fe:	bf00      	nop
 800fa00:	0801302c 	.word	0x0801302c
 800fa04:	0801316c 	.word	0x0801316c
 800fa08:	0801304c 	.word	0x0801304c
 800fa0c:	0801300c 	.word	0x0801300c
 800fa10:	08013172 	.word	0x08013172
 800fa14:	08013176 	.word	0x08013176
 800fa18:	0800d73d 	.word	0x0800d73d
 800fa1c:	0800f7cf 	.word	0x0800f7cf

0800fa20 <__sread>:
 800fa20:	b510      	push	{r4, lr}
 800fa22:	460c      	mov	r4, r1
 800fa24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa28:	f000 f8a6 	bl	800fb78 <_read_r>
 800fa2c:	2800      	cmp	r0, #0
 800fa2e:	bfab      	itete	ge
 800fa30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fa32:	89a3      	ldrhlt	r3, [r4, #12]
 800fa34:	181b      	addge	r3, r3, r0
 800fa36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fa3a:	bfac      	ite	ge
 800fa3c:	6563      	strge	r3, [r4, #84]	; 0x54
 800fa3e:	81a3      	strhlt	r3, [r4, #12]
 800fa40:	bd10      	pop	{r4, pc}

0800fa42 <__swrite>:
 800fa42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa46:	461f      	mov	r7, r3
 800fa48:	898b      	ldrh	r3, [r1, #12]
 800fa4a:	05db      	lsls	r3, r3, #23
 800fa4c:	4605      	mov	r5, r0
 800fa4e:	460c      	mov	r4, r1
 800fa50:	4616      	mov	r6, r2
 800fa52:	d505      	bpl.n	800fa60 <__swrite+0x1e>
 800fa54:	2302      	movs	r3, #2
 800fa56:	2200      	movs	r2, #0
 800fa58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa5c:	f000 f868 	bl	800fb30 <_lseek_r>
 800fa60:	89a3      	ldrh	r3, [r4, #12]
 800fa62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fa66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fa6a:	81a3      	strh	r3, [r4, #12]
 800fa6c:	4632      	mov	r2, r6
 800fa6e:	463b      	mov	r3, r7
 800fa70:	4628      	mov	r0, r5
 800fa72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa76:	f000 b817 	b.w	800faa8 <_write_r>

0800fa7a <__sseek>:
 800fa7a:	b510      	push	{r4, lr}
 800fa7c:	460c      	mov	r4, r1
 800fa7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa82:	f000 f855 	bl	800fb30 <_lseek_r>
 800fa86:	1c43      	adds	r3, r0, #1
 800fa88:	89a3      	ldrh	r3, [r4, #12]
 800fa8a:	bf15      	itete	ne
 800fa8c:	6560      	strne	r0, [r4, #84]	; 0x54
 800fa8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fa92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fa96:	81a3      	strheq	r3, [r4, #12]
 800fa98:	bf18      	it	ne
 800fa9a:	81a3      	strhne	r3, [r4, #12]
 800fa9c:	bd10      	pop	{r4, pc}

0800fa9e <__sclose>:
 800fa9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800faa2:	f000 b813 	b.w	800facc <_close_r>
	...

0800faa8 <_write_r>:
 800faa8:	b538      	push	{r3, r4, r5, lr}
 800faaa:	4c07      	ldr	r4, [pc, #28]	; (800fac8 <_write_r+0x20>)
 800faac:	4605      	mov	r5, r0
 800faae:	4608      	mov	r0, r1
 800fab0:	4611      	mov	r1, r2
 800fab2:	2200      	movs	r2, #0
 800fab4:	6022      	str	r2, [r4, #0]
 800fab6:	461a      	mov	r2, r3
 800fab8:	f7f2 fd91 	bl	80025de <_write>
 800fabc:	1c43      	adds	r3, r0, #1
 800fabe:	d102      	bne.n	800fac6 <_write_r+0x1e>
 800fac0:	6823      	ldr	r3, [r4, #0]
 800fac2:	b103      	cbz	r3, 800fac6 <_write_r+0x1e>
 800fac4:	602b      	str	r3, [r5, #0]
 800fac6:	bd38      	pop	{r3, r4, r5, pc}
 800fac8:	200017f8 	.word	0x200017f8

0800facc <_close_r>:
 800facc:	b538      	push	{r3, r4, r5, lr}
 800face:	4c06      	ldr	r4, [pc, #24]	; (800fae8 <_close_r+0x1c>)
 800fad0:	2300      	movs	r3, #0
 800fad2:	4605      	mov	r5, r0
 800fad4:	4608      	mov	r0, r1
 800fad6:	6023      	str	r3, [r4, #0]
 800fad8:	f7f2 fd9d 	bl	8002616 <_close>
 800fadc:	1c43      	adds	r3, r0, #1
 800fade:	d102      	bne.n	800fae6 <_close_r+0x1a>
 800fae0:	6823      	ldr	r3, [r4, #0]
 800fae2:	b103      	cbz	r3, 800fae6 <_close_r+0x1a>
 800fae4:	602b      	str	r3, [r5, #0]
 800fae6:	bd38      	pop	{r3, r4, r5, pc}
 800fae8:	200017f8 	.word	0x200017f8

0800faec <_fstat_r>:
 800faec:	b538      	push	{r3, r4, r5, lr}
 800faee:	4c07      	ldr	r4, [pc, #28]	; (800fb0c <_fstat_r+0x20>)
 800faf0:	2300      	movs	r3, #0
 800faf2:	4605      	mov	r5, r0
 800faf4:	4608      	mov	r0, r1
 800faf6:	4611      	mov	r1, r2
 800faf8:	6023      	str	r3, [r4, #0]
 800fafa:	f7f2 fd98 	bl	800262e <_fstat>
 800fafe:	1c43      	adds	r3, r0, #1
 800fb00:	d102      	bne.n	800fb08 <_fstat_r+0x1c>
 800fb02:	6823      	ldr	r3, [r4, #0]
 800fb04:	b103      	cbz	r3, 800fb08 <_fstat_r+0x1c>
 800fb06:	602b      	str	r3, [r5, #0]
 800fb08:	bd38      	pop	{r3, r4, r5, pc}
 800fb0a:	bf00      	nop
 800fb0c:	200017f8 	.word	0x200017f8

0800fb10 <_isatty_r>:
 800fb10:	b538      	push	{r3, r4, r5, lr}
 800fb12:	4c06      	ldr	r4, [pc, #24]	; (800fb2c <_isatty_r+0x1c>)
 800fb14:	2300      	movs	r3, #0
 800fb16:	4605      	mov	r5, r0
 800fb18:	4608      	mov	r0, r1
 800fb1a:	6023      	str	r3, [r4, #0]
 800fb1c:	f7f2 fd97 	bl	800264e <_isatty>
 800fb20:	1c43      	adds	r3, r0, #1
 800fb22:	d102      	bne.n	800fb2a <_isatty_r+0x1a>
 800fb24:	6823      	ldr	r3, [r4, #0]
 800fb26:	b103      	cbz	r3, 800fb2a <_isatty_r+0x1a>
 800fb28:	602b      	str	r3, [r5, #0]
 800fb2a:	bd38      	pop	{r3, r4, r5, pc}
 800fb2c:	200017f8 	.word	0x200017f8

0800fb30 <_lseek_r>:
 800fb30:	b538      	push	{r3, r4, r5, lr}
 800fb32:	4c07      	ldr	r4, [pc, #28]	; (800fb50 <_lseek_r+0x20>)
 800fb34:	4605      	mov	r5, r0
 800fb36:	4608      	mov	r0, r1
 800fb38:	4611      	mov	r1, r2
 800fb3a:	2200      	movs	r2, #0
 800fb3c:	6022      	str	r2, [r4, #0]
 800fb3e:	461a      	mov	r2, r3
 800fb40:	f7f2 fd90 	bl	8002664 <_lseek>
 800fb44:	1c43      	adds	r3, r0, #1
 800fb46:	d102      	bne.n	800fb4e <_lseek_r+0x1e>
 800fb48:	6823      	ldr	r3, [r4, #0]
 800fb4a:	b103      	cbz	r3, 800fb4e <_lseek_r+0x1e>
 800fb4c:	602b      	str	r3, [r5, #0]
 800fb4e:	bd38      	pop	{r3, r4, r5, pc}
 800fb50:	200017f8 	.word	0x200017f8

0800fb54 <__ascii_mbtowc>:
 800fb54:	b082      	sub	sp, #8
 800fb56:	b901      	cbnz	r1, 800fb5a <__ascii_mbtowc+0x6>
 800fb58:	a901      	add	r1, sp, #4
 800fb5a:	b142      	cbz	r2, 800fb6e <__ascii_mbtowc+0x1a>
 800fb5c:	b14b      	cbz	r3, 800fb72 <__ascii_mbtowc+0x1e>
 800fb5e:	7813      	ldrb	r3, [r2, #0]
 800fb60:	600b      	str	r3, [r1, #0]
 800fb62:	7812      	ldrb	r2, [r2, #0]
 800fb64:	1c10      	adds	r0, r2, #0
 800fb66:	bf18      	it	ne
 800fb68:	2001      	movne	r0, #1
 800fb6a:	b002      	add	sp, #8
 800fb6c:	4770      	bx	lr
 800fb6e:	4610      	mov	r0, r2
 800fb70:	e7fb      	b.n	800fb6a <__ascii_mbtowc+0x16>
 800fb72:	f06f 0001 	mvn.w	r0, #1
 800fb76:	e7f8      	b.n	800fb6a <__ascii_mbtowc+0x16>

0800fb78 <_read_r>:
 800fb78:	b538      	push	{r3, r4, r5, lr}
 800fb7a:	4c07      	ldr	r4, [pc, #28]	; (800fb98 <_read_r+0x20>)
 800fb7c:	4605      	mov	r5, r0
 800fb7e:	4608      	mov	r0, r1
 800fb80:	4611      	mov	r1, r2
 800fb82:	2200      	movs	r2, #0
 800fb84:	6022      	str	r2, [r4, #0]
 800fb86:	461a      	mov	r2, r3
 800fb88:	f7f2 fd0c 	bl	80025a4 <_read>
 800fb8c:	1c43      	adds	r3, r0, #1
 800fb8e:	d102      	bne.n	800fb96 <_read_r+0x1e>
 800fb90:	6823      	ldr	r3, [r4, #0]
 800fb92:	b103      	cbz	r3, 800fb96 <_read_r+0x1e>
 800fb94:	602b      	str	r3, [r5, #0]
 800fb96:	bd38      	pop	{r3, r4, r5, pc}
 800fb98:	200017f8 	.word	0x200017f8

0800fb9c <__ascii_wctomb>:
 800fb9c:	b149      	cbz	r1, 800fbb2 <__ascii_wctomb+0x16>
 800fb9e:	2aff      	cmp	r2, #255	; 0xff
 800fba0:	bf85      	ittet	hi
 800fba2:	238a      	movhi	r3, #138	; 0x8a
 800fba4:	6003      	strhi	r3, [r0, #0]
 800fba6:	700a      	strbls	r2, [r1, #0]
 800fba8:	f04f 30ff 	movhi.w	r0, #4294967295
 800fbac:	bf98      	it	ls
 800fbae:	2001      	movls	r0, #1
 800fbb0:	4770      	bx	lr
 800fbb2:	4608      	mov	r0, r1
 800fbb4:	4770      	bx	lr
	...

0800fbb8 <expf>:
 800fbb8:	b530      	push	{r4, r5, lr}
 800fbba:	ed2d 8b02 	vpush	{d8}
 800fbbe:	4d35      	ldr	r5, [pc, #212]	; (800fc94 <expf+0xdc>)
 800fbc0:	b08b      	sub	sp, #44	; 0x2c
 800fbc2:	eeb0 8a40 	vmov.f32	s16, s0
 800fbc6:	f000 f871 	bl	800fcac <__ieee754_expf>
 800fbca:	f995 3000 	ldrsb.w	r3, [r5]
 800fbce:	3301      	adds	r3, #1
 800fbd0:	ee10 4a10 	vmov	r4, s0
 800fbd4:	d030      	beq.n	800fc38 <expf+0x80>
 800fbd6:	eeb0 0a48 	vmov.f32	s0, s16
 800fbda:	f000 f93d 	bl	800fe58 <finitef>
 800fbde:	b358      	cbz	r0, 800fc38 <expf+0x80>
 800fbe0:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800fc98 <expf+0xe0>
 800fbe4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800fbe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbec:	dd35      	ble.n	800fc5a <expf+0xa2>
 800fbee:	2303      	movs	r3, #3
 800fbf0:	9300      	str	r3, [sp, #0]
 800fbf2:	4b2a      	ldr	r3, [pc, #168]	; (800fc9c <expf+0xe4>)
 800fbf4:	9301      	str	r3, [sp, #4]
 800fbf6:	ee18 0a10 	vmov	r0, s16
 800fbfa:	2300      	movs	r3, #0
 800fbfc:	9308      	str	r3, [sp, #32]
 800fbfe:	f7f0 fcbb 	bl	8000578 <__aeabi_f2d>
 800fc02:	f995 3000 	ldrsb.w	r3, [r5]
 800fc06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fc0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fc0e:	b9cb      	cbnz	r3, 800fc44 <expf+0x8c>
 800fc10:	4b23      	ldr	r3, [pc, #140]	; (800fca0 <expf+0xe8>)
 800fc12:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800fc16:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800fc1a:	4668      	mov	r0, sp
 800fc1c:	f000 f91a 	bl	800fe54 <matherr>
 800fc20:	b1b0      	cbz	r0, 800fc50 <expf+0x98>
 800fc22:	9b08      	ldr	r3, [sp, #32]
 800fc24:	b11b      	cbz	r3, 800fc2e <expf+0x76>
 800fc26:	f7fd fc07 	bl	800d438 <__errno>
 800fc2a:	9b08      	ldr	r3, [sp, #32]
 800fc2c:	6003      	str	r3, [r0, #0]
 800fc2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fc32:	f7f0 ffd1 	bl	8000bd8 <__aeabi_d2f>
 800fc36:	4604      	mov	r4, r0
 800fc38:	ee00 4a10 	vmov	s0, r4
 800fc3c:	b00b      	add	sp, #44	; 0x2c
 800fc3e:	ecbd 8b02 	vpop	{d8}
 800fc42:	bd30      	pop	{r4, r5, pc}
 800fc44:	4917      	ldr	r1, [pc, #92]	; (800fca4 <expf+0xec>)
 800fc46:	2000      	movs	r0, #0
 800fc48:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800fc4c:	2b02      	cmp	r3, #2
 800fc4e:	d1e4      	bne.n	800fc1a <expf+0x62>
 800fc50:	f7fd fbf2 	bl	800d438 <__errno>
 800fc54:	2322      	movs	r3, #34	; 0x22
 800fc56:	6003      	str	r3, [r0, #0]
 800fc58:	e7e3      	b.n	800fc22 <expf+0x6a>
 800fc5a:	eddf 7a13 	vldr	s15, [pc, #76]	; 800fca8 <expf+0xf0>
 800fc5e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800fc62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc66:	d5e7      	bpl.n	800fc38 <expf+0x80>
 800fc68:	2304      	movs	r3, #4
 800fc6a:	9300      	str	r3, [sp, #0]
 800fc6c:	4b0b      	ldr	r3, [pc, #44]	; (800fc9c <expf+0xe4>)
 800fc6e:	9301      	str	r3, [sp, #4]
 800fc70:	ee18 0a10 	vmov	r0, s16
 800fc74:	2300      	movs	r3, #0
 800fc76:	9308      	str	r3, [sp, #32]
 800fc78:	f7f0 fc7e 	bl	8000578 <__aeabi_f2d>
 800fc7c:	2300      	movs	r3, #0
 800fc7e:	2200      	movs	r2, #0
 800fc80:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800fc84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fc88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fc8c:	f995 3000 	ldrsb.w	r3, [r5]
 800fc90:	e7dc      	b.n	800fc4c <expf+0x94>
 800fc92:	bf00      	nop
 800fc94:	200007f0 	.word	0x200007f0
 800fc98:	42b17180 	.word	0x42b17180
 800fc9c:	08013288 	.word	0x08013288
 800fca0:	47efffff 	.word	0x47efffff
 800fca4:	7ff00000 	.word	0x7ff00000
 800fca8:	c2cff1b5 	.word	0xc2cff1b5

0800fcac <__ieee754_expf>:
 800fcac:	ee10 2a10 	vmov	r2, s0
 800fcb0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800fcb4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800fcb8:	d902      	bls.n	800fcc0 <__ieee754_expf+0x14>
 800fcba:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fcbe:	4770      	bx	lr
 800fcc0:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800fcc4:	d106      	bne.n	800fcd4 <__ieee754_expf+0x28>
 800fcc6:	eddf 7a51 	vldr	s15, [pc, #324]	; 800fe0c <__ieee754_expf+0x160>
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	bf18      	it	ne
 800fcce:	eeb0 0a67 	vmovne.f32	s0, s15
 800fcd2:	4770      	bx	lr
 800fcd4:	484e      	ldr	r0, [pc, #312]	; (800fe10 <__ieee754_expf+0x164>)
 800fcd6:	4282      	cmp	r2, r0
 800fcd8:	dd04      	ble.n	800fce4 <__ieee754_expf+0x38>
 800fcda:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 800fe14 <__ieee754_expf+0x168>
 800fcde:	ee20 0a00 	vmul.f32	s0, s0, s0
 800fce2:	4770      	bx	lr
 800fce4:	2a00      	cmp	r2, #0
 800fce6:	da03      	bge.n	800fcf0 <__ieee754_expf+0x44>
 800fce8:	4a4b      	ldr	r2, [pc, #300]	; (800fe18 <__ieee754_expf+0x16c>)
 800fcea:	4291      	cmp	r1, r2
 800fcec:	f200 808a 	bhi.w	800fe04 <__ieee754_expf+0x158>
 800fcf0:	4a4a      	ldr	r2, [pc, #296]	; (800fe1c <__ieee754_expf+0x170>)
 800fcf2:	4291      	cmp	r1, r2
 800fcf4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800fcf8:	d954      	bls.n	800fda4 <__ieee754_expf+0xf8>
 800fcfa:	4a49      	ldr	r2, [pc, #292]	; (800fe20 <__ieee754_expf+0x174>)
 800fcfc:	4291      	cmp	r1, r2
 800fcfe:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800fd02:	d836      	bhi.n	800fd72 <__ieee754_expf+0xc6>
 800fd04:	4947      	ldr	r1, [pc, #284]	; (800fe24 <__ieee754_expf+0x178>)
 800fd06:	4411      	add	r1, r2
 800fd08:	ed91 7a00 	vldr	s14, [r1]
 800fd0c:	4946      	ldr	r1, [pc, #280]	; (800fe28 <__ieee754_expf+0x17c>)
 800fd0e:	440a      	add	r2, r1
 800fd10:	edd2 7a00 	vldr	s15, [r2]
 800fd14:	ee30 7a47 	vsub.f32	s14, s0, s14
 800fd18:	f1c3 0201 	rsb	r2, r3, #1
 800fd1c:	1ad2      	subs	r2, r2, r3
 800fd1e:	ee37 0a67 	vsub.f32	s0, s14, s15
 800fd22:	ee60 6a00 	vmul.f32	s13, s0, s0
 800fd26:	eddf 5a41 	vldr	s11, [pc, #260]	; 800fe2c <__ieee754_expf+0x180>
 800fd2a:	ed9f 5a41 	vldr	s10, [pc, #260]	; 800fe30 <__ieee754_expf+0x184>
 800fd2e:	eea6 5aa5 	vfma.f32	s10, s13, s11
 800fd32:	eddf 5a40 	vldr	s11, [pc, #256]	; 800fe34 <__ieee754_expf+0x188>
 800fd36:	eee5 5a26 	vfma.f32	s11, s10, s13
 800fd3a:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 800fe38 <__ieee754_expf+0x18c>
 800fd3e:	eea5 5aa6 	vfma.f32	s10, s11, s13
 800fd42:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800fe3c <__ieee754_expf+0x190>
 800fd46:	eee5 5a26 	vfma.f32	s11, s10, s13
 800fd4a:	eeb0 5a40 	vmov.f32	s10, s0
 800fd4e:	eea5 5ae6 	vfms.f32	s10, s11, s13
 800fd52:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800fd56:	eef0 6a45 	vmov.f32	s13, s10
 800fd5a:	ee20 5a05 	vmul.f32	s10, s0, s10
 800fd5e:	bb92      	cbnz	r2, 800fdc6 <__ieee754_expf+0x11a>
 800fd60:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800fd64:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800fd68:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800fd6c:	ee36 0a40 	vsub.f32	s0, s12, s0
 800fd70:	4770      	bx	lr
 800fd72:	4b33      	ldr	r3, [pc, #204]	; (800fe40 <__ieee754_expf+0x194>)
 800fd74:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800fe44 <__ieee754_expf+0x198>
 800fd78:	4413      	add	r3, r2
 800fd7a:	edd3 7a00 	vldr	s15, [r3]
 800fd7e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800fd82:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800fe48 <__ieee754_expf+0x19c>
 800fd86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fd8a:	ee17 2a90 	vmov	r2, s15
 800fd8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fd92:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800fd96:	eeb0 7a40 	vmov.f32	s14, s0
 800fd9a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800fe4c <__ieee754_expf+0x1a0>
 800fd9e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800fda2:	e7bc      	b.n	800fd1e <__ieee754_expf+0x72>
 800fda4:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 800fda8:	d20b      	bcs.n	800fdc2 <__ieee754_expf+0x116>
 800fdaa:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800fe14 <__ieee754_expf+0x168>
 800fdae:	ee70 6a26 	vadd.f32	s13, s0, s13
 800fdb2:	eef4 6ac6 	vcmpe.f32	s13, s12
 800fdb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdba:	dd02      	ble.n	800fdc2 <__ieee754_expf+0x116>
 800fdbc:	ee30 0a06 	vadd.f32	s0, s0, s12
 800fdc0:	4770      	bx	lr
 800fdc2:	2200      	movs	r2, #0
 800fdc4:	e7ad      	b.n	800fd22 <__ieee754_expf+0x76>
 800fdc6:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800fdca:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800fdce:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800fdd2:	bfb8      	it	lt
 800fdd4:	3264      	addlt	r2, #100	; 0x64
 800fdd6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800fdda:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800fdde:	ee76 7a40 	vsub.f32	s15, s12, s0
 800fde2:	ee17 3a90 	vmov	r3, s15
 800fde6:	bfab      	itete	ge
 800fde8:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800fdec:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800fdf0:	ee00 3a10 	vmovge	s0, r3
 800fdf4:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 800fe50 <__ieee754_expf+0x1a4>
 800fdf8:	bfbc      	itt	lt
 800fdfa:	ee00 3a10 	vmovlt	s0, r3
 800fdfe:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800fe02:	4770      	bx	lr
 800fe04:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800fe0c <__ieee754_expf+0x160>
 800fe08:	4770      	bx	lr
 800fe0a:	bf00      	nop
 800fe0c:	00000000 	.word	0x00000000
 800fe10:	42b17217 	.word	0x42b17217
 800fe14:	7149f2ca 	.word	0x7149f2ca
 800fe18:	42cff1b5 	.word	0x42cff1b5
 800fe1c:	3eb17218 	.word	0x3eb17218
 800fe20:	3f851591 	.word	0x3f851591
 800fe24:	08013298 	.word	0x08013298
 800fe28:	080132a0 	.word	0x080132a0
 800fe2c:	3331bb4c 	.word	0x3331bb4c
 800fe30:	b5ddea0e 	.word	0xb5ddea0e
 800fe34:	388ab355 	.word	0x388ab355
 800fe38:	bb360b61 	.word	0xbb360b61
 800fe3c:	3e2aaaab 	.word	0x3e2aaaab
 800fe40:	08013290 	.word	0x08013290
 800fe44:	3fb8aa3b 	.word	0x3fb8aa3b
 800fe48:	3f317180 	.word	0x3f317180
 800fe4c:	3717f7d1 	.word	0x3717f7d1
 800fe50:	0d800000 	.word	0x0d800000

0800fe54 <matherr>:
 800fe54:	2000      	movs	r0, #0
 800fe56:	4770      	bx	lr

0800fe58 <finitef>:
 800fe58:	ee10 3a10 	vmov	r3, s0
 800fe5c:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800fe60:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800fe64:	bfac      	ite	ge
 800fe66:	2000      	movge	r0, #0
 800fe68:	2001      	movlt	r0, #1
 800fe6a:	4770      	bx	lr

0800fe6c <_init>:
 800fe6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe6e:	bf00      	nop
 800fe70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe72:	bc08      	pop	{r3}
 800fe74:	469e      	mov	lr, r3
 800fe76:	4770      	bx	lr

0800fe78 <_fini>:
 800fe78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe7a:	bf00      	nop
 800fe7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe7e:	bc08      	pop	{r3}
 800fe80:	469e      	mov	lr, r3
 800fe82:	4770      	bx	lr
