
LiveinSIOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c82c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001958  0800c9c0  0800c9c0  0001c9c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e318  0800e318  000207f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e318  0800e318  0001e318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e320  0800e320  000207f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e320  0800e320  0001e320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e324  0800e324  0001e324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000007f0  20000000  0800e328  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f64  200007f0  0800eb18  000207f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000a04  20001754  0800eb18  00021754  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000207f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ceb1  00000000  00000000  00020820  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004595  00000000  00000000  0004d6d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000022f8  00000000  00000000  00051c68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000020b0  00000000  00000000  00053f60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002c74b  00000000  00000000  00056010  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001963a  00000000  00000000  0008275b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001076bc  00000000  00000000  0009bd95  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a3451  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a290  00000000  00000000  001a34cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200007f0 	.word	0x200007f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c9a4 	.word	0x0800c9a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200007f4 	.word	0x200007f4
 80001cc:	0800c9a4 	.word	0x0800c9a4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8000f4c:	4b0d      	ldr	r3, [pc, #52]	; (8000f84 <MX_CRC_Init+0x3c>)
 8000f4e:	4a0e      	ldr	r2, [pc, #56]	; (8000f88 <MX_CRC_Init+0x40>)
 8000f50:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000f52:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <MX_CRC_Init+0x3c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000f58:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <MX_CRC_Init+0x3c>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000f5e:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <MX_CRC_Init+0x3c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000f64:	4b07      	ldr	r3, [pc, #28]	; (8000f84 <MX_CRC_Init+0x3c>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <MX_CRC_Init+0x3c>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000f70:	4804      	ldr	r0, [pc, #16]	; (8000f84 <MX_CRC_Init+0x3c>)
 8000f72:	f002 fb63 	bl	800363c <HAL_CRC_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000f7c:	f000 fcf4 	bl	8001968 <Error_Handler>
  }

}
 8000f80:	bf00      	nop
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	200008d4 	.word	0x200008d4
 8000f88:	40023000 	.word	0x40023000

08000f8c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a0a      	ldr	r2, [pc, #40]	; (8000fc4 <HAL_CRC_MspInit+0x38>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d10b      	bne.n	8000fb6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <HAL_CRC_MspInit+0x3c>)
 8000fa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fa2:	4a09      	ldr	r2, [pc, #36]	; (8000fc8 <HAL_CRC_MspInit+0x3c>)
 8000fa4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fa8:	6493      	str	r3, [r2, #72]	; 0x48
 8000faa:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <HAL_CRC_MspInit+0x3c>)
 8000fac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000fb6:	bf00      	nop
 8000fb8:	3714      	adds	r7, #20
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	40023000 	.word	0x40023000
 8000fc8:	40021000 	.word	0x40021000

08000fcc <MX_DFSDM1_Init>:

DFSDM_Channel_HandleTypeDef hdfsdm1_channel1;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0

  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000fd0:	4b18      	ldr	r3, [pc, #96]	; (8001034 <MX_DFSDM1_Init+0x68>)
 8000fd2:	4a19      	ldr	r2, [pc, #100]	; (8001038 <MX_DFSDM1_Init+0x6c>)
 8000fd4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000fd6:	4b17      	ldr	r3, [pc, #92]	; (8001034 <MX_DFSDM1_Init+0x68>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000fdc:	4b15      	ldr	r3, [pc, #84]	; (8001034 <MX_DFSDM1_Init+0x68>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000fe2:	4b14      	ldr	r3, [pc, #80]	; (8001034 <MX_DFSDM1_Init+0x68>)
 8000fe4:	2202      	movs	r2, #2
 8000fe6:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <MX_DFSDM1_Init+0x68>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000fee:	4b11      	ldr	r3, [pc, #68]	; (8001034 <MX_DFSDM1_Init+0x68>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <MX_DFSDM1_Init+0x68>)
 8000ff6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ffa:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000ffc:	4b0d      	ldr	r3, [pc, #52]	; (8001034 <MX_DFSDM1_Init+0x68>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001002:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <MX_DFSDM1_Init+0x68>)
 8001004:	2204      	movs	r2, #4
 8001006:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001008:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <MX_DFSDM1_Init+0x68>)
 800100a:	2200      	movs	r2, #0
 800100c:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <MX_DFSDM1_Init+0x68>)
 8001010:	2201      	movs	r2, #1
 8001012:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8001014:	4b07      	ldr	r3, [pc, #28]	; (8001034 <MX_DFSDM1_Init+0x68>)
 8001016:	2200      	movs	r2, #0
 8001018:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800101a:	4b06      	ldr	r3, [pc, #24]	; (8001034 <MX_DFSDM1_Init+0x68>)
 800101c:	2200      	movs	r2, #0
 800101e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8001020:	4804      	ldr	r0, [pc, #16]	; (8001034 <MX_DFSDM1_Init+0x68>)
 8001022:	f002 fbf5 	bl	8003810 <HAL_DFSDM_ChannelInit>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 800102c:	f000 fc9c 	bl	8001968 <Error_Handler>
  }

}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}
 8001034:	200008f8 	.word	0x200008f8
 8001038:	40016020 	.word	0x40016020

0800103c <HAL_DFSDM_ChannelMspInit>:

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08a      	sub	sp, #40	; 0x28
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8001054:	4b1a      	ldr	r3, [pc, #104]	; (80010c0 <HAL_DFSDM_ChannelMspInit+0x84>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d12d      	bne.n	80010b8 <HAL_DFSDM_ChannelMspInit+0x7c>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800105c:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <HAL_DFSDM_ChannelMspInit+0x88>)
 800105e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001060:	4a18      	ldr	r2, [pc, #96]	; (80010c4 <HAL_DFSDM_ChannelMspInit+0x88>)
 8001062:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001066:	6613      	str	r3, [r2, #96]	; 0x60
 8001068:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <HAL_DFSDM_ChannelMspInit+0x88>)
 800106a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800106c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001070:	613b      	str	r3, [r7, #16]
 8001072:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001074:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <HAL_DFSDM_ChannelMspInit+0x88>)
 8001076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001078:	4a12      	ldr	r2, [pc, #72]	; (80010c4 <HAL_DFSDM_ChannelMspInit+0x88>)
 800107a:	f043 0310 	orr.w	r3, r3, #16
 800107e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001080:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <HAL_DFSDM_ChannelMspInit+0x88>)
 8001082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001084:	f003 0310 	and.w	r3, r3, #16
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800108c:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001090:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001092:	2302      	movs	r3, #2
 8001094:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	2300      	movs	r3, #0
 800109c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800109e:	2306      	movs	r3, #6
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	4619      	mov	r1, r3
 80010a8:	4807      	ldr	r0, [pc, #28]	; (80010c8 <HAL_DFSDM_ChannelMspInit+0x8c>)
 80010aa:	f002 fcbd 	bl	8003a28 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80010ae:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <HAL_DFSDM_ChannelMspInit+0x84>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	3301      	adds	r3, #1
 80010b4:	4a02      	ldr	r2, [pc, #8]	; (80010c0 <HAL_DFSDM_ChannelMspInit+0x84>)
 80010b6:	6013      	str	r3, [r2, #0]
  }
}
 80010b8:	bf00      	nop
 80010ba:	3728      	adds	r7, #40	; 0x28
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	2000080c 	.word	0x2000080c
 80010c4:	40021000 	.word	0x40021000
 80010c8:	48001000 	.word	0x48001000

080010cc <MX_GPIO_Init>:
     PD6   ------> USART2_RX
     PB8   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	; 0x28
 80010d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
 80010e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010e2:	4bba      	ldr	r3, [pc, #744]	; (80013cc <MX_GPIO_Init+0x300>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e6:	4ab9      	ldr	r2, [pc, #740]	; (80013cc <MX_GPIO_Init+0x300>)
 80010e8:	f043 0310 	orr.w	r3, r3, #16
 80010ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ee:	4bb7      	ldr	r3, [pc, #732]	; (80013cc <MX_GPIO_Init+0x300>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f2:	f003 0310 	and.w	r3, r3, #16
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fa:	4bb4      	ldr	r3, [pc, #720]	; (80013cc <MX_GPIO_Init+0x300>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	4ab3      	ldr	r2, [pc, #716]	; (80013cc <MX_GPIO_Init+0x300>)
 8001100:	f043 0304 	orr.w	r3, r3, #4
 8001104:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001106:	4bb1      	ldr	r3, [pc, #708]	; (80013cc <MX_GPIO_Init+0x300>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	f003 0304 	and.w	r3, r3, #4
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001112:	4bae      	ldr	r3, [pc, #696]	; (80013cc <MX_GPIO_Init+0x300>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001116:	4aad      	ldr	r2, [pc, #692]	; (80013cc <MX_GPIO_Init+0x300>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800111e:	4bab      	ldr	r3, [pc, #684]	; (80013cc <MX_GPIO_Init+0x300>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800112a:	4ba8      	ldr	r3, [pc, #672]	; (80013cc <MX_GPIO_Init+0x300>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112e:	4aa7      	ldr	r2, [pc, #668]	; (80013cc <MX_GPIO_Init+0x300>)
 8001130:	f043 0302 	orr.w	r3, r3, #2
 8001134:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001136:	4ba5      	ldr	r3, [pc, #660]	; (80013cc <MX_GPIO_Init+0x300>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001142:	4ba2      	ldr	r3, [pc, #648]	; (80013cc <MX_GPIO_Init+0x300>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001146:	4aa1      	ldr	r2, [pc, #644]	; (80013cc <MX_GPIO_Init+0x300>)
 8001148:	f043 0308 	orr.w	r3, r3, #8
 800114c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800114e:	4b9f      	ldr	r3, [pc, #636]	; (80013cc <MX_GPIO_Init+0x300>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001152:	f003 0308 	and.w	r3, r3, #8
 8001156:	603b      	str	r3, [r7, #0]
 8001158:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800115a:	2200      	movs	r2, #0
 800115c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001160:	489b      	ldr	r0, [pc, #620]	; (80013d0 <MX_GPIO_Init+0x304>)
 8001162:	f002 fefd 	bl	8003f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8001166:	2200      	movs	r2, #0
 8001168:	f248 1104 	movw	r1, #33028	; 0x8104
 800116c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001170:	f002 fef6 	bl	8003f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001174:	2200      	movs	r2, #0
 8001176:	f24f 0114 	movw	r1, #61460	; 0xf014
 800117a:	4896      	ldr	r0, [pc, #600]	; (80013d4 <MX_GPIO_Init+0x308>)
 800117c:	f002 fef0 	bl	8003f60 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	f241 0181 	movw	r1, #4225	; 0x1081
 8001186:	4894      	ldr	r0, [pc, #592]	; (80013d8 <MX_GPIO_Init+0x30c>)
 8001188:	f002 feea 	bl	8003f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 800118c:	2201      	movs	r2, #1
 800118e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001192:	4891      	ldr	r0, [pc, #580]	; (80013d8 <MX_GPIO_Init+0x30c>)
 8001194:	f002 fee4 	bl	8003f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001198:	2200      	movs	r2, #0
 800119a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800119e:	488f      	ldr	r0, [pc, #572]	; (80013dc <MX_GPIO_Init+0x310>)
 80011a0:	f002 fede 	bl	8003f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80011a4:	2201      	movs	r2, #1
 80011a6:	2120      	movs	r1, #32
 80011a8:	488a      	ldr	r0, [pc, #552]	; (80013d4 <MX_GPIO_Init+0x308>)
 80011aa:	f002 fed9 	bl	8003f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80011ae:	2201      	movs	r2, #1
 80011b0:	2101      	movs	r1, #1
 80011b2:	4887      	ldr	r0, [pc, #540]	; (80013d0 <MX_GPIO_Init+0x304>)
 80011b4:	f002 fed4 	bl	8003f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80011b8:	f240 1315 	movw	r3, #277	; 0x115
 80011bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011be:	2301      	movs	r3, #1
 80011c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c6:	2300      	movs	r3, #0
 80011c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011ca:	f107 0314 	add.w	r3, r7, #20
 80011ce:	4619      	mov	r1, r3
 80011d0:	487f      	ldr	r0, [pc, #508]	; (80013d0 <MX_GPIO_Init+0x304>)
 80011d2:	f002 fc29 	bl	8003a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80011d6:	236a      	movs	r3, #106	; 0x6a
 80011d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011da:	4b81      	ldr	r3, [pc, #516]	; (80013e0 <MX_GPIO_Init+0x314>)
 80011dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	4619      	mov	r1, r3
 80011e8:	4879      	ldr	r0, [pc, #484]	; (80013d0 <MX_GPIO_Init+0x304>)
 80011ea:	f002 fc1d 	bl	8003a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80011ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011f4:	4b7b      	ldr	r3, [pc, #492]	; (80013e4 <MX_GPIO_Init+0x318>)
 80011f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	4619      	mov	r1, r3
 8001202:	4876      	ldr	r0, [pc, #472]	; (80013dc <MX_GPIO_Init+0x310>)
 8001204:	f002 fc10 	bl	8003a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001208:	233f      	movs	r3, #63	; 0x3f
 800120a:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800120c:	230b      	movs	r3, #11
 800120e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	4619      	mov	r1, r3
 800121a:	4870      	ldr	r0, [pc, #448]	; (80013dc <MX_GPIO_Init+0x310>)
 800121c:	f002 fc04 	bl	8003a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001220:	2303      	movs	r3, #3
 8001222:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001224:	2302      	movs	r3, #2
 8001226:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122c:	2303      	movs	r3, #3
 800122e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001230:	2308      	movs	r3, #8
 8001232:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	4619      	mov	r1, r3
 800123a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800123e:	f002 fbf3 	bl	8003a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8001242:	f248 1304 	movw	r3, #33028	; 0x8104
 8001246:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001248:	2301      	movs	r3, #1
 800124a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001250:	2300      	movs	r3, #0
 8001252:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	4619      	mov	r1, r3
 800125a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800125e:	f002 fbe3 	bl	8003a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001262:	2308      	movs	r3, #8
 8001264:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001266:	2302      	movs	r3, #2
 8001268:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126e:	2300      	movs	r3, #0
 8001270:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001272:	2301      	movs	r3, #1
 8001274:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001276:	f107 0314 	add.w	r3, r7, #20
 800127a:	4619      	mov	r1, r3
 800127c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001280:	f002 fbd2 	bl	8003a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001284:	2310      	movs	r3, #16
 8001286:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001288:	230b      	movs	r3, #11
 800128a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	4619      	mov	r1, r3
 8001296:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800129a:	f002 fbc5 	bl	8003a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 800129e:	23e0      	movs	r3, #224	; 0xe0
 80012a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a2:	2302      	movs	r3, #2
 80012a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012aa:	2303      	movs	r3, #3
 80012ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012ae:	2305      	movs	r3, #5
 80012b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b2:	f107 0314 	add.w	r3, r7, #20
 80012b6:	4619      	mov	r1, r3
 80012b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012bc:	f002 fbb4 	bl	8003a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80012c0:	2301      	movs	r3, #1
 80012c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012c4:	4b46      	ldr	r3, [pc, #280]	; (80013e0 <MX_GPIO_Init+0x314>)
 80012c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	4619      	mov	r1, r3
 80012d2:	4840      	ldr	r0, [pc, #256]	; (80013d4 <MX_GPIO_Init+0x308>)
 80012d4:	f002 fba8 	bl	8003a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80012d8:	2302      	movs	r3, #2
 80012da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80012dc:	230b      	movs	r3, #11
 80012de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	4619      	mov	r1, r3
 80012ea:	483a      	ldr	r0, [pc, #232]	; (80013d4 <MX_GPIO_Init+0x308>)
 80012ec:	f002 fb9c 	bl	8003a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80012f0:	f24f 0334 	movw	r3, #61492	; 0xf034
 80012f4:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f6:	2301      	movs	r3, #1
 80012f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fe:	2300      	movs	r3, #0
 8001300:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001302:	f107 0314 	add.w	r3, r7, #20
 8001306:	4619      	mov	r1, r3
 8001308:	4832      	ldr	r0, [pc, #200]	; (80013d4 <MX_GPIO_Init+0x308>)
 800130a:	f002 fb8d 	bl	8003a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 800130e:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8001312:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001314:	4b32      	ldr	r3, [pc, #200]	; (80013e0 <MX_GPIO_Init+0x314>)
 8001316:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	4619      	mov	r1, r3
 8001322:	482d      	ldr	r0, [pc, #180]	; (80013d8 <MX_GPIO_Init+0x30c>)
 8001324:	f002 fb80 	bl	8003a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001328:	f243 0381 	movw	r3, #12417	; 0x3081
 800132c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132e:	2301      	movs	r3, #1
 8001330:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001336:	2300      	movs	r3, #0
 8001338:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800133a:	f107 0314 	add.w	r3, r7, #20
 800133e:	4619      	mov	r1, r3
 8001340:	4825      	ldr	r0, [pc, #148]	; (80013d8 <MX_GPIO_Init+0x30c>)
 8001342:	f002 fb71 	bl	8003a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001346:	f44f 7310 	mov.w	r3, #576	; 0x240
 800134a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134c:	2301      	movs	r3, #1
 800134e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001354:	2300      	movs	r3, #0
 8001356:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	4619      	mov	r1, r3
 800135e:	481f      	ldr	r0, [pc, #124]	; (80013dc <MX_GPIO_Init+0x310>)
 8001360:	f002 fb62 	bl	8003a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001364:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001368:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800136a:	4b1d      	ldr	r3, [pc, #116]	; (80013e0 <MX_GPIO_Init+0x314>)
 800136c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001372:	f107 0314 	add.w	r3, r7, #20
 8001376:	4619      	mov	r1, r3
 8001378:	4818      	ldr	r0, [pc, #96]	; (80013dc <MX_GPIO_Init+0x310>)
 800137a:	f002 fb55 	bl	8003a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 800137e:	2302      	movs	r3, #2
 8001380:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001382:	2302      	movs	r3, #2
 8001384:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138a:	2303      	movs	r3, #3
 800138c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800138e:	2305      	movs	r3, #5
 8001390:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001392:	f107 0314 	add.w	r3, r7, #20
 8001396:	4619      	mov	r1, r3
 8001398:	480f      	ldr	r0, [pc, #60]	; (80013d8 <MX_GPIO_Init+0x30c>)
 800139a:	f002 fb45 	bl	8003a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800139e:	2378      	movs	r3, #120	; 0x78
 80013a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a2:	2302      	movs	r3, #2
 80013a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013aa:	2303      	movs	r3, #3
 80013ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013ae:	2307      	movs	r3, #7
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013b2:	f107 0314 	add.w	r3, r7, #20
 80013b6:	4619      	mov	r1, r3
 80013b8:	4807      	ldr	r0, [pc, #28]	; (80013d8 <MX_GPIO_Init+0x30c>)
 80013ba:	f002 fb35 	bl	8003a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80013be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013c4:	2312      	movs	r3, #18
 80013c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e00d      	b.n	80013e8 <MX_GPIO_Init+0x31c>
 80013cc:	40021000 	.word	0x40021000
 80013d0:	48001000 	.word	0x48001000
 80013d4:	48000400 	.word	0x48000400
 80013d8:	48000c00 	.word	0x48000c00
 80013dc:	48000800 	.word	0x48000800
 80013e0:	10110000 	.word	0x10110000
 80013e4:	10210000 	.word	0x10210000
 80013e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ea:	2303      	movs	r3, #3
 80013ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013ee:	2304      	movs	r3, #4
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f2:	f107 0314 	add.w	r3, r7, #20
 80013f6:	4619      	mov	r1, r3
 80013f8:	480b      	ldr	r0, [pc, #44]	; (8001428 <MX_GPIO_Init+0x35c>)
 80013fa:	f002 fb15 	bl	8003a28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80013fe:	2200      	movs	r2, #0
 8001400:	2100      	movs	r1, #0
 8001402:	2017      	movs	r0, #23
 8001404:	f002 f8e3 	bl	80035ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001408:	2017      	movs	r0, #23
 800140a:	f002 f8fc 	bl	8003606 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800140e:	2200      	movs	r2, #0
 8001410:	2100      	movs	r1, #0
 8001412:	2028      	movs	r0, #40	; 0x28
 8001414:	f002 f8db 	bl	80035ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001418:	2028      	movs	r0, #40	; 0x28
 800141a:	f002 f8f4 	bl	8003606 <HAL_NVIC_EnableIRQ>

}
 800141e:	bf00      	nop
 8001420:	3728      	adds	r7, #40	; 0x28
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	48000400 	.word	0x48000400

0800142c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(char ch)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	71fb      	strb	r3, [r7, #7]
    while (HAL_OK != HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, 30000))
 8001436:	bf00      	nop
 8001438:	1df9      	adds	r1, r7, #7
 800143a:	f247 5330 	movw	r3, #30000	; 0x7530
 800143e:	2201      	movs	r2, #1
 8001440:	4805      	ldr	r0, [pc, #20]	; (8001458 <__io_putchar+0x2c>)
 8001442:	f005 f9ae 	bl	80067a2 <HAL_UART_Transmit>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d1f5      	bne.n	8001438 <__io_putchar+0xc>
    {
    }
    return ch;
 800144c:	79fb      	ldrb	r3, [r7, #7]
}
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20001278 	.word	0x20001278

0800145c <MEMS_Init>:


static void MEMS_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08a      	sub	sp, #40	; 0x28
 8001460:	af00      	add	r7, sp, #0
    LSM6DSL_IO_t io_ctx;
    uint8_t id;
    LSM6DSL_AxesRaw_t axes;

    io_ctx.BusType    = LSM6DSL_I2C_BUS;
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]
    io_ctx.Address  = LSM6DSL_I2C_ADD_L;
 8001466:	23d5      	movs	r3, #213	; 0xd5
 8001468:	763b      	strb	r3, [r7, #24]
    io_ctx.Init        = BSP_I2C2_Init;
 800146a:	4b1b      	ldr	r3, [pc, #108]	; (80014d8 <MEMS_Init+0x7c>)
 800146c:	60fb      	str	r3, [r7, #12]
    io_ctx.DeInit    = BSP_I2C2_DeInit;
 800146e:	4b1b      	ldr	r3, [pc, #108]	; (80014dc <MEMS_Init+0x80>)
 8001470:	613b      	str	r3, [r7, #16]
    io_ctx.ReadReg  = BSP_I2C2_ReadReg;
 8001472:	4b1b      	ldr	r3, [pc, #108]	; (80014e0 <MEMS_Init+0x84>)
 8001474:	623b      	str	r3, [r7, #32]
    io_ctx.WriteReg = BSP_I2C2_WriteReg;
 8001476:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <MEMS_Init+0x88>)
 8001478:	61fb      	str	r3, [r7, #28]
    io_ctx.GetTick  = BSP_GetTick;
 800147a:	4b1b      	ldr	r3, [pc, #108]	; (80014e8 <MEMS_Init+0x8c>)
 800147c:	627b      	str	r3, [r7, #36]	; 0x24
    LSM6DSL_RegisterBusIO(&MotionSensor, &io_ctx);
 800147e:	f107 030c 	add.w	r3, r7, #12
 8001482:	4619      	mov	r1, r3
 8001484:	4819      	ldr	r0, [pc, #100]	; (80014ec <MEMS_Init+0x90>)
 8001486:	f000 ffc1 	bl	800240c <LSM6DSL_RegisterBusIO>

    LSM6DSL_ReadID(&MotionSensor, &id);
 800148a:	f107 030b 	add.w	r3, r7, #11
 800148e:	4619      	mov	r1, r3
 8001490:	4816      	ldr	r0, [pc, #88]	; (80014ec <MEMS_Init+0x90>)
 8001492:	f001 f88a 	bl	80025aa <LSM6DSL_ReadID>
    if (id != LSM6DSL_ID)
 8001496:	7afb      	ldrb	r3, [r7, #11]
 8001498:	2b6a      	cmp	r3, #106	; 0x6a
 800149a:	d001      	beq.n	80014a0 <MEMS_Init+0x44>
    {
        Error_Handler();
 800149c:	f000 fa64 	bl	8001968 <Error_Handler>
    }

    LSM6DSL_Init(&MotionSensor);
 80014a0:	4812      	ldr	r0, [pc, #72]	; (80014ec <MEMS_Init+0x90>)
 80014a2:	f001 f819 	bl	80024d8 <LSM6DSL_Init>

    LSM6DSL_ACC_SetOutputDataRate(&MotionSensor, 26.0f);
 80014a6:	eeb3 0a0a 	vmov.f32	s0, #58	; 0x41d00000  26.0
 80014aa:	4810      	ldr	r0, [pc, #64]	; (80014ec <MEMS_Init+0x90>)
 80014ac:	f001 f8fe 	bl	80026ac <LSM6DSL_ACC_SetOutputDataRate>
    LSM6DSL_ACC_SetFullScale(&MotionSensor, 4);
 80014b0:	2104      	movs	r1, #4
 80014b2:	480e      	ldr	r0, [pc, #56]	; (80014ec <MEMS_Init+0x90>)
 80014b4:	f001 f916 	bl	80026e4 <LSM6DSL_ACC_SetFullScale>
    LSM6DSL_ACC_Set_INT1_DRDY(&MotionSensor, ENABLE);
 80014b8:	2101      	movs	r1, #1
 80014ba:	480c      	ldr	r0, [pc, #48]	; (80014ec <MEMS_Init+0x90>)
 80014bc:	f001 f9d0 	bl	8002860 <LSM6DSL_ACC_Set_INT1_DRDY>
    LSM6DSL_ACC_GetAxesRaw(&MotionSensor, &axes);
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	4619      	mov	r1, r3
 80014c4:	4809      	ldr	r0, [pc, #36]	; (80014ec <MEMS_Init+0x90>)
 80014c6:	f001 f935 	bl	8002734 <LSM6DSL_ACC_GetAxesRaw>

    LSM6DSL_ACC_Enable(&MotionSensor);
 80014ca:	4808      	ldr	r0, [pc, #32]	; (80014ec <MEMS_Init+0x90>)
 80014cc:	f001 f883 	bl	80025d6 <LSM6DSL_ACC_Enable>
}
 80014d0:	bf00      	nop
 80014d2:	3728      	adds	r7, #40	; 0x28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	0800211d 	.word	0x0800211d
 80014dc:	08002199 	.word	0x08002199
 80014e0:	0800224d 	.word	0x0800224d
 80014e4:	080021e9 	.word	0x080021e9
 80014e8:	080022b1 	.word	0x080022b1
 80014ec:	20000ffc 	.word	0x20000ffc

080014f0 <AI_Init>:

static void AI_Init(ai_handle w_addr, ai_handle act_addr)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b090      	sub	sp, #64	; 0x40
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
	ai_error err;

	err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 80014fa:	2100      	movs	r1, #0
 80014fc:	482b      	ldr	r0, [pc, #172]	; (80015ac <AI_Init+0xbc>)
 80014fe:	f006 f92f 	bl	8007760 <ai_network_create>
 8001502:	4603      	mov	r3, r0
 8001504:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (err.type != AI_ERROR_NONE)
 8001506:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800150a:	2b00      	cmp	r3, #0
 800150c:	d00b      	beq.n	8001526 <AI_Init+0x36>
	{
		printf("ai_network_create error - type=%d code=%d\r\n", err.type, err.code);
 800150e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001512:	4619      	mov	r1, r3
 8001514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001516:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800151a:	461a      	mov	r2, r3
 800151c:	4824      	ldr	r0, [pc, #144]	; (80015b0 <AI_Init+0xc0>)
 800151e:	f009 fa71 	bl	800aa04 <iprintf>
		Error_Handler();
 8001522:	f000 fa21 	bl	8001968 <Error_Handler>
	}
	const ai_network_params params =
 8001526:	4b23      	ldr	r3, [pc, #140]	; (80015b4 <AI_Init+0xc4>)
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	2301      	movs	r3, #1
 800152c:	823b      	strh	r3, [r7, #16]
 800152e:	2301      	movs	r3, #1
 8001530:	827b      	strh	r3, [r7, #18]
 8001532:	2301      	movs	r3, #1
 8001534:	82bb      	strh	r3, [r7, #20]
 8001536:	f241 5318 	movw	r3, #5400	; 0x1518
 800153a:	61bb      	str	r3, [r7, #24]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	61fb      	str	r3, [r7, #28]
 8001540:	2300      	movs	r3, #0
 8001542:	623b      	str	r3, [r7, #32]
 8001544:	4b1c      	ldr	r3, [pc, #112]	; (80015b8 <AI_Init+0xc8>)
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
 8001548:	2301      	movs	r3, #1
 800154a:	853b      	strh	r3, [r7, #40]	; 0x28
 800154c:	2301      	movs	r3, #1
 800154e:	857b      	strh	r3, [r7, #42]	; 0x2a
 8001550:	2301      	movs	r3, #1
 8001552:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001554:	f44f 63d8 	mov.w	r3, #1728	; 0x6c0
 8001558:	633b      	str	r3, [r7, #48]	; 0x30
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	637b      	str	r3, [r7, #52]	; 0x34
 800155e:	2300      	movs	r3, #0
 8001560:	63bb      	str	r3, [r7, #56]	; 0x38
	{
			AI_NETWORK_DATA_WEIGHTS(w_addr),
			AI_NETWORK_DATA_ACTIVATIONS(act_addr)
	};

	if(!ai_network_init(network, &params))
 8001562:	4b12      	ldr	r3, [pc, #72]	; (80015ac <AI_Init+0xbc>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f107 020c 	add.w	r2, r7, #12
 800156a:	4611      	mov	r1, r2
 800156c:	4618      	mov	r0, r3
 800156e:	f006 f90d 	bl	800778c <ai_network_init>
 8001572:	4603      	mov	r3, r0
 8001574:	f083 0301 	eor.w	r3, r3, #1
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2b00      	cmp	r3, #0
 800157c:	d012      	beq.n	80015a4 <AI_Init+0xb4>
	{
		err = ai_network_get_error(network);
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <AI_Init+0xbc>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4618      	mov	r0, r3
 8001584:	f006 f8e0 	bl	8007748 <ai_network_get_error>
 8001588:	4603      	mov	r3, r0
 800158a:	63fb      	str	r3, [r7, #60]	; 0x3c
		printf("ai_network_init error - type=%d code=%d\r\n", err.type, err.code);
 800158c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001590:	4619      	mov	r1, r3
 8001592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001594:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8001598:	461a      	mov	r2, r3
 800159a:	4808      	ldr	r0, [pc, #32]	; (80015bc <AI_Init+0xcc>)
 800159c:	f009 fa32 	bl	800aa04 <iprintf>
		Error_Handler();
 80015a0:	f000 f9e2 	bl	8001968 <Error_Handler>
	}
}
 80015a4:	bf00      	nop
 80015a6:	3740      	adds	r7, #64	; 0x40
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	2000114c 	.word	0x2000114c
 80015b0:	0800c9d4 	.word	0x0800c9d4
 80015b4:	40040440 	.word	0x40040440
 80015b8:	00040440 	.word	0x00040440
 80015bc:	0800ca00 	.word	0x0800ca00

080015c0 <AI_Run>:

static void AI_Run(float *pIn, float *pOut)
{
 80015c0:	b5b0      	push	{r4, r5, r7, lr}
 80015c2:	b090      	sub	sp, #64	; 0x40
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
	ai_i32 batch;
	ai_error err;

	ai_buffer ai_input[AI_NETWORK_IN_NUM] = AI_NETWORK_IN;
 80015ca:	4b20      	ldr	r3, [pc, #128]	; (800164c <AI_Run+0x8c>)
 80015cc:	f107 0420 	add.w	r4, r7, #32
 80015d0:	461d      	mov	r5, r3
 80015d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015d6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80015da:	e884 0003 	stmia.w	r4, {r0, r1}
	ai_buffer ai_output[AI_NETWORK_OUT_NUM] = AI_NETWORK_OUT;
 80015de:	4b1c      	ldr	r3, [pc, #112]	; (8001650 <AI_Run+0x90>)
 80015e0:	f107 0408 	add.w	r4, r7, #8
 80015e4:	461d      	mov	r5, r3
 80015e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015ea:	e895 0003 	ldmia.w	r5, {r0, r1}
 80015ee:	e884 0003 	stmia.w	r4, {r0, r1}

	ai_input[0].n_batches = 1;
 80015f2:	2301      	movs	r3, #1
 80015f4:	84bb      	strh	r3, [r7, #36]	; 0x24
	ai_input[0].data = AI_HANDLE_PTR(pIn);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	633b      	str	r3, [r7, #48]	; 0x30
	ai_output[0].n_batches = 1;
 80015fa:	2301      	movs	r3, #1
 80015fc:	81bb      	strh	r3, [r7, #12]
	ai_output[0].data = AI_HANDLE_PTR(pOut);
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	61bb      	str	r3, [r7, #24]

	batch = ai_network_run(network, ai_input, ai_output);
 8001602:	4b14      	ldr	r3, [pc, #80]	; (8001654 <AI_Run+0x94>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f107 0208 	add.w	r2, r7, #8
 800160a:	f107 0120 	add.w	r1, r7, #32
 800160e:	4618      	mov	r0, r3
 8001610:	f006 f8fb 	bl	800780a <ai_network_run>
 8001614:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (batch != 1)
 8001616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001618:	2b01      	cmp	r3, #1
 800161a:	d012      	beq.n	8001642 <AI_Run+0x82>
	{
		err = ai_network_get_error(network);
 800161c:	4b0d      	ldr	r3, [pc, #52]	; (8001654 <AI_Run+0x94>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f006 f891 	bl	8007748 <ai_network_get_error>
 8001626:	4603      	mov	r3, r0
 8001628:	63bb      	str	r3, [r7, #56]	; 0x38
		printf("AI ai_network_run error - type%d code=%d\r\n", err.type, err.code);
 800162a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800162e:	4619      	mov	r1, r3
 8001630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001632:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8001636:	461a      	mov	r2, r3
 8001638:	4807      	ldr	r0, [pc, #28]	; (8001658 <AI_Run+0x98>)
 800163a:	f009 f9e3 	bl	800aa04 <iprintf>
		Error_Handler();
 800163e:	f000 f993 	bl	8001968 <Error_Handler>
	}
}
 8001642:	bf00      	nop
 8001644:	3740      	adds	r7, #64	; 0x40
 8001646:	46bd      	mov	sp, r7
 8001648:	bdb0      	pop	{r4, r5, r7, pc}
 800164a:	bf00      	nop
 800164c:	0800ca58 	.word	0x0800ca58
 8001650:	0800ca70 	.word	0x0800ca70
 8001654:	2000114c 	.word	0x2000114c
 8001658:	0800ca2c 	.word	0x0800ca2c

0800165c <argmax>:

static uint32_t argmax(const float *values, uint32_t len)
{
 800165c:	b480      	push	{r7}
 800165e:	b087      	sub	sp, #28
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
    float max_value = values[0];
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	617b      	str	r3, [r7, #20]
    uint32_t max_index = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 1; i < len ; i++)
 8001670:	2301      	movs	r3, #1
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	e017      	b.n	80016a6 <argmax+0x4a>
	{
	    if (values[i] > max_value)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	4413      	add	r3, r2
 800167e:	edd3 7a00 	vldr	s15, [r3]
 8001682:	ed97 7a05 	vldr	s14, [r7, #20]
 8001686:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800168a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800168e:	d507      	bpl.n	80016a0 <argmax+0x44>
		{
		    max_value = values[i];
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	4413      	add	r3, r2
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	617b      	str	r3, [r7, #20]
		    max_index = i;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 1; i < len ; i++)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	3301      	adds	r3, #1
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	68fa      	ldr	r2, [r7, #12]
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d3e3      	bcc.n	8001676 <argmax+0x1a>
	    }
	}
	return max_index;
 80016ae:	693b      	ldr	r3, [r7, #16]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	371c      	adds	r7, #28
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016bc:	b590      	push	{r4, r7, lr}
 80016be:	b087      	sub	sp, #28
 80016c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016c2:	f001 fe12 	bl	80032ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016c6:	f000 f895 	bl	80017f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016ca:	f7ff fcff 	bl	80010cc <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80016ce:	f7ff fc7d 	bl	8000fcc <MX_DFSDM1_Init>
  MX_QUADSPI_Init();
 80016d2:	f000 f94d 	bl	8001970 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80016d6:	f000 f9b5 	bl	8001a44 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80016da:	f000 fb85 	bl	8001de8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80016de:	f000 fbb3 	bl	8001e48 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80016e2:	f000 fc57 	bl	8001f94 <MX_USB_OTG_FS_PCD_Init>
  MX_CRC_Init();
 80016e6:	f7ff fc2f 	bl	8000f48 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  dataRdyIntReceived = 0;
 80016ea:	4b39      	ldr	r3, [pc, #228]	; (80017d0 <main+0x114>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
  uint32_t write_index = 0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]

  MEMS_Init();
 80016f4:	f7ff feb2 	bl	800145c <MEMS_Init>
  AI_Init(ai_network_data_weights_get(), activations);
 80016f8:	f006 f898 	bl	800782c <ai_network_data_weights_get>
 80016fc:	4603      	mov	r3, r0
 80016fe:	4935      	ldr	r1, [pc, #212]	; (80017d4 <main+0x118>)
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff fef5 	bl	80014f0 <AI_Init>

  while (1)
  {
      if (dataRdyIntReceived != 0)
 8001706:	4b32      	ldr	r3, [pc, #200]	; (80017d0 <main+0x114>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d0fb      	beq.n	8001706 <main+0x4a>
      {
          dataRdyIntReceived = 0;
 800170e:	4b30      	ldr	r3, [pc, #192]	; (80017d0 <main+0x114>)
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
          LSM6DSL_Axes_t acc_axes;
          LSM6DSL_ACC_GetAxes(&MotionSensor, &acc_axes);
 8001714:	463b      	mov	r3, r7
 8001716:	4619      	mov	r1, r3
 8001718:	482f      	ldr	r0, [pc, #188]	; (80017d8 <main+0x11c>)
 800171a:	f001 f82f 	bl	800277c <LSM6DSL_ACC_GetAxes>
          //printf("% 5d, % 5d, % 5d\r\n", (int) acc_axes.x, (int) acc_axes.y, (int) acc_axes.z);
          aiInData[write_index + 0] = (float) acc_axes.x;
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	ee07 3a90 	vmov	s15, r3
 8001724:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001728:	4a2c      	ldr	r2, [pc, #176]	; (80017dc <main+0x120>)
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	4413      	add	r3, r2
 8001730:	edc3 7a00 	vstr	s15, [r3]
          aiInData[write_index + 1] = (float) acc_axes.y;
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	3301      	adds	r3, #1
 800173a:	ee07 2a90 	vmov	s15, r2
 800173e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001742:	4a26      	ldr	r2, [pc, #152]	; (80017dc <main+0x120>)
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	edc3 7a00 	vstr	s15, [r3]
          aiInData[write_index + 2] = (float) acc_axes.z;
 800174c:	68ba      	ldr	r2, [r7, #8]
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	3302      	adds	r3, #2
 8001752:	ee07 2a90 	vmov	s15, r2
 8001756:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800175a:	4a20      	ldr	r2, [pc, #128]	; (80017dc <main+0x120>)
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	edc3 7a00 	vstr	s15, [r3]
          write_index += 3;
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	3303      	adds	r3, #3
 8001768:	617b      	str	r3, [r7, #20]

          if (write_index == AI_NETWORK_IN_1_SIZE)
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	2b48      	cmp	r3, #72	; 0x48
 800176e:	d1ca      	bne.n	8001706 <main+0x4a>
          {
        	  write_index = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]

        	  printf("Running inference\r\n");
 8001774:	481a      	ldr	r0, [pc, #104]	; (80017e0 <main+0x124>)
 8001776:	f009 f9b9 	bl	800aaec <puts>
        	  AI_Run(aiInData, aiOutData);
 800177a:	491a      	ldr	r1, [pc, #104]	; (80017e4 <main+0x128>)
 800177c:	4817      	ldr	r0, [pc, #92]	; (80017dc <main+0x120>)
 800177e:	f7ff ff1f 	bl	80015c0 <AI_Run>

        	  for (uint32_t i = 0; i < AI_NETWORK_OUT_1_SIZE; i++)
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
 8001786:	e011      	b.n	80017ac <main+0xf0>
        	  {
        		  printf("%8.6f ", aiOutData[i]);
 8001788:	4a16      	ldr	r2, [pc, #88]	; (80017e4 <main+0x128>)
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f7fe fed8 	bl	8000548 <__aeabi_f2d>
 8001798:	4603      	mov	r3, r0
 800179a:	460c      	mov	r4, r1
 800179c:	461a      	mov	r2, r3
 800179e:	4623      	mov	r3, r4
 80017a0:	4811      	ldr	r0, [pc, #68]	; (80017e8 <main+0x12c>)
 80017a2:	f009 f92f 	bl	800aa04 <iprintf>
        	  for (uint32_t i = 0; i < AI_NETWORK_OUT_1_SIZE; i++)
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	3301      	adds	r3, #1
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d9ea      	bls.n	8001788 <main+0xcc>
        	  }
        	  uint32_t class = argmax(aiOutData, AI_NETWORK_OUT_1_SIZE);
 80017b2:	2102      	movs	r1, #2
 80017b4:	480b      	ldr	r0, [pc, #44]	; (80017e4 <main+0x128>)
 80017b6:	f7ff ff51 	bl	800165c <argmax>
 80017ba:	60f8      	str	r0, [r7, #12]
        	  printf(": %d - %s\r\n", (int)class, activities[class]);
 80017bc:	68f9      	ldr	r1, [r7, #12]
 80017be:	4a0b      	ldr	r2, [pc, #44]	; (80017ec <main+0x130>)
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017c6:	461a      	mov	r2, r3
 80017c8:	4809      	ldr	r0, [pc, #36]	; (80017f0 <main+0x134>)
 80017ca:	f009 f91b 	bl	800aa04 <iprintf>
      if (dataRdyIntReceived != 0)
 80017ce:	e79a      	b.n	8001706 <main+0x4a>
 80017d0:	20000938 	.word	0x20000938
 80017d4:	2000093c 	.word	0x2000093c
 80017d8:	20000ffc 	.word	0x20000ffc
 80017dc:	2000102c 	.word	0x2000102c
 80017e0:	0800ca88 	.word	0x0800ca88
 80017e4:	20000930 	.word	0x20000930
 80017e8:	0800ca9c 	.word	0x0800ca9c
 80017ec:	20000000 	.word	0x20000000
 80017f0:	0800caa4 	.word	0x0800caa4

080017f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b0b8      	sub	sp, #224	; 0xe0
 80017f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017fa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017fe:	2244      	movs	r2, #68	; 0x44
 8001800:	2100      	movs	r1, #0
 8001802:	4618      	mov	r0, r3
 8001804:	f008 fbf1 	bl	8009fea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001808:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
 8001816:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001818:	463b      	mov	r3, r7
 800181a:	2288      	movs	r2, #136	; 0x88
 800181c:	2100      	movs	r1, #0
 800181e:	4618      	mov	r0, r3
 8001820:	f008 fbe3 	bl	8009fea <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001824:	f003 fae2 	bl	8004dec <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001828:	4b42      	ldr	r3, [pc, #264]	; (8001934 <SystemClock_Config+0x140>)
 800182a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800182e:	4a41      	ldr	r2, [pc, #260]	; (8001934 <SystemClock_Config+0x140>)
 8001830:	f023 0318 	bic.w	r3, r3, #24
 8001834:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001838:	2314      	movs	r3, #20
 800183a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800183e:	2301      	movs	r3, #1
 8001840:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001844:	2301      	movs	r3, #1
 8001846:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800184a:	2300      	movs	r3, #0
 800184c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001850:	2360      	movs	r3, #96	; 0x60
 8001852:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001856:	2302      	movs	r3, #2
 8001858:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800185c:	2301      	movs	r3, #1
 800185e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001862:	2301      	movs	r3, #1
 8001864:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001868:	2328      	movs	r3, #40	; 0x28
 800186a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800186e:	2307      	movs	r3, #7
 8001870:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001874:	2302      	movs	r3, #2
 8001876:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800187a:	2302      	movs	r3, #2
 800187c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001880:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001884:	4618      	mov	r0, r3
 8001886:	f003 fbf1 	bl	800506c <HAL_RCC_OscConfig>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001890:	f000 f86a 	bl	8001968 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001894:	230f      	movs	r3, #15
 8001896:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800189a:	2303      	movs	r3, #3
 800189c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018a0:	2300      	movs	r3, #0
 80018a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018a6:	2300      	movs	r3, #0
 80018a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018ac:	2300      	movs	r3, #0
 80018ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80018b2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80018b6:	2104      	movs	r1, #4
 80018b8:	4618      	mov	r0, r3
 80018ba:	f003 ffbd 	bl	8005838 <HAL_RCC_ClockConfig>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80018c4:	f000 f850 	bl	8001968 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 80018c8:	4b1b      	ldr	r3, [pc, #108]	; (8001938 <SystemClock_Config+0x144>)
 80018ca:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80018cc:	2300      	movs	r3, #0
 80018ce:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80018d0:	2300      	movs	r3, #0
 80018d2:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80018d4:	2300      	movs	r3, #0
 80018d6:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80018d8:	2300      	movs	r3, #0
 80018da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80018de:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80018e2:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80018e4:	2301      	movs	r3, #1
 80018e6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80018e8:	2301      	movs	r3, #1
 80018ea:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80018ec:	2318      	movs	r3, #24
 80018ee:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80018f0:	2307      	movs	r3, #7
 80018f2:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80018f4:	2302      	movs	r3, #2
 80018f6:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80018f8:	2302      	movs	r3, #2
 80018fa:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80018fc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001900:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001902:	463b      	mov	r3, r7
 8001904:	4618      	mov	r0, r3
 8001906:	f004 f99b 	bl	8005c40 <HAL_RCCEx_PeriphCLKConfig>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <SystemClock_Config+0x120>
  {
    Error_Handler();
 8001910:	f000 f82a 	bl	8001968 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001914:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001918:	f003 fa86 	bl	8004e28 <HAL_PWREx_ControlVoltageScaling>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <SystemClock_Config+0x132>
  {
    Error_Handler();
 8001922:	f000 f821 	bl	8001968 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001926:	f004 fc71 	bl	800620c <HAL_RCCEx_EnableMSIPLLMode>
}
 800192a:	bf00      	nop
 800192c:	37e0      	adds	r7, #224	; 0xe0
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40021000 	.word	0x40021000
 8001938:	00012085 	.word	0x00012085

0800193c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_11)
 8001946:	88fb      	ldrh	r3, [r7, #6]
 8001948:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800194c:	d104      	bne.n	8001958 <HAL_GPIO_EXTI_Callback+0x1c>
    {
        dataRdyIntReceived++;
 800194e:	4b05      	ldr	r3, [pc, #20]	; (8001964 <HAL_GPIO_EXTI_Callback+0x28>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	3301      	adds	r3, #1
 8001954:	4a03      	ldr	r2, [pc, #12]	; (8001964 <HAL_GPIO_EXTI_Callback+0x28>)
 8001956:	6013      	str	r3, [r2, #0]
    }
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	20000938 	.word	0x20000938

08001968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800196c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800196e:	e7fe      	b.n	800196e <Error_Handler+0x6>

08001970 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0

  hqspi.Instance = QUADSPI;
 8001974:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <MX_QUADSPI_Init+0x44>)
 8001976:	4a10      	ldr	r2, [pc, #64]	; (80019b8 <MX_QUADSPI_Init+0x48>)
 8001978:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800197a:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <MX_QUADSPI_Init+0x44>)
 800197c:	2202      	movs	r2, #2
 800197e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001980:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <MX_QUADSPI_Init+0x44>)
 8001982:	2204      	movs	r2, #4
 8001984:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001986:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <MX_QUADSPI_Init+0x44>)
 8001988:	2210      	movs	r2, #16
 800198a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 800198c:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <MX_QUADSPI_Init+0x44>)
 800198e:	2217      	movs	r2, #23
 8001990:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001992:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <MX_QUADSPI_Init+0x44>)
 8001994:	2200      	movs	r2, #0
 8001996:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001998:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <MX_QUADSPI_Init+0x44>)
 800199a:	2200      	movs	r2, #0
 800199c:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800199e:	4805      	ldr	r0, [pc, #20]	; (80019b4 <MX_QUADSPI_Init+0x44>)
 80019a0:	f003 faa8 	bl	8004ef4 <HAL_QSPI_Init>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80019aa:	f7ff ffdd 	bl	8001968 <Error_Handler>
  }

}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20001150 	.word	0x20001150
 80019b8:	a0001000 	.word	0xa0001000

080019bc <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b08a      	sub	sp, #40	; 0x28
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c4:	f107 0314 	add.w	r3, r7, #20
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a17      	ldr	r2, [pc, #92]	; (8001a38 <HAL_QSPI_MspInit+0x7c>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d128      	bne.n	8001a30 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80019de:	4b17      	ldr	r3, [pc, #92]	; (8001a3c <HAL_QSPI_MspInit+0x80>)
 80019e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019e2:	4a16      	ldr	r2, [pc, #88]	; (8001a3c <HAL_QSPI_MspInit+0x80>)
 80019e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e8:	6513      	str	r3, [r2, #80]	; 0x50
 80019ea:	4b14      	ldr	r3, [pc, #80]	; (8001a3c <HAL_QSPI_MspInit+0x80>)
 80019ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f2:	613b      	str	r3, [r7, #16]
 80019f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019f6:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <HAL_QSPI_MspInit+0x80>)
 80019f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fa:	4a10      	ldr	r2, [pc, #64]	; (8001a3c <HAL_QSPI_MspInit+0x80>)
 80019fc:	f043 0310 	orr.w	r3, r3, #16
 8001a00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a02:	4b0e      	ldr	r3, [pc, #56]	; (8001a3c <HAL_QSPI_MspInit+0x80>)
 8001a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a06:	f003 0310 	and.w	r3, r3, #16
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001a0e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001a12:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a14:	2302      	movs	r3, #2
 8001a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001a20:	230a      	movs	r3, #10
 8001a22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a24:	f107 0314 	add.w	r3, r7, #20
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4805      	ldr	r0, [pc, #20]	; (8001a40 <HAL_QSPI_MspInit+0x84>)
 8001a2c:	f001 fffc 	bl	8003a28 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001a30:	bf00      	nop
 8001a32:	3728      	adds	r7, #40	; 0x28
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	a0001000 	.word	0xa0001000
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	48001000 	.word	0x48001000

08001a44 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8001a48:	4b1b      	ldr	r3, [pc, #108]	; (8001ab8 <MX_SPI3_Init+0x74>)
 8001a4a:	4a1c      	ldr	r2, [pc, #112]	; (8001abc <MX_SPI3_Init+0x78>)
 8001a4c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001a4e:	4b1a      	ldr	r3, [pc, #104]	; (8001ab8 <MX_SPI3_Init+0x74>)
 8001a50:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a54:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001a56:	4b18      	ldr	r3, [pc, #96]	; (8001ab8 <MX_SPI3_Init+0x74>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001a5c:	4b16      	ldr	r3, [pc, #88]	; (8001ab8 <MX_SPI3_Init+0x74>)
 8001a5e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001a62:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a64:	4b14      	ldr	r3, [pc, #80]	; (8001ab8 <MX_SPI3_Init+0x74>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a6a:	4b13      	ldr	r3, [pc, #76]	; (8001ab8 <MX_SPI3_Init+0x74>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001a70:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <MX_SPI3_Init+0x74>)
 8001a72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a76:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a78:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <MX_SPI3_Init+0x74>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a7e:	4b0e      	ldr	r3, [pc, #56]	; (8001ab8 <MX_SPI3_Init+0x74>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a84:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <MX_SPI3_Init+0x74>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a8a:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <MX_SPI3_Init+0x74>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001a90:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <MX_SPI3_Init+0x74>)
 8001a92:	2207      	movs	r2, #7
 8001a94:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a96:	4b08      	ldr	r3, [pc, #32]	; (8001ab8 <MX_SPI3_Init+0x74>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a9c:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <MX_SPI3_Init+0x74>)
 8001a9e:	2208      	movs	r2, #8
 8001aa0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001aa2:	4805      	ldr	r0, [pc, #20]	; (8001ab8 <MX_SPI3_Init+0x74>)
 8001aa4:	f004 fd8c 	bl	80065c0 <HAL_SPI_Init>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001aae:	f7ff ff5b 	bl	8001968 <Error_Handler>
  }

}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20001194 	.word	0x20001194
 8001abc:	40003c00 	.word	0x40003c00

08001ac0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08a      	sub	sp, #40	; 0x28
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac8:	f107 0314 	add.w	r3, r7, #20
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
 8001ad6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a17      	ldr	r2, [pc, #92]	; (8001b3c <HAL_SPI_MspInit+0x7c>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d128      	bne.n	8001b34 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001ae2:	4b17      	ldr	r3, [pc, #92]	; (8001b40 <HAL_SPI_MspInit+0x80>)
 8001ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae6:	4a16      	ldr	r2, [pc, #88]	; (8001b40 <HAL_SPI_MspInit+0x80>)
 8001ae8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aec:	6593      	str	r3, [r2, #88]	; 0x58
 8001aee:	4b14      	ldr	r3, [pc, #80]	; (8001b40 <HAL_SPI_MspInit+0x80>)
 8001af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001af6:	613b      	str	r3, [r7, #16]
 8001af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001afa:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <HAL_SPI_MspInit+0x80>)
 8001afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afe:	4a10      	ldr	r2, [pc, #64]	; (8001b40 <HAL_SPI_MspInit+0x80>)
 8001b00:	f043 0304 	orr.w	r3, r3, #4
 8001b04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b06:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <HAL_SPI_MspInit+0x80>)
 8001b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b0a:	f003 0304 	and.w	r3, r3, #4
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001b12:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001b16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b20:	2303      	movs	r3, #3
 8001b22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b24:	2306      	movs	r3, #6
 8001b26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b28:	f107 0314 	add.w	r3, r7, #20
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4805      	ldr	r0, [pc, #20]	; (8001b44 <HAL_SPI_MspInit+0x84>)
 8001b30:	f001 ff7a 	bl	8003a28 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001b34:	bf00      	nop
 8001b36:	3728      	adds	r7, #40	; 0x28
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40003c00 	.word	0x40003c00
 8001b40:	40021000 	.word	0x40021000
 8001b44:	48000800 	.word	0x48000800

08001b48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b4e:	4b0f      	ldr	r3, [pc, #60]	; (8001b8c <HAL_MspInit+0x44>)
 8001b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b52:	4a0e      	ldr	r2, [pc, #56]	; (8001b8c <HAL_MspInit+0x44>)
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	6613      	str	r3, [r2, #96]	; 0x60
 8001b5a:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <HAL_MspInit+0x44>)
 8001b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	607b      	str	r3, [r7, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b66:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <HAL_MspInit+0x44>)
 8001b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6a:	4a08      	ldr	r2, [pc, #32]	; (8001b8c <HAL_MspInit+0x44>)
 8001b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b70:	6593      	str	r3, [r2, #88]	; 0x58
 8001b72:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <HAL_MspInit+0x44>)
 8001b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7a:	603b      	str	r3, [r7, #0]
 8001b7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	40021000 	.word	0x40021000

08001b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b94:	e7fe      	b.n	8001b94 <NMI_Handler+0x4>

08001b96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b96:	b480      	push	{r7}
 8001b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b9a:	e7fe      	b.n	8001b9a <HardFault_Handler+0x4>

08001b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ba0:	e7fe      	b.n	8001ba0 <MemManage_Handler+0x4>

08001ba2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ba6:	e7fe      	b.n	8001ba6 <BusFault_Handler+0x4>

08001ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bac:	e7fe      	b.n	8001bac <UsageFault_Handler+0x4>

08001bae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bdc:	f001 fbda 	bl	8003394 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001be0:	bf00      	nop
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001be8:	2020      	movs	r0, #32
 8001bea:	f002 f9d1 	bl	8003f90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001bee:	2040      	movs	r0, #64	; 0x40
 8001bf0:	f002 f9ce 	bl	8003f90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001bf4:	2080      	movs	r0, #128	; 0x80
 8001bf6:	f002 f9cb 	bl	8003f90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001bfa:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001bfe:	f002 f9c7 	bl	8003f90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001c0a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001c0e:	f002 f9bf 	bl	8003f90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001c12:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001c16:	f002 f9bb 	bl	8003f90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001c1a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c1e:	f002 f9b7 	bl	8003f90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001c22:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001c26:	f002 f9b3 	bl	8003f90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001c2a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001c2e:	f002 f9af 	bl	8003f90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b086      	sub	sp, #24
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	60f8      	str	r0, [r7, #12]
 8001c3e:	60b9      	str	r1, [r7, #8]
 8001c40:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c42:	2300      	movs	r3, #0
 8001c44:	617b      	str	r3, [r7, #20]
 8001c46:	e00a      	b.n	8001c5e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c48:	f3af 8000 	nop.w
 8001c4c:	4601      	mov	r1, r0
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	1c5a      	adds	r2, r3, #1
 8001c52:	60ba      	str	r2, [r7, #8]
 8001c54:	b2ca      	uxtb	r2, r1
 8001c56:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	617b      	str	r3, [r7, #20]
 8001c5e:	697a      	ldr	r2, [r7, #20]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	dbf0      	blt.n	8001c48 <_read+0x12>
	}

return len;
 8001c66:	687b      	ldr	r3, [r7, #4]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3718      	adds	r7, #24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]
 8001c80:	e009      	b.n	8001c96 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	1c5a      	adds	r2, r3, #1
 8001c86:	60ba      	str	r2, [r7, #8]
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff fbce 	bl	800142c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	3301      	adds	r3, #1
 8001c94:	617b      	str	r3, [r7, #20]
 8001c96:	697a      	ldr	r2, [r7, #20]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	dbf1      	blt.n	8001c82 <_write+0x12>
	}
	return len;
 8001c9e:	687b      	ldr	r3, [r7, #4]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3718      	adds	r7, #24
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <_close>:

int _close(int file)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
	return -1;
 8001cb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cd0:	605a      	str	r2, [r3, #4]
	return 0;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <_isatty>:

int _isatty(int file)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
	return 1;
 8001ce8:	2301      	movs	r3, #1
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b085      	sub	sp, #20
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	60f8      	str	r0, [r7, #12]
 8001cfe:	60b9      	str	r1, [r7, #8]
 8001d00:	607a      	str	r2, [r7, #4]
	return 0;
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d18:	4a14      	ldr	r2, [pc, #80]	; (8001d6c <_sbrk+0x5c>)
 8001d1a:	4b15      	ldr	r3, [pc, #84]	; (8001d70 <_sbrk+0x60>)
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d24:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <_sbrk+0x64>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d102      	bne.n	8001d32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d2c:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <_sbrk+0x64>)
 8001d2e:	4a12      	ldr	r2, [pc, #72]	; (8001d78 <_sbrk+0x68>)
 8001d30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d32:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <_sbrk+0x64>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4413      	add	r3, r2
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d207      	bcs.n	8001d50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d40:	f008 f916 	bl	8009f70 <__errno>
 8001d44:	4602      	mov	r2, r0
 8001d46:	230c      	movs	r3, #12
 8001d48:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4e:	e009      	b.n	8001d64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d50:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <_sbrk+0x64>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d56:	4b07      	ldr	r3, [pc, #28]	; (8001d74 <_sbrk+0x64>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	4a05      	ldr	r2, [pc, #20]	; (8001d74 <_sbrk+0x64>)
 8001d60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d62:	68fb      	ldr	r3, [r7, #12]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3718      	adds	r7, #24
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	20018000 	.word	0x20018000
 8001d70:	00000800 	.word	0x00000800
 8001d74:	20000810 	.word	0x20000810
 8001d78:	20001758 	.word	0x20001758

08001d7c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d80:	4b17      	ldr	r3, [pc, #92]	; (8001de0 <SystemInit+0x64>)
 8001d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d86:	4a16      	ldr	r2, [pc, #88]	; (8001de0 <SystemInit+0x64>)
 8001d88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001d90:	4b14      	ldr	r3, [pc, #80]	; (8001de4 <SystemInit+0x68>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a13      	ldr	r2, [pc, #76]	; (8001de4 <SystemInit+0x68>)
 8001d96:	f043 0301 	orr.w	r3, r3, #1
 8001d9a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001d9c:	4b11      	ldr	r3, [pc, #68]	; (8001de4 <SystemInit+0x68>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001da2:	4b10      	ldr	r3, [pc, #64]	; (8001de4 <SystemInit+0x68>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a0f      	ldr	r2, [pc, #60]	; (8001de4 <SystemInit+0x68>)
 8001da8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001dac:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001db0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001db2:	4b0c      	ldr	r3, [pc, #48]	; (8001de4 <SystemInit+0x68>)
 8001db4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001db8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001dba:	4b0a      	ldr	r3, [pc, #40]	; (8001de4 <SystemInit+0x68>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a09      	ldr	r2, [pc, #36]	; (8001de4 <SystemInit+0x68>)
 8001dc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dc4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001dc6:	4b07      	ldr	r3, [pc, #28]	; (8001de4 <SystemInit+0x68>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001dcc:	4b04      	ldr	r3, [pc, #16]	; (8001de0 <SystemInit+0x64>)
 8001dce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dd2:	609a      	str	r2, [r3, #8]
#endif
}
 8001dd4:	bf00      	nop
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	e000ed00 	.word	0xe000ed00
 8001de4:	40021000 	.word	0x40021000

08001de8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001dec:	4b14      	ldr	r3, [pc, #80]	; (8001e40 <MX_USART1_UART_Init+0x58>)
 8001dee:	4a15      	ldr	r2, [pc, #84]	; (8001e44 <MX_USART1_UART_Init+0x5c>)
 8001df0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001df2:	4b13      	ldr	r3, [pc, #76]	; (8001e40 <MX_USART1_UART_Init+0x58>)
 8001df4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001df8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dfa:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <MX_USART1_UART_Init+0x58>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e00:	4b0f      	ldr	r3, [pc, #60]	; (8001e40 <MX_USART1_UART_Init+0x58>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e06:	4b0e      	ldr	r3, [pc, #56]	; (8001e40 <MX_USART1_UART_Init+0x58>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <MX_USART1_UART_Init+0x58>)
 8001e0e:	220c      	movs	r2, #12
 8001e10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e12:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <MX_USART1_UART_Init+0x58>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e18:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <MX_USART1_UART_Init+0x58>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e1e:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <MX_USART1_UART_Init+0x58>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e24:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <MX_USART1_UART_Init+0x58>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e2a:	4805      	ldr	r0, [pc, #20]	; (8001e40 <MX_USART1_UART_Init+0x58>)
 8001e2c:	f004 fc6b 	bl	8006706 <HAL_UART_Init>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001e36:	f7ff fd97 	bl	8001968 <Error_Handler>
  }

}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20001278 	.word	0x20001278
 8001e44:	40013800 	.word	0x40013800

08001e48 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001e4c:	4b14      	ldr	r3, [pc, #80]	; (8001ea0 <MX_USART3_UART_Init+0x58>)
 8001e4e:	4a15      	ldr	r2, [pc, #84]	; (8001ea4 <MX_USART3_UART_Init+0x5c>)
 8001e50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001e52:	4b13      	ldr	r3, [pc, #76]	; (8001ea0 <MX_USART3_UART_Init+0x58>)
 8001e54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e5a:	4b11      	ldr	r3, [pc, #68]	; (8001ea0 <MX_USART3_UART_Init+0x58>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e60:	4b0f      	ldr	r3, [pc, #60]	; (8001ea0 <MX_USART3_UART_Init+0x58>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e66:	4b0e      	ldr	r3, [pc, #56]	; (8001ea0 <MX_USART3_UART_Init+0x58>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <MX_USART3_UART_Init+0x58>)
 8001e6e:	220c      	movs	r2, #12
 8001e70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e72:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <MX_USART3_UART_Init+0x58>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e78:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <MX_USART3_UART_Init+0x58>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e7e:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <MX_USART3_UART_Init+0x58>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e84:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <MX_USART3_UART_Init+0x58>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e8a:	4805      	ldr	r0, [pc, #20]	; (8001ea0 <MX_USART3_UART_Init+0x58>)
 8001e8c:	f004 fc3b 	bl	8006706 <HAL_UART_Init>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001e96:	f7ff fd67 	bl	8001968 <Error_Handler>
  }

}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	200011f8 	.word	0x200011f8
 8001ea4:	40004800 	.word	0x40004800

08001ea8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b08c      	sub	sp, #48	; 0x30
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb0:	f107 031c 	add.w	r3, r7, #28
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	60da      	str	r2, [r3, #12]
 8001ebe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a2e      	ldr	r2, [pc, #184]	; (8001f80 <HAL_UART_MspInit+0xd8>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d128      	bne.n	8001f1c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001eca:	4b2e      	ldr	r3, [pc, #184]	; (8001f84 <HAL_UART_MspInit+0xdc>)
 8001ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ece:	4a2d      	ldr	r2, [pc, #180]	; (8001f84 <HAL_UART_MspInit+0xdc>)
 8001ed0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ed4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ed6:	4b2b      	ldr	r3, [pc, #172]	; (8001f84 <HAL_UART_MspInit+0xdc>)
 8001ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ede:	61bb      	str	r3, [r7, #24]
 8001ee0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee2:	4b28      	ldr	r3, [pc, #160]	; (8001f84 <HAL_UART_MspInit+0xdc>)
 8001ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee6:	4a27      	ldr	r2, [pc, #156]	; (8001f84 <HAL_UART_MspInit+0xdc>)
 8001ee8:	f043 0302 	orr.w	r3, r3, #2
 8001eec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eee:	4b25      	ldr	r3, [pc, #148]	; (8001f84 <HAL_UART_MspInit+0xdc>)
 8001ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	617b      	str	r3, [r7, #20]
 8001ef8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001efa:	23c0      	movs	r3, #192	; 0xc0
 8001efc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efe:	2302      	movs	r3, #2
 8001f00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f06:	2303      	movs	r3, #3
 8001f08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f0a:	2307      	movs	r3, #7
 8001f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f0e:	f107 031c 	add.w	r3, r7, #28
 8001f12:	4619      	mov	r1, r3
 8001f14:	481c      	ldr	r0, [pc, #112]	; (8001f88 <HAL_UART_MspInit+0xe0>)
 8001f16:	f001 fd87 	bl	8003a28 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001f1a:	e02d      	b.n	8001f78 <HAL_UART_MspInit+0xd0>
  else if(uartHandle->Instance==USART3)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a1a      	ldr	r2, [pc, #104]	; (8001f8c <HAL_UART_MspInit+0xe4>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d128      	bne.n	8001f78 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f26:	4b17      	ldr	r3, [pc, #92]	; (8001f84 <HAL_UART_MspInit+0xdc>)
 8001f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2a:	4a16      	ldr	r2, [pc, #88]	; (8001f84 <HAL_UART_MspInit+0xdc>)
 8001f2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f30:	6593      	str	r3, [r2, #88]	; 0x58
 8001f32:	4b14      	ldr	r3, [pc, #80]	; (8001f84 <HAL_UART_MspInit+0xdc>)
 8001f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f3e:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <HAL_UART_MspInit+0xdc>)
 8001f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f42:	4a10      	ldr	r2, [pc, #64]	; (8001f84 <HAL_UART_MspInit+0xdc>)
 8001f44:	f043 0308 	orr.w	r3, r3, #8
 8001f48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f4a:	4b0e      	ldr	r3, [pc, #56]	; (8001f84 <HAL_UART_MspInit+0xdc>)
 8001f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f4e:	f003 0308 	and.w	r3, r3, #8
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001f56:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f64:	2303      	movs	r3, #3
 8001f66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f68:	2307      	movs	r3, #7
 8001f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f6c:	f107 031c 	add.w	r3, r7, #28
 8001f70:	4619      	mov	r1, r3
 8001f72:	4807      	ldr	r0, [pc, #28]	; (8001f90 <HAL_UART_MspInit+0xe8>)
 8001f74:	f001 fd58 	bl	8003a28 <HAL_GPIO_Init>
}
 8001f78:	bf00      	nop
 8001f7a:	3730      	adds	r7, #48	; 0x30
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40013800 	.word	0x40013800
 8001f84:	40021000 	.word	0x40021000
 8001f88:	48000400 	.word	0x48000400
 8001f8c:	40004800 	.word	0x40004800
 8001f90:	48000c00 	.word	0x48000c00

08001f94 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001f98:	4b14      	ldr	r3, [pc, #80]	; (8001fec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f9a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001f9e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001fa0:	4b12      	ldr	r3, [pc, #72]	; (8001fec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fa2:	2206      	movs	r2, #6
 8001fa4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001fa6:	4b11      	ldr	r3, [pc, #68]	; (8001fec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fa8:	2202      	movs	r2, #2
 8001faa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001fac:	4b0f      	ldr	r3, [pc, #60]	; (8001fec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fae:	2202      	movs	r2, #2
 8001fb0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001fb2:	4b0e      	ldr	r3, [pc, #56]	; (8001fec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001fb8:	4b0c      	ldr	r3, [pc, #48]	; (8001fec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001fbe:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001fc4:	4b09      	ldr	r3, [pc, #36]	; (8001fec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001fca:	4b08      	ldr	r3, [pc, #32]	; (8001fec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001fd0:	4b06      	ldr	r3, [pc, #24]	; (8001fec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001fd6:	4805      	ldr	r0, [pc, #20]	; (8001fec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fd8:	f002 fdbf 	bl	8004b5a <HAL_PCD_Init>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001fe2:	f7ff fcc1 	bl	8001968 <Error_Handler>
  }

}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	200012f8 	.word	0x200012f8

08001ff0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b08a      	sub	sp, #40	; 0x28
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff8:	f107 0314 	add.w	r3, r7, #20
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	60da      	str	r2, [r3, #12]
 8002006:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002010:	d154      	bne.n	80020bc <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002012:	4b2c      	ldr	r3, [pc, #176]	; (80020c4 <HAL_PCD_MspInit+0xd4>)
 8002014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002016:	4a2b      	ldr	r2, [pc, #172]	; (80020c4 <HAL_PCD_MspInit+0xd4>)
 8002018:	f043 0301 	orr.w	r3, r3, #1
 800201c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800201e:	4b29      	ldr	r3, [pc, #164]	; (80020c4 <HAL_PCD_MspInit+0xd4>)
 8002020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	613b      	str	r3, [r7, #16]
 8002028:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800202a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800202e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002030:	2300      	movs	r3, #0
 8002032:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002034:	2300      	movs	r3, #0
 8002036:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002038:	f107 0314 	add.w	r3, r7, #20
 800203c:	4619      	mov	r1, r3
 800203e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002042:	f001 fcf1 	bl	8003a28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8002046:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800204a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204c:	2302      	movs	r3, #2
 800204e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002050:	2300      	movs	r3, #0
 8002052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002054:	2303      	movs	r3, #3
 8002056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002058:	230a      	movs	r3, #10
 800205a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205c:	f107 0314 	add.w	r3, r7, #20
 8002060:	4619      	mov	r1, r3
 8002062:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002066:	f001 fcdf 	bl	8003a28 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800206a:	4b16      	ldr	r3, [pc, #88]	; (80020c4 <HAL_PCD_MspInit+0xd4>)
 800206c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800206e:	4a15      	ldr	r2, [pc, #84]	; (80020c4 <HAL_PCD_MspInit+0xd4>)
 8002070:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002074:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002076:	4b13      	ldr	r3, [pc, #76]	; (80020c4 <HAL_PCD_MspInit+0xd4>)
 8002078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002082:	4b10      	ldr	r3, [pc, #64]	; (80020c4 <HAL_PCD_MspInit+0xd4>)
 8002084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d114      	bne.n	80020b8 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800208e:	4b0d      	ldr	r3, [pc, #52]	; (80020c4 <HAL_PCD_MspInit+0xd4>)
 8002090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002092:	4a0c      	ldr	r2, [pc, #48]	; (80020c4 <HAL_PCD_MspInit+0xd4>)
 8002094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002098:	6593      	str	r3, [r2, #88]	; 0x58
 800209a:	4b0a      	ldr	r3, [pc, #40]	; (80020c4 <HAL_PCD_MspInit+0xd4>)
 800209c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a2:	60bb      	str	r3, [r7, #8]
 80020a4:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80020a6:	f002 ff15 	bl	8004ed4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80020aa:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <HAL_PCD_MspInit+0xd4>)
 80020ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ae:	4a05      	ldr	r2, [pc, #20]	; (80020c4 <HAL_PCD_MspInit+0xd4>)
 80020b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020b4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80020b6:	e001      	b.n	80020bc <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 80020b8:	f002 ff0c 	bl	8004ed4 <HAL_PWREx_EnableVddUSB>
}
 80020bc:	bf00      	nop
 80020be:	3728      	adds	r7, #40	; 0x28
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40021000 	.word	0x40021000

080020c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80020c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002100 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020cc:	f7ff fe56 	bl	8001d7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80020d0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80020d2:	e003      	b.n	80020dc <LoopCopyDataInit>

080020d4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80020d4:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80020d6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80020d8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80020da:	3104      	adds	r1, #4

080020dc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80020dc:	480a      	ldr	r0, [pc, #40]	; (8002108 <LoopForever+0xa>)
	ldr	r3, =_edata
 80020de:	4b0b      	ldr	r3, [pc, #44]	; (800210c <LoopForever+0xe>)
	adds	r2, r0, r1
 80020e0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80020e2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80020e4:	d3f6      	bcc.n	80020d4 <CopyDataInit>
	ldr	r2, =_sbss
 80020e6:	4a0a      	ldr	r2, [pc, #40]	; (8002110 <LoopForever+0x12>)
	b	LoopFillZerobss
 80020e8:	e002      	b.n	80020f0 <LoopFillZerobss>

080020ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80020ea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80020ec:	f842 3b04 	str.w	r3, [r2], #4

080020f0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80020f0:	4b08      	ldr	r3, [pc, #32]	; (8002114 <LoopForever+0x16>)
	cmp	r2, r3
 80020f2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80020f4:	d3f9      	bcc.n	80020ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020f6:	f007 ff41 	bl	8009f7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020fa:	f7ff fadf 	bl	80016bc <main>

080020fe <LoopForever>:

LoopForever:
    b LoopForever
 80020fe:	e7fe      	b.n	80020fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002100:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002104:	0800e328 	.word	0x0800e328
	ldr	r0, =_sdata
 8002108:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800210c:	200007f0 	.word	0x200007f0
	ldr	r2, =_sbss
 8002110:	200007f0 	.word	0x200007f0
	ldr	r3, = _ebss
 8002114:	20001754 	.word	0x20001754

08002118 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002118:	e7fe      	b.n	8002118 <ADC1_2_IRQHandler>
	...

0800211c <BSP_I2C2_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8002122:	2300      	movs	r3, #0
 8002124:	607b      	str	r3, [r7, #4]

  hi2c2.Instance  = I2C2;
 8002126:	4b19      	ldr	r3, [pc, #100]	; (800218c <BSP_I2C2_Init+0x70>)
 8002128:	4a19      	ldr	r2, [pc, #100]	; (8002190 <BSP_I2C2_Init+0x74>)
 800212a:	601a      	str	r2, [r3, #0]

  if(I2C2InitCounter++ == 0)
 800212c:	4b19      	ldr	r3, [pc, #100]	; (8002194 <BSP_I2C2_Init+0x78>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	1c5a      	adds	r2, r3, #1
 8002132:	4918      	ldr	r1, [pc, #96]	; (8002194 <BSP_I2C2_Init+0x78>)
 8002134:	600a      	str	r2, [r1, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d122      	bne.n	8002180 <BSP_I2C2_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 800213a:	4814      	ldr	r0, [pc, #80]	; (800218c <BSP_I2C2_Init+0x70>)
 800213c:	f002 fa40 	bl	80045c0 <HAL_I2C_GetState>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d11c      	bne.n	8002180 <BSP_I2C2_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C2_MspInit(&hi2c2);
 8002146:	4811      	ldr	r0, [pc, #68]	; (800218c <BSP_I2C2_Init+0x70>)
 8002148:	f000 f8fe 	bl	8002348 <I2C2_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d116      	bne.n	8002180 <BSP_I2C2_Init+0x64>
	  {
    	/* Init the I2C */
    	if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 8002152:	480e      	ldr	r0, [pc, #56]	; (800218c <BSP_I2C2_Init+0x70>)
 8002154:	f000 f8b4 	bl	80022c0 <MX_I2C2_Init>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <BSP_I2C2_Init+0x4a>
    	{
      	  ret = BSP_ERROR_BUS_FAILURE;
 800215e:	f06f 0307 	mvn.w	r3, #7
 8002162:	607b      	str	r3, [r7, #4]
 8002164:	e00c      	b.n	8002180 <BSP_I2C2_Init+0x64>
    	}
    	else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002166:	2100      	movs	r1, #0
 8002168:	4808      	ldr	r0, [pc, #32]	; (800218c <BSP_I2C2_Init+0x70>)
 800216a:	f002 fc5f 	bl	8004a2c <HAL_I2CEx_ConfigAnalogFilter>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <BSP_I2C2_Init+0x60>
    	{
      	  ret = BSP_ERROR_BUS_FAILURE;
 8002174:	f06f 0307 	mvn.w	r3, #7
 8002178:	607b      	str	r3, [r7, #4]
 800217a:	e001      	b.n	8002180 <BSP_I2C2_Init+0x64>
    	}
        else
        {
      	  ret = BSP_ERROR_NONE;
 800217c:	2300      	movs	r3, #0
 800217e:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8002180:	687b      	ldr	r3, [r7, #4]
}
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20001700 	.word	0x20001700
 8002190:	40005800 	.word	0x40005800
 8002194:	20000814 	.word	0x20000814

08002198 <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_DeInit(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800219e:	2300      	movs	r3, #0
 80021a0:	607b      	str	r3, [r7, #4]

  if (I2C2InitCounter > 0)
 80021a2:	4b0f      	ldr	r3, [pc, #60]	; (80021e0 <BSP_I2C2_DeInit+0x48>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d014      	beq.n	80021d4 <BSP_I2C2_DeInit+0x3c>
  {
    if (--I2C2InitCounter == 0)
 80021aa:	4b0d      	ldr	r3, [pc, #52]	; (80021e0 <BSP_I2C2_DeInit+0x48>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	3b01      	subs	r3, #1
 80021b0:	4a0b      	ldr	r2, [pc, #44]	; (80021e0 <BSP_I2C2_DeInit+0x48>)
 80021b2:	6013      	str	r3, [r2, #0]
 80021b4:	4b0a      	ldr	r3, [pc, #40]	; (80021e0 <BSP_I2C2_DeInit+0x48>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d10b      	bne.n	80021d4 <BSP_I2C2_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C2_MspDeInit(&hi2c2);
 80021bc:	4809      	ldr	r0, [pc, #36]	; (80021e4 <BSP_I2C2_DeInit+0x4c>)
 80021be:	f000 f909 	bl	80023d4 <I2C2_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c2) != HAL_OK)
 80021c2:	4808      	ldr	r0, [pc, #32]	; (80021e4 <BSP_I2C2_DeInit+0x4c>)
 80021c4:	f001 ff8b 	bl	80040de <HAL_I2C_DeInit>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d002      	beq.n	80021d4 <BSP_I2C2_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 80021ce:	f06f 0307 	mvn.w	r3, #7
 80021d2:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 80021d4:	687b      	ldr	r3, [r7, #4]
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	20000814 	.word	0x20000814
 80021e4:	20001700 	.word	0x20001700

080021e8 <BSP_I2C2_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b08a      	sub	sp, #40	; 0x28
 80021ec:	af04      	add	r7, sp, #16
 80021ee:	60ba      	str	r2, [r7, #8]
 80021f0:	461a      	mov	r2, r3
 80021f2:	4603      	mov	r3, r0
 80021f4:	81fb      	strh	r3, [r7, #14]
 80021f6:	460b      	mov	r3, r1
 80021f8:	81bb      	strh	r3, [r7, #12]
 80021fa:	4613      	mov	r3, r2
 80021fc:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c2, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 8002202:	89ba      	ldrh	r2, [r7, #12]
 8002204:	89f9      	ldrh	r1, [r7, #14]
 8002206:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800220a:	9302      	str	r3, [sp, #8]
 800220c:	88fb      	ldrh	r3, [r7, #6]
 800220e:	9301      	str	r3, [sp, #4]
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	2301      	movs	r3, #1
 8002216:	480c      	ldr	r0, [pc, #48]	; (8002248 <BSP_I2C2_WriteReg+0x60>)
 8002218:	f001 ffa4 	bl	8004164 <HAL_I2C_Mem_Write>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00c      	beq.n	800223c <BSP_I2C2_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 8002222:	4809      	ldr	r0, [pc, #36]	; (8002248 <BSP_I2C2_WriteReg+0x60>)
 8002224:	f002 f9da 	bl	80045dc <HAL_I2C_GetError>
 8002228:	4603      	mov	r3, r0
 800222a:	2b04      	cmp	r3, #4
 800222c:	d103      	bne.n	8002236 <BSP_I2C2_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800222e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002232:	617b      	str	r3, [r7, #20]
 8002234:	e002      	b.n	800223c <BSP_I2C2_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002236:	f06f 0303 	mvn.w	r3, #3
 800223a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 800223c:	697b      	ldr	r3, [r7, #20]
}
 800223e:	4618      	mov	r0, r3
 8002240:	3718      	adds	r7, #24
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	20001700 	.word	0x20001700

0800224c <BSP_I2C2_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b08a      	sub	sp, #40	; 0x28
 8002250:	af04      	add	r7, sp, #16
 8002252:	60ba      	str	r2, [r7, #8]
 8002254:	461a      	mov	r2, r3
 8002256:	4603      	mov	r3, r0
 8002258:	81fb      	strh	r3, [r7, #14]
 800225a:	460b      	mov	r3, r1
 800225c:	81bb      	strh	r3, [r7, #12]
 800225e:	4613      	mov	r3, r2
 8002260:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002262:	2300      	movs	r3, #0
 8002264:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c2, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 8002266:	89ba      	ldrh	r2, [r7, #12]
 8002268:	89f9      	ldrh	r1, [r7, #14]
 800226a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800226e:	9302      	str	r3, [sp, #8]
 8002270:	88fb      	ldrh	r3, [r7, #6]
 8002272:	9301      	str	r3, [sp, #4]
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	2301      	movs	r3, #1
 800227a:	480c      	ldr	r0, [pc, #48]	; (80022ac <BSP_I2C2_ReadReg+0x60>)
 800227c:	f002 f886 	bl	800438c <HAL_I2C_Mem_Read>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00c      	beq.n	80022a0 <BSP_I2C2_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 8002286:	4809      	ldr	r0, [pc, #36]	; (80022ac <BSP_I2C2_ReadReg+0x60>)
 8002288:	f002 f9a8 	bl	80045dc <HAL_I2C_GetError>
 800228c:	4603      	mov	r3, r0
 800228e:	2b04      	cmp	r3, #4
 8002290:	d103      	bne.n	800229a <BSP_I2C2_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002292:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002296:	617b      	str	r3, [r7, #20]
 8002298:	e002      	b.n	80022a0 <BSP_I2C2_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800229a:	f06f 0303 	mvn.w	r3, #3
 800229e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80022a0:	697b      	ldr	r3, [r7, #20]
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3718      	adds	r7, #24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20001700 	.word	0x20001700

080022b0 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80022b4:	f001 f882 	bl	80033bc <HAL_GetTick>
 80022b8:	4603      	mov	r3, r0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	bd80      	pop	{r7, pc}
	...

080022c0 <MX_I2C2_Init>:

/* I2C2 init function */

__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80022c8:	2300      	movs	r3, #0
 80022ca:	73fb      	strb	r3, [r7, #15]
  hi2c->Instance = I2C2;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a1c      	ldr	r2, [pc, #112]	; (8002340 <MX_I2C2_Init+0x80>)
 80022d0:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x10909CEC;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a1b      	ldr	r2, [pc, #108]	; (8002344 <MX_I2C2_Init+0x84>)
 80022d6:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2201      	movs	r2, #1
 80022e2:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f001 fe5c 	bl	8003fc0 <HAL_I2C_Init>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <MX_I2C2_Init+0x52>
  {
    ret = HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002312:	2100      	movs	r1, #0
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f002 fb89 	bl	8004a2c <HAL_I2CEx_ConfigAnalogFilter>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <MX_I2C2_Init+0x64>
  {
    ret = HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8002324:	2100      	movs	r1, #0
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f002 fbcb 	bl	8004ac2 <HAL_I2CEx_ConfigDigitalFilter>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <MX_I2C2_Init+0x76>
  {
    ret = HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002336:	7bfb      	ldrb	r3, [r7, #15]
}
 8002338:	4618      	mov	r0, r3
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40005800 	.word	0x40005800
 8002344:	10909cec 	.word	0x10909cec

08002348 <I2C2_MspInit>:

static void I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08a      	sub	sp, #40	; 0x28
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002350:	4b1e      	ldr	r3, [pc, #120]	; (80023cc <I2C2_MspInit+0x84>)
 8002352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002354:	4a1d      	ldr	r2, [pc, #116]	; (80023cc <I2C2_MspInit+0x84>)
 8002356:	f043 0302 	orr.w	r3, r3, #2
 800235a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800235c:	4b1b      	ldr	r3, [pc, #108]	; (80023cc <I2C2_MspInit+0x84>)
 800235e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	613b      	str	r3, [r7, #16]
 8002366:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C2_SCL_GPIO_PIN;
 8002368:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800236c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800236e:	2312      	movs	r3, #18
 8002370:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002372:	2301      	movs	r3, #1
 8002374:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002376:	2303      	movs	r3, #3
 8002378:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C2_SCL_GPIO_AF;
 800237a:	2304      	movs	r3, #4
 800237c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &GPIO_InitStruct);
 800237e:	f107 0314 	add.w	r3, r7, #20
 8002382:	4619      	mov	r1, r3
 8002384:	4812      	ldr	r0, [pc, #72]	; (80023d0 <I2C2_MspInit+0x88>)
 8002386:	f001 fb4f 	bl	8003a28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SDA_GPIO_PIN;
 800238a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800238e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002390:	2312      	movs	r3, #18
 8002392:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002394:	2301      	movs	r3, #1
 8002396:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002398:	2303      	movs	r3, #3
 800239a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C2_SDA_GPIO_AF;
 800239c:	2304      	movs	r3, #4
 800239e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &GPIO_InitStruct);
 80023a0:	f107 0314 	add.w	r3, r7, #20
 80023a4:	4619      	mov	r1, r3
 80023a6:	480a      	ldr	r0, [pc, #40]	; (80023d0 <I2C2_MspInit+0x88>)
 80023a8:	f001 fb3e 	bl	8003a28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80023ac:	4b07      	ldr	r3, [pc, #28]	; (80023cc <I2C2_MspInit+0x84>)
 80023ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b0:	4a06      	ldr	r2, [pc, #24]	; (80023cc <I2C2_MspInit+0x84>)
 80023b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023b6:	6593      	str	r3, [r2, #88]	; 0x58
 80023b8:	4b04      	ldr	r3, [pc, #16]	; (80023cc <I2C2_MspInit+0x84>)
 80023ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
}
 80023c4:	bf00      	nop
 80023c6:	3728      	adds	r7, #40	; 0x28
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	40021000 	.word	0x40021000
 80023d0:	48000400 	.word	0x48000400

080023d4 <I2C2_MspDeInit>:

static void I2C2_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80023dc:	4b09      	ldr	r3, [pc, #36]	; (8002404 <I2C2_MspDeInit+0x30>)
 80023de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e0:	4a08      	ldr	r2, [pc, #32]	; (8002404 <I2C2_MspDeInit+0x30>)
 80023e2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80023e6:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, BUS_I2C2_SCL_GPIO_PIN);
 80023e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023ec:	4806      	ldr	r0, [pc, #24]	; (8002408 <I2C2_MspDeInit+0x34>)
 80023ee:	f001 fcc3 	bl	8003d78 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, BUS_I2C2_SDA_GPIO_PIN);
 80023f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023f6:	4804      	ldr	r0, [pc, #16]	; (8002408 <I2C2_MspDeInit+0x34>)
 80023f8:	f001 fcbe 	bl	8003d78 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
}
 80023fc:	bf00      	nop
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40021000 	.word	0x40021000
 8002408:	48000400 	.word	0x48000400

0800240c <LSM6DSL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8002416:	2300      	movs	r3, #0
 8002418:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d103      	bne.n	8002428 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 8002420:	f04f 33ff 	mov.w	r3, #4294967295
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	e04d      	b.n	80024c4 <LSM6DSL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685a      	ldr	r2, [r3, #4]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	7b1a      	ldrb	r2, [r3, #12]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	691a      	ldr	r2, [r3, #16]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	695a      	ldr	r2, [r3, #20]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	699a      	ldr	r2, [r3, #24]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a1b      	ldr	r2, [pc, #108]	; (80024d0 <LSM6DSL_RegisterBusIO+0xc4>)
 8002464:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a1a      	ldr	r2, [pc, #104]	; (80024d4 <LSM6DSL_RegisterBusIO+0xc8>)
 800246a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d103      	bne.n	8002482 <LSM6DSL_RegisterBusIO+0x76>
    {
      ret = LSM6DSL_ERROR;
 800247a:	f04f 33ff 	mov.w	r3, #4294967295
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	e020      	b.n	80024c4 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4798      	blx	r3
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <LSM6DSL_RegisterBusIO+0x8a>
    {
      ret = LSM6DSL_ERROR;
 800248e:	f04f 33ff 	mov.w	r3, #4294967295
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	e016      	b.n	80024c4 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	2b02      	cmp	r3, #2
 800249c:	d112      	bne.n	80024c4 <LSM6DSL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d10d      	bne.n	80024c4 <LSM6DSL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 80024a8:	230c      	movs	r3, #12
 80024aa:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 80024ac:	7afb      	ldrb	r3, [r7, #11]
 80024ae:	461a      	mov	r2, r3
 80024b0:	2112      	movs	r1, #18
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 f9b9 	bl	800282a <LSM6DSL_Write_Reg>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d002      	beq.n	80024c4 <LSM6DSL_RegisterBusIO+0xb8>
          {
            ret = LSM6DSL_ERROR;
 80024be:	f04f 33ff 	mov.w	r3, #4294967295
 80024c2:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80024c4:	68fb      	ldr	r3, [r7, #12]
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	08002ae5 	.word	0x08002ae5
 80024d4:	08002b1b 	.word	0x08002b1b

080024d8 <LSM6DSL_Init>:
 * @brief  Initialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	331c      	adds	r3, #28
 80024e4:	2101      	movs	r1, #1
 80024e6:	4618      	mov	r0, r3
 80024e8:	f000 fc7a 	bl	8002de0 <lsm6dsl_auto_increment_set>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d002      	beq.n	80024f8 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 80024f2:	f04f 33ff 	mov.w	r3, #4294967295
 80024f6:	e054      	b.n	80025a2 <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	331c      	adds	r3, #28
 80024fc:	2101      	movs	r1, #1
 80024fe:	4618      	mov	r0, r3
 8002500:	f000 fc26 	bl	8002d50 <lsm6dsl_block_data_update_set>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d002      	beq.n	8002510 <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 800250a:	f04f 33ff 	mov.w	r3, #4294967295
 800250e:	e048      	b.n	80025a2 <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	331c      	adds	r3, #28
 8002514:	2100      	movs	r1, #0
 8002516:	4618      	mov	r0, r3
 8002518:	f000 fec1 	bl	800329e <lsm6dsl_fifo_mode_set>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d002      	beq.n	8002528 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 8002522:	f04f 33ff 	mov.w	r3, #4294967295
 8002526:	e03c      	b.n	80025a2 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2204      	movs	r2, #4
 800252c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	331c      	adds	r3, #28
 8002534:	2100      	movs	r1, #0
 8002536:	4618      	mov	r0, r3
 8002538:	f000 fb98 	bl	8002c6c <lsm6dsl_xl_data_rate_set>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d002      	beq.n	8002548 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 8002542:	f04f 33ff 	mov.w	r3, #4294967295
 8002546:	e02c      	b.n	80025a2 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	331c      	adds	r3, #28
 800254c:	2100      	movs	r1, #0
 800254e:	4618      	mov	r0, r3
 8002550:	f000 fb2e 	bl	8002bb0 <lsm6dsl_xl_full_scale_set>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d002      	beq.n	8002560 <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 800255a:	f04f 33ff 	mov.w	r3, #4294967295
 800255e:	e020      	b.n	80025a2 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2204      	movs	r2, #4
 8002564:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	331c      	adds	r3, #28
 800256c:	2100      	movs	r1, #0
 800256e:	4618      	mov	r0, r3
 8002570:	f000 fbc8 	bl	8002d04 <lsm6dsl_gy_data_rate_set>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d002      	beq.n	8002580 <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 800257a:	f04f 33ff 	mov.w	r3, #4294967295
 800257e:	e010      	b.n	80025a2 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	331c      	adds	r3, #28
 8002584:	2106      	movs	r1, #6
 8002586:	4618      	mov	r0, r3
 8002588:	f000 fb96 	bl	8002cb8 <lsm6dsl_gy_full_scale_set>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d002      	beq.n	8002598 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 8002592:	f04f 33ff 	mov.w	r3, #4294967295
 8002596:	e004      	b.n	80025a2 <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <LSM6DSL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b082      	sub	sp, #8
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
 80025b2:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	331c      	adds	r3, #28
 80025b8:	6839      	ldr	r1, [r7, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f000 fbff 	bl	8002dbe <lsm6dsl_device_id_get>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d002      	beq.n	80025cc <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 80025c6:	f04f 33ff 	mov.w	r3, #4294967295
 80025ca:	e000      	b.n	80025ce <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <LSM6DSL_ACC_Enable>:
 * @brief  Enable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b082      	sub	sp, #8
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d101      	bne.n	80025ec <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 80025e8:	2300      	movs	r3, #0
 80025ea:	e014      	b.n	8002616 <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f103 021c 	add.w	r2, r3, #28
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80025f8:	4619      	mov	r1, r3
 80025fa:	4610      	mov	r0, r2
 80025fc:	f000 fb36 	bl	8002c6c <lsm6dsl_xl_data_rate_set>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d002      	beq.n	800260c <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8002606:	f04f 33ff 	mov.w	r3, #4294967295
 800260a:	e004      	b.n	8002616 <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
	...

08002620 <LSM6DSL_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800262a:	2300      	movs	r3, #0
 800262c:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	331c      	adds	r3, #28
 8002632:	f107 020b 	add.w	r2, r7, #11
 8002636:	4611      	mov	r1, r2
 8002638:	4618      	mov	r0, r3
 800263a:	f000 fadf 	bl	8002bfc <lsm6dsl_xl_full_scale_get>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d002      	beq.n	800264a <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8002644:	f04f 33ff 	mov.w	r3, #4294967295
 8002648:	e023      	b.n	8002692 <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 800264a:	7afb      	ldrb	r3, [r7, #11]
 800264c:	2b03      	cmp	r3, #3
 800264e:	d81b      	bhi.n	8002688 <LSM6DSL_ACC_GetSensitivity+0x68>
 8002650:	a201      	add	r2, pc, #4	; (adr r2, 8002658 <LSM6DSL_ACC_GetSensitivity+0x38>)
 8002652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002656:	bf00      	nop
 8002658:	08002669 	.word	0x08002669
 800265c:	08002681 	.word	0x08002681
 8002660:	08002671 	.word	0x08002671
 8002664:	08002679 	.word	0x08002679
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	4a0c      	ldr	r2, [pc, #48]	; (800269c <LSM6DSL_ACC_GetSensitivity+0x7c>)
 800266c:	601a      	str	r2, [r3, #0]
      break;
 800266e:	e00f      	b.n	8002690 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	4a0b      	ldr	r2, [pc, #44]	; (80026a0 <LSM6DSL_ACC_GetSensitivity+0x80>)
 8002674:	601a      	str	r2, [r3, #0]
      break;
 8002676:	e00b      	b.n	8002690 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	4a0a      	ldr	r2, [pc, #40]	; (80026a4 <LSM6DSL_ACC_GetSensitivity+0x84>)
 800267c:	601a      	str	r2, [r3, #0]
      break;
 800267e:	e007      	b.n	8002690 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	4a09      	ldr	r2, [pc, #36]	; (80026a8 <LSM6DSL_ACC_GetSensitivity+0x88>)
 8002684:	601a      	str	r2, [r3, #0]
      break;
 8002686:	e003      	b.n	8002690 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8002688:	f04f 33ff 	mov.w	r3, #4294967295
 800268c:	60fb      	str	r3, [r7, #12]
      break;
 800268e:	bf00      	nop
  }

  return ret;
 8002690:	68fb      	ldr	r3, [r7, #12]
}
 8002692:	4618      	mov	r0, r3
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	3d79db23 	.word	0x3d79db23
 80026a0:	3df9db23 	.word	0x3df9db23
 80026a4:	3e79db23 	.word	0x3e79db23
 80026a8:	3ef9db23 	.word	0x3ef9db23

080026ac <LSM6DSL_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d106      	bne.n	80026d0 <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 80026c2:	ed97 0a00 	vldr	s0, [r7]
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f8fe 	bl	80028c8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 80026cc:	4603      	mov	r3, r0
 80026ce:	e005      	b.n	80026dc <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80026d0:	ed97 0a00 	vldr	s0, [r7]
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 f983 	bl	80029e0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 80026da:	4603      	mov	r3, r0
  }
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <LSM6DSL_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	dd0b      	ble.n	800270c <LSM6DSL_ACC_SetFullScale+0x28>
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	2b04      	cmp	r3, #4
 80026f8:	dd06      	ble.n	8002708 <LSM6DSL_ACC_SetFullScale+0x24>
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	2b08      	cmp	r3, #8
 80026fe:	dc01      	bgt.n	8002704 <LSM6DSL_ACC_SetFullScale+0x20>
 8002700:	2303      	movs	r3, #3
 8002702:	e004      	b.n	800270e <LSM6DSL_ACC_SetFullScale+0x2a>
 8002704:	2301      	movs	r3, #1
 8002706:	e002      	b.n	800270e <LSM6DSL_ACC_SetFullScale+0x2a>
 8002708:	2302      	movs	r3, #2
 800270a:	e000      	b.n	800270e <LSM6DSL_ACC_SetFullScale+0x2a>
 800270c:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 800270e:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	331c      	adds	r3, #28
 8002714:	7bfa      	ldrb	r2, [r7, #15]
 8002716:	4611      	mov	r1, r2
 8002718:	4618      	mov	r0, r3
 800271a:	f000 fa49 	bl	8002bb0 <lsm6dsl_xl_full_scale_set>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d002      	beq.n	800272a <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 8002724:	f04f 33ff 	mov.w	r3, #4294967295
 8002728:	e000      	b.n	800272c <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3710      	adds	r7, #16
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <LSM6DSL_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	331c      	adds	r3, #28
 8002742:	f107 0208 	add.w	r2, r7, #8
 8002746:	4611      	mov	r1, r2
 8002748:	4618      	mov	r0, r3
 800274a:	f000 fb27 	bl	8002d9c <lsm6dsl_acceleration_raw_get>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d002      	beq.n	800275a <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8002754:	f04f 33ff 	mov.w	r3, #4294967295
 8002758:	e00c      	b.n	8002774 <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800275a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8002762:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800276a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <LSM6DSL_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8002786:	f04f 0300 	mov.w	r3, #0
 800278a:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	331c      	adds	r3, #28
 8002790:	f107 0210 	add.w	r2, r7, #16
 8002794:	4611      	mov	r1, r2
 8002796:	4618      	mov	r0, r3
 8002798:	f000 fb00 	bl	8002d9c <lsm6dsl_acceleration_raw_get>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d002      	beq.n	80027a8 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 80027a2:	f04f 33ff 	mov.w	r3, #4294967295
 80027a6:	e03c      	b.n	8002822 <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 80027a8:	f107 030c 	add.w	r3, r7, #12
 80027ac:	4619      	mov	r1, r3
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f7ff ff36 	bl	8002620 <LSM6DSL_ACC_GetSensitivity>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d002      	beq.n	80027c0 <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 80027ba:	f04f 33ff 	mov.w	r3, #4294967295
 80027be:	e030      	b.n	8002822 <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80027c0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80027c4:	ee07 3a90 	vmov	s15, r3
 80027c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80027d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027d8:	ee17 2a90 	vmov	r2, s15
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80027e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80027e4:	ee07 3a90 	vmov	s15, r3
 80027e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80027f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027f8:	ee17 2a90 	vmov	r2, s15
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002800:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002804:	ee07 3a90 	vmov	s15, r3
 8002808:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800280c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002810:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002814:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002818:	ee17 2a90 	vmov	r2, s15
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3718      	adds	r7, #24
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <LSM6DSL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b082      	sub	sp, #8
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
 8002832:	460b      	mov	r3, r1
 8002834:	70fb      	strb	r3, [r7, #3]
 8002836:	4613      	mov	r3, r2
 8002838:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f103 001c 	add.w	r0, r3, #28
 8002840:	1cba      	adds	r2, r7, #2
 8002842:	78f9      	ldrb	r1, [r7, #3]
 8002844:	2301      	movs	r3, #1
 8002846:	f000 f99b 	bl	8002b80 <lsm6dsl_write_reg>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d002      	beq.n	8002856 <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8002850:	f04f 33ff 	mov.w	r3, #4294967295
 8002854:	e000      	b.n	8002858 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <LSM6DSL_ACC_Set_INT1_DRDY>:
 * @param  pObj the device pObj
 * @param  Val the value of int1_drdy_xl in reg INT1_CTRL
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Set_INT1_DRDY(LSM6DSL_Object_t *pObj, uint8_t Val)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_int1_route_t reg;

  if (lsm6dsl_pin_int1_route_get(&(pObj->Ctx), &reg) != LSM6DSL_OK)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	331c      	adds	r3, #28
 8002870:	f107 020c 	add.w	r2, r7, #12
 8002874:	4611      	mov	r1, r2
 8002876:	4618      	mov	r0, r3
 8002878:	f000 fc3b 	bl	80030f2 <lsm6dsl_pin_int1_route_get>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d002      	beq.n	8002888 <LSM6DSL_ACC_Set_INT1_DRDY+0x28>
  {
    return LSM6DSL_ERROR;
 8002882:	f04f 33ff 	mov.w	r3, #4294967295
 8002886:	e01b      	b.n	80028c0 <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  }

  if (Val <= 1)
 8002888:	78fb      	ldrb	r3, [r7, #3]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d811      	bhi.n	80028b2 <LSM6DSL_ACC_Set_INT1_DRDY+0x52>
  {
    reg.int1_drdy_xl = Val;
 800288e:	78fb      	ldrb	r3, [r7, #3]
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	b2da      	uxtb	r2, r3
 8002896:	7b3b      	ldrb	r3, [r7, #12]
 8002898:	f362 0300 	bfi	r3, r2, #0, #1
 800289c:	733b      	strb	r3, [r7, #12]
  else
  {
    return LSM6DSL_ERROR;
  }

  if (lsm6dsl_pin_int1_route_set(&(pObj->Ctx), reg) != LSM6DSL_OK)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	331c      	adds	r3, #28
 80028a2:	68f9      	ldr	r1, [r7, #12]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f000 fac1 	bl	8002e2c <lsm6dsl_pin_int1_route_set>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d006      	beq.n	80028be <LSM6DSL_ACC_Set_INT1_DRDY+0x5e>
 80028b0:	e002      	b.n	80028b8 <LSM6DSL_ACC_Set_INT1_DRDY+0x58>
    return LSM6DSL_ERROR;
 80028b2:	f04f 33ff 	mov.w	r3, #4294967295
 80028b6:	e003      	b.n	80028c0 <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  {
    return LSM6DSL_ERROR;
 80028b8:	f04f 33ff 	mov.w	r3, #4294967295
 80028bc:	e000      	b.n	80028c0 <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  }

  return LSM6DSL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 80028d4:	edd7 7a00 	vldr	s15, [r7]
 80028d8:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80028dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028e4:	d801      	bhi.n	80028ea <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 80028e6:	2301      	movs	r3, #1
 80028e8:	e058      	b.n	800299c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80028ea:	edd7 7a00 	vldr	s15, [r7]
 80028ee:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80028f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028fa:	d801      	bhi.n	8002900 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 80028fc:	2302      	movs	r3, #2
 80028fe:	e04d      	b.n	800299c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002900:	edd7 7a00 	vldr	s15, [r7]
 8002904:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80029c4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8002908:	eef4 7ac7 	vcmpe.f32	s15, s14
 800290c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002910:	d801      	bhi.n	8002916 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8002912:	2303      	movs	r3, #3
 8002914:	e042      	b.n	800299c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002916:	edd7 7a00 	vldr	s15, [r7]
 800291a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80029c8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 800291e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002926:	d801      	bhi.n	800292c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 8002928:	2304      	movs	r3, #4
 800292a:	e037      	b.n	800299c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800292c:	edd7 7a00 	vldr	s15, [r7]
 8002930:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80029cc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 8002934:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800293c:	d801      	bhi.n	8002942 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 800293e:	2305      	movs	r3, #5
 8002940:	e02c      	b.n	800299c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002942:	edd7 7a00 	vldr	s15, [r7]
 8002946:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80029d0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 800294a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800294e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002952:	d801      	bhi.n	8002958 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 8002954:	2306      	movs	r3, #6
 8002956:	e021      	b.n	800299c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002958:	edd7 7a00 	vldr	s15, [r7]
 800295c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80029d4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8002960:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002968:	d801      	bhi.n	800296e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 800296a:	2307      	movs	r3, #7
 800296c:	e016      	b.n	800299c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800296e:	edd7 7a00 	vldr	s15, [r7]
 8002972:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80029d8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 8002976:	eef4 7ac7 	vcmpe.f32	s15, s14
 800297a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800297e:	d801      	bhi.n	8002984 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8002980:	2308      	movs	r3, #8
 8002982:	e00b      	b.n	800299c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002984:	edd7 7a00 	vldr	s15, [r7]
 8002988:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80029dc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 800298c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002994:	d801      	bhi.n	800299a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8002996:	2309      	movs	r3, #9
 8002998:	e000      	b.n	800299c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800299a:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 800299c:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
          :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	331c      	adds	r3, #28
 80029a2:	7bfa      	ldrb	r2, [r7, #15]
 80029a4:	4611      	mov	r1, r2
 80029a6:	4618      	mov	r0, r3
 80029a8:	f000 f960 	bl	8002c6c <lsm6dsl_xl_data_rate_set>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d002      	beq.n	80029b8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 80029b2:	f04f 33ff 	mov.w	r3, #4294967295
 80029b6:	e000      	b.n	80029ba <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	42500000 	.word	0x42500000
 80029c8:	42d00000 	.word	0x42d00000
 80029cc:	43500000 	.word	0x43500000
 80029d0:	43d00000 	.word	0x43d00000
 80029d4:	44504000 	.word	0x44504000
 80029d8:	44cf8000 	.word	0x44cf8000
 80029dc:	45502000 	.word	0x45502000

080029e0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 80029ec:	edd7 7a00 	vldr	s15, [r7]
 80029f0:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80029f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029fc:	d801      	bhi.n	8002a02 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 80029fe:	2301      	movs	r3, #1
 8002a00:	e058      	b.n	8002ab4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002a02:	edd7 7a00 	vldr	s15, [r7]
 8002a06:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8002a0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a12:	d801      	bhi.n	8002a18 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 8002a14:	2302      	movs	r3, #2
 8002a16:	e04d      	b.n	8002ab4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002a18:	edd7 7a00 	vldr	s15, [r7]
 8002a1c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002ac8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8002a20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a28:	d801      	bhi.n	8002a2e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e042      	b.n	8002ab4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002a2e:	edd7 7a00 	vldr	s15, [r7]
 8002a32:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002acc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 8002a36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a3e:	d801      	bhi.n	8002a44 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 8002a40:	2304      	movs	r3, #4
 8002a42:	e037      	b.n	8002ab4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002a44:	edd7 7a00 	vldr	s15, [r7]
 8002a48:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002ad0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8002a4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a54:	d801      	bhi.n	8002a5a <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8002a56:	2305      	movs	r3, #5
 8002a58:	e02c      	b.n	8002ab4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002a5a:	edd7 7a00 	vldr	s15, [r7]
 8002a5e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002ad4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8002a62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a6a:	d801      	bhi.n	8002a70 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 8002a6c:	2306      	movs	r3, #6
 8002a6e:	e021      	b.n	8002ab4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002a70:	edd7 7a00 	vldr	s15, [r7]
 8002a74:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002ad8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8002a78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a80:	d801      	bhi.n	8002a86 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8002a82:	2307      	movs	r3, #7
 8002a84:	e016      	b.n	8002ab4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002a86:	edd7 7a00 	vldr	s15, [r7]
 8002a8a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002adc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 8002a8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a96:	d801      	bhi.n	8002a9c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8002a98:	2308      	movs	r3, #8
 8002a9a:	e00b      	b.n	8002ab4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002a9c:	edd7 7a00 	vldr	s15, [r7]
 8002aa0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002ae0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 8002aa4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aac:	d801      	bhi.n	8002ab2 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8002aae:	2309      	movs	r3, #9
 8002ab0:	e000      	b.n	8002ab4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002ab2:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	42500000 	.word	0x42500000
 8002acc:	42d00000 	.word	0x42d00000
 8002ad0:	43500000 	.word	0x43500000
 8002ad4:	43d00000 	.word	0x43d00000
 8002ad8:	44504000 	.word	0x44504000
 8002adc:	44cf8000 	.word	0x44cf8000
 8002ae0:	45502000 	.word	0x45502000

08002ae4 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002ae4:	b590      	push	{r4, r7, lr}
 8002ae6:	b087      	sub	sp, #28
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	607a      	str	r2, [r7, #4]
 8002aee:	461a      	mov	r2, r3
 8002af0:	460b      	mov	r3, r1
 8002af2:	72fb      	strb	r3, [r7, #11]
 8002af4:	4613      	mov	r3, r2
 8002af6:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	695c      	ldr	r4, [r3, #20]
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	7b1b      	ldrb	r3, [r3, #12]
 8002b04:	b298      	uxth	r0, r3
 8002b06:	7afb      	ldrb	r3, [r7, #11]
 8002b08:	b299      	uxth	r1, r3
 8002b0a:	893b      	ldrh	r3, [r7, #8]
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	47a0      	blx	r4
 8002b10:	4603      	mov	r3, r0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	371c      	adds	r7, #28
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd90      	pop	{r4, r7, pc}

08002b1a <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002b1a:	b590      	push	{r4, r7, lr}
 8002b1c:	b087      	sub	sp, #28
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	60f8      	str	r0, [r7, #12]
 8002b22:	607a      	str	r2, [r7, #4]
 8002b24:	461a      	mov	r2, r3
 8002b26:	460b      	mov	r3, r1
 8002b28:	72fb      	strb	r3, [r7, #11]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	691c      	ldr	r4, [r3, #16]
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	7b1b      	ldrb	r3, [r3, #12]
 8002b3a:	b298      	uxth	r0, r3
 8002b3c:	7afb      	ldrb	r3, [r7, #11]
 8002b3e:	b299      	uxth	r1, r3
 8002b40:	893b      	ldrh	r3, [r7, #8]
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	47a0      	blx	r4
 8002b46:	4603      	mov	r3, r0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	371c      	adds	r7, #28
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd90      	pop	{r4, r7, pc}

08002b50 <lsm6dsl_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8002b50:	b590      	push	{r4, r7, lr}
 8002b52:	b087      	sub	sp, #28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	607a      	str	r2, [r7, #4]
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	72fb      	strb	r3, [r7, #11]
 8002b60:	4613      	mov	r3, r2
 8002b62:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	685c      	ldr	r4, [r3, #4]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6898      	ldr	r0, [r3, #8]
 8002b6c:	893b      	ldrh	r3, [r7, #8]
 8002b6e:	7af9      	ldrb	r1, [r7, #11]
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	47a0      	blx	r4
 8002b74:	6178      	str	r0, [r7, #20]
  return ret;
 8002b76:	697b      	ldr	r3, [r7, #20]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	371c      	adds	r7, #28
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd90      	pop	{r4, r7, pc}

08002b80 <lsm6dsl_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8002b80:	b590      	push	{r4, r7, lr}
 8002b82:	b087      	sub	sp, #28
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	607a      	str	r2, [r7, #4]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	72fb      	strb	r3, [r7, #11]
 8002b90:	4613      	mov	r3, r2
 8002b92:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681c      	ldr	r4, [r3, #0]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6898      	ldr	r0, [r3, #8]
 8002b9c:	893b      	ldrh	r3, [r7, #8]
 8002b9e:	7af9      	ldrb	r1, [r7, #11]
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	47a0      	blx	r4
 8002ba4:	6178      	str	r0, [r7, #20]
  return ret;
 8002ba6:	697b      	ldr	r3, [r7, #20]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	371c      	adds	r7, #28
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd90      	pop	{r4, r7, pc}

08002bb0 <lsm6dsl_xl_full_scale_set>:
  * @param  val    Change the values of fs_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_xl_t val)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8002bbc:	f107 0208 	add.w	r2, r7, #8
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	2110      	movs	r1, #16
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f7ff ffc3 	bl	8002b50 <lsm6dsl_read_reg>
 8002bca:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10f      	bne.n	8002bf2 <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 8002bd2:	78fb      	ldrb	r3, [r7, #3]
 8002bd4:	f003 0303 	and.w	r3, r3, #3
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	7a3b      	ldrb	r3, [r7, #8]
 8002bdc:	f362 0383 	bfi	r3, r2, #2, #2
 8002be0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8002be2:	f107 0208 	add.w	r2, r7, #8
 8002be6:	2301      	movs	r3, #1
 8002be8:	2110      	movs	r1, #16
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f7ff ffc8 	bl	8002b80 <lsm6dsl_write_reg>
 8002bf0:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3710      	adds	r7, #16
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <lsm6dsl_xl_full_scale_get>:
  * @param  val    Get the values of fs_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx, lsm6dsl_fs_xl_t *val)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8002c06:	f107 0208 	add.w	r2, r7, #8
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	2110      	movs	r1, #16
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7ff ff9e 	bl	8002b50 <lsm6dsl_read_reg>
 8002c14:	60f8      	str	r0, [r7, #12]
  switch (ctrl1_xl.fs_xl) {
 8002c16:	7a3b      	ldrb	r3, [r7, #8]
 8002c18:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b03      	cmp	r3, #3
 8002c20:	d81a      	bhi.n	8002c58 <lsm6dsl_xl_full_scale_get+0x5c>
 8002c22:	a201      	add	r2, pc, #4	; (adr r2, 8002c28 <lsm6dsl_xl_full_scale_get+0x2c>)
 8002c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c28:	08002c39 	.word	0x08002c39
 8002c2c:	08002c41 	.word	0x08002c41
 8002c30:	08002c49 	.word	0x08002c49
 8002c34:	08002c51 	.word	0x08002c51
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	701a      	strb	r2, [r3, #0]
      break;
 8002c3e:	e00f      	b.n	8002c60 <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	2201      	movs	r2, #1
 8002c44:	701a      	strb	r2, [r3, #0]
      break;
 8002c46:	e00b      	b.n	8002c60 <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	701a      	strb	r2, [r3, #0]
      break;
 8002c4e:	e007      	b.n	8002c60 <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	2203      	movs	r2, #3
 8002c54:	701a      	strb	r2, [r3, #0]
      break;
 8002c56:	e003      	b.n	8002c60 <lsm6dsl_xl_full_scale_get+0x64>
    default:
      *val = LSM6DSL_XL_FS_ND;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	2204      	movs	r2, #4
 8002c5c:	701a      	strb	r2, [r3, #0]
      break;
 8002c5e:	bf00      	nop
  }

  return ret;
 8002c60:	68fb      	ldr	r3, [r7, #12]
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop

08002c6c <lsm6dsl_xl_data_rate_set>:
  * @param  val    Change the values of odr_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_xl_t val)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	460b      	mov	r3, r1
 8002c76:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8002c78:	f107 0208 	add.w	r2, r7, #8
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	2110      	movs	r1, #16
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f7ff ff65 	bl	8002b50 <lsm6dsl_read_reg>
 8002c86:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10f      	bne.n	8002cae <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 8002c8e:	78fb      	ldrb	r3, [r7, #3]
 8002c90:	f003 030f 	and.w	r3, r3, #15
 8002c94:	b2da      	uxtb	r2, r3
 8002c96:	7a3b      	ldrb	r3, [r7, #8]
 8002c98:	f362 1307 	bfi	r3, r2, #4, #4
 8002c9c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8002c9e:	f107 0208 	add.w	r2, r7, #8
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	2110      	movs	r1, #16
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f7ff ff6a 	bl	8002b80 <lsm6dsl_write_reg>
 8002cac:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8002cae:	68fb      	ldr	r3, [r7, #12]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <lsm6dsl_gy_full_scale_set>:
  * @param  val    Change the values of fs_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_g_t val)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8002cc4:	f107 0208 	add.w	r2, r7, #8
 8002cc8:	2301      	movs	r3, #1
 8002cca:	2111      	movs	r1, #17
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f7ff ff3f 	bl	8002b50 <lsm6dsl_read_reg>
 8002cd2:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d10f      	bne.n	8002cfa <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 8002cda:	78fb      	ldrb	r3, [r7, #3]
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	b2da      	uxtb	r2, r3
 8002ce2:	7a3b      	ldrb	r3, [r7, #8]
 8002ce4:	f362 0343 	bfi	r3, r2, #1, #3
 8002ce8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8002cea:	f107 0208 	add.w	r2, r7, #8
 8002cee:	2301      	movs	r3, #1
 8002cf0:	2111      	movs	r1, #17
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7ff ff44 	bl	8002b80 <lsm6dsl_write_reg>
 8002cf8:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <lsm6dsl_gy_data_rate_set>:
  * @param  val    Change the values of odr_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_g_t val)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8002d10:	f107 0208 	add.w	r2, r7, #8
 8002d14:	2301      	movs	r3, #1
 8002d16:	2111      	movs	r1, #17
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f7ff ff19 	bl	8002b50 <lsm6dsl_read_reg>
 8002d1e:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10f      	bne.n	8002d46 <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 8002d26:	78fb      	ldrb	r3, [r7, #3]
 8002d28:	f003 030f 	and.w	r3, r3, #15
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	7a3b      	ldrb	r3, [r7, #8]
 8002d30:	f362 1307 	bfi	r3, r2, #4, #4
 8002d34:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8002d36:	f107 0208 	add.w	r2, r7, #8
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	2111      	movs	r1, #17
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7ff ff1e 	bl	8002b80 <lsm6dsl_write_reg>
 8002d44:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8002d46:	68fb      	ldr	r3, [r7, #12]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8002d5c:	f107 0208 	add.w	r2, r7, #8
 8002d60:	2301      	movs	r3, #1
 8002d62:	2112      	movs	r1, #18
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f7ff fef3 	bl	8002b50 <lsm6dsl_read_reg>
 8002d6a:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10f      	bne.n	8002d92 <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 8002d72:	78fb      	ldrb	r3, [r7, #3]
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	7a3b      	ldrb	r3, [r7, #8]
 8002d7c:	f362 1386 	bfi	r3, r2, #6, #1
 8002d80:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8002d82:	f107 0208 	add.w	r2, r7, #8
 8002d86:	2301      	movs	r3, #1
 8002d88:	2112      	movs	r1, #18
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7ff fef8 	bl	8002b80 <lsm6dsl_write_reg>
 8002d90:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8002d92:	68fb      	ldr	r3, [r7, #12]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8002da6:	2306      	movs	r3, #6
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	2128      	movs	r1, #40	; 0x28
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f7ff fecf 	bl	8002b50 <lsm6dsl_read_reg>
 8002db2:	60f8      	str	r0, [r7, #12]
  return ret;
 8002db4:	68fb      	ldr	r3, [r7, #12]
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b084      	sub	sp, #16
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
 8002dc6:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8002dc8:	2301      	movs	r3, #1
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	210f      	movs	r1, #15
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f7ff febe 	bl	8002b50 <lsm6dsl_read_reg>
 8002dd4:	60f8      	str	r0, [r7, #12]
  return ret;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3710      	adds	r7, #16
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	460b      	mov	r3, r1
 8002dea:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8002dec:	f107 0208 	add.w	r2, r7, #8
 8002df0:	2301      	movs	r3, #1
 8002df2:	2112      	movs	r1, #18
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f7ff feab 	bl	8002b50 <lsm6dsl_read_reg>
 8002dfa:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10f      	bne.n	8002e22 <lsm6dsl_auto_increment_set+0x42>
    ctrl3_c.if_inc = val;
 8002e02:	78fb      	ldrb	r3, [r7, #3]
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	b2da      	uxtb	r2, r3
 8002e0a:	7a3b      	ldrb	r3, [r7, #8]
 8002e0c:	f362 0382 	bfi	r3, r2, #2, #1
 8002e10:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8002e12:	f107 0208 	add.w	r2, r7, #8
 8002e16:	2301      	movs	r3, #1
 8002e18:	2112      	movs	r1, #18
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7ff feb0 	bl	8002b80 <lsm6dsl_write_reg>
 8002e20:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8002e22:	68fb      	ldr	r3, [r7, #12]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <lsm6dsl_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_set(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t val)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b08a      	sub	sp, #40	; 0x28
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  lsm6dsl_md2_cfg_t md2_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_tap_cfg_t tap_cfg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t*)&int1_ctrl, 1);
 8002e36:	f107 021c 	add.w	r2, r7, #28
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	210d      	movs	r1, #13
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f7ff fe86 	bl	8002b50 <lsm6dsl_read_reg>
 8002e44:	6278      	str	r0, [r7, #36]	; 0x24
  if(ret == 0){
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d147      	bne.n	8002edc <lsm6dsl_pin_int1_route_set+0xb0>
    int1_ctrl.int1_drdy_xl        = val.int1_drdy_xl;
 8002e4c:	783b      	ldrb	r3, [r7, #0]
 8002e4e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002e52:	b2da      	uxtb	r2, r3
 8002e54:	7f3b      	ldrb	r3, [r7, #28]
 8002e56:	f362 0300 	bfi	r3, r2, #0, #1
 8002e5a:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_drdy_g         = val.int1_drdy_g;
 8002e5c:	783b      	ldrb	r3, [r7, #0]
 8002e5e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002e62:	b2da      	uxtb	r2, r3
 8002e64:	7f3b      	ldrb	r3, [r7, #28]
 8002e66:	f362 0341 	bfi	r3, r2, #1, #1
 8002e6a:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_boot           = val.int1_boot;
 8002e6c:	783b      	ldrb	r3, [r7, #0]
 8002e6e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	7f3b      	ldrb	r3, [r7, #28]
 8002e76:	f362 0382 	bfi	r3, r2, #2, #1
 8002e7a:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fth            = val.int1_fth;
 8002e7c:	783b      	ldrb	r3, [r7, #0]
 8002e7e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002e82:	b2da      	uxtb	r2, r3
 8002e84:	7f3b      	ldrb	r3, [r7, #28]
 8002e86:	f362 03c3 	bfi	r3, r2, #3, #1
 8002e8a:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fifo_ovr       = val.int1_fifo_ovr;
 8002e8c:	783b      	ldrb	r3, [r7, #0]
 8002e8e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002e92:	b2da      	uxtb	r2, r3
 8002e94:	7f3b      	ldrb	r3, [r7, #28]
 8002e96:	f362 1304 	bfi	r3, r2, #4, #1
 8002e9a:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_full_flag      = val.int1_full_flag;
 8002e9c:	783b      	ldrb	r3, [r7, #0]
 8002e9e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002ea2:	b2da      	uxtb	r2, r3
 8002ea4:	7f3b      	ldrb	r3, [r7, #28]
 8002ea6:	f362 1345 	bfi	r3, r2, #5, #1
 8002eaa:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_sign_mot       = val.int1_sign_mot;
 8002eac:	783b      	ldrb	r3, [r7, #0]
 8002eae:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002eb2:	b2da      	uxtb	r2, r3
 8002eb4:	7f3b      	ldrb	r3, [r7, #28]
 8002eb6:	f362 1386 	bfi	r3, r2, #6, #1
 8002eba:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_step_detector  = val.int1_step_detector;
 8002ebc:	783b      	ldrb	r3, [r7, #0]
 8002ebe:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002ec2:	b2da      	uxtb	r2, r3
 8002ec4:	7f3b      	ldrb	r3, [r7, #28]
 8002ec6:	f362 13c7 	bfi	r3, r2, #7, #1
 8002eca:	773b      	strb	r3, [r7, #28]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t*)&int1_ctrl, 1);
 8002ecc:	f107 021c 	add.w	r2, r7, #28
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	210d      	movs	r1, #13
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f7ff fe53 	bl	8002b80 <lsm6dsl_write_reg>
 8002eda:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 8002edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d107      	bne.n	8002ef2 <lsm6dsl_pin_int1_route_set+0xc6>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t*)&md1_cfg, 1);
 8002ee2:	f107 0218 	add.w	r2, r7, #24
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	215e      	movs	r1, #94	; 0x5e
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f7ff fe30 	bl	8002b50 <lsm6dsl_read_reg>
 8002ef0:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d107      	bne.n	8002f08 <lsm6dsl_pin_int1_route_set+0xdc>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD2_CFG, (uint8_t*)&md2_cfg, 1);
 8002ef8:	f107 0214 	add.w	r2, r7, #20
 8002efc:	2301      	movs	r3, #1
 8002efe:	215f      	movs	r1, #95	; 0x5f
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f7ff fe25 	bl	8002b50 <lsm6dsl_read_reg>
 8002f06:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 8002f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d147      	bne.n	8002f9e <lsm6dsl_pin_int1_route_set+0x172>
        md1_cfg.int1_timer           = val.int1_timer;
 8002f0e:	787b      	ldrb	r3, [r7, #1]
 8002f10:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002f14:	b2da      	uxtb	r2, r3
 8002f16:	7e3b      	ldrb	r3, [r7, #24]
 8002f18:	f362 0300 	bfi	r3, r2, #0, #1
 8002f1c:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_tilt            = val.int1_tilt;
 8002f1e:	787b      	ldrb	r3, [r7, #1]
 8002f20:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	7e3b      	ldrb	r3, [r7, #24]
 8002f28:	f362 0341 	bfi	r3, r2, #1, #1
 8002f2c:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_6d              = val.int1_6d;
 8002f2e:	787b      	ldrb	r3, [r7, #1]
 8002f30:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002f34:	b2da      	uxtb	r2, r3
 8002f36:	7e3b      	ldrb	r3, [r7, #24]
 8002f38:	f362 0382 	bfi	r3, r2, #2, #1
 8002f3c:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_double_tap      = val.int1_double_tap;
 8002f3e:	787b      	ldrb	r3, [r7, #1]
 8002f40:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002f44:	b2da      	uxtb	r2, r3
 8002f46:	7e3b      	ldrb	r3, [r7, #24]
 8002f48:	f362 03c3 	bfi	r3, r2, #3, #1
 8002f4c:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_ff              = val.int1_ff;
 8002f4e:	787b      	ldrb	r3, [r7, #1]
 8002f50:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002f54:	b2da      	uxtb	r2, r3
 8002f56:	7e3b      	ldrb	r3, [r7, #24]
 8002f58:	f362 1304 	bfi	r3, r2, #4, #1
 8002f5c:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_wu              = val.int1_wu;
 8002f5e:	787b      	ldrb	r3, [r7, #1]
 8002f60:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	7e3b      	ldrb	r3, [r7, #24]
 8002f68:	f362 1345 	bfi	r3, r2, #5, #1
 8002f6c:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_single_tap      = val.int1_single_tap;
 8002f6e:	787b      	ldrb	r3, [r7, #1]
 8002f70:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	7e3b      	ldrb	r3, [r7, #24]
 8002f78:	f362 1386 	bfi	r3, r2, #6, #1
 8002f7c:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_inact_state     = val.int1_inact_state;
 8002f7e:	787b      	ldrb	r3, [r7, #1]
 8002f80:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	7e3b      	ldrb	r3, [r7, #24]
 8002f88:	f362 13c7 	bfi	r3, r2, #7, #1
 8002f8c:	763b      	strb	r3, [r7, #24]
        ret = lsm6dsl_write_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t*)&md1_cfg, 1);
 8002f8e:	f107 0218 	add.w	r2, r7, #24
 8002f92:	2301      	movs	r3, #1
 8002f94:	215e      	movs	r1, #94	; 0x5e
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7ff fdf2 	bl	8002b80 <lsm6dsl_write_reg>
 8002f9c:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d107      	bne.n	8002fb4 <lsm6dsl_pin_int1_route_set+0x188>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 8002fa4:	f107 0210 	add.w	r2, r7, #16
 8002fa8:	2301      	movs	r3, #1
 8002faa:	2113      	movs	r1, #19
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f7ff fdcf 	bl	8002b50 <lsm6dsl_read_reg>
 8002fb2:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 8002fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10f      	bne.n	8002fda <lsm6dsl_pin_int1_route_set+0x1ae>
    ctrl4_c.den_drdy_int1 = val.den_drdy_int1;
 8002fba:	78bb      	ldrb	r3, [r7, #2]
 8002fbc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002fc0:	b2da      	uxtb	r2, r3
 8002fc2:	7c3b      	ldrb	r3, [r7, #16]
 8002fc4:	f362 1304 	bfi	r3, r2, #4, #1
 8002fc8:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 8002fca:	f107 0210 	add.w	r2, r7, #16
 8002fce:	2301      	movs	r3, #1
 8002fd0:	2113      	movs	r1, #19
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7ff fdd4 	bl	8002b80 <lsm6dsl_write_reg>
 8002fd8:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 8002fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d107      	bne.n	8002ff0 <lsm6dsl_pin_int1_route_set+0x1c4>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8002fe0:	f107 0220 	add.w	r2, r7, #32
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	211a      	movs	r1, #26
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f7ff fdb1 	bl	8002b50 <lsm6dsl_read_reg>
 8002fee:	6278      	str	r0, [r7, #36]	; 0x24
                           (uint8_t*)&master_config, 1);
  }
  if(ret == 0){
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d111      	bne.n	800301a <lsm6dsl_pin_int1_route_set+0x1ee>
     master_config.drdy_on_int1   = val.den_drdy_int1;
 8002ff6:	78bb      	ldrb	r3, [r7, #2]
 8002ff8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002ffc:	b2da      	uxtb	r2, r3
 8002ffe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003002:	f362 13c7 	bfi	r3, r2, #7, #1
 8003006:	f887 3020 	strb.w	r3, [r7, #32]
     ret = lsm6dsl_write_reg(ctx, LSM6DSL_MASTER_CONFIG,
 800300a:	f107 0220 	add.w	r2, r7, #32
 800300e:	2301      	movs	r3, #1
 8003010:	211a      	movs	r1, #26
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7ff fdb4 	bl	8002b80 <lsm6dsl_write_reg>
 8003018:	6278      	str	r0, [r7, #36]	; 0x24
                             (uint8_t*)&master_config, 1);
  }
  if(ret == 0){
 800301a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301c:	2b00      	cmp	r3, #0
 800301e:	d158      	bne.n	80030d2 <lsm6dsl_pin_int1_route_set+0x2a6>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
 8003020:	f107 020c 	add.w	r2, r7, #12
 8003024:	2301      	movs	r3, #1
 8003026:	2158      	movs	r1, #88	; 0x58
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f7ff fd91 	bl	8002b50 <lsm6dsl_read_reg>
 800302e:	6278      	str	r0, [r7, #36]	; 0x24
    if ((val.int1_6d != 0x00U) ||
 8003030:	787b      	ldrb	r3, [r7, #1]
 8003032:	f003 0304 	and.w	r3, r3, #4
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b00      	cmp	r3, #0
 800303a:	d141      	bne.n	80030c0 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_ff != 0x00U) ||
 800303c:	787b      	ldrb	r3, [r7, #1]
 800303e:	f003 0310 	and.w	r3, r3, #16
 8003042:	b2db      	uxtb	r3, r3
    if ((val.int1_6d != 0x00U) ||
 8003044:	2b00      	cmp	r3, #0
 8003046:	d13b      	bne.n	80030c0 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_wu != 0x00U) ||
 8003048:	787b      	ldrb	r3, [r7, #1]
 800304a:	f003 0320 	and.w	r3, r3, #32
 800304e:	b2db      	uxtb	r3, r3
        (val.int1_ff != 0x00U) ||
 8003050:	2b00      	cmp	r3, #0
 8003052:	d135      	bne.n	80030c0 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_single_tap != 0x00U) ||
 8003054:	787b      	ldrb	r3, [r7, #1]
 8003056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305a:	b2db      	uxtb	r3, r3
        (val.int1_wu != 0x00U) ||
 800305c:	2b00      	cmp	r3, #0
 800305e:	d12f      	bne.n	80030c0 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_double_tap != 0x00U) ||
 8003060:	787b      	ldrb	r3, [r7, #1]
 8003062:	f003 0308 	and.w	r3, r3, #8
 8003066:	b2db      	uxtb	r3, r3
        (val.int1_single_tap != 0x00U) ||
 8003068:	2b00      	cmp	r3, #0
 800306a:	d129      	bne.n	80030c0 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_inact_state != 0x00U)||
 800306c:	787b      	ldrb	r3, [r7, #1]
 800306e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003072:	b2db      	uxtb	r3, r3
        (val.int1_double_tap != 0x00U) ||
 8003074:	2b00      	cmp	r3, #0
 8003076:	d123      	bne.n	80030c0 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_6d != 0x00U) ||
 8003078:	7d3b      	ldrb	r3, [r7, #20]
 800307a:	f003 0304 	and.w	r3, r3, #4
 800307e:	b2db      	uxtb	r3, r3
        (val.int1_inact_state != 0x00U)||
 8003080:	2b00      	cmp	r3, #0
 8003082:	d11d      	bne.n	80030c0 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_ff != 0x00U) ||
 8003084:	7d3b      	ldrb	r3, [r7, #20]
 8003086:	f003 0310 	and.w	r3, r3, #16
 800308a:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_6d != 0x00U) ||
 800308c:	2b00      	cmp	r3, #0
 800308e:	d117      	bne.n	80030c0 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_wu != 0x00U) ||
 8003090:	7d3b      	ldrb	r3, [r7, #20]
 8003092:	f003 0320 	and.w	r3, r3, #32
 8003096:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_ff != 0x00U) ||
 8003098:	2b00      	cmp	r3, #0
 800309a:	d111      	bne.n	80030c0 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_single_tap != 0x00U) ||
 800309c:	7d3b      	ldrb	r3, [r7, #20]
 800309e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a2:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_wu != 0x00U) ||
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d10b      	bne.n	80030c0 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_double_tap != 0x00U) ||
 80030a8:	7d3b      	ldrb	r3, [r7, #20]
 80030aa:	f003 0308 	and.w	r3, r3, #8
 80030ae:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_single_tap != 0x00U) ||
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d105      	bne.n	80030c0 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_inact_state!= 0x00U) ){
 80030b4:	7d3b      	ldrb	r3, [r7, #20]
 80030b6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80030ba:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_double_tap != 0x00U) ||
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d004      	beq.n	80030ca <lsm6dsl_pin_int1_route_set+0x29e>
      tap_cfg.interrupts_enable = PROPERTY_ENABLE;
 80030c0:	7b3b      	ldrb	r3, [r7, #12]
 80030c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030c6:	733b      	strb	r3, [r7, #12]
 80030c8:	e003      	b.n	80030d2 <lsm6dsl_pin_int1_route_set+0x2a6>
    }
    else{
      tap_cfg.interrupts_enable = PROPERTY_DISABLE;
 80030ca:	7b3b      	ldrb	r3, [r7, #12]
 80030cc:	f36f 13c7 	bfc	r3, #7, #1
 80030d0:	733b      	strb	r3, [r7, #12]
    }
  }
  if(ret == 0){    
 80030d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d107      	bne.n	80030e8 <lsm6dsl_pin_int1_route_set+0x2bc>
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
 80030d8:	f107 020c 	add.w	r2, r7, #12
 80030dc:	2301      	movs	r3, #1
 80030de:	2158      	movs	r1, #88	; 0x58
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f7ff fd4d 	bl	8002b80 <lsm6dsl_write_reg>
 80030e6:	6278      	str	r0, [r7, #36]	; 0x24
  }
  return ret;
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3728      	adds	r7, #40	; 0x28
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <lsm6dsl_pin_int1_route_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_get(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t *val)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b088      	sub	sp, #32
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
 80030fa:	6039      	str	r1, [r7, #0]
  lsm6dsl_md1_cfg_t md1_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;

  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t*)&int1_ctrl, 1);
 80030fc:	f107 0214 	add.w	r2, r7, #20
 8003100:	2301      	movs	r3, #1
 8003102:	210d      	movs	r1, #13
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f7ff fd23 	bl	8002b50 <lsm6dsl_read_reg>
 800310a:	61f8      	str	r0, [r7, #28]
  if(ret == 0){
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	2b00      	cmp	r3, #0
 8003110:	f040 80c0 	bne.w	8003294 <lsm6dsl_pin_int1_route_get+0x1a2>
    val->int1_drdy_xl       = int1_ctrl.int1_drdy_xl;
 8003114:	7d3b      	ldrb	r3, [r7, #20]
 8003116:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800311a:	b2d9      	uxtb	r1, r3
 800311c:	683a      	ldr	r2, [r7, #0]
 800311e:	7813      	ldrb	r3, [r2, #0]
 8003120:	f361 0300 	bfi	r3, r1, #0, #1
 8003124:	7013      	strb	r3, [r2, #0]
    val->int1_drdy_g        = int1_ctrl.int1_drdy_g;
 8003126:	7d3b      	ldrb	r3, [r7, #20]
 8003128:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800312c:	b2d9      	uxtb	r1, r3
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	7813      	ldrb	r3, [r2, #0]
 8003132:	f361 0341 	bfi	r3, r1, #1, #1
 8003136:	7013      	strb	r3, [r2, #0]
    val->int1_boot          = int1_ctrl.int1_boot;
 8003138:	7d3b      	ldrb	r3, [r7, #20]
 800313a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800313e:	b2d9      	uxtb	r1, r3
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	7813      	ldrb	r3, [r2, #0]
 8003144:	f361 0382 	bfi	r3, r1, #2, #1
 8003148:	7013      	strb	r3, [r2, #0]
    val->int1_fth           = int1_ctrl.int1_fth;
 800314a:	7d3b      	ldrb	r3, [r7, #20]
 800314c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003150:	b2d9      	uxtb	r1, r3
 8003152:	683a      	ldr	r2, [r7, #0]
 8003154:	7813      	ldrb	r3, [r2, #0]
 8003156:	f361 03c3 	bfi	r3, r1, #3, #1
 800315a:	7013      	strb	r3, [r2, #0]
    val->int1_fifo_ovr      = int1_ctrl.int1_fifo_ovr;
 800315c:	7d3b      	ldrb	r3, [r7, #20]
 800315e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003162:	b2d9      	uxtb	r1, r3
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	7813      	ldrb	r3, [r2, #0]
 8003168:	f361 1304 	bfi	r3, r1, #4, #1
 800316c:	7013      	strb	r3, [r2, #0]
    val->int1_full_flag     = int1_ctrl.int1_full_flag;
 800316e:	7d3b      	ldrb	r3, [r7, #20]
 8003170:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003174:	b2d9      	uxtb	r1, r3
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	7813      	ldrb	r3, [r2, #0]
 800317a:	f361 1345 	bfi	r3, r1, #5, #1
 800317e:	7013      	strb	r3, [r2, #0]
    val->int1_sign_mot      = int1_ctrl.int1_sign_mot;
 8003180:	7d3b      	ldrb	r3, [r7, #20]
 8003182:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003186:	b2d9      	uxtb	r1, r3
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	7813      	ldrb	r3, [r2, #0]
 800318c:	f361 1386 	bfi	r3, r1, #6, #1
 8003190:	7013      	strb	r3, [r2, #0]
    val->int1_step_detector = int1_ctrl.int1_step_detector ;
 8003192:	7d3b      	ldrb	r3, [r7, #20]
 8003194:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003198:	b2d9      	uxtb	r1, r3
 800319a:	683a      	ldr	r2, [r7, #0]
 800319c:	7813      	ldrb	r3, [r2, #0]
 800319e:	f361 13c7 	bfi	r3, r1, #7, #1
 80031a2:	7013      	strb	r3, [r2, #0]

    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t*)&md1_cfg, 1);
 80031a4:	f107 0210 	add.w	r2, r7, #16
 80031a8:	2301      	movs	r3, #1
 80031aa:	215e      	movs	r1, #94	; 0x5e
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f7ff fccf 	bl	8002b50 <lsm6dsl_read_reg>
 80031b2:	61f8      	str	r0, [r7, #28]
    if(ret == 0){
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d16c      	bne.n	8003294 <lsm6dsl_pin_int1_route_get+0x1a2>
    val->int1_timer       = md1_cfg.int1_timer;
 80031ba:	7c3b      	ldrb	r3, [r7, #16]
 80031bc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80031c0:	b2d9      	uxtb	r1, r3
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	7853      	ldrb	r3, [r2, #1]
 80031c6:	f361 0300 	bfi	r3, r1, #0, #1
 80031ca:	7053      	strb	r3, [r2, #1]
    val->int1_tilt        = md1_cfg.int1_tilt;
 80031cc:	7c3b      	ldrb	r3, [r7, #16]
 80031ce:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80031d2:	b2d9      	uxtb	r1, r3
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	7853      	ldrb	r3, [r2, #1]
 80031d8:	f361 0341 	bfi	r3, r1, #1, #1
 80031dc:	7053      	strb	r3, [r2, #1]
    val->int1_6d          = md1_cfg.int1_6d;
 80031de:	7c3b      	ldrb	r3, [r7, #16]
 80031e0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80031e4:	b2d9      	uxtb	r1, r3
 80031e6:	683a      	ldr	r2, [r7, #0]
 80031e8:	7853      	ldrb	r3, [r2, #1]
 80031ea:	f361 0382 	bfi	r3, r1, #2, #1
 80031ee:	7053      	strb	r3, [r2, #1]
    val->int1_double_tap  = md1_cfg.int1_double_tap;
 80031f0:	7c3b      	ldrb	r3, [r7, #16]
 80031f2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80031f6:	b2d9      	uxtb	r1, r3
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	7853      	ldrb	r3, [r2, #1]
 80031fc:	f361 03c3 	bfi	r3, r1, #3, #1
 8003200:	7053      	strb	r3, [r2, #1]
    val->int1_ff          = md1_cfg.int1_ff;
 8003202:	7c3b      	ldrb	r3, [r7, #16]
 8003204:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003208:	b2d9      	uxtb	r1, r3
 800320a:	683a      	ldr	r2, [r7, #0]
 800320c:	7853      	ldrb	r3, [r2, #1]
 800320e:	f361 1304 	bfi	r3, r1, #4, #1
 8003212:	7053      	strb	r3, [r2, #1]
    val->int1_wu          = md1_cfg.int1_wu;
 8003214:	7c3b      	ldrb	r3, [r7, #16]
 8003216:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800321a:	b2d9      	uxtb	r1, r3
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	7853      	ldrb	r3, [r2, #1]
 8003220:	f361 1345 	bfi	r3, r1, #5, #1
 8003224:	7053      	strb	r3, [r2, #1]
    val->int1_single_tap  = md1_cfg.int1_single_tap;
 8003226:	7c3b      	ldrb	r3, [r7, #16]
 8003228:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800322c:	b2d9      	uxtb	r1, r3
 800322e:	683a      	ldr	r2, [r7, #0]
 8003230:	7853      	ldrb	r3, [r2, #1]
 8003232:	f361 1386 	bfi	r3, r1, #6, #1
 8003236:	7053      	strb	r3, [r2, #1]
    val->int1_inact_state = md1_cfg.int1_inact_state;
 8003238:	7c3b      	ldrb	r3, [r7, #16]
 800323a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800323e:	b2d9      	uxtb	r1, r3
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	7853      	ldrb	r3, [r2, #1]
 8003244:	f361 13c7 	bfi	r3, r1, #7, #1
 8003248:	7053      	strb	r3, [r2, #1]

    ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 800324a:	f107 020c 	add.w	r2, r7, #12
 800324e:	2301      	movs	r3, #1
 8003250:	2113      	movs	r1, #19
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f7ff fc7c 	bl	8002b50 <lsm6dsl_read_reg>
 8003258:	61f8      	str	r0, [r7, #28]
      if(ret == 0){
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d119      	bne.n	8003294 <lsm6dsl_pin_int1_route_get+0x1a2>
        val->den_drdy_int1 = ctrl4_c.den_drdy_int1;
 8003260:	7b3b      	ldrb	r3, [r7, #12]
 8003262:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003266:	b2d9      	uxtb	r1, r3
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	7893      	ldrb	r3, [r2, #2]
 800326c:	f361 0300 	bfi	r3, r1, #0, #1
 8003270:	7093      	strb	r3, [r2, #2]
        ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8003272:	f107 0218 	add.w	r2, r7, #24
 8003276:	2301      	movs	r3, #1
 8003278:	211a      	movs	r1, #26
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f7ff fc68 	bl	8002b50 <lsm6dsl_read_reg>
 8003280:	61f8      	str	r0, [r7, #28]
                               (uint8_t*)&master_config, 1);
        val->den_drdy_int1 = master_config.drdy_on_int1;
 8003282:	7e3b      	ldrb	r3, [r7, #24]
 8003284:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003288:	b2d9      	uxtb	r1, r3
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	7893      	ldrb	r3, [r2, #2]
 800328e:	f361 0300 	bfi	r3, r1, #0, #1
 8003292:	7093      	strb	r3, [r2, #2]
      }
    }
  }
  return ret;
 8003294:	69fb      	ldr	r3, [r7, #28]
}
 8003296:	4618      	mov	r0, r3
 8003298:	3720      	adds	r7, #32
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <lsm6dsl_fifo_mode_set>:
  * @param  val    Change the values of fifo_mode in reg FIFO_CTRL5
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dsl_fifo_mode_t val)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b084      	sub	sp, #16
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
 80032a6:	460b      	mov	r3, r1
 80032a8:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 80032aa:	f107 0208 	add.w	r2, r7, #8
 80032ae:	2301      	movs	r3, #1
 80032b0:	210a      	movs	r1, #10
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7ff fc4c 	bl	8002b50 <lsm6dsl_read_reg>
 80032b8:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d10f      	bne.n	80032e0 <lsm6dsl_fifo_mode_set+0x42>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 80032c0:	78fb      	ldrb	r3, [r7, #3]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	b2da      	uxtb	r2, r3
 80032c8:	7a3b      	ldrb	r3, [r7, #8]
 80032ca:	f362 0302 	bfi	r3, r2, #0, #3
 80032ce:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 80032d0:	f107 0208 	add.w	r2, r7, #8
 80032d4:	2301      	movs	r3, #1
 80032d6:	210a      	movs	r1, #10
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f7ff fc51 	bl	8002b80 <lsm6dsl_write_reg>
 80032de:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80032e0:	68fb      	ldr	r3, [r7, #12]
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b082      	sub	sp, #8
 80032ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80032f0:	2300      	movs	r3, #0
 80032f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032f4:	2003      	movs	r0, #3
 80032f6:	f000 f95f 	bl	80035b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80032fa:	2000      	movs	r0, #0
 80032fc:	f000 f80e 	bl	800331c <HAL_InitTick>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d002      	beq.n	800330c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	71fb      	strb	r3, [r7, #7]
 800330a:	e001      	b.n	8003310 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800330c:	f7fe fc1c 	bl	8001b48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003310:	79fb      	ldrb	r3, [r7, #7]
}
 8003312:	4618      	mov	r0, r3
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
	...

0800331c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003324:	2300      	movs	r3, #0
 8003326:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003328:	4b17      	ldr	r3, [pc, #92]	; (8003388 <HAL_InitTick+0x6c>)
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d023      	beq.n	8003378 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003330:	4b16      	ldr	r3, [pc, #88]	; (800338c <HAL_InitTick+0x70>)
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	4b14      	ldr	r3, [pc, #80]	; (8003388 <HAL_InitTick+0x6c>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	4619      	mov	r1, r3
 800333a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800333e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003342:	fbb2 f3f3 	udiv	r3, r2, r3
 8003346:	4618      	mov	r0, r3
 8003348:	f000 f96b 	bl	8003622 <HAL_SYSTICK_Config>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10f      	bne.n	8003372 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2b0f      	cmp	r3, #15
 8003356:	d809      	bhi.n	800336c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003358:	2200      	movs	r2, #0
 800335a:	6879      	ldr	r1, [r7, #4]
 800335c:	f04f 30ff 	mov.w	r0, #4294967295
 8003360:	f000 f935 	bl	80035ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003364:	4a0a      	ldr	r2, [pc, #40]	; (8003390 <HAL_InitTick+0x74>)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6013      	str	r3, [r2, #0]
 800336a:	e007      	b.n	800337c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	73fb      	strb	r3, [r7, #15]
 8003370:	e004      	b.n	800337c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	73fb      	strb	r3, [r7, #15]
 8003376:	e001      	b.n	800337c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800337c:	7bfb      	ldrb	r3, [r7, #15]
}
 800337e:	4618      	mov	r0, r3
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	20000010 	.word	0x20000010
 800338c:	20000008 	.word	0x20000008
 8003390:	2000000c 	.word	0x2000000c

08003394 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003398:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <HAL_IncTick+0x20>)
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	461a      	mov	r2, r3
 800339e:	4b06      	ldr	r3, [pc, #24]	; (80033b8 <HAL_IncTick+0x24>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4413      	add	r3, r2
 80033a4:	4a04      	ldr	r2, [pc, #16]	; (80033b8 <HAL_IncTick+0x24>)
 80033a6:	6013      	str	r3, [r2, #0]
}
 80033a8:	bf00      	nop
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	20000010 	.word	0x20000010
 80033b8:	2000174c 	.word	0x2000174c

080033bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
  return uwTick;
 80033c0:	4b03      	ldr	r3, [pc, #12]	; (80033d0 <HAL_GetTick+0x14>)
 80033c2:	681b      	ldr	r3, [r3, #0]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	2000174c 	.word	0x2000174c

080033d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033dc:	f7ff ffee 	bl	80033bc <HAL_GetTick>
 80033e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ec:	d005      	beq.n	80033fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80033ee:	4b09      	ldr	r3, [pc, #36]	; (8003414 <HAL_Delay+0x40>)
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	461a      	mov	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	4413      	add	r3, r2
 80033f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033fa:	bf00      	nop
 80033fc:	f7ff ffde 	bl	80033bc <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	429a      	cmp	r2, r3
 800340a:	d8f7      	bhi.n	80033fc <HAL_Delay+0x28>
  {
  }
}
 800340c:	bf00      	nop
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	20000010 	.word	0x20000010

08003418 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f003 0307 	and.w	r3, r3, #7
 8003426:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003428:	4b0c      	ldr	r3, [pc, #48]	; (800345c <__NVIC_SetPriorityGrouping+0x44>)
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003434:	4013      	ands	r3, r2
 8003436:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003440:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003444:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003448:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800344a:	4a04      	ldr	r2, [pc, #16]	; (800345c <__NVIC_SetPriorityGrouping+0x44>)
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	60d3      	str	r3, [r2, #12]
}
 8003450:	bf00      	nop
 8003452:	3714      	adds	r7, #20
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr
 800345c:	e000ed00 	.word	0xe000ed00

08003460 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003464:	4b04      	ldr	r3, [pc, #16]	; (8003478 <__NVIC_GetPriorityGrouping+0x18>)
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	0a1b      	lsrs	r3, r3, #8
 800346a:	f003 0307 	and.w	r3, r3, #7
}
 800346e:	4618      	mov	r0, r3
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr
 8003478:	e000ed00 	.word	0xe000ed00

0800347c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	4603      	mov	r3, r0
 8003484:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348a:	2b00      	cmp	r3, #0
 800348c:	db0b      	blt.n	80034a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800348e:	79fb      	ldrb	r3, [r7, #7]
 8003490:	f003 021f 	and.w	r2, r3, #31
 8003494:	4907      	ldr	r1, [pc, #28]	; (80034b4 <__NVIC_EnableIRQ+0x38>)
 8003496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349a:	095b      	lsrs	r3, r3, #5
 800349c:	2001      	movs	r0, #1
 800349e:	fa00 f202 	lsl.w	r2, r0, r2
 80034a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034a6:	bf00      	nop
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	e000e100 	.word	0xe000e100

080034b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	4603      	mov	r3, r0
 80034c0:	6039      	str	r1, [r7, #0]
 80034c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	db0a      	blt.n	80034e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	b2da      	uxtb	r2, r3
 80034d0:	490c      	ldr	r1, [pc, #48]	; (8003504 <__NVIC_SetPriority+0x4c>)
 80034d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d6:	0112      	lsls	r2, r2, #4
 80034d8:	b2d2      	uxtb	r2, r2
 80034da:	440b      	add	r3, r1
 80034dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034e0:	e00a      	b.n	80034f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	4908      	ldr	r1, [pc, #32]	; (8003508 <__NVIC_SetPriority+0x50>)
 80034e8:	79fb      	ldrb	r3, [r7, #7]
 80034ea:	f003 030f 	and.w	r3, r3, #15
 80034ee:	3b04      	subs	r3, #4
 80034f0:	0112      	lsls	r2, r2, #4
 80034f2:	b2d2      	uxtb	r2, r2
 80034f4:	440b      	add	r3, r1
 80034f6:	761a      	strb	r2, [r3, #24]
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr
 8003504:	e000e100 	.word	0xe000e100
 8003508:	e000ed00 	.word	0xe000ed00

0800350c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800350c:	b480      	push	{r7}
 800350e:	b089      	sub	sp, #36	; 0x24
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f003 0307 	and.w	r3, r3, #7
 800351e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	f1c3 0307 	rsb	r3, r3, #7
 8003526:	2b04      	cmp	r3, #4
 8003528:	bf28      	it	cs
 800352a:	2304      	movcs	r3, #4
 800352c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	3304      	adds	r3, #4
 8003532:	2b06      	cmp	r3, #6
 8003534:	d902      	bls.n	800353c <NVIC_EncodePriority+0x30>
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	3b03      	subs	r3, #3
 800353a:	e000      	b.n	800353e <NVIC_EncodePriority+0x32>
 800353c:	2300      	movs	r3, #0
 800353e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003540:	f04f 32ff 	mov.w	r2, #4294967295
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	fa02 f303 	lsl.w	r3, r2, r3
 800354a:	43da      	mvns	r2, r3
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	401a      	ands	r2, r3
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003554:	f04f 31ff 	mov.w	r1, #4294967295
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	fa01 f303 	lsl.w	r3, r1, r3
 800355e:	43d9      	mvns	r1, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003564:	4313      	orrs	r3, r2
         );
}
 8003566:	4618      	mov	r0, r3
 8003568:	3724      	adds	r7, #36	; 0x24
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
	...

08003574 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	3b01      	subs	r3, #1
 8003580:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003584:	d301      	bcc.n	800358a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003586:	2301      	movs	r3, #1
 8003588:	e00f      	b.n	80035aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800358a:	4a0a      	ldr	r2, [pc, #40]	; (80035b4 <SysTick_Config+0x40>)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	3b01      	subs	r3, #1
 8003590:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003592:	210f      	movs	r1, #15
 8003594:	f04f 30ff 	mov.w	r0, #4294967295
 8003598:	f7ff ff8e 	bl	80034b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800359c:	4b05      	ldr	r3, [pc, #20]	; (80035b4 <SysTick_Config+0x40>)
 800359e:	2200      	movs	r2, #0
 80035a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035a2:	4b04      	ldr	r3, [pc, #16]	; (80035b4 <SysTick_Config+0x40>)
 80035a4:	2207      	movs	r2, #7
 80035a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	e000e010 	.word	0xe000e010

080035b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f7ff ff29 	bl	8003418 <__NVIC_SetPriorityGrouping>
}
 80035c6:	bf00      	nop
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b086      	sub	sp, #24
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	4603      	mov	r3, r0
 80035d6:	60b9      	str	r1, [r7, #8]
 80035d8:	607a      	str	r2, [r7, #4]
 80035da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80035dc:	2300      	movs	r3, #0
 80035de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035e0:	f7ff ff3e 	bl	8003460 <__NVIC_GetPriorityGrouping>
 80035e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	68b9      	ldr	r1, [r7, #8]
 80035ea:	6978      	ldr	r0, [r7, #20]
 80035ec:	f7ff ff8e 	bl	800350c <NVIC_EncodePriority>
 80035f0:	4602      	mov	r2, r0
 80035f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035f6:	4611      	mov	r1, r2
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7ff ff5d 	bl	80034b8 <__NVIC_SetPriority>
}
 80035fe:	bf00      	nop
 8003600:	3718      	adds	r7, #24
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b082      	sub	sp, #8
 800360a:	af00      	add	r7, sp, #0
 800360c:	4603      	mov	r3, r0
 800360e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003614:	4618      	mov	r0, r3
 8003616:	f7ff ff31 	bl	800347c <__NVIC_EnableIRQ>
}
 800361a:	bf00      	nop
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b082      	sub	sp, #8
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7ff ffa2 	bl	8003574 <SysTick_Config>
 8003630:	4603      	mov	r3, r0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
	...

0800363c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e054      	b.n	80036f8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	7f5b      	ldrb	r3, [r3, #29]
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b00      	cmp	r3, #0
 8003656:	d105      	bne.n	8003664 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f7fd fc94 	bl	8000f8c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2202      	movs	r2, #2
 8003668:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	791b      	ldrb	r3, [r3, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10c      	bne.n	800368c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a22      	ldr	r2, [pc, #136]	; (8003700 <HAL_CRC_Init+0xc4>)
 8003678:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 0218 	bic.w	r2, r2, #24
 8003688:	609a      	str	r2, [r3, #8]
 800368a:	e00c      	b.n	80036a6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6899      	ldr	r1, [r3, #8]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	461a      	mov	r2, r3
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f834 	bl	8003704 <HAL_CRCEx_Polynomial_Set>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e028      	b.n	80036f8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	795b      	ldrb	r3, [r3, #5]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d105      	bne.n	80036ba <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f04f 32ff 	mov.w	r2, #4294967295
 80036b6:	611a      	str	r2, [r3, #16]
 80036b8:	e004      	b.n	80036c4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	6912      	ldr	r2, [r2, #16]
 80036c2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	695a      	ldr	r2, [r3, #20]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	699a      	ldr	r2, [r3, #24]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3708      	adds	r7, #8
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	04c11db7 	.word	0x04c11db7

08003704 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003704:	b480      	push	{r7}
 8003706:	b087      	sub	sp, #28
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003710:	2300      	movs	r3, #0
 8003712:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003714:	231f      	movs	r3, #31
 8003716:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003718:	bf00      	nop
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1e5a      	subs	r2, r3, #1
 800371e:	613a      	str	r2, [r7, #16]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d009      	beq.n	8003738 <HAL_CRCEx_Polynomial_Set+0x34>
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	f003 031f 	and.w	r3, r3, #31
 800372a:	68ba      	ldr	r2, [r7, #8]
 800372c:	fa22 f303 	lsr.w	r3, r2, r3
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	2b00      	cmp	r3, #0
 8003736:	d0f0      	beq.n	800371a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b18      	cmp	r3, #24
 800373c:	d846      	bhi.n	80037cc <HAL_CRCEx_Polynomial_Set+0xc8>
 800373e:	a201      	add	r2, pc, #4	; (adr r2, 8003744 <HAL_CRCEx_Polynomial_Set+0x40>)
 8003740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003744:	080037d3 	.word	0x080037d3
 8003748:	080037cd 	.word	0x080037cd
 800374c:	080037cd 	.word	0x080037cd
 8003750:	080037cd 	.word	0x080037cd
 8003754:	080037cd 	.word	0x080037cd
 8003758:	080037cd 	.word	0x080037cd
 800375c:	080037cd 	.word	0x080037cd
 8003760:	080037cd 	.word	0x080037cd
 8003764:	080037c1 	.word	0x080037c1
 8003768:	080037cd 	.word	0x080037cd
 800376c:	080037cd 	.word	0x080037cd
 8003770:	080037cd 	.word	0x080037cd
 8003774:	080037cd 	.word	0x080037cd
 8003778:	080037cd 	.word	0x080037cd
 800377c:	080037cd 	.word	0x080037cd
 8003780:	080037cd 	.word	0x080037cd
 8003784:	080037b5 	.word	0x080037b5
 8003788:	080037cd 	.word	0x080037cd
 800378c:	080037cd 	.word	0x080037cd
 8003790:	080037cd 	.word	0x080037cd
 8003794:	080037cd 	.word	0x080037cd
 8003798:	080037cd 	.word	0x080037cd
 800379c:	080037cd 	.word	0x080037cd
 80037a0:	080037cd 	.word	0x080037cd
 80037a4:	080037a9 	.word	0x080037a9
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	2b06      	cmp	r3, #6
 80037ac:	d913      	bls.n	80037d6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80037b2:	e010      	b.n	80037d6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	2b07      	cmp	r3, #7
 80037b8:	d90f      	bls.n	80037da <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80037be:	e00c      	b.n	80037da <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	2b0f      	cmp	r3, #15
 80037c4:	d90b      	bls.n	80037de <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80037ca:	e008      	b.n	80037de <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	75fb      	strb	r3, [r7, #23]
      break;
 80037d0:	e006      	b.n	80037e0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80037d2:	bf00      	nop
 80037d4:	e004      	b.n	80037e0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80037d6:	bf00      	nop
 80037d8:	e002      	b.n	80037e0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80037da:	bf00      	nop
 80037dc:	e000      	b.n	80037e0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80037de:	bf00      	nop
  }
  if (status == HAL_OK)
 80037e0:	7dfb      	ldrb	r3, [r7, #23]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d10d      	bne.n	8003802 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68ba      	ldr	r2, [r7, #8]
 80037ec:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f023 0118 	bic.w	r1, r3, #24
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	430a      	orrs	r2, r1
 8003800:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003802:	7dfb      	ldrb	r3, [r7, #23]
}
 8003804:	4618      	mov	r0, r3
 8003806:	371c      	adds	r7, #28
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e0ac      	b.n	800397c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4618      	mov	r0, r3
 8003828:	f000 f8b2 	bl	8003990 <DFSDM_GetChannelFromInstance>
 800382c:	4602      	mov	r2, r0
 800382e:	4b55      	ldr	r3, [pc, #340]	; (8003984 <HAL_DFSDM_ChannelInit+0x174>)
 8003830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d001      	beq.n	800383c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e09f      	b.n	800397c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f7fd fbfd 	bl	800103c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003842:	4b51      	ldr	r3, [pc, #324]	; (8003988 <HAL_DFSDM_ChannelInit+0x178>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	3301      	adds	r3, #1
 8003848:	4a4f      	ldr	r2, [pc, #316]	; (8003988 <HAL_DFSDM_ChannelInit+0x178>)
 800384a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 800384c:	4b4e      	ldr	r3, [pc, #312]	; (8003988 <HAL_DFSDM_ChannelInit+0x178>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d125      	bne.n	80038a0 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003854:	4b4d      	ldr	r3, [pc, #308]	; (800398c <HAL_DFSDM_ChannelInit+0x17c>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a4c      	ldr	r2, [pc, #304]	; (800398c <HAL_DFSDM_ChannelInit+0x17c>)
 800385a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800385e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003860:	4b4a      	ldr	r3, [pc, #296]	; (800398c <HAL_DFSDM_ChannelInit+0x17c>)
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	4948      	ldr	r1, [pc, #288]	; (800398c <HAL_DFSDM_ChannelInit+0x17c>)
 800386a:	4313      	orrs	r3, r2
 800386c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800386e:	4b47      	ldr	r3, [pc, #284]	; (800398c <HAL_DFSDM_ChannelInit+0x17c>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a46      	ldr	r2, [pc, #280]	; (800398c <HAL_DFSDM_ChannelInit+0x17c>)
 8003874:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003878:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	791b      	ldrb	r3, [r3, #4]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d108      	bne.n	8003894 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003882:	4b42      	ldr	r3, [pc, #264]	; (800398c <HAL_DFSDM_ChannelInit+0x17c>)
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	3b01      	subs	r3, #1
 800388c:	041b      	lsls	r3, r3, #16
 800388e:	493f      	ldr	r1, [pc, #252]	; (800398c <HAL_DFSDM_ChannelInit+0x17c>)
 8003890:	4313      	orrs	r3, r2
 8003892:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003894:	4b3d      	ldr	r3, [pc, #244]	; (800398c <HAL_DFSDM_ChannelInit+0x17c>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a3c      	ldr	r2, [pc, #240]	; (800398c <HAL_DFSDM_ChannelInit+0x17c>)
 800389a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800389e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80038ae:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6819      	ldr	r1, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80038be:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80038c4:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 020f 	bic.w	r2, r2, #15
 80038dc:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	6819      	ldr	r1, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80038ec:	431a      	orrs	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	430a      	orrs	r2, r1
 80038f4:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689a      	ldr	r2, [r3, #8]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8003904:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	6899      	ldr	r1, [r3, #8]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003914:	3b01      	subs	r3, #1
 8003916:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003918:	431a      	orrs	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	430a      	orrs	r2, r1
 8003920:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	685a      	ldr	r2, [r3, #4]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f002 0207 	and.w	r2, r2, #7
 8003930:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	6859      	ldr	r1, [r3, #4]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003942:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003944:	431a      	orrs	r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800395c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4618      	mov	r0, r3
 800396c:	f000 f810 	bl	8003990 <DFSDM_GetChannelFromInstance>
 8003970:	4601      	mov	r1, r0
 8003972:	4a04      	ldr	r2, [pc, #16]	; (8003984 <HAL_DFSDM_ChannelInit+0x174>)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	3708      	adds	r7, #8
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	2000081c 	.word	0x2000081c
 8003988:	20000818 	.word	0x20000818
 800398c:	40016000 	.word	0x40016000

08003990 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a1c      	ldr	r2, [pc, #112]	; (8003a0c <DFSDM_GetChannelFromInstance+0x7c>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d102      	bne.n	80039a6 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80039a0:	2300      	movs	r3, #0
 80039a2:	60fb      	str	r3, [r7, #12]
 80039a4:	e02b      	b.n	80039fe <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a19      	ldr	r2, [pc, #100]	; (8003a10 <DFSDM_GetChannelFromInstance+0x80>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d102      	bne.n	80039b4 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80039ae:	2301      	movs	r3, #1
 80039b0:	60fb      	str	r3, [r7, #12]
 80039b2:	e024      	b.n	80039fe <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a17      	ldr	r2, [pc, #92]	; (8003a14 <DFSDM_GetChannelFromInstance+0x84>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d102      	bne.n	80039c2 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80039bc:	2302      	movs	r3, #2
 80039be:	60fb      	str	r3, [r7, #12]
 80039c0:	e01d      	b.n	80039fe <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a14      	ldr	r2, [pc, #80]	; (8003a18 <DFSDM_GetChannelFromInstance+0x88>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d102      	bne.n	80039d0 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80039ca:	2304      	movs	r3, #4
 80039cc:	60fb      	str	r3, [r7, #12]
 80039ce:	e016      	b.n	80039fe <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a12      	ldr	r2, [pc, #72]	; (8003a1c <DFSDM_GetChannelFromInstance+0x8c>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d102      	bne.n	80039de <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80039d8:	2305      	movs	r3, #5
 80039da:	60fb      	str	r3, [r7, #12]
 80039dc:	e00f      	b.n	80039fe <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a0f      	ldr	r2, [pc, #60]	; (8003a20 <DFSDM_GetChannelFromInstance+0x90>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d102      	bne.n	80039ec <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80039e6:	2306      	movs	r3, #6
 80039e8:	60fb      	str	r3, [r7, #12]
 80039ea:	e008      	b.n	80039fe <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a0d      	ldr	r2, [pc, #52]	; (8003a24 <DFSDM_GetChannelFromInstance+0x94>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d102      	bne.n	80039fa <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80039f4:	2307      	movs	r3, #7
 80039f6:	60fb      	str	r3, [r7, #12]
 80039f8:	e001      	b.n	80039fe <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80039fa:	2303      	movs	r3, #3
 80039fc:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80039fe:	68fb      	ldr	r3, [r7, #12]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3714      	adds	r7, #20
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr
 8003a0c:	40016000 	.word	0x40016000
 8003a10:	40016020 	.word	0x40016020
 8003a14:	40016040 	.word	0x40016040
 8003a18:	40016080 	.word	0x40016080
 8003a1c:	400160a0 	.word	0x400160a0
 8003a20:	400160c0 	.word	0x400160c0
 8003a24:	400160e0 	.word	0x400160e0

08003a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b087      	sub	sp, #28
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a32:	2300      	movs	r3, #0
 8003a34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a36:	e17f      	b.n	8003d38 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	2101      	movs	r1, #1
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	fa01 f303 	lsl.w	r3, r1, r3
 8003a44:	4013      	ands	r3, r2
 8003a46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	f000 8171 	beq.w	8003d32 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d00b      	beq.n	8003a70 <HAL_GPIO_Init+0x48>
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d007      	beq.n	8003a70 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a64:	2b11      	cmp	r3, #17
 8003a66:	d003      	beq.n	8003a70 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	2b12      	cmp	r3, #18
 8003a6e:	d130      	bne.n	8003ad2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	2203      	movs	r2, #3
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	43db      	mvns	r3, r3
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	4013      	ands	r3, r2
 8003a86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	68da      	ldr	r2, [r3, #12]
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	005b      	lsls	r3, r3, #1
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003aae:	43db      	mvns	r3, r3
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	091b      	lsrs	r3, r3, #4
 8003abc:	f003 0201 	and.w	r2, r3, #1
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f003 0303 	and.w	r3, r3, #3
 8003ada:	2b03      	cmp	r3, #3
 8003adc:	d118      	bne.n	8003b10 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	43db      	mvns	r3, r3
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	4013      	ands	r3, r2
 8003af2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	08db      	lsrs	r3, r3, #3
 8003afa:	f003 0201 	and.w	r2, r3, #1
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	fa02 f303 	lsl.w	r3, r2, r3
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	005b      	lsls	r3, r3, #1
 8003b1a:	2203      	movs	r2, #3
 8003b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b20:	43db      	mvns	r3, r3
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	4013      	ands	r3, r2
 8003b26:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	005b      	lsls	r3, r3, #1
 8003b30:	fa02 f303 	lsl.w	r3, r2, r3
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d003      	beq.n	8003b50 <HAL_GPIO_Init+0x128>
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	2b12      	cmp	r3, #18
 8003b4e:	d123      	bne.n	8003b98 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	08da      	lsrs	r2, r3, #3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	3208      	adds	r2, #8
 8003b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	f003 0307 	and.w	r3, r3, #7
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	220f      	movs	r2, #15
 8003b68:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6c:	43db      	mvns	r3, r3
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	4013      	ands	r3, r2
 8003b72:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	691a      	ldr	r2, [r3, #16]
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	f003 0307 	and.w	r3, r3, #7
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	fa02 f303 	lsl.w	r3, r2, r3
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	08da      	lsrs	r2, r3, #3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	3208      	adds	r2, #8
 8003b92:	6939      	ldr	r1, [r7, #16]
 8003b94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	2203      	movs	r2, #3
 8003ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba8:	43db      	mvns	r3, r3
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	4013      	ands	r3, r2
 8003bae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f003 0203 	and.w	r2, r3, #3
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 80ac 	beq.w	8003d32 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bda:	4b5e      	ldr	r3, [pc, #376]	; (8003d54 <HAL_GPIO_Init+0x32c>)
 8003bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bde:	4a5d      	ldr	r2, [pc, #372]	; (8003d54 <HAL_GPIO_Init+0x32c>)
 8003be0:	f043 0301 	orr.w	r3, r3, #1
 8003be4:	6613      	str	r3, [r2, #96]	; 0x60
 8003be6:	4b5b      	ldr	r3, [pc, #364]	; (8003d54 <HAL_GPIO_Init+0x32c>)
 8003be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	60bb      	str	r3, [r7, #8]
 8003bf0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003bf2:	4a59      	ldr	r2, [pc, #356]	; (8003d58 <HAL_GPIO_Init+0x330>)
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	089b      	lsrs	r3, r3, #2
 8003bf8:	3302      	adds	r3, #2
 8003bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	f003 0303 	and.w	r3, r3, #3
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	220f      	movs	r2, #15
 8003c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0e:	43db      	mvns	r3, r3
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	4013      	ands	r3, r2
 8003c14:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003c1c:	d025      	beq.n	8003c6a <HAL_GPIO_Init+0x242>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a4e      	ldr	r2, [pc, #312]	; (8003d5c <HAL_GPIO_Init+0x334>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d01f      	beq.n	8003c66 <HAL_GPIO_Init+0x23e>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a4d      	ldr	r2, [pc, #308]	; (8003d60 <HAL_GPIO_Init+0x338>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d019      	beq.n	8003c62 <HAL_GPIO_Init+0x23a>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a4c      	ldr	r2, [pc, #304]	; (8003d64 <HAL_GPIO_Init+0x33c>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d013      	beq.n	8003c5e <HAL_GPIO_Init+0x236>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a4b      	ldr	r2, [pc, #300]	; (8003d68 <HAL_GPIO_Init+0x340>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d00d      	beq.n	8003c5a <HAL_GPIO_Init+0x232>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a4a      	ldr	r2, [pc, #296]	; (8003d6c <HAL_GPIO_Init+0x344>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d007      	beq.n	8003c56 <HAL_GPIO_Init+0x22e>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a49      	ldr	r2, [pc, #292]	; (8003d70 <HAL_GPIO_Init+0x348>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d101      	bne.n	8003c52 <HAL_GPIO_Init+0x22a>
 8003c4e:	2306      	movs	r3, #6
 8003c50:	e00c      	b.n	8003c6c <HAL_GPIO_Init+0x244>
 8003c52:	2307      	movs	r3, #7
 8003c54:	e00a      	b.n	8003c6c <HAL_GPIO_Init+0x244>
 8003c56:	2305      	movs	r3, #5
 8003c58:	e008      	b.n	8003c6c <HAL_GPIO_Init+0x244>
 8003c5a:	2304      	movs	r3, #4
 8003c5c:	e006      	b.n	8003c6c <HAL_GPIO_Init+0x244>
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e004      	b.n	8003c6c <HAL_GPIO_Init+0x244>
 8003c62:	2302      	movs	r3, #2
 8003c64:	e002      	b.n	8003c6c <HAL_GPIO_Init+0x244>
 8003c66:	2301      	movs	r3, #1
 8003c68:	e000      	b.n	8003c6c <HAL_GPIO_Init+0x244>
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	f002 0203 	and.w	r2, r2, #3
 8003c72:	0092      	lsls	r2, r2, #2
 8003c74:	4093      	lsls	r3, r2
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c7c:	4936      	ldr	r1, [pc, #216]	; (8003d58 <HAL_GPIO_Init+0x330>)
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	089b      	lsrs	r3, r3, #2
 8003c82:	3302      	adds	r3, #2
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003c8a:	4b3a      	ldr	r3, [pc, #232]	; (8003d74 <HAL_GPIO_Init+0x34c>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	43db      	mvns	r3, r3
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	4013      	ands	r3, r2
 8003c98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003cae:	4a31      	ldr	r2, [pc, #196]	; (8003d74 <HAL_GPIO_Init+0x34c>)
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003cb4:	4b2f      	ldr	r3, [pc, #188]	; (8003d74 <HAL_GPIO_Init+0x34c>)
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	43db      	mvns	r3, r3
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d003      	beq.n	8003cd8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003cd8:	4a26      	ldr	r2, [pc, #152]	; (8003d74 <HAL_GPIO_Init+0x34c>)
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003cde:	4b25      	ldr	r3, [pc, #148]	; (8003d74 <HAL_GPIO_Init+0x34c>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	43db      	mvns	r3, r3
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	4013      	ands	r3, r2
 8003cec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d02:	4a1c      	ldr	r2, [pc, #112]	; (8003d74 <HAL_GPIO_Init+0x34c>)
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003d08:	4b1a      	ldr	r3, [pc, #104]	; (8003d74 <HAL_GPIO_Init+0x34c>)
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	43db      	mvns	r3, r3
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	4013      	ands	r3, r2
 8003d16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d003      	beq.n	8003d2c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003d2c:	4a11      	ldr	r2, [pc, #68]	; (8003d74 <HAL_GPIO_Init+0x34c>)
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	3301      	adds	r3, #1
 8003d36:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f47f ae78 	bne.w	8003a38 <HAL_GPIO_Init+0x10>
  }
}
 8003d48:	bf00      	nop
 8003d4a:	371c      	adds	r7, #28
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr
 8003d54:	40021000 	.word	0x40021000
 8003d58:	40010000 	.word	0x40010000
 8003d5c:	48000400 	.word	0x48000400
 8003d60:	48000800 	.word	0x48000800
 8003d64:	48000c00 	.word	0x48000c00
 8003d68:	48001000 	.word	0x48001000
 8003d6c:	48001400 	.word	0x48001400
 8003d70:	48001800 	.word	0x48001800
 8003d74:	40010400 	.word	0x40010400

08003d78 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b087      	sub	sp, #28
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d82:	2300      	movs	r3, #0
 8003d84:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003d86:	e0cd      	b.n	8003f24 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003d88:	2201      	movs	r2, #1
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	4013      	ands	r3, r2
 8003d94:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f000 80c0 	beq.w	8003f1e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003d9e:	4a68      	ldr	r2, [pc, #416]	; (8003f40 <HAL_GPIO_DeInit+0x1c8>)
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	089b      	lsrs	r3, r3, #2
 8003da4:	3302      	adds	r3, #2
 8003da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003daa:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	f003 0303 	and.w	r3, r3, #3
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	220f      	movs	r2, #15
 8003db6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003dc6:	d025      	beq.n	8003e14 <HAL_GPIO_DeInit+0x9c>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a5e      	ldr	r2, [pc, #376]	; (8003f44 <HAL_GPIO_DeInit+0x1cc>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d01f      	beq.n	8003e10 <HAL_GPIO_DeInit+0x98>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a5d      	ldr	r2, [pc, #372]	; (8003f48 <HAL_GPIO_DeInit+0x1d0>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d019      	beq.n	8003e0c <HAL_GPIO_DeInit+0x94>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a5c      	ldr	r2, [pc, #368]	; (8003f4c <HAL_GPIO_DeInit+0x1d4>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d013      	beq.n	8003e08 <HAL_GPIO_DeInit+0x90>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a5b      	ldr	r2, [pc, #364]	; (8003f50 <HAL_GPIO_DeInit+0x1d8>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d00d      	beq.n	8003e04 <HAL_GPIO_DeInit+0x8c>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a5a      	ldr	r2, [pc, #360]	; (8003f54 <HAL_GPIO_DeInit+0x1dc>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d007      	beq.n	8003e00 <HAL_GPIO_DeInit+0x88>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a59      	ldr	r2, [pc, #356]	; (8003f58 <HAL_GPIO_DeInit+0x1e0>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d101      	bne.n	8003dfc <HAL_GPIO_DeInit+0x84>
 8003df8:	2306      	movs	r3, #6
 8003dfa:	e00c      	b.n	8003e16 <HAL_GPIO_DeInit+0x9e>
 8003dfc:	2307      	movs	r3, #7
 8003dfe:	e00a      	b.n	8003e16 <HAL_GPIO_DeInit+0x9e>
 8003e00:	2305      	movs	r3, #5
 8003e02:	e008      	b.n	8003e16 <HAL_GPIO_DeInit+0x9e>
 8003e04:	2304      	movs	r3, #4
 8003e06:	e006      	b.n	8003e16 <HAL_GPIO_DeInit+0x9e>
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e004      	b.n	8003e16 <HAL_GPIO_DeInit+0x9e>
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	e002      	b.n	8003e16 <HAL_GPIO_DeInit+0x9e>
 8003e10:	2301      	movs	r3, #1
 8003e12:	e000      	b.n	8003e16 <HAL_GPIO_DeInit+0x9e>
 8003e14:	2300      	movs	r3, #0
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	f002 0203 	and.w	r2, r2, #3
 8003e1c:	0092      	lsls	r2, r2, #2
 8003e1e:	4093      	lsls	r3, r2
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d132      	bne.n	8003e8c <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003e26:	4b4d      	ldr	r3, [pc, #308]	; (8003f5c <HAL_GPIO_DeInit+0x1e4>)
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	43db      	mvns	r3, r3
 8003e2e:	494b      	ldr	r1, [pc, #300]	; (8003f5c <HAL_GPIO_DeInit+0x1e4>)
 8003e30:	4013      	ands	r3, r2
 8003e32:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003e34:	4b49      	ldr	r3, [pc, #292]	; (8003f5c <HAL_GPIO_DeInit+0x1e4>)
 8003e36:	685a      	ldr	r2, [r3, #4]
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	43db      	mvns	r3, r3
 8003e3c:	4947      	ldr	r1, [pc, #284]	; (8003f5c <HAL_GPIO_DeInit+0x1e4>)
 8003e3e:	4013      	ands	r3, r2
 8003e40:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8003e42:	4b46      	ldr	r3, [pc, #280]	; (8003f5c <HAL_GPIO_DeInit+0x1e4>)
 8003e44:	689a      	ldr	r2, [r3, #8]
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	43db      	mvns	r3, r3
 8003e4a:	4944      	ldr	r1, [pc, #272]	; (8003f5c <HAL_GPIO_DeInit+0x1e4>)
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8003e50:	4b42      	ldr	r3, [pc, #264]	; (8003f5c <HAL_GPIO_DeInit+0x1e4>)
 8003e52:	68da      	ldr	r2, [r3, #12]
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	43db      	mvns	r3, r3
 8003e58:	4940      	ldr	r1, [pc, #256]	; (8003f5c <HAL_GPIO_DeInit+0x1e4>)
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	f003 0303 	and.w	r3, r3, #3
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	220f      	movs	r2, #15
 8003e68:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003e6e:	4a34      	ldr	r2, [pc, #208]	; (8003f40 <HAL_GPIO_DeInit+0x1c8>)
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	089b      	lsrs	r3, r3, #2
 8003e74:	3302      	adds	r3, #2
 8003e76:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	43da      	mvns	r2, r3
 8003e7e:	4830      	ldr	r0, [pc, #192]	; (8003f40 <HAL_GPIO_DeInit+0x1c8>)
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	089b      	lsrs	r3, r3, #2
 8003e84:	400a      	ands	r2, r1
 8003e86:	3302      	adds	r3, #2
 8003e88:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	2103      	movs	r1, #3
 8003e96:	fa01 f303 	lsl.w	r3, r1, r3
 8003e9a:	431a      	orrs	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	08da      	lsrs	r2, r3, #3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	3208      	adds	r2, #8
 8003ea8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	f003 0307 	and.w	r3, r3, #7
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	220f      	movs	r2, #15
 8003eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eba:	43db      	mvns	r3, r3
 8003ebc:	697a      	ldr	r2, [r7, #20]
 8003ebe:	08d2      	lsrs	r2, r2, #3
 8003ec0:	4019      	ands	r1, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	3208      	adds	r2, #8
 8003ec6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	689a      	ldr	r2, [r3, #8]
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	2103      	movs	r1, #3
 8003ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed8:	43db      	mvns	r3, r3
 8003eda:	401a      	ands	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	2101      	movs	r1, #1
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8003eec:	43db      	mvns	r3, r3
 8003eee:	401a      	ands	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	68da      	ldr	r2, [r3, #12]
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	005b      	lsls	r3, r3, #1
 8003efc:	2103      	movs	r1, #3
 8003efe:	fa01 f303 	lsl.w	r3, r1, r3
 8003f02:	43db      	mvns	r3, r3
 8003f04:	401a      	ands	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f0e:	2101      	movs	r1, #1
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	fa01 f303 	lsl.w	r3, r1, r3
 8003f16:	43db      	mvns	r3, r3
 8003f18:	401a      	ands	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	3301      	adds	r3, #1
 8003f22:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003f24:	683a      	ldr	r2, [r7, #0]
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	fa22 f303 	lsr.w	r3, r2, r3
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f47f af2b 	bne.w	8003d88 <HAL_GPIO_DeInit+0x10>
  }
}
 8003f32:	bf00      	nop
 8003f34:	371c      	adds	r7, #28
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	40010000 	.word	0x40010000
 8003f44:	48000400 	.word	0x48000400
 8003f48:	48000800 	.word	0x48000800
 8003f4c:	48000c00 	.word	0x48000c00
 8003f50:	48001000 	.word	0x48001000
 8003f54:	48001400 	.word	0x48001400
 8003f58:	48001800 	.word	0x48001800
 8003f5c:	40010400 	.word	0x40010400

08003f60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	460b      	mov	r3, r1
 8003f6a:	807b      	strh	r3, [r7, #2]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f70:	787b      	ldrb	r3, [r7, #1]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d003      	beq.n	8003f7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f76:	887a      	ldrh	r2, [r7, #2]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f7c:	e002      	b.n	8003f84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f7e:	887a      	ldrh	r2, [r7, #2]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	4603      	mov	r3, r0
 8003f98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003f9a:	4b08      	ldr	r3, [pc, #32]	; (8003fbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f9c:	695a      	ldr	r2, [r3, #20]
 8003f9e:	88fb      	ldrh	r3, [r7, #6]
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d006      	beq.n	8003fb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003fa6:	4a05      	ldr	r2, [pc, #20]	; (8003fbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fa8:	88fb      	ldrh	r3, [r7, #6]
 8003faa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003fac:	88fb      	ldrh	r3, [r7, #6]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7fd fcc4 	bl	800193c <HAL_GPIO_EXTI_Callback>
  }
}
 8003fb4:	bf00      	nop
 8003fb6:	3708      	adds	r7, #8
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	40010400 	.word	0x40010400

08003fc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e081      	b.n	80040d6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d106      	bne.n	8003fec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 f8a8 	bl	800413c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2224      	movs	r2, #36	; 0x24
 8003ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 0201 	bic.w	r2, r2, #1
 8004002:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004010:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	689a      	ldr	r2, [r3, #8]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004020:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d107      	bne.n	800403a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	689a      	ldr	r2, [r3, #8]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004036:	609a      	str	r2, [r3, #8]
 8004038:	e006      	b.n	8004048 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689a      	ldr	r2, [r3, #8]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004046:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	2b02      	cmp	r3, #2
 800404e:	d104      	bne.n	800405a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004058:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	6812      	ldr	r2, [r2, #0]
 8004064:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004068:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800406c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68da      	ldr	r2, [r3, #12]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800407c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	691a      	ldr	r2, [r3, #16]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	ea42 0103 	orr.w	r1, r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	021a      	lsls	r2, r3, #8
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	430a      	orrs	r2, r1
 8004096:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	69d9      	ldr	r1, [r3, #28]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a1a      	ldr	r2, [r3, #32]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	430a      	orrs	r2, r1
 80040a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f042 0201 	orr.w	r2, r2, #1
 80040b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2220      	movs	r2, #32
 80040c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3708      	adds	r7, #8
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b082      	sub	sp, #8
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d101      	bne.n	80040f0 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e021      	b.n	8004134 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2224      	movs	r2, #36	; 0x24
 80040f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f022 0201 	bic.w	r2, r2, #1
 8004106:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 f821 	bl	8004150 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	4618      	mov	r0, r3
 8004136:	3708      	adds	r7, #8
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b088      	sub	sp, #32
 8004168:	af02      	add	r7, sp, #8
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	4608      	mov	r0, r1
 800416e:	4611      	mov	r1, r2
 8004170:	461a      	mov	r2, r3
 8004172:	4603      	mov	r3, r0
 8004174:	817b      	strh	r3, [r7, #10]
 8004176:	460b      	mov	r3, r1
 8004178:	813b      	strh	r3, [r7, #8]
 800417a:	4613      	mov	r3, r2
 800417c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b20      	cmp	r3, #32
 8004188:	f040 80f9 	bne.w	800437e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800418c:	6a3b      	ldr	r3, [r7, #32]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d002      	beq.n	8004198 <HAL_I2C_Mem_Write+0x34>
 8004192:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004194:	2b00      	cmp	r3, #0
 8004196:	d105      	bne.n	80041a4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800419e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e0ed      	b.n	8004380 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d101      	bne.n	80041b2 <HAL_I2C_Mem_Write+0x4e>
 80041ae:	2302      	movs	r3, #2
 80041b0:	e0e6      	b.n	8004380 <HAL_I2C_Mem_Write+0x21c>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80041ba:	f7ff f8ff 	bl	80033bc <HAL_GetTick>
 80041be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	9300      	str	r3, [sp, #0]
 80041c4:	2319      	movs	r3, #25
 80041c6:	2201      	movs	r2, #1
 80041c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	f000 fadd 	bl	800478c <I2C_WaitOnFlagUntilTimeout>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d001      	beq.n	80041dc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e0d1      	b.n	8004380 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2221      	movs	r2, #33	; 0x21
 80041e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2240      	movs	r2, #64	; 0x40
 80041e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6a3a      	ldr	r2, [r7, #32]
 80041f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80041fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004204:	88f8      	ldrh	r0, [r7, #6]
 8004206:	893a      	ldrh	r2, [r7, #8]
 8004208:	8979      	ldrh	r1, [r7, #10]
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	9301      	str	r3, [sp, #4]
 800420e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004210:	9300      	str	r3, [sp, #0]
 8004212:	4603      	mov	r3, r0
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f000 f9ed 	bl	80045f4 <I2C_RequestMemoryWrite>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d005      	beq.n	800422c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e0a9      	b.n	8004380 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004230:	b29b      	uxth	r3, r3
 8004232:	2bff      	cmp	r3, #255	; 0xff
 8004234:	d90e      	bls.n	8004254 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	22ff      	movs	r2, #255	; 0xff
 800423a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004240:	b2da      	uxtb	r2, r3
 8004242:	8979      	ldrh	r1, [r7, #10]
 8004244:	2300      	movs	r3, #0
 8004246:	9300      	str	r3, [sp, #0]
 8004248:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f000 fbbf 	bl	80049d0 <I2C_TransferConfig>
 8004252:	e00f      	b.n	8004274 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004258:	b29a      	uxth	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004262:	b2da      	uxtb	r2, r3
 8004264:	8979      	ldrh	r1, [r7, #10]
 8004266:	2300      	movs	r3, #0
 8004268:	9300      	str	r3, [sp, #0]
 800426a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f000 fbae 	bl	80049d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f000 fac7 	bl	800480c <I2C_WaitOnTXISFlagUntilTimeout>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d001      	beq.n	8004288 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e07b      	b.n	8004380 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428c:	781a      	ldrb	r2, [r3, #0]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004298:	1c5a      	adds	r2, r3, #1
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	3b01      	subs	r3, #1
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b0:	3b01      	subs	r3, #1
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042bc:	b29b      	uxth	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d034      	beq.n	800432c <HAL_I2C_Mem_Write+0x1c8>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d130      	bne.n	800432c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	9300      	str	r3, [sp, #0]
 80042ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d0:	2200      	movs	r2, #0
 80042d2:	2180      	movs	r1, #128	; 0x80
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f000 fa59 	bl	800478c <I2C_WaitOnFlagUntilTimeout>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d001      	beq.n	80042e4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e04d      	b.n	8004380 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	2bff      	cmp	r3, #255	; 0xff
 80042ec:	d90e      	bls.n	800430c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	22ff      	movs	r2, #255	; 0xff
 80042f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f8:	b2da      	uxtb	r2, r3
 80042fa:	8979      	ldrh	r1, [r7, #10]
 80042fc:	2300      	movs	r3, #0
 80042fe:	9300      	str	r3, [sp, #0]
 8004300:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004304:	68f8      	ldr	r0, [r7, #12]
 8004306:	f000 fb63 	bl	80049d0 <I2C_TransferConfig>
 800430a:	e00f      	b.n	800432c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004310:	b29a      	uxth	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800431a:	b2da      	uxtb	r2, r3
 800431c:	8979      	ldrh	r1, [r7, #10]
 800431e:	2300      	movs	r3, #0
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004326:	68f8      	ldr	r0, [r7, #12]
 8004328:	f000 fb52 	bl	80049d0 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004330:	b29b      	uxth	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d19e      	bne.n	8004274 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004336:	697a      	ldr	r2, [r7, #20]
 8004338:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f000 faa6 	bl	800488c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d001      	beq.n	800434a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e01a      	b.n	8004380 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2220      	movs	r2, #32
 8004350:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	6859      	ldr	r1, [r3, #4]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	4b0a      	ldr	r3, [pc, #40]	; (8004388 <HAL_I2C_Mem_Write+0x224>)
 800435e:	400b      	ands	r3, r1
 8004360:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2220      	movs	r2, #32
 8004366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800437a:	2300      	movs	r3, #0
 800437c:	e000      	b.n	8004380 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800437e:	2302      	movs	r3, #2
  }
}
 8004380:	4618      	mov	r0, r3
 8004382:	3718      	adds	r7, #24
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	fe00e800 	.word	0xfe00e800

0800438c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b088      	sub	sp, #32
 8004390:	af02      	add	r7, sp, #8
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	4608      	mov	r0, r1
 8004396:	4611      	mov	r1, r2
 8004398:	461a      	mov	r2, r3
 800439a:	4603      	mov	r3, r0
 800439c:	817b      	strh	r3, [r7, #10]
 800439e:	460b      	mov	r3, r1
 80043a0:	813b      	strh	r3, [r7, #8]
 80043a2:	4613      	mov	r3, r2
 80043a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	2b20      	cmp	r3, #32
 80043b0:	f040 80fd 	bne.w	80045ae <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80043b4:	6a3b      	ldr	r3, [r7, #32]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d002      	beq.n	80043c0 <HAL_I2C_Mem_Read+0x34>
 80043ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d105      	bne.n	80043cc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043c6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e0f1      	b.n	80045b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d101      	bne.n	80043da <HAL_I2C_Mem_Read+0x4e>
 80043d6:	2302      	movs	r3, #2
 80043d8:	e0ea      	b.n	80045b0 <HAL_I2C_Mem_Read+0x224>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80043e2:	f7fe ffeb 	bl	80033bc <HAL_GetTick>
 80043e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	9300      	str	r3, [sp, #0]
 80043ec:	2319      	movs	r3, #25
 80043ee:	2201      	movs	r2, #1
 80043f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f000 f9c9 	bl	800478c <I2C_WaitOnFlagUntilTimeout>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d001      	beq.n	8004404 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e0d5      	b.n	80045b0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2222      	movs	r2, #34	; 0x22
 8004408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2240      	movs	r2, #64	; 0x40
 8004410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6a3a      	ldr	r2, [r7, #32]
 800441e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004424:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800442c:	88f8      	ldrh	r0, [r7, #6]
 800442e:	893a      	ldrh	r2, [r7, #8]
 8004430:	8979      	ldrh	r1, [r7, #10]
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	9301      	str	r3, [sp, #4]
 8004436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004438:	9300      	str	r3, [sp, #0]
 800443a:	4603      	mov	r3, r0
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f000 f92d 	bl	800469c <I2C_RequestMemoryRead>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d005      	beq.n	8004454 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e0ad      	b.n	80045b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004458:	b29b      	uxth	r3, r3
 800445a:	2bff      	cmp	r3, #255	; 0xff
 800445c:	d90e      	bls.n	800447c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	22ff      	movs	r2, #255	; 0xff
 8004462:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004468:	b2da      	uxtb	r2, r3
 800446a:	8979      	ldrh	r1, [r7, #10]
 800446c:	4b52      	ldr	r3, [pc, #328]	; (80045b8 <HAL_I2C_Mem_Read+0x22c>)
 800446e:	9300      	str	r3, [sp, #0]
 8004470:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f000 faab 	bl	80049d0 <I2C_TransferConfig>
 800447a:	e00f      	b.n	800449c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004480:	b29a      	uxth	r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800448a:	b2da      	uxtb	r2, r3
 800448c:	8979      	ldrh	r1, [r7, #10]
 800448e:	4b4a      	ldr	r3, [pc, #296]	; (80045b8 <HAL_I2C_Mem_Read+0x22c>)
 8004490:	9300      	str	r3, [sp, #0]
 8004492:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004496:	68f8      	ldr	r0, [r7, #12]
 8004498:	f000 fa9a 	bl	80049d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	9300      	str	r3, [sp, #0]
 80044a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a2:	2200      	movs	r2, #0
 80044a4:	2104      	movs	r1, #4
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f000 f970 	bl	800478c <I2C_WaitOnFlagUntilTimeout>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d001      	beq.n	80044b6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e07c      	b.n	80045b0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c0:	b2d2      	uxtb	r2, r2
 80044c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c8:	1c5a      	adds	r2, r3, #1
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044d2:	3b01      	subs	r3, #1
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044de:	b29b      	uxth	r3, r3
 80044e0:	3b01      	subs	r3, #1
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d034      	beq.n	800455c <HAL_I2C_Mem_Read+0x1d0>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d130      	bne.n	800455c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	9300      	str	r3, [sp, #0]
 80044fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004500:	2200      	movs	r2, #0
 8004502:	2180      	movs	r1, #128	; 0x80
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f000 f941 	bl	800478c <I2C_WaitOnFlagUntilTimeout>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d001      	beq.n	8004514 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e04d      	b.n	80045b0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004518:	b29b      	uxth	r3, r3
 800451a:	2bff      	cmp	r3, #255	; 0xff
 800451c:	d90e      	bls.n	800453c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	22ff      	movs	r2, #255	; 0xff
 8004522:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004528:	b2da      	uxtb	r2, r3
 800452a:	8979      	ldrh	r1, [r7, #10]
 800452c:	2300      	movs	r3, #0
 800452e:	9300      	str	r3, [sp, #0]
 8004530:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f000 fa4b 	bl	80049d0 <I2C_TransferConfig>
 800453a:	e00f      	b.n	800455c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004540:	b29a      	uxth	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800454a:	b2da      	uxtb	r2, r3
 800454c:	8979      	ldrh	r1, [r7, #10]
 800454e:	2300      	movs	r3, #0
 8004550:	9300      	str	r3, [sp, #0]
 8004552:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f000 fa3a 	bl	80049d0 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004560:	b29b      	uxth	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d19a      	bne.n	800449c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f000 f98e 	bl	800488c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d001      	beq.n	800457a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e01a      	b.n	80045b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2220      	movs	r2, #32
 8004580:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	6859      	ldr	r1, [r3, #4]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	4b0b      	ldr	r3, [pc, #44]	; (80045bc <HAL_I2C_Mem_Read+0x230>)
 800458e:	400b      	ands	r3, r1
 8004590:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2220      	movs	r2, #32
 8004596:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80045aa:	2300      	movs	r3, #0
 80045ac:	e000      	b.n	80045b0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80045ae:	2302      	movs	r3, #2
  }
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3718      	adds	r7, #24
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	80002400 	.word	0x80002400
 80045bc:	fe00e800 	.word	0xfe00e800

080045c0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045ce:	b2db      	uxtb	r3, r3
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af02      	add	r7, sp, #8
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	4608      	mov	r0, r1
 80045fe:	4611      	mov	r1, r2
 8004600:	461a      	mov	r2, r3
 8004602:	4603      	mov	r3, r0
 8004604:	817b      	strh	r3, [r7, #10]
 8004606:	460b      	mov	r3, r1
 8004608:	813b      	strh	r3, [r7, #8]
 800460a:	4613      	mov	r3, r2
 800460c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800460e:	88fb      	ldrh	r3, [r7, #6]
 8004610:	b2da      	uxtb	r2, r3
 8004612:	8979      	ldrh	r1, [r7, #10]
 8004614:	4b20      	ldr	r3, [pc, #128]	; (8004698 <I2C_RequestMemoryWrite+0xa4>)
 8004616:	9300      	str	r3, [sp, #0]
 8004618:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f000 f9d7 	bl	80049d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004622:	69fa      	ldr	r2, [r7, #28]
 8004624:	69b9      	ldr	r1, [r7, #24]
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f000 f8f0 	bl	800480c <I2C_WaitOnTXISFlagUntilTimeout>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d001      	beq.n	8004636 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e02c      	b.n	8004690 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004636:	88fb      	ldrh	r3, [r7, #6]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d105      	bne.n	8004648 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800463c:	893b      	ldrh	r3, [r7, #8]
 800463e:	b2da      	uxtb	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	629a      	str	r2, [r3, #40]	; 0x28
 8004646:	e015      	b.n	8004674 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004648:	893b      	ldrh	r3, [r7, #8]
 800464a:	0a1b      	lsrs	r3, r3, #8
 800464c:	b29b      	uxth	r3, r3
 800464e:	b2da      	uxtb	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004656:	69fa      	ldr	r2, [r7, #28]
 8004658:	69b9      	ldr	r1, [r7, #24]
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f000 f8d6 	bl	800480c <I2C_WaitOnTXISFlagUntilTimeout>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e012      	b.n	8004690 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800466a:	893b      	ldrh	r3, [r7, #8]
 800466c:	b2da      	uxtb	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	9300      	str	r3, [sp, #0]
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	2200      	movs	r2, #0
 800467c:	2180      	movs	r1, #128	; 0x80
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f000 f884 	bl	800478c <I2C_WaitOnFlagUntilTimeout>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e000      	b.n	8004690 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	3710      	adds	r7, #16
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	80002000 	.word	0x80002000

0800469c <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b086      	sub	sp, #24
 80046a0:	af02      	add	r7, sp, #8
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	4608      	mov	r0, r1
 80046a6:	4611      	mov	r1, r2
 80046a8:	461a      	mov	r2, r3
 80046aa:	4603      	mov	r3, r0
 80046ac:	817b      	strh	r3, [r7, #10]
 80046ae:	460b      	mov	r3, r1
 80046b0:	813b      	strh	r3, [r7, #8]
 80046b2:	4613      	mov	r3, r2
 80046b4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80046b6:	88fb      	ldrh	r3, [r7, #6]
 80046b8:	b2da      	uxtb	r2, r3
 80046ba:	8979      	ldrh	r1, [r7, #10]
 80046bc:	4b20      	ldr	r3, [pc, #128]	; (8004740 <I2C_RequestMemoryRead+0xa4>)
 80046be:	9300      	str	r3, [sp, #0]
 80046c0:	2300      	movs	r3, #0
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f000 f984 	bl	80049d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046c8:	69fa      	ldr	r2, [r7, #28]
 80046ca:	69b9      	ldr	r1, [r7, #24]
 80046cc:	68f8      	ldr	r0, [r7, #12]
 80046ce:	f000 f89d 	bl	800480c <I2C_WaitOnTXISFlagUntilTimeout>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d001      	beq.n	80046dc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e02c      	b.n	8004736 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80046dc:	88fb      	ldrh	r3, [r7, #6]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d105      	bne.n	80046ee <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80046e2:	893b      	ldrh	r3, [r7, #8]
 80046e4:	b2da      	uxtb	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	629a      	str	r2, [r3, #40]	; 0x28
 80046ec:	e015      	b.n	800471a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80046ee:	893b      	ldrh	r3, [r7, #8]
 80046f0:	0a1b      	lsrs	r3, r3, #8
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	b2da      	uxtb	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046fc:	69fa      	ldr	r2, [r7, #28]
 80046fe:	69b9      	ldr	r1, [r7, #24]
 8004700:	68f8      	ldr	r0, [r7, #12]
 8004702:	f000 f883 	bl	800480c <I2C_WaitOnTXISFlagUntilTimeout>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d001      	beq.n	8004710 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e012      	b.n	8004736 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004710:	893b      	ldrh	r3, [r7, #8]
 8004712:	b2da      	uxtb	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	9300      	str	r3, [sp, #0]
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	2200      	movs	r2, #0
 8004722:	2140      	movs	r1, #64	; 0x40
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f000 f831 	bl	800478c <I2C_WaitOnFlagUntilTimeout>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d001      	beq.n	8004734 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e000      	b.n	8004736 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	80002000 	.word	0x80002000

08004744 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b02      	cmp	r3, #2
 8004758:	d103      	bne.n	8004762 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2200      	movs	r2, #0
 8004760:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	f003 0301 	and.w	r3, r3, #1
 800476c:	2b01      	cmp	r3, #1
 800476e:	d007      	beq.n	8004780 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	699a      	ldr	r2, [r3, #24]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f042 0201 	orr.w	r2, r2, #1
 800477e:	619a      	str	r2, [r3, #24]
  }
}
 8004780:	bf00      	nop
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	603b      	str	r3, [r7, #0]
 8004798:	4613      	mov	r3, r2
 800479a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800479c:	e022      	b.n	80047e4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a4:	d01e      	beq.n	80047e4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047a6:	f7fe fe09 	bl	80033bc <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	683a      	ldr	r2, [r7, #0]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d302      	bcc.n	80047bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d113      	bne.n	80047e4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c0:	f043 0220 	orr.w	r2, r3, #32
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2220      	movs	r2, #32
 80047cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e00f      	b.n	8004804 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	699a      	ldr	r2, [r3, #24]
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	4013      	ands	r3, r2
 80047ee:	68ba      	ldr	r2, [r7, #8]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	bf0c      	ite	eq
 80047f4:	2301      	moveq	r3, #1
 80047f6:	2300      	movne	r3, #0
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	461a      	mov	r2, r3
 80047fc:	79fb      	ldrb	r3, [r7, #7]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d0cd      	beq.n	800479e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3710      	adds	r7, #16
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004818:	e02c      	b.n	8004874 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	68b9      	ldr	r1, [r7, #8]
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f000 f870 	bl	8004904 <I2C_IsAcknowledgeFailed>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d001      	beq.n	800482e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e02a      	b.n	8004884 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004834:	d01e      	beq.n	8004874 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004836:	f7fe fdc1 	bl	80033bc <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	68ba      	ldr	r2, [r7, #8]
 8004842:	429a      	cmp	r2, r3
 8004844:	d302      	bcc.n	800484c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d113      	bne.n	8004874 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004850:	f043 0220 	orr.w	r2, r3, #32
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2220      	movs	r2, #32
 800485c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e007      	b.n	8004884 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b02      	cmp	r3, #2
 8004880:	d1cb      	bne.n	800481a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004898:	e028      	b.n	80048ec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	68b9      	ldr	r1, [r7, #8]
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f000 f830 	bl	8004904 <I2C_IsAcknowledgeFailed>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d001      	beq.n	80048ae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e026      	b.n	80048fc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ae:	f7fe fd85 	bl	80033bc <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d302      	bcc.n	80048c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d113      	bne.n	80048ec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c8:	f043 0220 	orr.w	r2, r3, #32
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2220      	movs	r2, #32
 80048d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e007      	b.n	80048fc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	f003 0320 	and.w	r3, r3, #32
 80048f6:	2b20      	cmp	r3, #32
 80048f8:	d1cf      	bne.n	800489a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3710      	adds	r7, #16
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	f003 0310 	and.w	r3, r3, #16
 800491a:	2b10      	cmp	r3, #16
 800491c:	d151      	bne.n	80049c2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800491e:	e022      	b.n	8004966 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004926:	d01e      	beq.n	8004966 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004928:	f7fe fd48 	bl	80033bc <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	68ba      	ldr	r2, [r7, #8]
 8004934:	429a      	cmp	r2, r3
 8004936:	d302      	bcc.n	800493e <I2C_IsAcknowledgeFailed+0x3a>
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d113      	bne.n	8004966 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004942:	f043 0220 	orr.w	r2, r3, #32
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2220      	movs	r2, #32
 800494e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e02e      	b.n	80049c4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	f003 0320 	and.w	r3, r3, #32
 8004970:	2b20      	cmp	r3, #32
 8004972:	d1d5      	bne.n	8004920 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2210      	movs	r2, #16
 800497a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2220      	movs	r2, #32
 8004982:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004984:	68f8      	ldr	r0, [r7, #12]
 8004986:	f7ff fedd 	bl	8004744 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	6859      	ldr	r1, [r3, #4]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	4b0d      	ldr	r3, [pc, #52]	; (80049cc <I2C_IsAcknowledgeFailed+0xc8>)
 8004996:	400b      	ands	r3, r1
 8004998:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800499e:	f043 0204 	orr.w	r2, r3, #4
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2220      	movs	r2, #32
 80049aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e000      	b.n	80049c4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	fe00e800 	.word	0xfe00e800

080049d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	607b      	str	r3, [r7, #4]
 80049da:	460b      	mov	r3, r1
 80049dc:	817b      	strh	r3, [r7, #10]
 80049de:	4613      	mov	r3, r2
 80049e0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	685a      	ldr	r2, [r3, #4]
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	0d5b      	lsrs	r3, r3, #21
 80049ec:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80049f0:	4b0d      	ldr	r3, [pc, #52]	; (8004a28 <I2C_TransferConfig+0x58>)
 80049f2:	430b      	orrs	r3, r1
 80049f4:	43db      	mvns	r3, r3
 80049f6:	ea02 0103 	and.w	r1, r2, r3
 80049fa:	897b      	ldrh	r3, [r7, #10]
 80049fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004a00:	7a7b      	ldrb	r3, [r7, #9]
 8004a02:	041b      	lsls	r3, r3, #16
 8004a04:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004a08:	431a      	orrs	r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	431a      	orrs	r2, r3
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	431a      	orrs	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	430a      	orrs	r2, r1
 8004a18:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004a1a:	bf00      	nop
 8004a1c:	3714      	adds	r7, #20
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	03ff63ff 	.word	0x03ff63ff

08004a2c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b20      	cmp	r3, #32
 8004a40:	d138      	bne.n	8004ab4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d101      	bne.n	8004a50 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a4c:	2302      	movs	r3, #2
 8004a4e:	e032      	b.n	8004ab6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2224      	movs	r2, #36	; 0x24
 8004a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f022 0201 	bic.w	r2, r2, #1
 8004a6e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a7e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	6819      	ldr	r1, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	683a      	ldr	r2, [r7, #0]
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f042 0201 	orr.w	r2, r2, #1
 8004a9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2220      	movs	r2, #32
 8004aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	e000      	b.n	8004ab6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004ab4:	2302      	movs	r3, #2
  }
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr

08004ac2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	b085      	sub	sp, #20
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
 8004aca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	2b20      	cmp	r3, #32
 8004ad6:	d139      	bne.n	8004b4c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d101      	bne.n	8004ae6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004ae2:	2302      	movs	r3, #2
 8004ae4:	e033      	b.n	8004b4e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2224      	movs	r2, #36	; 0x24
 8004af2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f022 0201 	bic.w	r2, r2, #1
 8004b04:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004b14:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	021b      	lsls	r3, r3, #8
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f042 0201 	orr.w	r2, r2, #1
 8004b36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2220      	movs	r2, #32
 8004b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	e000      	b.n	8004b4e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b4c:	2302      	movs	r3, #2
  }
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3714      	adds	r7, #20
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004b5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b5c:	b08f      	sub	sp, #60	; 0x3c
 8004b5e:	af0a      	add	r7, sp, #40	; 0x28
 8004b60:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d101      	bne.n	8004b6c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e116      	b.n	8004d9a <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d106      	bne.n	8004b8c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f7fd fa32 	bl	8001ff0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2203      	movs	r2, #3
 8004b90:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d102      	bne.n	8004ba6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f002 faca 	bl	8007144 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	603b      	str	r3, [r7, #0]
 8004bb6:	687e      	ldr	r6, [r7, #4]
 8004bb8:	466d      	mov	r5, sp
 8004bba:	f106 0410 	add.w	r4, r6, #16
 8004bbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bc6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004bca:	e885 0003 	stmia.w	r5, {r0, r1}
 8004bce:	1d33      	adds	r3, r6, #4
 8004bd0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004bd2:	6838      	ldr	r0, [r7, #0]
 8004bd4:	f002 fa64 	bl	80070a0 <USB_CoreInit>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d005      	beq.n	8004bea <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2202      	movs	r2, #2
 8004be2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e0d7      	b.n	8004d9a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2100      	movs	r1, #0
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f002 fab8 	bl	8007166 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	73fb      	strb	r3, [r7, #15]
 8004bfa:	e04a      	b.n	8004c92 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004bfc:	7bfa      	ldrb	r2, [r7, #15]
 8004bfe:	6879      	ldr	r1, [r7, #4]
 8004c00:	4613      	mov	r3, r2
 8004c02:	00db      	lsls	r3, r3, #3
 8004c04:	1a9b      	subs	r3, r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	440b      	add	r3, r1
 8004c0a:	333d      	adds	r3, #61	; 0x3d
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004c10:	7bfa      	ldrb	r2, [r7, #15]
 8004c12:	6879      	ldr	r1, [r7, #4]
 8004c14:	4613      	mov	r3, r2
 8004c16:	00db      	lsls	r3, r3, #3
 8004c18:	1a9b      	subs	r3, r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	440b      	add	r3, r1
 8004c1e:	333c      	adds	r3, #60	; 0x3c
 8004c20:	7bfa      	ldrb	r2, [r7, #15]
 8004c22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004c24:	7bfa      	ldrb	r2, [r7, #15]
 8004c26:	7bfb      	ldrb	r3, [r7, #15]
 8004c28:	b298      	uxth	r0, r3
 8004c2a:	6879      	ldr	r1, [r7, #4]
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	00db      	lsls	r3, r3, #3
 8004c30:	1a9b      	subs	r3, r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	440b      	add	r3, r1
 8004c36:	3342      	adds	r3, #66	; 0x42
 8004c38:	4602      	mov	r2, r0
 8004c3a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004c3c:	7bfa      	ldrb	r2, [r7, #15]
 8004c3e:	6879      	ldr	r1, [r7, #4]
 8004c40:	4613      	mov	r3, r2
 8004c42:	00db      	lsls	r3, r3, #3
 8004c44:	1a9b      	subs	r3, r3, r2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	440b      	add	r3, r1
 8004c4a:	333f      	adds	r3, #63	; 0x3f
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004c50:	7bfa      	ldrb	r2, [r7, #15]
 8004c52:	6879      	ldr	r1, [r7, #4]
 8004c54:	4613      	mov	r3, r2
 8004c56:	00db      	lsls	r3, r3, #3
 8004c58:	1a9b      	subs	r3, r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	440b      	add	r3, r1
 8004c5e:	3344      	adds	r3, #68	; 0x44
 8004c60:	2200      	movs	r2, #0
 8004c62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004c64:	7bfa      	ldrb	r2, [r7, #15]
 8004c66:	6879      	ldr	r1, [r7, #4]
 8004c68:	4613      	mov	r3, r2
 8004c6a:	00db      	lsls	r3, r3, #3
 8004c6c:	1a9b      	subs	r3, r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	440b      	add	r3, r1
 8004c72:	3348      	adds	r3, #72	; 0x48
 8004c74:	2200      	movs	r2, #0
 8004c76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004c78:	7bfa      	ldrb	r2, [r7, #15]
 8004c7a:	6879      	ldr	r1, [r7, #4]
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	00db      	lsls	r3, r3, #3
 8004c80:	1a9b      	subs	r3, r3, r2
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	440b      	add	r3, r1
 8004c86:	3350      	adds	r3, #80	; 0x50
 8004c88:	2200      	movs	r2, #0
 8004c8a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c8c:	7bfb      	ldrb	r3, [r7, #15]
 8004c8e:	3301      	adds	r3, #1
 8004c90:	73fb      	strb	r3, [r7, #15]
 8004c92:	7bfa      	ldrb	r2, [r7, #15]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d3af      	bcc.n	8004bfc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	73fb      	strb	r3, [r7, #15]
 8004ca0:	e044      	b.n	8004d2c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004ca2:	7bfa      	ldrb	r2, [r7, #15]
 8004ca4:	6879      	ldr	r1, [r7, #4]
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	00db      	lsls	r3, r3, #3
 8004caa:	1a9b      	subs	r3, r3, r2
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	440b      	add	r3, r1
 8004cb0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004cb8:	7bfa      	ldrb	r2, [r7, #15]
 8004cba:	6879      	ldr	r1, [r7, #4]
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	00db      	lsls	r3, r3, #3
 8004cc0:	1a9b      	subs	r3, r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	440b      	add	r3, r1
 8004cc6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004cca:	7bfa      	ldrb	r2, [r7, #15]
 8004ccc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004cce:	7bfa      	ldrb	r2, [r7, #15]
 8004cd0:	6879      	ldr	r1, [r7, #4]
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	00db      	lsls	r3, r3, #3
 8004cd6:	1a9b      	subs	r3, r3, r2
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	440b      	add	r3, r1
 8004cdc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004ce4:	7bfa      	ldrb	r2, [r7, #15]
 8004ce6:	6879      	ldr	r1, [r7, #4]
 8004ce8:	4613      	mov	r3, r2
 8004cea:	00db      	lsls	r3, r3, #3
 8004cec:	1a9b      	subs	r3, r3, r2
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	440b      	add	r3, r1
 8004cf2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004cfa:	7bfa      	ldrb	r2, [r7, #15]
 8004cfc:	6879      	ldr	r1, [r7, #4]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	00db      	lsls	r3, r3, #3
 8004d02:	1a9b      	subs	r3, r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	440b      	add	r3, r1
 8004d08:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004d10:	7bfa      	ldrb	r2, [r7, #15]
 8004d12:	6879      	ldr	r1, [r7, #4]
 8004d14:	4613      	mov	r3, r2
 8004d16:	00db      	lsls	r3, r3, #3
 8004d18:	1a9b      	subs	r3, r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	440b      	add	r3, r1
 8004d1e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004d22:	2200      	movs	r2, #0
 8004d24:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d26:	7bfb      	ldrb	r3, [r7, #15]
 8004d28:	3301      	adds	r3, #1
 8004d2a:	73fb      	strb	r3, [r7, #15]
 8004d2c:	7bfa      	ldrb	r2, [r7, #15]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d3b5      	bcc.n	8004ca2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	603b      	str	r3, [r7, #0]
 8004d3c:	687e      	ldr	r6, [r7, #4]
 8004d3e:	466d      	mov	r5, sp
 8004d40:	f106 0410 	add.w	r4, r6, #16
 8004d44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d4c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004d50:	e885 0003 	stmia.w	r5, {r0, r1}
 8004d54:	1d33      	adds	r3, r6, #4
 8004d56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d58:	6838      	ldr	r0, [r7, #0]
 8004d5a:	f002 fa2f 	bl	80071bc <USB_DevInit>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d005      	beq.n	8004d70 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2202      	movs	r2, #2
 8004d68:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e014      	b.n	8004d9a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d102      	bne.n	8004d8e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f000 f80a 	bl	8004da2 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4618      	mov	r0, r3
 8004d94:	f002 fbbf 	bl	8007516 <USB_DevDisconnect>

  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3714      	adds	r7, #20
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004da2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004da2:	b480      	push	{r7}
 8004da4:	b085      	sub	sp, #20
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	699b      	ldr	r3, [r3, #24]
 8004dc4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dd4:	f043 0303 	orr.w	r3, r3, #3
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3714      	adds	r7, #20
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
	...

08004dec <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004dec:	b480      	push	{r7}
 8004dee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004df0:	4b05      	ldr	r3, [pc, #20]	; (8004e08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a04      	ldr	r2, [pc, #16]	; (8004e08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004df6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dfa:	6013      	str	r3, [r2, #0]
}
 8004dfc:	bf00      	nop
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	40007000 	.word	0x40007000

08004e0c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004e10:	4b04      	ldr	r3, [pc, #16]	; (8004e24 <HAL_PWREx_GetVoltageRange+0x18>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	40007000 	.word	0x40007000

08004e28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e36:	d130      	bne.n	8004e9a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e38:	4b23      	ldr	r3, [pc, #140]	; (8004ec8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004e40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e44:	d038      	beq.n	8004eb8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e46:	4b20      	ldr	r3, [pc, #128]	; (8004ec8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004e4e:	4a1e      	ldr	r2, [pc, #120]	; (8004ec8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e54:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e56:	4b1d      	ldr	r3, [pc, #116]	; (8004ecc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2232      	movs	r2, #50	; 0x32
 8004e5c:	fb02 f303 	mul.w	r3, r2, r3
 8004e60:	4a1b      	ldr	r2, [pc, #108]	; (8004ed0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004e62:	fba2 2303 	umull	r2, r3, r2, r3
 8004e66:	0c9b      	lsrs	r3, r3, #18
 8004e68:	3301      	adds	r3, #1
 8004e6a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e6c:	e002      	b.n	8004e74 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	3b01      	subs	r3, #1
 8004e72:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e74:	4b14      	ldr	r3, [pc, #80]	; (8004ec8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e76:	695b      	ldr	r3, [r3, #20]
 8004e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e80:	d102      	bne.n	8004e88 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1f2      	bne.n	8004e6e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e88:	4b0f      	ldr	r3, [pc, #60]	; (8004ec8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e8a:	695b      	ldr	r3, [r3, #20]
 8004e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e94:	d110      	bne.n	8004eb8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e00f      	b.n	8004eba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e9a:	4b0b      	ldr	r3, [pc, #44]	; (8004ec8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004ea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ea6:	d007      	beq.n	8004eb8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004ea8:	4b07      	ldr	r3, [pc, #28]	; (8004ec8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004eb0:	4a05      	ldr	r2, [pc, #20]	; (8004ec8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004eb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004eb6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3714      	adds	r7, #20
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	40007000 	.word	0x40007000
 8004ecc:	20000008 	.word	0x20000008
 8004ed0:	431bde83 	.word	0x431bde83

08004ed4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004ed8:	4b05      	ldr	r3, [pc, #20]	; (8004ef0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	4a04      	ldr	r2, [pc, #16]	; (8004ef0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004ede:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ee2:	6053      	str	r3, [r2, #4]
}
 8004ee4:	bf00      	nop
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	40007000 	.word	0x40007000

08004ef4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b086      	sub	sp, #24
 8004ef8:	af02      	add	r7, sp, #8
 8004efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004efc:	f7fe fa5e 	bl	80033bc <HAL_GetTick>
 8004f00:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d101      	bne.n	8004f0c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e063      	b.n	8004fd4 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d10b      	bne.n	8004f30 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f7fc fd4b 	bl	80019bc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004f26:	f241 3188 	movw	r1, #5000	; 0x1388
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 f858 	bl	8004fe0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	021a      	lsls	r2, r3, #8
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	430a      	orrs	r2, r1
 8004f48:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4e:	9300      	str	r3, [sp, #0]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	2120      	movs	r1, #32
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 f850 	bl	8004ffc <QSPI_WaitFlagStateUntilTimeout>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004f60:	7afb      	ldrb	r3, [r7, #11]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d131      	bne.n	8004fca <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004f70:	f023 0310 	bic.w	r3, r3, #16
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	6852      	ldr	r2, [r2, #4]
 8004f78:	0611      	lsls	r1, r2, #24
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	68d2      	ldr	r2, [r2, #12]
 8004f7e:	4311      	orrs	r1, r2
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	6812      	ldr	r2, [r2, #0]
 8004f84:	430b      	orrs	r3, r1
 8004f86:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	685a      	ldr	r2, [r3, #4]
 8004f8e:	4b13      	ldr	r3, [pc, #76]	; (8004fdc <HAL_QSPI_Init+0xe8>)
 8004f90:	4013      	ands	r3, r2
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	6912      	ldr	r2, [r2, #16]
 8004f96:	0411      	lsls	r1, r2, #16
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	6952      	ldr	r2, [r2, #20]
 8004f9c:	4311      	orrs	r1, r2
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	6992      	ldr	r2, [r2, #24]
 8004fa2:	4311      	orrs	r1, r2
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	6812      	ldr	r2, [r2, #0]
 8004fa8:	430b      	orrs	r3, r1
 8004faa:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f042 0201 	orr.w	r2, r2, #1
 8004fba:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8004fd2:	7afb      	ldrb	r3, [r7, #11]
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3710      	adds	r7, #16
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	ffe0f8fe 	.word	0xffe0f8fe

08004fe0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	683a      	ldr	r2, [r7, #0]
 8004fee:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004ff0:	bf00      	nop
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	603b      	str	r3, [r7, #0]
 8005008:	4613      	mov	r3, r2
 800500a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800500c:	e01a      	b.n	8005044 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005014:	d016      	beq.n	8005044 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005016:	f7fe f9d1 	bl	80033bc <HAL_GetTick>
 800501a:	4602      	mov	r2, r0
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	69ba      	ldr	r2, [r7, #24]
 8005022:	429a      	cmp	r2, r3
 8005024:	d302      	bcc.n	800502c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d10b      	bne.n	8005044 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2204      	movs	r2, #4
 8005030:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005038:	f043 0201 	orr.w	r2, r3, #1
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e00e      	b.n	8005062 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	689a      	ldr	r2, [r3, #8]
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	4013      	ands	r3, r2
 800504e:	2b00      	cmp	r3, #0
 8005050:	bf14      	ite	ne
 8005052:	2301      	movne	r3, #1
 8005054:	2300      	moveq	r3, #0
 8005056:	b2db      	uxtb	r3, r3
 8005058:	461a      	mov	r2, r3
 800505a:	79fb      	ldrb	r3, [r7, #7]
 800505c:	429a      	cmp	r2, r3
 800505e:	d1d6      	bne.n	800500e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3710      	adds	r7, #16
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
	...

0800506c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b088      	sub	sp, #32
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d101      	bne.n	800507e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e3d4      	b.n	8005828 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800507e:	4ba1      	ldr	r3, [pc, #644]	; (8005304 <HAL_RCC_OscConfig+0x298>)
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f003 030c 	and.w	r3, r3, #12
 8005086:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005088:	4b9e      	ldr	r3, [pc, #632]	; (8005304 <HAL_RCC_OscConfig+0x298>)
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	f003 0303 	and.w	r3, r3, #3
 8005090:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0310 	and.w	r3, r3, #16
 800509a:	2b00      	cmp	r3, #0
 800509c:	f000 80e4 	beq.w	8005268 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d007      	beq.n	80050b6 <HAL_RCC_OscConfig+0x4a>
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	2b0c      	cmp	r3, #12
 80050aa:	f040 808b 	bne.w	80051c4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	f040 8087 	bne.w	80051c4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80050b6:	4b93      	ldr	r3, [pc, #588]	; (8005304 <HAL_RCC_OscConfig+0x298>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d005      	beq.n	80050ce <HAL_RCC_OscConfig+0x62>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	699b      	ldr	r3, [r3, #24]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d101      	bne.n	80050ce <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e3ac      	b.n	8005828 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a1a      	ldr	r2, [r3, #32]
 80050d2:	4b8c      	ldr	r3, [pc, #560]	; (8005304 <HAL_RCC_OscConfig+0x298>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0308 	and.w	r3, r3, #8
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d004      	beq.n	80050e8 <HAL_RCC_OscConfig+0x7c>
 80050de:	4b89      	ldr	r3, [pc, #548]	; (8005304 <HAL_RCC_OscConfig+0x298>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050e6:	e005      	b.n	80050f4 <HAL_RCC_OscConfig+0x88>
 80050e8:	4b86      	ldr	r3, [pc, #536]	; (8005304 <HAL_RCC_OscConfig+0x298>)
 80050ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050ee:	091b      	lsrs	r3, r3, #4
 80050f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d223      	bcs.n	8005140 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a1b      	ldr	r3, [r3, #32]
 80050fc:	4618      	mov	r0, r3
 80050fe:	f000 fd3f 	bl	8005b80 <RCC_SetFlashLatencyFromMSIRange>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d001      	beq.n	800510c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e38d      	b.n	8005828 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800510c:	4b7d      	ldr	r3, [pc, #500]	; (8005304 <HAL_RCC_OscConfig+0x298>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a7c      	ldr	r2, [pc, #496]	; (8005304 <HAL_RCC_OscConfig+0x298>)
 8005112:	f043 0308 	orr.w	r3, r3, #8
 8005116:	6013      	str	r3, [r2, #0]
 8005118:	4b7a      	ldr	r3, [pc, #488]	; (8005304 <HAL_RCC_OscConfig+0x298>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a1b      	ldr	r3, [r3, #32]
 8005124:	4977      	ldr	r1, [pc, #476]	; (8005304 <HAL_RCC_OscConfig+0x298>)
 8005126:	4313      	orrs	r3, r2
 8005128:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800512a:	4b76      	ldr	r3, [pc, #472]	; (8005304 <HAL_RCC_OscConfig+0x298>)
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	69db      	ldr	r3, [r3, #28]
 8005136:	021b      	lsls	r3, r3, #8
 8005138:	4972      	ldr	r1, [pc, #456]	; (8005304 <HAL_RCC_OscConfig+0x298>)
 800513a:	4313      	orrs	r3, r2
 800513c:	604b      	str	r3, [r1, #4]
 800513e:	e025      	b.n	800518c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005140:	4b70      	ldr	r3, [pc, #448]	; (8005304 <HAL_RCC_OscConfig+0x298>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a6f      	ldr	r2, [pc, #444]	; (8005304 <HAL_RCC_OscConfig+0x298>)
 8005146:	f043 0308 	orr.w	r3, r3, #8
 800514a:	6013      	str	r3, [r2, #0]
 800514c:	4b6d      	ldr	r3, [pc, #436]	; (8005304 <HAL_RCC_OscConfig+0x298>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a1b      	ldr	r3, [r3, #32]
 8005158:	496a      	ldr	r1, [pc, #424]	; (8005304 <HAL_RCC_OscConfig+0x298>)
 800515a:	4313      	orrs	r3, r2
 800515c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800515e:	4b69      	ldr	r3, [pc, #420]	; (8005304 <HAL_RCC_OscConfig+0x298>)
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	69db      	ldr	r3, [r3, #28]
 800516a:	021b      	lsls	r3, r3, #8
 800516c:	4965      	ldr	r1, [pc, #404]	; (8005304 <HAL_RCC_OscConfig+0x298>)
 800516e:	4313      	orrs	r3, r2
 8005170:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d109      	bne.n	800518c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a1b      	ldr	r3, [r3, #32]
 800517c:	4618      	mov	r0, r3
 800517e:	f000 fcff 	bl	8005b80 <RCC_SetFlashLatencyFromMSIRange>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d001      	beq.n	800518c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e34d      	b.n	8005828 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800518c:	f000 fc36 	bl	80059fc <HAL_RCC_GetSysClockFreq>
 8005190:	4601      	mov	r1, r0
 8005192:	4b5c      	ldr	r3, [pc, #368]	; (8005304 <HAL_RCC_OscConfig+0x298>)
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	091b      	lsrs	r3, r3, #4
 8005198:	f003 030f 	and.w	r3, r3, #15
 800519c:	4a5a      	ldr	r2, [pc, #360]	; (8005308 <HAL_RCC_OscConfig+0x29c>)
 800519e:	5cd3      	ldrb	r3, [r2, r3]
 80051a0:	f003 031f 	and.w	r3, r3, #31
 80051a4:	fa21 f303 	lsr.w	r3, r1, r3
 80051a8:	4a58      	ldr	r2, [pc, #352]	; (800530c <HAL_RCC_OscConfig+0x2a0>)
 80051aa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80051ac:	4b58      	ldr	r3, [pc, #352]	; (8005310 <HAL_RCC_OscConfig+0x2a4>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4618      	mov	r0, r3
 80051b2:	f7fe f8b3 	bl	800331c <HAL_InitTick>
 80051b6:	4603      	mov	r3, r0
 80051b8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80051ba:	7bfb      	ldrb	r3, [r7, #15]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d052      	beq.n	8005266 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80051c0:	7bfb      	ldrb	r3, [r7, #15]
 80051c2:	e331      	b.n	8005828 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d032      	beq.n	8005232 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80051cc:	4b4d      	ldr	r3, [pc, #308]	; (8005304 <HAL_RCC_OscConfig+0x298>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a4c      	ldr	r2, [pc, #304]	; (8005304 <HAL_RCC_OscConfig+0x298>)
 80051d2:	f043 0301 	orr.w	r3, r3, #1
 80051d6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80051d8:	f7fe f8f0 	bl	80033bc <HAL_GetTick>
 80051dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80051de:	e008      	b.n	80051f2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80051e0:	f7fe f8ec 	bl	80033bc <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d901      	bls.n	80051f2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e31a      	b.n	8005828 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80051f2:	4b44      	ldr	r3, [pc, #272]	; (8005304 <HAL_RCC_OscConfig+0x298>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d0f0      	beq.n	80051e0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80051fe:	4b41      	ldr	r3, [pc, #260]	; (8005304 <HAL_RCC_OscConfig+0x298>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a40      	ldr	r2, [pc, #256]	; (8005304 <HAL_RCC_OscConfig+0x298>)
 8005204:	f043 0308 	orr.w	r3, r3, #8
 8005208:	6013      	str	r3, [r2, #0]
 800520a:	4b3e      	ldr	r3, [pc, #248]	; (8005304 <HAL_RCC_OscConfig+0x298>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	493b      	ldr	r1, [pc, #236]	; (8005304 <HAL_RCC_OscConfig+0x298>)
 8005218:	4313      	orrs	r3, r2
 800521a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800521c:	4b39      	ldr	r3, [pc, #228]	; (8005304 <HAL_RCC_OscConfig+0x298>)
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	69db      	ldr	r3, [r3, #28]
 8005228:	021b      	lsls	r3, r3, #8
 800522a:	4936      	ldr	r1, [pc, #216]	; (8005304 <HAL_RCC_OscConfig+0x298>)
 800522c:	4313      	orrs	r3, r2
 800522e:	604b      	str	r3, [r1, #4]
 8005230:	e01a      	b.n	8005268 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005232:	4b34      	ldr	r3, [pc, #208]	; (8005304 <HAL_RCC_OscConfig+0x298>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a33      	ldr	r2, [pc, #204]	; (8005304 <HAL_RCC_OscConfig+0x298>)
 8005238:	f023 0301 	bic.w	r3, r3, #1
 800523c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800523e:	f7fe f8bd 	bl	80033bc <HAL_GetTick>
 8005242:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005244:	e008      	b.n	8005258 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005246:	f7fe f8b9 	bl	80033bc <HAL_GetTick>
 800524a:	4602      	mov	r2, r0
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	2b02      	cmp	r3, #2
 8005252:	d901      	bls.n	8005258 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e2e7      	b.n	8005828 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005258:	4b2a      	ldr	r3, [pc, #168]	; (8005304 <HAL_RCC_OscConfig+0x298>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0302 	and.w	r3, r3, #2
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1f0      	bne.n	8005246 <HAL_RCC_OscConfig+0x1da>
 8005264:	e000      	b.n	8005268 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005266:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0301 	and.w	r3, r3, #1
 8005270:	2b00      	cmp	r3, #0
 8005272:	d074      	beq.n	800535e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	2b08      	cmp	r3, #8
 8005278:	d005      	beq.n	8005286 <HAL_RCC_OscConfig+0x21a>
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	2b0c      	cmp	r3, #12
 800527e:	d10e      	bne.n	800529e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	2b03      	cmp	r3, #3
 8005284:	d10b      	bne.n	800529e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005286:	4b1f      	ldr	r3, [pc, #124]	; (8005304 <HAL_RCC_OscConfig+0x298>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d064      	beq.n	800535c <HAL_RCC_OscConfig+0x2f0>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d160      	bne.n	800535c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e2c4      	b.n	8005828 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052a6:	d106      	bne.n	80052b6 <HAL_RCC_OscConfig+0x24a>
 80052a8:	4b16      	ldr	r3, [pc, #88]	; (8005304 <HAL_RCC_OscConfig+0x298>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a15      	ldr	r2, [pc, #84]	; (8005304 <HAL_RCC_OscConfig+0x298>)
 80052ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052b2:	6013      	str	r3, [r2, #0]
 80052b4:	e01d      	b.n	80052f2 <HAL_RCC_OscConfig+0x286>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052be:	d10c      	bne.n	80052da <HAL_RCC_OscConfig+0x26e>
 80052c0:	4b10      	ldr	r3, [pc, #64]	; (8005304 <HAL_RCC_OscConfig+0x298>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a0f      	ldr	r2, [pc, #60]	; (8005304 <HAL_RCC_OscConfig+0x298>)
 80052c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052ca:	6013      	str	r3, [r2, #0]
 80052cc:	4b0d      	ldr	r3, [pc, #52]	; (8005304 <HAL_RCC_OscConfig+0x298>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a0c      	ldr	r2, [pc, #48]	; (8005304 <HAL_RCC_OscConfig+0x298>)
 80052d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052d6:	6013      	str	r3, [r2, #0]
 80052d8:	e00b      	b.n	80052f2 <HAL_RCC_OscConfig+0x286>
 80052da:	4b0a      	ldr	r3, [pc, #40]	; (8005304 <HAL_RCC_OscConfig+0x298>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a09      	ldr	r2, [pc, #36]	; (8005304 <HAL_RCC_OscConfig+0x298>)
 80052e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052e4:	6013      	str	r3, [r2, #0]
 80052e6:	4b07      	ldr	r3, [pc, #28]	; (8005304 <HAL_RCC_OscConfig+0x298>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a06      	ldr	r2, [pc, #24]	; (8005304 <HAL_RCC_OscConfig+0x298>)
 80052ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052f0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d01c      	beq.n	8005334 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052fa:	f7fe f85f 	bl	80033bc <HAL_GetTick>
 80052fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005300:	e011      	b.n	8005326 <HAL_RCC_OscConfig+0x2ba>
 8005302:	bf00      	nop
 8005304:	40021000 	.word	0x40021000
 8005308:	0800cab4 	.word	0x0800cab4
 800530c:	20000008 	.word	0x20000008
 8005310:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005314:	f7fe f852 	bl	80033bc <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	2b64      	cmp	r3, #100	; 0x64
 8005320:	d901      	bls.n	8005326 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e280      	b.n	8005828 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005326:	4baf      	ldr	r3, [pc, #700]	; (80055e4 <HAL_RCC_OscConfig+0x578>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d0f0      	beq.n	8005314 <HAL_RCC_OscConfig+0x2a8>
 8005332:	e014      	b.n	800535e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005334:	f7fe f842 	bl	80033bc <HAL_GetTick>
 8005338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800533a:	e008      	b.n	800534e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800533c:	f7fe f83e 	bl	80033bc <HAL_GetTick>
 8005340:	4602      	mov	r2, r0
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	2b64      	cmp	r3, #100	; 0x64
 8005348:	d901      	bls.n	800534e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e26c      	b.n	8005828 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800534e:	4ba5      	ldr	r3, [pc, #660]	; (80055e4 <HAL_RCC_OscConfig+0x578>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1f0      	bne.n	800533c <HAL_RCC_OscConfig+0x2d0>
 800535a:	e000      	b.n	800535e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800535c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0302 	and.w	r3, r3, #2
 8005366:	2b00      	cmp	r3, #0
 8005368:	d060      	beq.n	800542c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	2b04      	cmp	r3, #4
 800536e:	d005      	beq.n	800537c <HAL_RCC_OscConfig+0x310>
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	2b0c      	cmp	r3, #12
 8005374:	d119      	bne.n	80053aa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	2b02      	cmp	r3, #2
 800537a:	d116      	bne.n	80053aa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800537c:	4b99      	ldr	r3, [pc, #612]	; (80055e4 <HAL_RCC_OscConfig+0x578>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005384:	2b00      	cmp	r3, #0
 8005386:	d005      	beq.n	8005394 <HAL_RCC_OscConfig+0x328>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d101      	bne.n	8005394 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e249      	b.n	8005828 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005394:	4b93      	ldr	r3, [pc, #588]	; (80055e4 <HAL_RCC_OscConfig+0x578>)
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	061b      	lsls	r3, r3, #24
 80053a2:	4990      	ldr	r1, [pc, #576]	; (80055e4 <HAL_RCC_OscConfig+0x578>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053a8:	e040      	b.n	800542c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d023      	beq.n	80053fa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053b2:	4b8c      	ldr	r3, [pc, #560]	; (80055e4 <HAL_RCC_OscConfig+0x578>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a8b      	ldr	r2, [pc, #556]	; (80055e4 <HAL_RCC_OscConfig+0x578>)
 80053b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053be:	f7fd fffd 	bl	80033bc <HAL_GetTick>
 80053c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053c4:	e008      	b.n	80053d8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053c6:	f7fd fff9 	bl	80033bc <HAL_GetTick>
 80053ca:	4602      	mov	r2, r0
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d901      	bls.n	80053d8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e227      	b.n	8005828 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053d8:	4b82      	ldr	r3, [pc, #520]	; (80055e4 <HAL_RCC_OscConfig+0x578>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d0f0      	beq.n	80053c6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053e4:	4b7f      	ldr	r3, [pc, #508]	; (80055e4 <HAL_RCC_OscConfig+0x578>)
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	061b      	lsls	r3, r3, #24
 80053f2:	497c      	ldr	r1, [pc, #496]	; (80055e4 <HAL_RCC_OscConfig+0x578>)
 80053f4:	4313      	orrs	r3, r2
 80053f6:	604b      	str	r3, [r1, #4]
 80053f8:	e018      	b.n	800542c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053fa:	4b7a      	ldr	r3, [pc, #488]	; (80055e4 <HAL_RCC_OscConfig+0x578>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a79      	ldr	r2, [pc, #484]	; (80055e4 <HAL_RCC_OscConfig+0x578>)
 8005400:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005404:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005406:	f7fd ffd9 	bl	80033bc <HAL_GetTick>
 800540a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800540c:	e008      	b.n	8005420 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800540e:	f7fd ffd5 	bl	80033bc <HAL_GetTick>
 8005412:	4602      	mov	r2, r0
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	2b02      	cmp	r3, #2
 800541a:	d901      	bls.n	8005420 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e203      	b.n	8005828 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005420:	4b70      	ldr	r3, [pc, #448]	; (80055e4 <HAL_RCC_OscConfig+0x578>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1f0      	bne.n	800540e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 0308 	and.w	r3, r3, #8
 8005434:	2b00      	cmp	r3, #0
 8005436:	d03c      	beq.n	80054b2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	695b      	ldr	r3, [r3, #20]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d01c      	beq.n	800547a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005440:	4b68      	ldr	r3, [pc, #416]	; (80055e4 <HAL_RCC_OscConfig+0x578>)
 8005442:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005446:	4a67      	ldr	r2, [pc, #412]	; (80055e4 <HAL_RCC_OscConfig+0x578>)
 8005448:	f043 0301 	orr.w	r3, r3, #1
 800544c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005450:	f7fd ffb4 	bl	80033bc <HAL_GetTick>
 8005454:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005456:	e008      	b.n	800546a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005458:	f7fd ffb0 	bl	80033bc <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	2b02      	cmp	r3, #2
 8005464:	d901      	bls.n	800546a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e1de      	b.n	8005828 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800546a:	4b5e      	ldr	r3, [pc, #376]	; (80055e4 <HAL_RCC_OscConfig+0x578>)
 800546c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005470:	f003 0302 	and.w	r3, r3, #2
 8005474:	2b00      	cmp	r3, #0
 8005476:	d0ef      	beq.n	8005458 <HAL_RCC_OscConfig+0x3ec>
 8005478:	e01b      	b.n	80054b2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800547a:	4b5a      	ldr	r3, [pc, #360]	; (80055e4 <HAL_RCC_OscConfig+0x578>)
 800547c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005480:	4a58      	ldr	r2, [pc, #352]	; (80055e4 <HAL_RCC_OscConfig+0x578>)
 8005482:	f023 0301 	bic.w	r3, r3, #1
 8005486:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800548a:	f7fd ff97 	bl	80033bc <HAL_GetTick>
 800548e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005490:	e008      	b.n	80054a4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005492:	f7fd ff93 	bl	80033bc <HAL_GetTick>
 8005496:	4602      	mov	r2, r0
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	2b02      	cmp	r3, #2
 800549e:	d901      	bls.n	80054a4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	e1c1      	b.n	8005828 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80054a4:	4b4f      	ldr	r3, [pc, #316]	; (80055e4 <HAL_RCC_OscConfig+0x578>)
 80054a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054aa:	f003 0302 	and.w	r3, r3, #2
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d1ef      	bne.n	8005492 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0304 	and.w	r3, r3, #4
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	f000 80a6 	beq.w	800560c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054c0:	2300      	movs	r3, #0
 80054c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80054c4:	4b47      	ldr	r3, [pc, #284]	; (80055e4 <HAL_RCC_OscConfig+0x578>)
 80054c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d10d      	bne.n	80054ec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054d0:	4b44      	ldr	r3, [pc, #272]	; (80055e4 <HAL_RCC_OscConfig+0x578>)
 80054d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054d4:	4a43      	ldr	r2, [pc, #268]	; (80055e4 <HAL_RCC_OscConfig+0x578>)
 80054d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054da:	6593      	str	r3, [r2, #88]	; 0x58
 80054dc:	4b41      	ldr	r3, [pc, #260]	; (80055e4 <HAL_RCC_OscConfig+0x578>)
 80054de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054e4:	60bb      	str	r3, [r7, #8]
 80054e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054e8:	2301      	movs	r3, #1
 80054ea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054ec:	4b3e      	ldr	r3, [pc, #248]	; (80055e8 <HAL_RCC_OscConfig+0x57c>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d118      	bne.n	800552a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054f8:	4b3b      	ldr	r3, [pc, #236]	; (80055e8 <HAL_RCC_OscConfig+0x57c>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a3a      	ldr	r2, [pc, #232]	; (80055e8 <HAL_RCC_OscConfig+0x57c>)
 80054fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005502:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005504:	f7fd ff5a 	bl	80033bc <HAL_GetTick>
 8005508:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800550a:	e008      	b.n	800551e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800550c:	f7fd ff56 	bl	80033bc <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	2b02      	cmp	r3, #2
 8005518:	d901      	bls.n	800551e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e184      	b.n	8005828 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800551e:	4b32      	ldr	r3, [pc, #200]	; (80055e8 <HAL_RCC_OscConfig+0x57c>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005526:	2b00      	cmp	r3, #0
 8005528:	d0f0      	beq.n	800550c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	2b01      	cmp	r3, #1
 8005530:	d108      	bne.n	8005544 <HAL_RCC_OscConfig+0x4d8>
 8005532:	4b2c      	ldr	r3, [pc, #176]	; (80055e4 <HAL_RCC_OscConfig+0x578>)
 8005534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005538:	4a2a      	ldr	r2, [pc, #168]	; (80055e4 <HAL_RCC_OscConfig+0x578>)
 800553a:	f043 0301 	orr.w	r3, r3, #1
 800553e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005542:	e024      	b.n	800558e <HAL_RCC_OscConfig+0x522>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	2b05      	cmp	r3, #5
 800554a:	d110      	bne.n	800556e <HAL_RCC_OscConfig+0x502>
 800554c:	4b25      	ldr	r3, [pc, #148]	; (80055e4 <HAL_RCC_OscConfig+0x578>)
 800554e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005552:	4a24      	ldr	r2, [pc, #144]	; (80055e4 <HAL_RCC_OscConfig+0x578>)
 8005554:	f043 0304 	orr.w	r3, r3, #4
 8005558:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800555c:	4b21      	ldr	r3, [pc, #132]	; (80055e4 <HAL_RCC_OscConfig+0x578>)
 800555e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005562:	4a20      	ldr	r2, [pc, #128]	; (80055e4 <HAL_RCC_OscConfig+0x578>)
 8005564:	f043 0301 	orr.w	r3, r3, #1
 8005568:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800556c:	e00f      	b.n	800558e <HAL_RCC_OscConfig+0x522>
 800556e:	4b1d      	ldr	r3, [pc, #116]	; (80055e4 <HAL_RCC_OscConfig+0x578>)
 8005570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005574:	4a1b      	ldr	r2, [pc, #108]	; (80055e4 <HAL_RCC_OscConfig+0x578>)
 8005576:	f023 0301 	bic.w	r3, r3, #1
 800557a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800557e:	4b19      	ldr	r3, [pc, #100]	; (80055e4 <HAL_RCC_OscConfig+0x578>)
 8005580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005584:	4a17      	ldr	r2, [pc, #92]	; (80055e4 <HAL_RCC_OscConfig+0x578>)
 8005586:	f023 0304 	bic.w	r3, r3, #4
 800558a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d016      	beq.n	80055c4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005596:	f7fd ff11 	bl	80033bc <HAL_GetTick>
 800559a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800559c:	e00a      	b.n	80055b4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800559e:	f7fd ff0d 	bl	80033bc <HAL_GetTick>
 80055a2:	4602      	mov	r2, r0
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d901      	bls.n	80055b4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	e139      	b.n	8005828 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055b4:	4b0b      	ldr	r3, [pc, #44]	; (80055e4 <HAL_RCC_OscConfig+0x578>)
 80055b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d0ed      	beq.n	800559e <HAL_RCC_OscConfig+0x532>
 80055c2:	e01a      	b.n	80055fa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055c4:	f7fd fefa 	bl	80033bc <HAL_GetTick>
 80055c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80055ca:	e00f      	b.n	80055ec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055cc:	f7fd fef6 	bl	80033bc <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055da:	4293      	cmp	r3, r2
 80055dc:	d906      	bls.n	80055ec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e122      	b.n	8005828 <HAL_RCC_OscConfig+0x7bc>
 80055e2:	bf00      	nop
 80055e4:	40021000 	.word	0x40021000
 80055e8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80055ec:	4b90      	ldr	r3, [pc, #576]	; (8005830 <HAL_RCC_OscConfig+0x7c4>)
 80055ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055f2:	f003 0302 	and.w	r3, r3, #2
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1e8      	bne.n	80055cc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055fa:	7ffb      	ldrb	r3, [r7, #31]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d105      	bne.n	800560c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005600:	4b8b      	ldr	r3, [pc, #556]	; (8005830 <HAL_RCC_OscConfig+0x7c4>)
 8005602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005604:	4a8a      	ldr	r2, [pc, #552]	; (8005830 <HAL_RCC_OscConfig+0x7c4>)
 8005606:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800560a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005610:	2b00      	cmp	r3, #0
 8005612:	f000 8108 	beq.w	8005826 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800561a:	2b02      	cmp	r3, #2
 800561c:	f040 80d0 	bne.w	80057c0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005620:	4b83      	ldr	r3, [pc, #524]	; (8005830 <HAL_RCC_OscConfig+0x7c4>)
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	f003 0203 	and.w	r2, r3, #3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005630:	429a      	cmp	r2, r3
 8005632:	d130      	bne.n	8005696 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800563e:	3b01      	subs	r3, #1
 8005640:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005642:	429a      	cmp	r2, r3
 8005644:	d127      	bne.n	8005696 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005650:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005652:	429a      	cmp	r2, r3
 8005654:	d11f      	bne.n	8005696 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005660:	2a07      	cmp	r2, #7
 8005662:	bf14      	ite	ne
 8005664:	2201      	movne	r2, #1
 8005666:	2200      	moveq	r2, #0
 8005668:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800566a:	4293      	cmp	r3, r2
 800566c:	d113      	bne.n	8005696 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005678:	085b      	lsrs	r3, r3, #1
 800567a:	3b01      	subs	r3, #1
 800567c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800567e:	429a      	cmp	r2, r3
 8005680:	d109      	bne.n	8005696 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568c:	085b      	lsrs	r3, r3, #1
 800568e:	3b01      	subs	r3, #1
 8005690:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005692:	429a      	cmp	r2, r3
 8005694:	d06e      	beq.n	8005774 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	2b0c      	cmp	r3, #12
 800569a:	d069      	beq.n	8005770 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800569c:	4b64      	ldr	r3, [pc, #400]	; (8005830 <HAL_RCC_OscConfig+0x7c4>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d105      	bne.n	80056b4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80056a8:	4b61      	ldr	r3, [pc, #388]	; (8005830 <HAL_RCC_OscConfig+0x7c4>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d001      	beq.n	80056b8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e0b7      	b.n	8005828 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80056b8:	4b5d      	ldr	r3, [pc, #372]	; (8005830 <HAL_RCC_OscConfig+0x7c4>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a5c      	ldr	r2, [pc, #368]	; (8005830 <HAL_RCC_OscConfig+0x7c4>)
 80056be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056c2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80056c4:	f7fd fe7a 	bl	80033bc <HAL_GetTick>
 80056c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056ca:	e008      	b.n	80056de <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056cc:	f7fd fe76 	bl	80033bc <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d901      	bls.n	80056de <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e0a4      	b.n	8005828 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056de:	4b54      	ldr	r3, [pc, #336]	; (8005830 <HAL_RCC_OscConfig+0x7c4>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1f0      	bne.n	80056cc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056ea:	4b51      	ldr	r3, [pc, #324]	; (8005830 <HAL_RCC_OscConfig+0x7c4>)
 80056ec:	68da      	ldr	r2, [r3, #12]
 80056ee:	4b51      	ldr	r3, [pc, #324]	; (8005834 <HAL_RCC_OscConfig+0x7c8>)
 80056f0:	4013      	ands	r3, r2
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80056fa:	3a01      	subs	r2, #1
 80056fc:	0112      	lsls	r2, r2, #4
 80056fe:	4311      	orrs	r1, r2
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005704:	0212      	lsls	r2, r2, #8
 8005706:	4311      	orrs	r1, r2
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800570c:	0852      	lsrs	r2, r2, #1
 800570e:	3a01      	subs	r2, #1
 8005710:	0552      	lsls	r2, r2, #21
 8005712:	4311      	orrs	r1, r2
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005718:	0852      	lsrs	r2, r2, #1
 800571a:	3a01      	subs	r2, #1
 800571c:	0652      	lsls	r2, r2, #25
 800571e:	4311      	orrs	r1, r2
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005724:	0912      	lsrs	r2, r2, #4
 8005726:	0452      	lsls	r2, r2, #17
 8005728:	430a      	orrs	r2, r1
 800572a:	4941      	ldr	r1, [pc, #260]	; (8005830 <HAL_RCC_OscConfig+0x7c4>)
 800572c:	4313      	orrs	r3, r2
 800572e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005730:	4b3f      	ldr	r3, [pc, #252]	; (8005830 <HAL_RCC_OscConfig+0x7c4>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a3e      	ldr	r2, [pc, #248]	; (8005830 <HAL_RCC_OscConfig+0x7c4>)
 8005736:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800573a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800573c:	4b3c      	ldr	r3, [pc, #240]	; (8005830 <HAL_RCC_OscConfig+0x7c4>)
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	4a3b      	ldr	r2, [pc, #236]	; (8005830 <HAL_RCC_OscConfig+0x7c4>)
 8005742:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005746:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005748:	f7fd fe38 	bl	80033bc <HAL_GetTick>
 800574c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800574e:	e008      	b.n	8005762 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005750:	f7fd fe34 	bl	80033bc <HAL_GetTick>
 8005754:	4602      	mov	r2, r0
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	2b02      	cmp	r3, #2
 800575c:	d901      	bls.n	8005762 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800575e:	2303      	movs	r3, #3
 8005760:	e062      	b.n	8005828 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005762:	4b33      	ldr	r3, [pc, #204]	; (8005830 <HAL_RCC_OscConfig+0x7c4>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d0f0      	beq.n	8005750 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800576e:	e05a      	b.n	8005826 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e059      	b.n	8005828 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005774:	4b2e      	ldr	r3, [pc, #184]	; (8005830 <HAL_RCC_OscConfig+0x7c4>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800577c:	2b00      	cmp	r3, #0
 800577e:	d152      	bne.n	8005826 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005780:	4b2b      	ldr	r3, [pc, #172]	; (8005830 <HAL_RCC_OscConfig+0x7c4>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a2a      	ldr	r2, [pc, #168]	; (8005830 <HAL_RCC_OscConfig+0x7c4>)
 8005786:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800578a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800578c:	4b28      	ldr	r3, [pc, #160]	; (8005830 <HAL_RCC_OscConfig+0x7c4>)
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	4a27      	ldr	r2, [pc, #156]	; (8005830 <HAL_RCC_OscConfig+0x7c4>)
 8005792:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005796:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005798:	f7fd fe10 	bl	80033bc <HAL_GetTick>
 800579c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800579e:	e008      	b.n	80057b2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057a0:	f7fd fe0c 	bl	80033bc <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d901      	bls.n	80057b2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e03a      	b.n	8005828 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057b2:	4b1f      	ldr	r3, [pc, #124]	; (8005830 <HAL_RCC_OscConfig+0x7c4>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d0f0      	beq.n	80057a0 <HAL_RCC_OscConfig+0x734>
 80057be:	e032      	b.n	8005826 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	2b0c      	cmp	r3, #12
 80057c4:	d02d      	beq.n	8005822 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057c6:	4b1a      	ldr	r3, [pc, #104]	; (8005830 <HAL_RCC_OscConfig+0x7c4>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a19      	ldr	r2, [pc, #100]	; (8005830 <HAL_RCC_OscConfig+0x7c4>)
 80057cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057d0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80057d2:	4b17      	ldr	r3, [pc, #92]	; (8005830 <HAL_RCC_OscConfig+0x7c4>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d105      	bne.n	80057ea <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80057de:	4b14      	ldr	r3, [pc, #80]	; (8005830 <HAL_RCC_OscConfig+0x7c4>)
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	4a13      	ldr	r2, [pc, #76]	; (8005830 <HAL_RCC_OscConfig+0x7c4>)
 80057e4:	f023 0303 	bic.w	r3, r3, #3
 80057e8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80057ea:	4b11      	ldr	r3, [pc, #68]	; (8005830 <HAL_RCC_OscConfig+0x7c4>)
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	4a10      	ldr	r2, [pc, #64]	; (8005830 <HAL_RCC_OscConfig+0x7c4>)
 80057f0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80057f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057f8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057fa:	f7fd fddf 	bl	80033bc <HAL_GetTick>
 80057fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005800:	e008      	b.n	8005814 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005802:	f7fd fddb 	bl	80033bc <HAL_GetTick>
 8005806:	4602      	mov	r2, r0
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	2b02      	cmp	r3, #2
 800580e:	d901      	bls.n	8005814 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8005810:	2303      	movs	r3, #3
 8005812:	e009      	b.n	8005828 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005814:	4b06      	ldr	r3, [pc, #24]	; (8005830 <HAL_RCC_OscConfig+0x7c4>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1f0      	bne.n	8005802 <HAL_RCC_OscConfig+0x796>
 8005820:	e001      	b.n	8005826 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e000      	b.n	8005828 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	3720      	adds	r7, #32
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	40021000 	.word	0x40021000
 8005834:	f99d808c 	.word	0xf99d808c

08005838 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d101      	bne.n	800584c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e0c8      	b.n	80059de <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800584c:	4b66      	ldr	r3, [pc, #408]	; (80059e8 <HAL_RCC_ClockConfig+0x1b0>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 0307 	and.w	r3, r3, #7
 8005854:	683a      	ldr	r2, [r7, #0]
 8005856:	429a      	cmp	r2, r3
 8005858:	d910      	bls.n	800587c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800585a:	4b63      	ldr	r3, [pc, #396]	; (80059e8 <HAL_RCC_ClockConfig+0x1b0>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f023 0207 	bic.w	r2, r3, #7
 8005862:	4961      	ldr	r1, [pc, #388]	; (80059e8 <HAL_RCC_ClockConfig+0x1b0>)
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	4313      	orrs	r3, r2
 8005868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800586a:	4b5f      	ldr	r3, [pc, #380]	; (80059e8 <HAL_RCC_ClockConfig+0x1b0>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 0307 	and.w	r3, r3, #7
 8005872:	683a      	ldr	r2, [r7, #0]
 8005874:	429a      	cmp	r2, r3
 8005876:	d001      	beq.n	800587c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e0b0      	b.n	80059de <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0301 	and.w	r3, r3, #1
 8005884:	2b00      	cmp	r3, #0
 8005886:	d04c      	beq.n	8005922 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	2b03      	cmp	r3, #3
 800588e:	d107      	bne.n	80058a0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005890:	4b56      	ldr	r3, [pc, #344]	; (80059ec <HAL_RCC_ClockConfig+0x1b4>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005898:	2b00      	cmp	r3, #0
 800589a:	d121      	bne.n	80058e0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e09e      	b.n	80059de <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d107      	bne.n	80058b8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058a8:	4b50      	ldr	r3, [pc, #320]	; (80059ec <HAL_RCC_ClockConfig+0x1b4>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d115      	bne.n	80058e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e092      	b.n	80059de <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d107      	bne.n	80058d0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80058c0:	4b4a      	ldr	r3, [pc, #296]	; (80059ec <HAL_RCC_ClockConfig+0x1b4>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0302 	and.w	r3, r3, #2
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d109      	bne.n	80058e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e086      	b.n	80059de <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058d0:	4b46      	ldr	r3, [pc, #280]	; (80059ec <HAL_RCC_ClockConfig+0x1b4>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d101      	bne.n	80058e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e07e      	b.n	80059de <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80058e0:	4b42      	ldr	r3, [pc, #264]	; (80059ec <HAL_RCC_ClockConfig+0x1b4>)
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f023 0203 	bic.w	r2, r3, #3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	493f      	ldr	r1, [pc, #252]	; (80059ec <HAL_RCC_ClockConfig+0x1b4>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058f2:	f7fd fd63 	bl	80033bc <HAL_GetTick>
 80058f6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058f8:	e00a      	b.n	8005910 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058fa:	f7fd fd5f 	bl	80033bc <HAL_GetTick>
 80058fe:	4602      	mov	r2, r0
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	f241 3288 	movw	r2, #5000	; 0x1388
 8005908:	4293      	cmp	r3, r2
 800590a:	d901      	bls.n	8005910 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	e066      	b.n	80059de <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005910:	4b36      	ldr	r3, [pc, #216]	; (80059ec <HAL_RCC_ClockConfig+0x1b4>)
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	f003 020c 	and.w	r2, r3, #12
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	429a      	cmp	r2, r3
 8005920:	d1eb      	bne.n	80058fa <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0302 	and.w	r3, r3, #2
 800592a:	2b00      	cmp	r3, #0
 800592c:	d008      	beq.n	8005940 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800592e:	4b2f      	ldr	r3, [pc, #188]	; (80059ec <HAL_RCC_ClockConfig+0x1b4>)
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	492c      	ldr	r1, [pc, #176]	; (80059ec <HAL_RCC_ClockConfig+0x1b4>)
 800593c:	4313      	orrs	r3, r2
 800593e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005940:	4b29      	ldr	r3, [pc, #164]	; (80059e8 <HAL_RCC_ClockConfig+0x1b0>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 0307 	and.w	r3, r3, #7
 8005948:	683a      	ldr	r2, [r7, #0]
 800594a:	429a      	cmp	r2, r3
 800594c:	d210      	bcs.n	8005970 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800594e:	4b26      	ldr	r3, [pc, #152]	; (80059e8 <HAL_RCC_ClockConfig+0x1b0>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f023 0207 	bic.w	r2, r3, #7
 8005956:	4924      	ldr	r1, [pc, #144]	; (80059e8 <HAL_RCC_ClockConfig+0x1b0>)
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	4313      	orrs	r3, r2
 800595c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800595e:	4b22      	ldr	r3, [pc, #136]	; (80059e8 <HAL_RCC_ClockConfig+0x1b0>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0307 	and.w	r3, r3, #7
 8005966:	683a      	ldr	r2, [r7, #0]
 8005968:	429a      	cmp	r2, r3
 800596a:	d001      	beq.n	8005970 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e036      	b.n	80059de <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0304 	and.w	r3, r3, #4
 8005978:	2b00      	cmp	r3, #0
 800597a:	d008      	beq.n	800598e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800597c:	4b1b      	ldr	r3, [pc, #108]	; (80059ec <HAL_RCC_ClockConfig+0x1b4>)
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	4918      	ldr	r1, [pc, #96]	; (80059ec <HAL_RCC_ClockConfig+0x1b4>)
 800598a:	4313      	orrs	r3, r2
 800598c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0308 	and.w	r3, r3, #8
 8005996:	2b00      	cmp	r3, #0
 8005998:	d009      	beq.n	80059ae <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800599a:	4b14      	ldr	r3, [pc, #80]	; (80059ec <HAL_RCC_ClockConfig+0x1b4>)
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	00db      	lsls	r3, r3, #3
 80059a8:	4910      	ldr	r1, [pc, #64]	; (80059ec <HAL_RCC_ClockConfig+0x1b4>)
 80059aa:	4313      	orrs	r3, r2
 80059ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80059ae:	f000 f825 	bl	80059fc <HAL_RCC_GetSysClockFreq>
 80059b2:	4601      	mov	r1, r0
 80059b4:	4b0d      	ldr	r3, [pc, #52]	; (80059ec <HAL_RCC_ClockConfig+0x1b4>)
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	091b      	lsrs	r3, r3, #4
 80059ba:	f003 030f 	and.w	r3, r3, #15
 80059be:	4a0c      	ldr	r2, [pc, #48]	; (80059f0 <HAL_RCC_ClockConfig+0x1b8>)
 80059c0:	5cd3      	ldrb	r3, [r2, r3]
 80059c2:	f003 031f 	and.w	r3, r3, #31
 80059c6:	fa21 f303 	lsr.w	r3, r1, r3
 80059ca:	4a0a      	ldr	r2, [pc, #40]	; (80059f4 <HAL_RCC_ClockConfig+0x1bc>)
 80059cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80059ce:	4b0a      	ldr	r3, [pc, #40]	; (80059f8 <HAL_RCC_ClockConfig+0x1c0>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7fd fca2 	bl	800331c <HAL_InitTick>
 80059d8:	4603      	mov	r3, r0
 80059da:	72fb      	strb	r3, [r7, #11]

  return status;
 80059dc:	7afb      	ldrb	r3, [r7, #11]
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3710      	adds	r7, #16
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	40022000 	.word	0x40022000
 80059ec:	40021000 	.word	0x40021000
 80059f0:	0800cab4 	.word	0x0800cab4
 80059f4:	20000008 	.word	0x20000008
 80059f8:	2000000c 	.word	0x2000000c

080059fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b089      	sub	sp, #36	; 0x24
 8005a00:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005a02:	2300      	movs	r3, #0
 8005a04:	61fb      	str	r3, [r7, #28]
 8005a06:	2300      	movs	r3, #0
 8005a08:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a0a:	4b3d      	ldr	r3, [pc, #244]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x104>)
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f003 030c 	and.w	r3, r3, #12
 8005a12:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a14:	4b3a      	ldr	r3, [pc, #232]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x104>)
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	f003 0303 	and.w	r3, r3, #3
 8005a1c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d005      	beq.n	8005a30 <HAL_RCC_GetSysClockFreq+0x34>
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	2b0c      	cmp	r3, #12
 8005a28:	d121      	bne.n	8005a6e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d11e      	bne.n	8005a6e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005a30:	4b33      	ldr	r3, [pc, #204]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x104>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 0308 	and.w	r3, r3, #8
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d107      	bne.n	8005a4c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005a3c:	4b30      	ldr	r3, [pc, #192]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x104>)
 8005a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a42:	0a1b      	lsrs	r3, r3, #8
 8005a44:	f003 030f 	and.w	r3, r3, #15
 8005a48:	61fb      	str	r3, [r7, #28]
 8005a4a:	e005      	b.n	8005a58 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005a4c:	4b2c      	ldr	r3, [pc, #176]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x104>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	091b      	lsrs	r3, r3, #4
 8005a52:	f003 030f 	and.w	r3, r3, #15
 8005a56:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005a58:	4a2a      	ldr	r2, [pc, #168]	; (8005b04 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a60:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d10d      	bne.n	8005a84 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005a6c:	e00a      	b.n	8005a84 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	2b04      	cmp	r3, #4
 8005a72:	d102      	bne.n	8005a7a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005a74:	4b24      	ldr	r3, [pc, #144]	; (8005b08 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005a76:	61bb      	str	r3, [r7, #24]
 8005a78:	e004      	b.n	8005a84 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	2b08      	cmp	r3, #8
 8005a7e:	d101      	bne.n	8005a84 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005a80:	4b22      	ldr	r3, [pc, #136]	; (8005b0c <HAL_RCC_GetSysClockFreq+0x110>)
 8005a82:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	2b0c      	cmp	r3, #12
 8005a88:	d133      	bne.n	8005af2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a8a:	4b1d      	ldr	r3, [pc, #116]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x104>)
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	f003 0303 	and.w	r3, r3, #3
 8005a92:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d002      	beq.n	8005aa0 <HAL_RCC_GetSysClockFreq+0xa4>
 8005a9a:	2b03      	cmp	r3, #3
 8005a9c:	d003      	beq.n	8005aa6 <HAL_RCC_GetSysClockFreq+0xaa>
 8005a9e:	e005      	b.n	8005aac <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005aa0:	4b19      	ldr	r3, [pc, #100]	; (8005b08 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005aa2:	617b      	str	r3, [r7, #20]
      break;
 8005aa4:	e005      	b.n	8005ab2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005aa6:	4b19      	ldr	r3, [pc, #100]	; (8005b0c <HAL_RCC_GetSysClockFreq+0x110>)
 8005aa8:	617b      	str	r3, [r7, #20]
      break;
 8005aaa:	e002      	b.n	8005ab2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	617b      	str	r3, [r7, #20]
      break;
 8005ab0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ab2:	4b13      	ldr	r3, [pc, #76]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x104>)
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	091b      	lsrs	r3, r3, #4
 8005ab8:	f003 0307 	and.w	r3, r3, #7
 8005abc:	3301      	adds	r3, #1
 8005abe:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005ac0:	4b0f      	ldr	r3, [pc, #60]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x104>)
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	0a1b      	lsrs	r3, r3, #8
 8005ac6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005aca:	697a      	ldr	r2, [r7, #20]
 8005acc:	fb02 f203 	mul.w	r2, r2, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ad6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ad8:	4b09      	ldr	r3, [pc, #36]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x104>)
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	0e5b      	lsrs	r3, r3, #25
 8005ade:	f003 0303 	and.w	r3, r3, #3
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	005b      	lsls	r3, r3, #1
 8005ae6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005ae8:	697a      	ldr	r2, [r7, #20]
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005af0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005af2:	69bb      	ldr	r3, [r7, #24]
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3724      	adds	r7, #36	; 0x24
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr
 8005b00:	40021000 	.word	0x40021000
 8005b04:	0800cacc 	.word	0x0800cacc
 8005b08:	00f42400 	.word	0x00f42400
 8005b0c:	007a1200 	.word	0x007a1200

08005b10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b10:	b480      	push	{r7}
 8005b12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b14:	4b03      	ldr	r3, [pc, #12]	; (8005b24 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b16:	681b      	ldr	r3, [r3, #0]
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	20000008 	.word	0x20000008

08005b28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005b2c:	f7ff fff0 	bl	8005b10 <HAL_RCC_GetHCLKFreq>
 8005b30:	4601      	mov	r1, r0
 8005b32:	4b06      	ldr	r3, [pc, #24]	; (8005b4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	0a1b      	lsrs	r3, r3, #8
 8005b38:	f003 0307 	and.w	r3, r3, #7
 8005b3c:	4a04      	ldr	r2, [pc, #16]	; (8005b50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b3e:	5cd3      	ldrb	r3, [r2, r3]
 8005b40:	f003 031f 	and.w	r3, r3, #31
 8005b44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	40021000 	.word	0x40021000
 8005b50:	0800cac4 	.word	0x0800cac4

08005b54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005b58:	f7ff ffda 	bl	8005b10 <HAL_RCC_GetHCLKFreq>
 8005b5c:	4601      	mov	r1, r0
 8005b5e:	4b06      	ldr	r3, [pc, #24]	; (8005b78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	0adb      	lsrs	r3, r3, #11
 8005b64:	f003 0307 	and.w	r3, r3, #7
 8005b68:	4a04      	ldr	r2, [pc, #16]	; (8005b7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b6a:	5cd3      	ldrb	r3, [r2, r3]
 8005b6c:	f003 031f 	and.w	r3, r3, #31
 8005b70:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	40021000 	.word	0x40021000
 8005b7c:	0800cac4 	.word	0x0800cac4

08005b80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b086      	sub	sp, #24
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005b88:	2300      	movs	r3, #0
 8005b8a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005b8c:	4b2a      	ldr	r3, [pc, #168]	; (8005c38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d003      	beq.n	8005ba0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005b98:	f7ff f938 	bl	8004e0c <HAL_PWREx_GetVoltageRange>
 8005b9c:	6178      	str	r0, [r7, #20]
 8005b9e:	e014      	b.n	8005bca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ba0:	4b25      	ldr	r3, [pc, #148]	; (8005c38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ba4:	4a24      	ldr	r2, [pc, #144]	; (8005c38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005baa:	6593      	str	r3, [r2, #88]	; 0x58
 8005bac:	4b22      	ldr	r3, [pc, #136]	; (8005c38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bb4:	60fb      	str	r3, [r7, #12]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005bb8:	f7ff f928 	bl	8004e0c <HAL_PWREx_GetVoltageRange>
 8005bbc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005bbe:	4b1e      	ldr	r3, [pc, #120]	; (8005c38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bc2:	4a1d      	ldr	r2, [pc, #116]	; (8005c38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bc8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bd0:	d10b      	bne.n	8005bea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2b80      	cmp	r3, #128	; 0x80
 8005bd6:	d919      	bls.n	8005c0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2ba0      	cmp	r3, #160	; 0xa0
 8005bdc:	d902      	bls.n	8005be4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005bde:	2302      	movs	r3, #2
 8005be0:	613b      	str	r3, [r7, #16]
 8005be2:	e013      	b.n	8005c0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005be4:	2301      	movs	r3, #1
 8005be6:	613b      	str	r3, [r7, #16]
 8005be8:	e010      	b.n	8005c0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2b80      	cmp	r3, #128	; 0x80
 8005bee:	d902      	bls.n	8005bf6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	613b      	str	r3, [r7, #16]
 8005bf4:	e00a      	b.n	8005c0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2b80      	cmp	r3, #128	; 0x80
 8005bfa:	d102      	bne.n	8005c02 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005bfc:	2302      	movs	r3, #2
 8005bfe:	613b      	str	r3, [r7, #16]
 8005c00:	e004      	b.n	8005c0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2b70      	cmp	r3, #112	; 0x70
 8005c06:	d101      	bne.n	8005c0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c08:	2301      	movs	r3, #1
 8005c0a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005c0c:	4b0b      	ldr	r3, [pc, #44]	; (8005c3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f023 0207 	bic.w	r2, r3, #7
 8005c14:	4909      	ldr	r1, [pc, #36]	; (8005c3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005c1c:	4b07      	ldr	r3, [pc, #28]	; (8005c3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 0307 	and.w	r3, r3, #7
 8005c24:	693a      	ldr	r2, [r7, #16]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d001      	beq.n	8005c2e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e000      	b.n	8005c30 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3718      	adds	r7, #24
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	40021000 	.word	0x40021000
 8005c3c:	40022000 	.word	0x40022000

08005c40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b086      	sub	sp, #24
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005c48:	2300      	movs	r3, #0
 8005c4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d03f      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c64:	d01c      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8005c66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c6a:	d802      	bhi.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00e      	beq.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8005c70:	e01f      	b.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8005c72:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c76:	d003      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005c78:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005c7c:	d01c      	beq.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8005c7e:	e018      	b.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005c80:	4b85      	ldr	r3, [pc, #532]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	4a84      	ldr	r2, [pc, #528]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005c86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c8a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005c8c:	e015      	b.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	3304      	adds	r3, #4
 8005c92:	2100      	movs	r1, #0
 8005c94:	4618      	mov	r0, r3
 8005c96:	f000 fac9 	bl	800622c <RCCEx_PLLSAI1_Config>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005c9e:	e00c      	b.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	3320      	adds	r3, #32
 8005ca4:	2100      	movs	r1, #0
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f000 fbb0 	bl	800640c <RCCEx_PLLSAI2_Config>
 8005cac:	4603      	mov	r3, r0
 8005cae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005cb0:	e003      	b.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	74fb      	strb	r3, [r7, #19]
      break;
 8005cb6:	e000      	b.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8005cb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cba:	7cfb      	ldrb	r3, [r7, #19]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d10b      	bne.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005cc0:	4b75      	ldr	r3, [pc, #468]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cc6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cce:	4972      	ldr	r1, [pc, #456]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005cd6:	e001      	b.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cd8:	7cfb      	ldrb	r3, [r7, #19]
 8005cda:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d03f      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005cf0:	d01c      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005cf2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005cf6:	d802      	bhi.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00e      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0xda>
 8005cfc:	e01f      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005cfe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d02:	d003      	beq.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8005d04:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005d08:	d01c      	beq.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8005d0a:	e018      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005d0c:	4b62      	ldr	r3, [pc, #392]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	4a61      	ldr	r2, [pc, #388]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005d12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d16:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d18:	e015      	b.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	3304      	adds	r3, #4
 8005d1e:	2100      	movs	r1, #0
 8005d20:	4618      	mov	r0, r3
 8005d22:	f000 fa83 	bl	800622c <RCCEx_PLLSAI1_Config>
 8005d26:	4603      	mov	r3, r0
 8005d28:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d2a:	e00c      	b.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	3320      	adds	r3, #32
 8005d30:	2100      	movs	r1, #0
 8005d32:	4618      	mov	r0, r3
 8005d34:	f000 fb6a 	bl	800640c <RCCEx_PLLSAI2_Config>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d3c:	e003      	b.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	74fb      	strb	r3, [r7, #19]
      break;
 8005d42:	e000      	b.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005d44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d46:	7cfb      	ldrb	r3, [r7, #19]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d10b      	bne.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005d4c:	4b52      	ldr	r3, [pc, #328]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d52:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d5a:	494f      	ldr	r1, [pc, #316]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005d62:	e001      	b.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d64:	7cfb      	ldrb	r3, [r7, #19]
 8005d66:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	f000 80a0 	beq.w	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d76:	2300      	movs	r3, #0
 8005d78:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005d7a:	4b47      	ldr	r3, [pc, #284]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d101      	bne.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8005d86:	2301      	movs	r3, #1
 8005d88:	e000      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d00d      	beq.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d90:	4b41      	ldr	r3, [pc, #260]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d94:	4a40      	ldr	r2, [pc, #256]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005d96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d9a:	6593      	str	r3, [r2, #88]	; 0x58
 8005d9c:	4b3e      	ldr	r3, [pc, #248]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005da4:	60bb      	str	r3, [r7, #8]
 8005da6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005da8:	2301      	movs	r3, #1
 8005daa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005dac:	4b3b      	ldr	r3, [pc, #236]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a3a      	ldr	r2, [pc, #232]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005db6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005db8:	f7fd fb00 	bl	80033bc <HAL_GetTick>
 8005dbc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005dbe:	e009      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dc0:	f7fd fafc 	bl	80033bc <HAL_GetTick>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	2b02      	cmp	r3, #2
 8005dcc:	d902      	bls.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	74fb      	strb	r3, [r7, #19]
        break;
 8005dd2:	e005      	b.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005dd4:	4b31      	ldr	r3, [pc, #196]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d0ef      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8005de0:	7cfb      	ldrb	r3, [r7, #19]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d15c      	bne.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005de6:	4b2c      	ldr	r3, [pc, #176]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005df0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d01f      	beq.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dfe:	697a      	ldr	r2, [r7, #20]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d019      	beq.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e04:	4b24      	ldr	r3, [pc, #144]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e0e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e10:	4b21      	ldr	r3, [pc, #132]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e16:	4a20      	ldr	r2, [pc, #128]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e20:	4b1d      	ldr	r3, [pc, #116]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e26:	4a1c      	ldr	r2, [pc, #112]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005e28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005e30:	4a19      	ldr	r2, [pc, #100]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	f003 0301 	and.w	r3, r3, #1
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d016      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e42:	f7fd fabb 	bl	80033bc <HAL_GetTick>
 8005e46:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e48:	e00b      	b.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e4a:	f7fd fab7 	bl	80033bc <HAL_GetTick>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d902      	bls.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	74fb      	strb	r3, [r7, #19]
            break;
 8005e60:	e006      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e62:	4b0d      	ldr	r3, [pc, #52]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e68:	f003 0302 	and.w	r3, r3, #2
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d0ec      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8005e70:	7cfb      	ldrb	r3, [r7, #19]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d10c      	bne.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e76:	4b08      	ldr	r3, [pc, #32]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e86:	4904      	ldr	r1, [pc, #16]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005e8e:	e009      	b.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e90:	7cfb      	ldrb	r3, [r7, #19]
 8005e92:	74bb      	strb	r3, [r7, #18]
 8005e94:	e006      	b.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8005e96:	bf00      	nop
 8005e98:	40021000 	.word	0x40021000
 8005e9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ea0:	7cfb      	ldrb	r3, [r7, #19]
 8005ea2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ea4:	7c7b      	ldrb	r3, [r7, #17]
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d105      	bne.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005eaa:	4b9e      	ldr	r3, [pc, #632]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eae:	4a9d      	ldr	r2, [pc, #628]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005eb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005eb4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f003 0301 	and.w	r3, r3, #1
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00a      	beq.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ec2:	4b98      	ldr	r3, [pc, #608]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ec8:	f023 0203 	bic.w	r2, r3, #3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed0:	4994      	ldr	r1, [pc, #592]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0302 	and.w	r3, r3, #2
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d00a      	beq.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ee4:	4b8f      	ldr	r3, [pc, #572]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eea:	f023 020c 	bic.w	r2, r3, #12
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ef2:	498c      	ldr	r1, [pc, #560]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 0304 	and.w	r3, r3, #4
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00a      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f06:	4b87      	ldr	r3, [pc, #540]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f0c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f14:	4983      	ldr	r1, [pc, #524]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005f16:	4313      	orrs	r3, r2
 8005f18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0308 	and.w	r3, r3, #8
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d00a      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005f28:	4b7e      	ldr	r3, [pc, #504]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f2e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f36:	497b      	ldr	r1, [pc, #492]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 0310 	and.w	r3, r3, #16
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00a      	beq.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005f4a:	4b76      	ldr	r3, [pc, #472]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f58:	4972      	ldr	r1, [pc, #456]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0320 	and.w	r3, r3, #32
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00a      	beq.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f6c:	4b6d      	ldr	r3, [pc, #436]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f7a:	496a      	ldr	r1, [pc, #424]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00a      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f8e:	4b65      	ldr	r3, [pc, #404]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f9c:	4961      	ldr	r1, [pc, #388]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00a      	beq.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005fb0:	4b5c      	ldr	r3, [pc, #368]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fb6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fbe:	4959      	ldr	r1, [pc, #356]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00a      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005fd2:	4b54      	ldr	r3, [pc, #336]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fd8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fe0:	4950      	ldr	r1, [pc, #320]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d00a      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005ff4:	4b4b      	ldr	r3, [pc, #300]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ffa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006002:	4948      	ldr	r1, [pc, #288]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006004:	4313      	orrs	r3, r2
 8006006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00a      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006016:	4b43      	ldr	r3, [pc, #268]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800601c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006024:	493f      	ldr	r1, [pc, #252]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006026:	4313      	orrs	r3, r2
 8006028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006034:	2b00      	cmp	r3, #0
 8006036:	d028      	beq.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006038:	4b3a      	ldr	r3, [pc, #232]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800603a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800603e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006046:	4937      	ldr	r1, [pc, #220]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006048:	4313      	orrs	r3, r2
 800604a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006052:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006056:	d106      	bne.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006058:	4b32      	ldr	r3, [pc, #200]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	4a31      	ldr	r2, [pc, #196]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800605e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006062:	60d3      	str	r3, [r2, #12]
 8006064:	e011      	b.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800606a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800606e:	d10c      	bne.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	3304      	adds	r3, #4
 8006074:	2101      	movs	r1, #1
 8006076:	4618      	mov	r0, r3
 8006078:	f000 f8d8 	bl	800622c <RCCEx_PLLSAI1_Config>
 800607c:	4603      	mov	r3, r0
 800607e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006080:	7cfb      	ldrb	r3, [r7, #19]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d001      	beq.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8006086:	7cfb      	ldrb	r3, [r7, #19]
 8006088:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006092:	2b00      	cmp	r3, #0
 8006094:	d028      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006096:	4b23      	ldr	r3, [pc, #140]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800609c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060a4:	491f      	ldr	r1, [pc, #124]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060b4:	d106      	bne.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060b6:	4b1b      	ldr	r3, [pc, #108]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	4a1a      	ldr	r2, [pc, #104]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80060bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060c0:	60d3      	str	r3, [r2, #12]
 80060c2:	e011      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80060cc:	d10c      	bne.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	3304      	adds	r3, #4
 80060d2:	2101      	movs	r1, #1
 80060d4:	4618      	mov	r0, r3
 80060d6:	f000 f8a9 	bl	800622c <RCCEx_PLLSAI1_Config>
 80060da:	4603      	mov	r3, r0
 80060dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80060de:	7cfb      	ldrb	r3, [r7, #19]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d001      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80060e4:	7cfb      	ldrb	r3, [r7, #19]
 80060e6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d02b      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80060f4:	4b0b      	ldr	r3, [pc, #44]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80060f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006102:	4908      	ldr	r1, [pc, #32]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006104:	4313      	orrs	r3, r2
 8006106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800610e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006112:	d109      	bne.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006114:	4b03      	ldr	r3, [pc, #12]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	4a02      	ldr	r2, [pc, #8]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800611a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800611e:	60d3      	str	r3, [r2, #12]
 8006120:	e014      	b.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8006122:	bf00      	nop
 8006124:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800612c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006130:	d10c      	bne.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	3304      	adds	r3, #4
 8006136:	2101      	movs	r1, #1
 8006138:	4618      	mov	r0, r3
 800613a:	f000 f877 	bl	800622c <RCCEx_PLLSAI1_Config>
 800613e:	4603      	mov	r3, r0
 8006140:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006142:	7cfb      	ldrb	r3, [r7, #19]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d001      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8006148:	7cfb      	ldrb	r3, [r7, #19]
 800614a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006154:	2b00      	cmp	r3, #0
 8006156:	d02f      	beq.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006158:	4b2b      	ldr	r3, [pc, #172]	; (8006208 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800615a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800615e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006166:	4928      	ldr	r1, [pc, #160]	; (8006208 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006168:	4313      	orrs	r3, r2
 800616a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006172:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006176:	d10d      	bne.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	3304      	adds	r3, #4
 800617c:	2102      	movs	r1, #2
 800617e:	4618      	mov	r0, r3
 8006180:	f000 f854 	bl	800622c <RCCEx_PLLSAI1_Config>
 8006184:	4603      	mov	r3, r0
 8006186:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006188:	7cfb      	ldrb	r3, [r7, #19]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d014      	beq.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800618e:	7cfb      	ldrb	r3, [r7, #19]
 8006190:	74bb      	strb	r3, [r7, #18]
 8006192:	e011      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006198:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800619c:	d10c      	bne.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	3320      	adds	r3, #32
 80061a2:	2102      	movs	r1, #2
 80061a4:	4618      	mov	r0, r3
 80061a6:	f000 f931 	bl	800640c <RCCEx_PLLSAI2_Config>
 80061aa:	4603      	mov	r3, r0
 80061ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80061ae:	7cfb      	ldrb	r3, [r7, #19]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d001      	beq.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80061b4:	7cfb      	ldrb	r3, [r7, #19]
 80061b6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d00a      	beq.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80061c4:	4b10      	ldr	r3, [pc, #64]	; (8006208 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80061c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061d2:	490d      	ldr	r1, [pc, #52]	; (8006208 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80061d4:	4313      	orrs	r3, r2
 80061d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00b      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80061e6:	4b08      	ldr	r3, [pc, #32]	; (8006208 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80061e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061f6:	4904      	ldr	r1, [pc, #16]	; (8006208 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80061f8:	4313      	orrs	r3, r2
 80061fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80061fe:	7cbb      	ldrb	r3, [r7, #18]
}
 8006200:	4618      	mov	r0, r3
 8006202:	3718      	adds	r7, #24
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	40021000 	.word	0x40021000

0800620c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800620c:	b480      	push	{r7}
 800620e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006210:	4b05      	ldr	r3, [pc, #20]	; (8006228 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a04      	ldr	r2, [pc, #16]	; (8006228 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006216:	f043 0304 	orr.w	r3, r3, #4
 800621a:	6013      	str	r3, [r2, #0]
}
 800621c:	bf00      	nop
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr
 8006226:	bf00      	nop
 8006228:	40021000 	.word	0x40021000

0800622c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b084      	sub	sp, #16
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006236:	2300      	movs	r3, #0
 8006238:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800623a:	4b73      	ldr	r3, [pc, #460]	; (8006408 <RCCEx_PLLSAI1_Config+0x1dc>)
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	f003 0303 	and.w	r3, r3, #3
 8006242:	2b00      	cmp	r3, #0
 8006244:	d018      	beq.n	8006278 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006246:	4b70      	ldr	r3, [pc, #448]	; (8006408 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	f003 0203 	and.w	r2, r3, #3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	429a      	cmp	r2, r3
 8006254:	d10d      	bne.n	8006272 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
       ||
 800625a:	2b00      	cmp	r3, #0
 800625c:	d009      	beq.n	8006272 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800625e:	4b6a      	ldr	r3, [pc, #424]	; (8006408 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	091b      	lsrs	r3, r3, #4
 8006264:	f003 0307 	and.w	r3, r3, #7
 8006268:	1c5a      	adds	r2, r3, #1
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	685b      	ldr	r3, [r3, #4]
       ||
 800626e:	429a      	cmp	r2, r3
 8006270:	d044      	beq.n	80062fc <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	73fb      	strb	r3, [r7, #15]
 8006276:	e041      	b.n	80062fc <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2b02      	cmp	r3, #2
 800627e:	d00c      	beq.n	800629a <RCCEx_PLLSAI1_Config+0x6e>
 8006280:	2b03      	cmp	r3, #3
 8006282:	d013      	beq.n	80062ac <RCCEx_PLLSAI1_Config+0x80>
 8006284:	2b01      	cmp	r3, #1
 8006286:	d120      	bne.n	80062ca <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006288:	4b5f      	ldr	r3, [pc, #380]	; (8006408 <RCCEx_PLLSAI1_Config+0x1dc>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f003 0302 	and.w	r3, r3, #2
 8006290:	2b00      	cmp	r3, #0
 8006292:	d11d      	bne.n	80062d0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006298:	e01a      	b.n	80062d0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800629a:	4b5b      	ldr	r3, [pc, #364]	; (8006408 <RCCEx_PLLSAI1_Config+0x1dc>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d116      	bne.n	80062d4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062aa:	e013      	b.n	80062d4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80062ac:	4b56      	ldr	r3, [pc, #344]	; (8006408 <RCCEx_PLLSAI1_Config+0x1dc>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d10f      	bne.n	80062d8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80062b8:	4b53      	ldr	r3, [pc, #332]	; (8006408 <RCCEx_PLLSAI1_Config+0x1dc>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d109      	bne.n	80062d8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80062c8:	e006      	b.n	80062d8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	73fb      	strb	r3, [r7, #15]
      break;
 80062ce:	e004      	b.n	80062da <RCCEx_PLLSAI1_Config+0xae>
      break;
 80062d0:	bf00      	nop
 80062d2:	e002      	b.n	80062da <RCCEx_PLLSAI1_Config+0xae>
      break;
 80062d4:	bf00      	nop
 80062d6:	e000      	b.n	80062da <RCCEx_PLLSAI1_Config+0xae>
      break;
 80062d8:	bf00      	nop
    }

    if(status == HAL_OK)
 80062da:	7bfb      	ldrb	r3, [r7, #15]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d10d      	bne.n	80062fc <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80062e0:	4b49      	ldr	r3, [pc, #292]	; (8006408 <RCCEx_PLLSAI1_Config+0x1dc>)
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6819      	ldr	r1, [r3, #0]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	3b01      	subs	r3, #1
 80062f2:	011b      	lsls	r3, r3, #4
 80062f4:	430b      	orrs	r3, r1
 80062f6:	4944      	ldr	r1, [pc, #272]	; (8006408 <RCCEx_PLLSAI1_Config+0x1dc>)
 80062f8:	4313      	orrs	r3, r2
 80062fa:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80062fc:	7bfb      	ldrb	r3, [r7, #15]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d17d      	bne.n	80063fe <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006302:	4b41      	ldr	r3, [pc, #260]	; (8006408 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a40      	ldr	r2, [pc, #256]	; (8006408 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006308:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800630c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800630e:	f7fd f855 	bl	80033bc <HAL_GetTick>
 8006312:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006314:	e009      	b.n	800632a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006316:	f7fd f851 	bl	80033bc <HAL_GetTick>
 800631a:	4602      	mov	r2, r0
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	2b02      	cmp	r3, #2
 8006322:	d902      	bls.n	800632a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8006324:	2303      	movs	r3, #3
 8006326:	73fb      	strb	r3, [r7, #15]
        break;
 8006328:	e005      	b.n	8006336 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800632a:	4b37      	ldr	r3, [pc, #220]	; (8006408 <RCCEx_PLLSAI1_Config+0x1dc>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006332:	2b00      	cmp	r3, #0
 8006334:	d1ef      	bne.n	8006316 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8006336:	7bfb      	ldrb	r3, [r7, #15]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d160      	bne.n	80063fe <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d111      	bne.n	8006366 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006342:	4b31      	ldr	r3, [pc, #196]	; (8006408 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800634a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	6892      	ldr	r2, [r2, #8]
 8006352:	0211      	lsls	r1, r2, #8
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	68d2      	ldr	r2, [r2, #12]
 8006358:	0912      	lsrs	r2, r2, #4
 800635a:	0452      	lsls	r2, r2, #17
 800635c:	430a      	orrs	r2, r1
 800635e:	492a      	ldr	r1, [pc, #168]	; (8006408 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006360:	4313      	orrs	r3, r2
 8006362:	610b      	str	r3, [r1, #16]
 8006364:	e027      	b.n	80063b6 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	2b01      	cmp	r3, #1
 800636a:	d112      	bne.n	8006392 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800636c:	4b26      	ldr	r3, [pc, #152]	; (8006408 <RCCEx_PLLSAI1_Config+0x1dc>)
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006374:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	6892      	ldr	r2, [r2, #8]
 800637c:	0211      	lsls	r1, r2, #8
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	6912      	ldr	r2, [r2, #16]
 8006382:	0852      	lsrs	r2, r2, #1
 8006384:	3a01      	subs	r2, #1
 8006386:	0552      	lsls	r2, r2, #21
 8006388:	430a      	orrs	r2, r1
 800638a:	491f      	ldr	r1, [pc, #124]	; (8006408 <RCCEx_PLLSAI1_Config+0x1dc>)
 800638c:	4313      	orrs	r3, r2
 800638e:	610b      	str	r3, [r1, #16]
 8006390:	e011      	b.n	80063b6 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006392:	4b1d      	ldr	r3, [pc, #116]	; (8006408 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800639a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	6892      	ldr	r2, [r2, #8]
 80063a2:	0211      	lsls	r1, r2, #8
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	6952      	ldr	r2, [r2, #20]
 80063a8:	0852      	lsrs	r2, r2, #1
 80063aa:	3a01      	subs	r2, #1
 80063ac:	0652      	lsls	r2, r2, #25
 80063ae:	430a      	orrs	r2, r1
 80063b0:	4915      	ldr	r1, [pc, #84]	; (8006408 <RCCEx_PLLSAI1_Config+0x1dc>)
 80063b2:	4313      	orrs	r3, r2
 80063b4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80063b6:	4b14      	ldr	r3, [pc, #80]	; (8006408 <RCCEx_PLLSAI1_Config+0x1dc>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a13      	ldr	r2, [pc, #76]	; (8006408 <RCCEx_PLLSAI1_Config+0x1dc>)
 80063bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80063c0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063c2:	f7fc fffb 	bl	80033bc <HAL_GetTick>
 80063c6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80063c8:	e009      	b.n	80063de <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80063ca:	f7fc fff7 	bl	80033bc <HAL_GetTick>
 80063ce:	4602      	mov	r2, r0
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	1ad3      	subs	r3, r2, r3
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d902      	bls.n	80063de <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80063d8:	2303      	movs	r3, #3
 80063da:	73fb      	strb	r3, [r7, #15]
          break;
 80063dc:	e005      	b.n	80063ea <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80063de:	4b0a      	ldr	r3, [pc, #40]	; (8006408 <RCCEx_PLLSAI1_Config+0x1dc>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d0ef      	beq.n	80063ca <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80063ea:	7bfb      	ldrb	r3, [r7, #15]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d106      	bne.n	80063fe <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80063f0:	4b05      	ldr	r3, [pc, #20]	; (8006408 <RCCEx_PLLSAI1_Config+0x1dc>)
 80063f2:	691a      	ldr	r2, [r3, #16]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	699b      	ldr	r3, [r3, #24]
 80063f8:	4903      	ldr	r1, [pc, #12]	; (8006408 <RCCEx_PLLSAI1_Config+0x1dc>)
 80063fa:	4313      	orrs	r3, r2
 80063fc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80063fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006400:	4618      	mov	r0, r3
 8006402:	3710      	adds	r7, #16
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}
 8006408:	40021000 	.word	0x40021000

0800640c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006416:	2300      	movs	r3, #0
 8006418:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800641a:	4b68      	ldr	r3, [pc, #416]	; (80065bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	f003 0303 	and.w	r3, r3, #3
 8006422:	2b00      	cmp	r3, #0
 8006424:	d018      	beq.n	8006458 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006426:	4b65      	ldr	r3, [pc, #404]	; (80065bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	f003 0203 	and.w	r2, r3, #3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	429a      	cmp	r2, r3
 8006434:	d10d      	bne.n	8006452 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
       ||
 800643a:	2b00      	cmp	r3, #0
 800643c:	d009      	beq.n	8006452 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800643e:	4b5f      	ldr	r3, [pc, #380]	; (80065bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	091b      	lsrs	r3, r3, #4
 8006444:	f003 0307 	and.w	r3, r3, #7
 8006448:	1c5a      	adds	r2, r3, #1
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	685b      	ldr	r3, [r3, #4]
       ||
 800644e:	429a      	cmp	r2, r3
 8006450:	d044      	beq.n	80064dc <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	73fb      	strb	r3, [r7, #15]
 8006456:	e041      	b.n	80064dc <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2b02      	cmp	r3, #2
 800645e:	d00c      	beq.n	800647a <RCCEx_PLLSAI2_Config+0x6e>
 8006460:	2b03      	cmp	r3, #3
 8006462:	d013      	beq.n	800648c <RCCEx_PLLSAI2_Config+0x80>
 8006464:	2b01      	cmp	r3, #1
 8006466:	d120      	bne.n	80064aa <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006468:	4b54      	ldr	r3, [pc, #336]	; (80065bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 0302 	and.w	r3, r3, #2
 8006470:	2b00      	cmp	r3, #0
 8006472:	d11d      	bne.n	80064b0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006478:	e01a      	b.n	80064b0 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800647a:	4b50      	ldr	r3, [pc, #320]	; (80065bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006482:	2b00      	cmp	r3, #0
 8006484:	d116      	bne.n	80064b4 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800648a:	e013      	b.n	80064b4 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800648c:	4b4b      	ldr	r3, [pc, #300]	; (80065bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006494:	2b00      	cmp	r3, #0
 8006496:	d10f      	bne.n	80064b8 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006498:	4b48      	ldr	r3, [pc, #288]	; (80065bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d109      	bne.n	80064b8 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80064a8:	e006      	b.n	80064b8 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	73fb      	strb	r3, [r7, #15]
      break;
 80064ae:	e004      	b.n	80064ba <RCCEx_PLLSAI2_Config+0xae>
      break;
 80064b0:	bf00      	nop
 80064b2:	e002      	b.n	80064ba <RCCEx_PLLSAI2_Config+0xae>
      break;
 80064b4:	bf00      	nop
 80064b6:	e000      	b.n	80064ba <RCCEx_PLLSAI2_Config+0xae>
      break;
 80064b8:	bf00      	nop
    }

    if(status == HAL_OK)
 80064ba:	7bfb      	ldrb	r3, [r7, #15]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d10d      	bne.n	80064dc <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80064c0:	4b3e      	ldr	r3, [pc, #248]	; (80065bc <RCCEx_PLLSAI2_Config+0x1b0>)
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6819      	ldr	r1, [r3, #0]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	3b01      	subs	r3, #1
 80064d2:	011b      	lsls	r3, r3, #4
 80064d4:	430b      	orrs	r3, r1
 80064d6:	4939      	ldr	r1, [pc, #228]	; (80065bc <RCCEx_PLLSAI2_Config+0x1b0>)
 80064d8:	4313      	orrs	r3, r2
 80064da:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80064dc:	7bfb      	ldrb	r3, [r7, #15]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d167      	bne.n	80065b2 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80064e2:	4b36      	ldr	r3, [pc, #216]	; (80065bc <RCCEx_PLLSAI2_Config+0x1b0>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a35      	ldr	r2, [pc, #212]	; (80065bc <RCCEx_PLLSAI2_Config+0x1b0>)
 80064e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064ee:	f7fc ff65 	bl	80033bc <HAL_GetTick>
 80064f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80064f4:	e009      	b.n	800650a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80064f6:	f7fc ff61 	bl	80033bc <HAL_GetTick>
 80064fa:	4602      	mov	r2, r0
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	1ad3      	subs	r3, r2, r3
 8006500:	2b02      	cmp	r3, #2
 8006502:	d902      	bls.n	800650a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8006504:	2303      	movs	r3, #3
 8006506:	73fb      	strb	r3, [r7, #15]
        break;
 8006508:	e005      	b.n	8006516 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800650a:	4b2c      	ldr	r3, [pc, #176]	; (80065bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1ef      	bne.n	80064f6 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8006516:	7bfb      	ldrb	r3, [r7, #15]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d14a      	bne.n	80065b2 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d111      	bne.n	8006546 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006522:	4b26      	ldr	r3, [pc, #152]	; (80065bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8006524:	695b      	ldr	r3, [r3, #20]
 8006526:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800652a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	6892      	ldr	r2, [r2, #8]
 8006532:	0211      	lsls	r1, r2, #8
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	68d2      	ldr	r2, [r2, #12]
 8006538:	0912      	lsrs	r2, r2, #4
 800653a:	0452      	lsls	r2, r2, #17
 800653c:	430a      	orrs	r2, r1
 800653e:	491f      	ldr	r1, [pc, #124]	; (80065bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8006540:	4313      	orrs	r3, r2
 8006542:	614b      	str	r3, [r1, #20]
 8006544:	e011      	b.n	800656a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006546:	4b1d      	ldr	r3, [pc, #116]	; (80065bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8006548:	695b      	ldr	r3, [r3, #20]
 800654a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800654e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	6892      	ldr	r2, [r2, #8]
 8006556:	0211      	lsls	r1, r2, #8
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	6912      	ldr	r2, [r2, #16]
 800655c:	0852      	lsrs	r2, r2, #1
 800655e:	3a01      	subs	r2, #1
 8006560:	0652      	lsls	r2, r2, #25
 8006562:	430a      	orrs	r2, r1
 8006564:	4915      	ldr	r1, [pc, #84]	; (80065bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8006566:	4313      	orrs	r3, r2
 8006568:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800656a:	4b14      	ldr	r3, [pc, #80]	; (80065bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a13      	ldr	r2, [pc, #76]	; (80065bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8006570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006574:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006576:	f7fc ff21 	bl	80033bc <HAL_GetTick>
 800657a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800657c:	e009      	b.n	8006592 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800657e:	f7fc ff1d 	bl	80033bc <HAL_GetTick>
 8006582:	4602      	mov	r2, r0
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	2b02      	cmp	r3, #2
 800658a:	d902      	bls.n	8006592 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 800658c:	2303      	movs	r3, #3
 800658e:	73fb      	strb	r3, [r7, #15]
          break;
 8006590:	e005      	b.n	800659e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006592:	4b0a      	ldr	r3, [pc, #40]	; (80065bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800659a:	2b00      	cmp	r3, #0
 800659c:	d0ef      	beq.n	800657e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800659e:	7bfb      	ldrb	r3, [r7, #15]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d106      	bne.n	80065b2 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80065a4:	4b05      	ldr	r3, [pc, #20]	; (80065bc <RCCEx_PLLSAI2_Config+0x1b0>)
 80065a6:	695a      	ldr	r2, [r3, #20]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	695b      	ldr	r3, [r3, #20]
 80065ac:	4903      	ldr	r1, [pc, #12]	; (80065bc <RCCEx_PLLSAI2_Config+0x1b0>)
 80065ae:	4313      	orrs	r3, r2
 80065b0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80065b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3710      	adds	r7, #16
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	40021000 	.word	0x40021000

080065c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d101      	bne.n	80065d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e095      	b.n	80066fe <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d108      	bne.n	80065ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065e2:	d009      	beq.n	80065f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	61da      	str	r2, [r3, #28]
 80065ea:	e005      	b.n	80065f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006604:	b2db      	uxtb	r3, r3
 8006606:	2b00      	cmp	r3, #0
 8006608:	d106      	bne.n	8006618 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f7fb fa54 	bl	8001ac0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2202      	movs	r2, #2
 800661c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800662e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006638:	d902      	bls.n	8006640 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800663a:	2300      	movs	r3, #0
 800663c:	60fb      	str	r3, [r7, #12]
 800663e:	e002      	b.n	8006646 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006640:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006644:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800664e:	d007      	beq.n	8006660 <HAL_SPI_Init+0xa0>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006658:	d002      	beq.n	8006660 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006670:	431a      	orrs	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	f003 0302 	and.w	r3, r3, #2
 800667a:	431a      	orrs	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	695b      	ldr	r3, [r3, #20]
 8006680:	f003 0301 	and.w	r3, r3, #1
 8006684:	431a      	orrs	r2, r3
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	699b      	ldr	r3, [r3, #24]
 800668a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800668e:	431a      	orrs	r2, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	69db      	ldr	r3, [r3, #28]
 8006694:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006698:	431a      	orrs	r2, r3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a1b      	ldr	r3, [r3, #32]
 800669e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066a2:	ea42 0103 	orr.w	r1, r2, r3
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066aa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	430a      	orrs	r2, r1
 80066b4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	699b      	ldr	r3, [r3, #24]
 80066ba:	0c1b      	lsrs	r3, r3, #16
 80066bc:	f003 0204 	and.w	r2, r3, #4
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c4:	f003 0310 	and.w	r3, r3, #16
 80066c8:	431a      	orrs	r2, r3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ce:	f003 0308 	and.w	r3, r3, #8
 80066d2:	431a      	orrs	r2, r3
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80066dc:	ea42 0103 	orr.w	r1, r2, r3
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	430a      	orrs	r2, r1
 80066ec:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80066fc:	2300      	movs	r3, #0
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3710      	adds	r7, #16
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}

08006706 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006706:	b580      	push	{r7, lr}
 8006708:	b082      	sub	sp, #8
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d101      	bne.n	8006718 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	e040      	b.n	800679a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800671c:	2b00      	cmp	r3, #0
 800671e:	d106      	bne.n	800672e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f7fb fbbd 	bl	8001ea8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2224      	movs	r2, #36	; 0x24
 8006732:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f022 0201 	bic.w	r2, r2, #1
 8006742:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 f8bf 	bl	80068c8 <UART_SetConfig>
 800674a:	4603      	mov	r3, r0
 800674c:	2b01      	cmp	r3, #1
 800674e:	d101      	bne.n	8006754 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	e022      	b.n	800679a <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006758:	2b00      	cmp	r3, #0
 800675a:	d002      	beq.n	8006762 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 fb3d 	bl	8006ddc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	685a      	ldr	r2, [r3, #4]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006770:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	689a      	ldr	r2, [r3, #8]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006780:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f042 0201 	orr.w	r2, r2, #1
 8006790:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 fbc4 	bl	8006f20 <UART_CheckIdleState>
 8006798:	4603      	mov	r3, r0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3708      	adds	r7, #8
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067a2:	b580      	push	{r7, lr}
 80067a4:	b08a      	sub	sp, #40	; 0x28
 80067a6:	af02      	add	r7, sp, #8
 80067a8:	60f8      	str	r0, [r7, #12]
 80067aa:	60b9      	str	r1, [r7, #8]
 80067ac:	603b      	str	r3, [r7, #0]
 80067ae:	4613      	mov	r3, r2
 80067b0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067b6:	2b20      	cmp	r3, #32
 80067b8:	f040 8081 	bne.w	80068be <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d002      	beq.n	80067c8 <HAL_UART_Transmit+0x26>
 80067c2:	88fb      	ldrh	r3, [r7, #6]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d101      	bne.n	80067cc <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	e079      	b.n	80068c0 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d101      	bne.n	80067da <HAL_UART_Transmit+0x38>
 80067d6:	2302      	movs	r3, #2
 80067d8:	e072      	b.n	80068c0 <HAL_UART_Transmit+0x11e>
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2201      	movs	r2, #1
 80067de:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2200      	movs	r2, #0
 80067e6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2221      	movs	r2, #33	; 0x21
 80067ec:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80067ee:	f7fc fde5 	bl	80033bc <HAL_GetTick>
 80067f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	88fa      	ldrh	r2, [r7, #6]
 80067f8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	88fa      	ldrh	r2, [r7, #6]
 8006800:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800680c:	d108      	bne.n	8006820 <HAL_UART_Transmit+0x7e>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d104      	bne.n	8006820 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8006816:	2300      	movs	r3, #0
 8006818:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	61bb      	str	r3, [r7, #24]
 800681e:	e003      	b.n	8006828 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006824:	2300      	movs	r3, #0
 8006826:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2200      	movs	r2, #0
 800682c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8006830:	e02d      	b.n	800688e <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	9300      	str	r3, [sp, #0]
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	2200      	movs	r2, #0
 800683a:	2180      	movs	r1, #128	; 0x80
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	f000 fbb4 	bl	8006faa <UART_WaitOnFlagUntilTimeout>
 8006842:	4603      	mov	r3, r0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d001      	beq.n	800684c <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8006848:	2303      	movs	r3, #3
 800684a:	e039      	b.n	80068c0 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d10b      	bne.n	800686a <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	881a      	ldrh	r2, [r3, #0]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800685e:	b292      	uxth	r2, r2
 8006860:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006862:	69bb      	ldr	r3, [r7, #24]
 8006864:	3302      	adds	r3, #2
 8006866:	61bb      	str	r3, [r7, #24]
 8006868:	e008      	b.n	800687c <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	781a      	ldrb	r2, [r3, #0]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	b292      	uxth	r2, r2
 8006874:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	3301      	adds	r3, #1
 800687a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006882:	b29b      	uxth	r3, r3
 8006884:	3b01      	subs	r3, #1
 8006886:	b29a      	uxth	r2, r3
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006894:	b29b      	uxth	r3, r3
 8006896:	2b00      	cmp	r3, #0
 8006898:	d1cb      	bne.n	8006832 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	9300      	str	r3, [sp, #0]
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	2200      	movs	r2, #0
 80068a2:	2140      	movs	r1, #64	; 0x40
 80068a4:	68f8      	ldr	r0, [r7, #12]
 80068a6:	f000 fb80 	bl	8006faa <UART_WaitOnFlagUntilTimeout>
 80068aa:	4603      	mov	r3, r0
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d001      	beq.n	80068b4 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80068b0:	2303      	movs	r3, #3
 80068b2:	e005      	b.n	80068c0 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2220      	movs	r2, #32
 80068b8:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80068ba:	2300      	movs	r3, #0
 80068bc:	e000      	b.n	80068c0 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80068be:	2302      	movs	r3, #2
  }
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3720      	adds	r7, #32
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068c8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80068cc:	b088      	sub	sp, #32
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80068d2:	2300      	movs	r3, #0
 80068d4:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	689a      	ldr	r2, [r3, #8]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	431a      	orrs	r2, r3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	695b      	ldr	r3, [r3, #20]
 80068e4:	431a      	orrs	r2, r3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	69db      	ldr	r3, [r3, #28]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	4bac      	ldr	r3, [pc, #688]	; (8006ba8 <UART_SetConfig+0x2e0>)
 80068f6:	4013      	ands	r3, r2
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	6812      	ldr	r2, [r2, #0]
 80068fc:	69f9      	ldr	r1, [r7, #28]
 80068fe:	430b      	orrs	r3, r1
 8006900:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	68da      	ldr	r2, [r3, #12]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	430a      	orrs	r2, r1
 8006916:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	699b      	ldr	r3, [r3, #24]
 800691c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4aa2      	ldr	r2, [pc, #648]	; (8006bac <UART_SetConfig+0x2e4>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d004      	beq.n	8006932 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6a1b      	ldr	r3, [r3, #32]
 800692c:	69fa      	ldr	r2, [r7, #28]
 800692e:	4313      	orrs	r3, r2
 8006930:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	69fa      	ldr	r2, [r7, #28]
 8006942:	430a      	orrs	r2, r1
 8006944:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a99      	ldr	r2, [pc, #612]	; (8006bb0 <UART_SetConfig+0x2e8>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d121      	bne.n	8006994 <UART_SetConfig+0xcc>
 8006950:	4b98      	ldr	r3, [pc, #608]	; (8006bb4 <UART_SetConfig+0x2ec>)
 8006952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006956:	f003 0303 	and.w	r3, r3, #3
 800695a:	2b03      	cmp	r3, #3
 800695c:	d816      	bhi.n	800698c <UART_SetConfig+0xc4>
 800695e:	a201      	add	r2, pc, #4	; (adr r2, 8006964 <UART_SetConfig+0x9c>)
 8006960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006964:	08006975 	.word	0x08006975
 8006968:	08006981 	.word	0x08006981
 800696c:	0800697b 	.word	0x0800697b
 8006970:	08006987 	.word	0x08006987
 8006974:	2301      	movs	r3, #1
 8006976:	76fb      	strb	r3, [r7, #27]
 8006978:	e0e8      	b.n	8006b4c <UART_SetConfig+0x284>
 800697a:	2302      	movs	r3, #2
 800697c:	76fb      	strb	r3, [r7, #27]
 800697e:	e0e5      	b.n	8006b4c <UART_SetConfig+0x284>
 8006980:	2304      	movs	r3, #4
 8006982:	76fb      	strb	r3, [r7, #27]
 8006984:	e0e2      	b.n	8006b4c <UART_SetConfig+0x284>
 8006986:	2308      	movs	r3, #8
 8006988:	76fb      	strb	r3, [r7, #27]
 800698a:	e0df      	b.n	8006b4c <UART_SetConfig+0x284>
 800698c:	2310      	movs	r3, #16
 800698e:	76fb      	strb	r3, [r7, #27]
 8006990:	bf00      	nop
 8006992:	e0db      	b.n	8006b4c <UART_SetConfig+0x284>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a87      	ldr	r2, [pc, #540]	; (8006bb8 <UART_SetConfig+0x2f0>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d134      	bne.n	8006a08 <UART_SetConfig+0x140>
 800699e:	4b85      	ldr	r3, [pc, #532]	; (8006bb4 <UART_SetConfig+0x2ec>)
 80069a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069a4:	f003 030c 	and.w	r3, r3, #12
 80069a8:	2b0c      	cmp	r3, #12
 80069aa:	d829      	bhi.n	8006a00 <UART_SetConfig+0x138>
 80069ac:	a201      	add	r2, pc, #4	; (adr r2, 80069b4 <UART_SetConfig+0xec>)
 80069ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b2:	bf00      	nop
 80069b4:	080069e9 	.word	0x080069e9
 80069b8:	08006a01 	.word	0x08006a01
 80069bc:	08006a01 	.word	0x08006a01
 80069c0:	08006a01 	.word	0x08006a01
 80069c4:	080069f5 	.word	0x080069f5
 80069c8:	08006a01 	.word	0x08006a01
 80069cc:	08006a01 	.word	0x08006a01
 80069d0:	08006a01 	.word	0x08006a01
 80069d4:	080069ef 	.word	0x080069ef
 80069d8:	08006a01 	.word	0x08006a01
 80069dc:	08006a01 	.word	0x08006a01
 80069e0:	08006a01 	.word	0x08006a01
 80069e4:	080069fb 	.word	0x080069fb
 80069e8:	2300      	movs	r3, #0
 80069ea:	76fb      	strb	r3, [r7, #27]
 80069ec:	e0ae      	b.n	8006b4c <UART_SetConfig+0x284>
 80069ee:	2302      	movs	r3, #2
 80069f0:	76fb      	strb	r3, [r7, #27]
 80069f2:	e0ab      	b.n	8006b4c <UART_SetConfig+0x284>
 80069f4:	2304      	movs	r3, #4
 80069f6:	76fb      	strb	r3, [r7, #27]
 80069f8:	e0a8      	b.n	8006b4c <UART_SetConfig+0x284>
 80069fa:	2308      	movs	r3, #8
 80069fc:	76fb      	strb	r3, [r7, #27]
 80069fe:	e0a5      	b.n	8006b4c <UART_SetConfig+0x284>
 8006a00:	2310      	movs	r3, #16
 8006a02:	76fb      	strb	r3, [r7, #27]
 8006a04:	bf00      	nop
 8006a06:	e0a1      	b.n	8006b4c <UART_SetConfig+0x284>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a6b      	ldr	r2, [pc, #428]	; (8006bbc <UART_SetConfig+0x2f4>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d120      	bne.n	8006a54 <UART_SetConfig+0x18c>
 8006a12:	4b68      	ldr	r3, [pc, #416]	; (8006bb4 <UART_SetConfig+0x2ec>)
 8006a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a18:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006a1c:	2b10      	cmp	r3, #16
 8006a1e:	d00f      	beq.n	8006a40 <UART_SetConfig+0x178>
 8006a20:	2b10      	cmp	r3, #16
 8006a22:	d802      	bhi.n	8006a2a <UART_SetConfig+0x162>
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d005      	beq.n	8006a34 <UART_SetConfig+0x16c>
 8006a28:	e010      	b.n	8006a4c <UART_SetConfig+0x184>
 8006a2a:	2b20      	cmp	r3, #32
 8006a2c:	d005      	beq.n	8006a3a <UART_SetConfig+0x172>
 8006a2e:	2b30      	cmp	r3, #48	; 0x30
 8006a30:	d009      	beq.n	8006a46 <UART_SetConfig+0x17e>
 8006a32:	e00b      	b.n	8006a4c <UART_SetConfig+0x184>
 8006a34:	2300      	movs	r3, #0
 8006a36:	76fb      	strb	r3, [r7, #27]
 8006a38:	e088      	b.n	8006b4c <UART_SetConfig+0x284>
 8006a3a:	2302      	movs	r3, #2
 8006a3c:	76fb      	strb	r3, [r7, #27]
 8006a3e:	e085      	b.n	8006b4c <UART_SetConfig+0x284>
 8006a40:	2304      	movs	r3, #4
 8006a42:	76fb      	strb	r3, [r7, #27]
 8006a44:	e082      	b.n	8006b4c <UART_SetConfig+0x284>
 8006a46:	2308      	movs	r3, #8
 8006a48:	76fb      	strb	r3, [r7, #27]
 8006a4a:	e07f      	b.n	8006b4c <UART_SetConfig+0x284>
 8006a4c:	2310      	movs	r3, #16
 8006a4e:	76fb      	strb	r3, [r7, #27]
 8006a50:	bf00      	nop
 8006a52:	e07b      	b.n	8006b4c <UART_SetConfig+0x284>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a59      	ldr	r2, [pc, #356]	; (8006bc0 <UART_SetConfig+0x2f8>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d120      	bne.n	8006aa0 <UART_SetConfig+0x1d8>
 8006a5e:	4b55      	ldr	r3, [pc, #340]	; (8006bb4 <UART_SetConfig+0x2ec>)
 8006a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a64:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006a68:	2b40      	cmp	r3, #64	; 0x40
 8006a6a:	d00f      	beq.n	8006a8c <UART_SetConfig+0x1c4>
 8006a6c:	2b40      	cmp	r3, #64	; 0x40
 8006a6e:	d802      	bhi.n	8006a76 <UART_SetConfig+0x1ae>
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d005      	beq.n	8006a80 <UART_SetConfig+0x1b8>
 8006a74:	e010      	b.n	8006a98 <UART_SetConfig+0x1d0>
 8006a76:	2b80      	cmp	r3, #128	; 0x80
 8006a78:	d005      	beq.n	8006a86 <UART_SetConfig+0x1be>
 8006a7a:	2bc0      	cmp	r3, #192	; 0xc0
 8006a7c:	d009      	beq.n	8006a92 <UART_SetConfig+0x1ca>
 8006a7e:	e00b      	b.n	8006a98 <UART_SetConfig+0x1d0>
 8006a80:	2300      	movs	r3, #0
 8006a82:	76fb      	strb	r3, [r7, #27]
 8006a84:	e062      	b.n	8006b4c <UART_SetConfig+0x284>
 8006a86:	2302      	movs	r3, #2
 8006a88:	76fb      	strb	r3, [r7, #27]
 8006a8a:	e05f      	b.n	8006b4c <UART_SetConfig+0x284>
 8006a8c:	2304      	movs	r3, #4
 8006a8e:	76fb      	strb	r3, [r7, #27]
 8006a90:	e05c      	b.n	8006b4c <UART_SetConfig+0x284>
 8006a92:	2308      	movs	r3, #8
 8006a94:	76fb      	strb	r3, [r7, #27]
 8006a96:	e059      	b.n	8006b4c <UART_SetConfig+0x284>
 8006a98:	2310      	movs	r3, #16
 8006a9a:	76fb      	strb	r3, [r7, #27]
 8006a9c:	bf00      	nop
 8006a9e:	e055      	b.n	8006b4c <UART_SetConfig+0x284>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a47      	ldr	r2, [pc, #284]	; (8006bc4 <UART_SetConfig+0x2fc>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d124      	bne.n	8006af4 <UART_SetConfig+0x22c>
 8006aaa:	4b42      	ldr	r3, [pc, #264]	; (8006bb4 <UART_SetConfig+0x2ec>)
 8006aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ab0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ab4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ab8:	d012      	beq.n	8006ae0 <UART_SetConfig+0x218>
 8006aba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006abe:	d802      	bhi.n	8006ac6 <UART_SetConfig+0x1fe>
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d007      	beq.n	8006ad4 <UART_SetConfig+0x20c>
 8006ac4:	e012      	b.n	8006aec <UART_SetConfig+0x224>
 8006ac6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006aca:	d006      	beq.n	8006ada <UART_SetConfig+0x212>
 8006acc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ad0:	d009      	beq.n	8006ae6 <UART_SetConfig+0x21e>
 8006ad2:	e00b      	b.n	8006aec <UART_SetConfig+0x224>
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	76fb      	strb	r3, [r7, #27]
 8006ad8:	e038      	b.n	8006b4c <UART_SetConfig+0x284>
 8006ada:	2302      	movs	r3, #2
 8006adc:	76fb      	strb	r3, [r7, #27]
 8006ade:	e035      	b.n	8006b4c <UART_SetConfig+0x284>
 8006ae0:	2304      	movs	r3, #4
 8006ae2:	76fb      	strb	r3, [r7, #27]
 8006ae4:	e032      	b.n	8006b4c <UART_SetConfig+0x284>
 8006ae6:	2308      	movs	r3, #8
 8006ae8:	76fb      	strb	r3, [r7, #27]
 8006aea:	e02f      	b.n	8006b4c <UART_SetConfig+0x284>
 8006aec:	2310      	movs	r3, #16
 8006aee:	76fb      	strb	r3, [r7, #27]
 8006af0:	bf00      	nop
 8006af2:	e02b      	b.n	8006b4c <UART_SetConfig+0x284>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a2c      	ldr	r2, [pc, #176]	; (8006bac <UART_SetConfig+0x2e4>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d124      	bne.n	8006b48 <UART_SetConfig+0x280>
 8006afe:	4b2d      	ldr	r3, [pc, #180]	; (8006bb4 <UART_SetConfig+0x2ec>)
 8006b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b04:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006b08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b0c:	d012      	beq.n	8006b34 <UART_SetConfig+0x26c>
 8006b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b12:	d802      	bhi.n	8006b1a <UART_SetConfig+0x252>
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d007      	beq.n	8006b28 <UART_SetConfig+0x260>
 8006b18:	e012      	b.n	8006b40 <UART_SetConfig+0x278>
 8006b1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b1e:	d006      	beq.n	8006b2e <UART_SetConfig+0x266>
 8006b20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b24:	d009      	beq.n	8006b3a <UART_SetConfig+0x272>
 8006b26:	e00b      	b.n	8006b40 <UART_SetConfig+0x278>
 8006b28:	2300      	movs	r3, #0
 8006b2a:	76fb      	strb	r3, [r7, #27]
 8006b2c:	e00e      	b.n	8006b4c <UART_SetConfig+0x284>
 8006b2e:	2302      	movs	r3, #2
 8006b30:	76fb      	strb	r3, [r7, #27]
 8006b32:	e00b      	b.n	8006b4c <UART_SetConfig+0x284>
 8006b34:	2304      	movs	r3, #4
 8006b36:	76fb      	strb	r3, [r7, #27]
 8006b38:	e008      	b.n	8006b4c <UART_SetConfig+0x284>
 8006b3a:	2308      	movs	r3, #8
 8006b3c:	76fb      	strb	r3, [r7, #27]
 8006b3e:	e005      	b.n	8006b4c <UART_SetConfig+0x284>
 8006b40:	2310      	movs	r3, #16
 8006b42:	76fb      	strb	r3, [r7, #27]
 8006b44:	bf00      	nop
 8006b46:	e001      	b.n	8006b4c <UART_SetConfig+0x284>
 8006b48:	2310      	movs	r3, #16
 8006b4a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a16      	ldr	r2, [pc, #88]	; (8006bac <UART_SetConfig+0x2e4>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	f040 8087 	bne.w	8006c66 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006b58:	7efb      	ldrb	r3, [r7, #27]
 8006b5a:	2b08      	cmp	r3, #8
 8006b5c:	d836      	bhi.n	8006bcc <UART_SetConfig+0x304>
 8006b5e:	a201      	add	r2, pc, #4	; (adr r2, 8006b64 <UART_SetConfig+0x29c>)
 8006b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b64:	08006b89 	.word	0x08006b89
 8006b68:	08006bcd 	.word	0x08006bcd
 8006b6c:	08006b91 	.word	0x08006b91
 8006b70:	08006bcd 	.word	0x08006bcd
 8006b74:	08006b97 	.word	0x08006b97
 8006b78:	08006bcd 	.word	0x08006bcd
 8006b7c:	08006bcd 	.word	0x08006bcd
 8006b80:	08006bcd 	.word	0x08006bcd
 8006b84:	08006b9f 	.word	0x08006b9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b88:	f7fe ffce 	bl	8005b28 <HAL_RCC_GetPCLK1Freq>
 8006b8c:	6178      	str	r0, [r7, #20]
        break;
 8006b8e:	e022      	b.n	8006bd6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b90:	4b0d      	ldr	r3, [pc, #52]	; (8006bc8 <UART_SetConfig+0x300>)
 8006b92:	617b      	str	r3, [r7, #20]
        break;
 8006b94:	e01f      	b.n	8006bd6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b96:	f7fe ff31 	bl	80059fc <HAL_RCC_GetSysClockFreq>
 8006b9a:	6178      	str	r0, [r7, #20]
        break;
 8006b9c:	e01b      	b.n	8006bd6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ba2:	617b      	str	r3, [r7, #20]
        break;
 8006ba4:	e017      	b.n	8006bd6 <UART_SetConfig+0x30e>
 8006ba6:	bf00      	nop
 8006ba8:	efff69f3 	.word	0xefff69f3
 8006bac:	40008000 	.word	0x40008000
 8006bb0:	40013800 	.word	0x40013800
 8006bb4:	40021000 	.word	0x40021000
 8006bb8:	40004400 	.word	0x40004400
 8006bbc:	40004800 	.word	0x40004800
 8006bc0:	40004c00 	.word	0x40004c00
 8006bc4:	40005000 	.word	0x40005000
 8006bc8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	76bb      	strb	r3, [r7, #26]
        break;
 8006bd4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	f000 80f1 	beq.w	8006dc0 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	685a      	ldr	r2, [r3, #4]
 8006be2:	4613      	mov	r3, r2
 8006be4:	005b      	lsls	r3, r3, #1
 8006be6:	4413      	add	r3, r2
 8006be8:	697a      	ldr	r2, [r7, #20]
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d305      	bcc.n	8006bfa <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006bf4:	697a      	ldr	r2, [r7, #20]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d902      	bls.n	8006c00 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	76bb      	strb	r3, [r7, #26]
 8006bfe:	e0df      	b.n	8006dc0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	4619      	mov	r1, r3
 8006c04:	f04f 0200 	mov.w	r2, #0
 8006c08:	f04f 0300 	mov.w	r3, #0
 8006c0c:	f04f 0400 	mov.w	r4, #0
 8006c10:	0214      	lsls	r4, r2, #8
 8006c12:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006c16:	020b      	lsls	r3, r1, #8
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	6852      	ldr	r2, [r2, #4]
 8006c1c:	0852      	lsrs	r2, r2, #1
 8006c1e:	4611      	mov	r1, r2
 8006c20:	f04f 0200 	mov.w	r2, #0
 8006c24:	eb13 0b01 	adds.w	fp, r3, r1
 8006c28:	eb44 0c02 	adc.w	ip, r4, r2
 8006c2c:	4658      	mov	r0, fp
 8006c2e:	4661      	mov	r1, ip
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	f04f 0400 	mov.w	r4, #0
 8006c38:	461a      	mov	r2, r3
 8006c3a:	4623      	mov	r3, r4
 8006c3c:	f7fa f804 	bl	8000c48 <__aeabi_uldivmod>
 8006c40:	4603      	mov	r3, r0
 8006c42:	460c      	mov	r4, r1
 8006c44:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c4c:	d308      	bcc.n	8006c60 <UART_SetConfig+0x398>
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c54:	d204      	bcs.n	8006c60 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	693a      	ldr	r2, [r7, #16]
 8006c5c:	60da      	str	r2, [r3, #12]
 8006c5e:	e0af      	b.n	8006dc0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	76bb      	strb	r3, [r7, #26]
 8006c64:	e0ac      	b.n	8006dc0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	69db      	ldr	r3, [r3, #28]
 8006c6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c6e:	d15b      	bne.n	8006d28 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8006c70:	7efb      	ldrb	r3, [r7, #27]
 8006c72:	2b08      	cmp	r3, #8
 8006c74:	d827      	bhi.n	8006cc6 <UART_SetConfig+0x3fe>
 8006c76:	a201      	add	r2, pc, #4	; (adr r2, 8006c7c <UART_SetConfig+0x3b4>)
 8006c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c7c:	08006ca1 	.word	0x08006ca1
 8006c80:	08006ca9 	.word	0x08006ca9
 8006c84:	08006cb1 	.word	0x08006cb1
 8006c88:	08006cc7 	.word	0x08006cc7
 8006c8c:	08006cb7 	.word	0x08006cb7
 8006c90:	08006cc7 	.word	0x08006cc7
 8006c94:	08006cc7 	.word	0x08006cc7
 8006c98:	08006cc7 	.word	0x08006cc7
 8006c9c:	08006cbf 	.word	0x08006cbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ca0:	f7fe ff42 	bl	8005b28 <HAL_RCC_GetPCLK1Freq>
 8006ca4:	6178      	str	r0, [r7, #20]
        break;
 8006ca6:	e013      	b.n	8006cd0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ca8:	f7fe ff54 	bl	8005b54 <HAL_RCC_GetPCLK2Freq>
 8006cac:	6178      	str	r0, [r7, #20]
        break;
 8006cae:	e00f      	b.n	8006cd0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cb0:	4b49      	ldr	r3, [pc, #292]	; (8006dd8 <UART_SetConfig+0x510>)
 8006cb2:	617b      	str	r3, [r7, #20]
        break;
 8006cb4:	e00c      	b.n	8006cd0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cb6:	f7fe fea1 	bl	80059fc <HAL_RCC_GetSysClockFreq>
 8006cba:	6178      	str	r0, [r7, #20]
        break;
 8006cbc:	e008      	b.n	8006cd0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cc2:	617b      	str	r3, [r7, #20]
        break;
 8006cc4:	e004      	b.n	8006cd0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	76bb      	strb	r3, [r7, #26]
        break;
 8006cce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d074      	beq.n	8006dc0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	005a      	lsls	r2, r3, #1
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	085b      	lsrs	r3, r3, #1
 8006ce0:	441a      	add	r2, r3
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	2b0f      	cmp	r3, #15
 8006cf2:	d916      	bls.n	8006d22 <UART_SetConfig+0x45a>
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cfa:	d212      	bcs.n	8006d22 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	f023 030f 	bic.w	r3, r3, #15
 8006d04:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	085b      	lsrs	r3, r3, #1
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	f003 0307 	and.w	r3, r3, #7
 8006d10:	b29a      	uxth	r2, r3
 8006d12:	89fb      	ldrh	r3, [r7, #14]
 8006d14:	4313      	orrs	r3, r2
 8006d16:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	89fa      	ldrh	r2, [r7, #14]
 8006d1e:	60da      	str	r2, [r3, #12]
 8006d20:	e04e      	b.n	8006dc0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	76bb      	strb	r3, [r7, #26]
 8006d26:	e04b      	b.n	8006dc0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d28:	7efb      	ldrb	r3, [r7, #27]
 8006d2a:	2b08      	cmp	r3, #8
 8006d2c:	d827      	bhi.n	8006d7e <UART_SetConfig+0x4b6>
 8006d2e:	a201      	add	r2, pc, #4	; (adr r2, 8006d34 <UART_SetConfig+0x46c>)
 8006d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d34:	08006d59 	.word	0x08006d59
 8006d38:	08006d61 	.word	0x08006d61
 8006d3c:	08006d69 	.word	0x08006d69
 8006d40:	08006d7f 	.word	0x08006d7f
 8006d44:	08006d6f 	.word	0x08006d6f
 8006d48:	08006d7f 	.word	0x08006d7f
 8006d4c:	08006d7f 	.word	0x08006d7f
 8006d50:	08006d7f 	.word	0x08006d7f
 8006d54:	08006d77 	.word	0x08006d77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d58:	f7fe fee6 	bl	8005b28 <HAL_RCC_GetPCLK1Freq>
 8006d5c:	6178      	str	r0, [r7, #20]
        break;
 8006d5e:	e013      	b.n	8006d88 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d60:	f7fe fef8 	bl	8005b54 <HAL_RCC_GetPCLK2Freq>
 8006d64:	6178      	str	r0, [r7, #20]
        break;
 8006d66:	e00f      	b.n	8006d88 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d68:	4b1b      	ldr	r3, [pc, #108]	; (8006dd8 <UART_SetConfig+0x510>)
 8006d6a:	617b      	str	r3, [r7, #20]
        break;
 8006d6c:	e00c      	b.n	8006d88 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d6e:	f7fe fe45 	bl	80059fc <HAL_RCC_GetSysClockFreq>
 8006d72:	6178      	str	r0, [r7, #20]
        break;
 8006d74:	e008      	b.n	8006d88 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d7a:	617b      	str	r3, [r7, #20]
        break;
 8006d7c:	e004      	b.n	8006d88 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	76bb      	strb	r3, [r7, #26]
        break;
 8006d86:	bf00      	nop
    }

    if (pclk != 0U)
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d018      	beq.n	8006dc0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	085a      	lsrs	r2, r3, #1
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	441a      	add	r2, r3
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	2b0f      	cmp	r3, #15
 8006da8:	d908      	bls.n	8006dbc <UART_SetConfig+0x4f4>
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006db0:	d204      	bcs.n	8006dbc <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	693a      	ldr	r2, [r7, #16]
 8006db8:	60da      	str	r2, [r3, #12]
 8006dba:	e001      	b.n	8006dc0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006dcc:	7ebb      	ldrb	r3, [r7, #26]
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3720      	adds	r7, #32
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006dd8:	00f42400 	.word	0x00f42400

08006ddc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de8:	f003 0301 	and.w	r3, r3, #1
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d00a      	beq.n	8006e06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	430a      	orrs	r2, r1
 8006e04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0a:	f003 0302 	and.w	r3, r3, #2
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00a      	beq.n	8006e28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	430a      	orrs	r2, r1
 8006e26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2c:	f003 0304 	and.w	r3, r3, #4
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d00a      	beq.n	8006e4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	430a      	orrs	r2, r1
 8006e48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4e:	f003 0308 	and.w	r3, r3, #8
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d00a      	beq.n	8006e6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	430a      	orrs	r2, r1
 8006e6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e70:	f003 0310 	and.w	r3, r3, #16
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d00a      	beq.n	8006e8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	430a      	orrs	r2, r1
 8006e8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e92:	f003 0320 	and.w	r3, r3, #32
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00a      	beq.n	8006eb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	430a      	orrs	r2, r1
 8006eae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d01a      	beq.n	8006ef2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	430a      	orrs	r2, r1
 8006ed0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006eda:	d10a      	bne.n	8006ef2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	430a      	orrs	r2, r1
 8006ef0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00a      	beq.n	8006f14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	430a      	orrs	r2, r1
 8006f12:	605a      	str	r2, [r3, #4]
  }
}
 8006f14:	bf00      	nop
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b086      	sub	sp, #24
 8006f24:	af02      	add	r7, sp, #8
 8006f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006f2e:	f7fc fa45 	bl	80033bc <HAL_GetTick>
 8006f32:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 0308 	and.w	r3, r3, #8
 8006f3e:	2b08      	cmp	r3, #8
 8006f40:	d10e      	bne.n	8006f60 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f42:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f46:	9300      	str	r3, [sp, #0]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 f82a 	bl	8006faa <UART_WaitOnFlagUntilTimeout>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d001      	beq.n	8006f60 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f5c:	2303      	movs	r3, #3
 8006f5e:	e020      	b.n	8006fa2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f003 0304 	and.w	r3, r3, #4
 8006f6a:	2b04      	cmp	r3, #4
 8006f6c:	d10e      	bne.n	8006f8c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f6e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f72:	9300      	str	r3, [sp, #0]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 f814 	bl	8006faa <UART_WaitOnFlagUntilTimeout>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d001      	beq.n	8006f8c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f88:	2303      	movs	r3, #3
 8006f8a:	e00a      	b.n	8006fa2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2220      	movs	r2, #32
 8006f90:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2220      	movs	r2, #32
 8006f96:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3710      	adds	r7, #16
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}

08006faa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b084      	sub	sp, #16
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	60f8      	str	r0, [r7, #12]
 8006fb2:	60b9      	str	r1, [r7, #8]
 8006fb4:	603b      	str	r3, [r7, #0]
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fba:	e05d      	b.n	8007078 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc2:	d059      	beq.n	8007078 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fc4:	f7fc f9fa 	bl	80033bc <HAL_GetTick>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	1ad3      	subs	r3, r2, r3
 8006fce:	69ba      	ldr	r2, [r7, #24]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d302      	bcc.n	8006fda <UART_WaitOnFlagUntilTimeout+0x30>
 8006fd4:	69bb      	ldr	r3, [r7, #24]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d11b      	bne.n	8007012 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006fe8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	689a      	ldr	r2, [r3, #8]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f022 0201 	bic.w	r2, r2, #1
 8006ff8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2220      	movs	r2, #32
 8006ffe:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2220      	movs	r2, #32
 8007004:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2200      	movs	r2, #0
 800700a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800700e:	2303      	movs	r3, #3
 8007010:	e042      	b.n	8007098 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 0304 	and.w	r3, r3, #4
 800701c:	2b00      	cmp	r3, #0
 800701e:	d02b      	beq.n	8007078 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	69db      	ldr	r3, [r3, #28]
 8007026:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800702a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800702e:	d123      	bne.n	8007078 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007038:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007048:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	689a      	ldr	r2, [r3, #8]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f022 0201 	bic.w	r2, r2, #1
 8007058:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2220      	movs	r2, #32
 800705e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2220      	movs	r2, #32
 8007064:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2220      	movs	r2, #32
 800706a:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2200      	movs	r2, #0
 8007070:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8007074:	2303      	movs	r3, #3
 8007076:	e00f      	b.n	8007098 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	69da      	ldr	r2, [r3, #28]
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	4013      	ands	r3, r2
 8007082:	68ba      	ldr	r2, [r7, #8]
 8007084:	429a      	cmp	r2, r3
 8007086:	bf0c      	ite	eq
 8007088:	2301      	moveq	r3, #1
 800708a:	2300      	movne	r3, #0
 800708c:	b2db      	uxtb	r3, r3
 800708e:	461a      	mov	r2, r3
 8007090:	79fb      	ldrb	r3, [r7, #7]
 8007092:	429a      	cmp	r2, r3
 8007094:	d092      	beq.n	8006fbc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007096:	2300      	movs	r3, #0
}
 8007098:	4618      	mov	r0, r3
 800709a:	3710      	adds	r7, #16
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80070a0:	b084      	sub	sp, #16
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b084      	sub	sp, #16
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
 80070aa:	f107 001c 	add.w	r0, r7, #28
 80070ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80070b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d122      	bne.n	80070fe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80070cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80070e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d105      	bne.n	80070f2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	68db      	ldr	r3, [r3, #12]
 80070ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 fa30 	bl	8007558 <USB_CoreReset>
 80070f8:	4603      	mov	r3, r0
 80070fa:	73fb      	strb	r3, [r7, #15]
 80070fc:	e01a      	b.n	8007134 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 fa24 	bl	8007558 <USB_CoreReset>
 8007110:	4603      	mov	r3, r0
 8007112:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007114:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007116:	2b00      	cmp	r3, #0
 8007118:	d106      	bne.n	8007128 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800711e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	639a      	str	r2, [r3, #56]	; 0x38
 8007126:	e005      	b.n	8007134 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800712c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8007134:	7bfb      	ldrb	r3, [r7, #15]
}
 8007136:	4618      	mov	r0, r3
 8007138:	3710      	adds	r7, #16
 800713a:	46bd      	mov	sp, r7
 800713c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007140:	b004      	add	sp, #16
 8007142:	4770      	bx	lr

08007144 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	f023 0201 	bic.w	r2, r3, #1
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007158:	2300      	movs	r3, #0
}
 800715a:	4618      	mov	r0, r3
 800715c:	370c      	adds	r7, #12
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr

08007166 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007166:	b580      	push	{r7, lr}
 8007168:	b082      	sub	sp, #8
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
 800716e:	460b      	mov	r3, r1
 8007170:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800717e:	78fb      	ldrb	r3, [r7, #3]
 8007180:	2b01      	cmp	r3, #1
 8007182:	d106      	bne.n	8007192 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	60da      	str	r2, [r3, #12]
 8007190:	e00b      	b.n	80071aa <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007192:	78fb      	ldrb	r3, [r7, #3]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d106      	bne.n	80071a6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	60da      	str	r2, [r3, #12]
 80071a4:	e001      	b.n	80071aa <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	e003      	b.n	80071b2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80071aa:	2032      	movs	r0, #50	; 0x32
 80071ac:	f7fc f912 	bl	80033d4 <HAL_Delay>

  return HAL_OK;
 80071b0:	2300      	movs	r3, #0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3708      	adds	r7, #8
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
	...

080071bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80071bc:	b084      	sub	sp, #16
 80071be:	b580      	push	{r7, lr}
 80071c0:	b086      	sub	sp, #24
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
 80071c6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80071ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80071ce:	2300      	movs	r3, #0
 80071d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80071d6:	2300      	movs	r3, #0
 80071d8:	613b      	str	r3, [r7, #16]
 80071da:	e009      	b.n	80071f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	3340      	adds	r3, #64	; 0x40
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	4413      	add	r3, r2
 80071e6:	2200      	movs	r2, #0
 80071e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	3301      	adds	r3, #1
 80071ee:	613b      	str	r3, [r7, #16]
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	2b0e      	cmp	r3, #14
 80071f4:	d9f2      	bls.n	80071dc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80071f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d11c      	bne.n	8007236 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	68fa      	ldr	r2, [r7, #12]
 8007206:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800720a:	f043 0302 	orr.w	r3, r3, #2
 800720e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007214:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	601a      	str	r2, [r3, #0]
 8007234:	e005      	b.n	8007242 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800723a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007248:	461a      	mov	r2, r3
 800724a:	2300      	movs	r3, #0
 800724c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007254:	4619      	mov	r1, r3
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800725c:	461a      	mov	r2, r3
 800725e:	680b      	ldr	r3, [r1, #0]
 8007260:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007262:	2103      	movs	r1, #3
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 f93d 	bl	80074e4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800726a:	2110      	movs	r1, #16
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 f8f1 	bl	8007454 <USB_FlushTxFifo>
 8007272:	4603      	mov	r3, r0
 8007274:	2b00      	cmp	r3, #0
 8007276:	d001      	beq.n	800727c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 f90f 	bl	80074a0 <USB_FlushRxFifo>
 8007282:	4603      	mov	r3, r0
 8007284:	2b00      	cmp	r3, #0
 8007286:	d001      	beq.n	800728c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8007288:	2301      	movs	r3, #1
 800728a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007292:	461a      	mov	r2, r3
 8007294:	2300      	movs	r3, #0
 8007296:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800729e:	461a      	mov	r2, r3
 80072a0:	2300      	movs	r3, #0
 80072a2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072aa:	461a      	mov	r2, r3
 80072ac:	2300      	movs	r3, #0
 80072ae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072b0:	2300      	movs	r3, #0
 80072b2:	613b      	str	r3, [r7, #16]
 80072b4:	e043      	b.n	800733e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	015a      	lsls	r2, r3, #5
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	4413      	add	r3, r2
 80072be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072cc:	d118      	bne.n	8007300 <USB_DevInit+0x144>
    {
      if (i == 0U)
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d10a      	bne.n	80072ea <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	015a      	lsls	r2, r3, #5
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	4413      	add	r3, r2
 80072dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072e0:	461a      	mov	r2, r3
 80072e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80072e6:	6013      	str	r3, [r2, #0]
 80072e8:	e013      	b.n	8007312 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	015a      	lsls	r2, r3, #5
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	4413      	add	r3, r2
 80072f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072f6:	461a      	mov	r2, r3
 80072f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80072fc:	6013      	str	r3, [r2, #0]
 80072fe:	e008      	b.n	8007312 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	015a      	lsls	r2, r3, #5
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	4413      	add	r3, r2
 8007308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800730c:	461a      	mov	r2, r3
 800730e:	2300      	movs	r3, #0
 8007310:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	015a      	lsls	r2, r3, #5
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	4413      	add	r3, r2
 800731a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800731e:	461a      	mov	r2, r3
 8007320:	2300      	movs	r3, #0
 8007322:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	015a      	lsls	r2, r3, #5
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	4413      	add	r3, r2
 800732c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007330:	461a      	mov	r2, r3
 8007332:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007336:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	3301      	adds	r3, #1
 800733c:	613b      	str	r3, [r7, #16]
 800733e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007340:	693a      	ldr	r2, [r7, #16]
 8007342:	429a      	cmp	r2, r3
 8007344:	d3b7      	bcc.n	80072b6 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007346:	2300      	movs	r3, #0
 8007348:	613b      	str	r3, [r7, #16]
 800734a:	e043      	b.n	80073d4 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	015a      	lsls	r2, r3, #5
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	4413      	add	r3, r2
 8007354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800735e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007362:	d118      	bne.n	8007396 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d10a      	bne.n	8007380 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	015a      	lsls	r2, r3, #5
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	4413      	add	r3, r2
 8007372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007376:	461a      	mov	r2, r3
 8007378:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800737c:	6013      	str	r3, [r2, #0]
 800737e:	e013      	b.n	80073a8 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	015a      	lsls	r2, r3, #5
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	4413      	add	r3, r2
 8007388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800738c:	461a      	mov	r2, r3
 800738e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007392:	6013      	str	r3, [r2, #0]
 8007394:	e008      	b.n	80073a8 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	015a      	lsls	r2, r3, #5
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	4413      	add	r3, r2
 800739e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073a2:	461a      	mov	r2, r3
 80073a4:	2300      	movs	r3, #0
 80073a6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	015a      	lsls	r2, r3, #5
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	4413      	add	r3, r2
 80073b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073b4:	461a      	mov	r2, r3
 80073b6:	2300      	movs	r3, #0
 80073b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	015a      	lsls	r2, r3, #5
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	4413      	add	r3, r2
 80073c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073c6:	461a      	mov	r2, r3
 80073c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80073cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	3301      	adds	r3, #1
 80073d2:	613b      	str	r3, [r7, #16]
 80073d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d6:	693a      	ldr	r2, [r7, #16]
 80073d8:	429a      	cmp	r2, r3
 80073da:	d3b7      	bcc.n	800734c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073e2:	691b      	ldr	r3, [r3, #16]
 80073e4:	68fa      	ldr	r2, [r7, #12]
 80073e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073ee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80073fc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	699b      	ldr	r3, [r3, #24]
 8007402:	f043 0210 	orr.w	r2, r3, #16
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	699a      	ldr	r2, [r3, #24]
 800740e:	4b10      	ldr	r3, [pc, #64]	; (8007450 <USB_DevInit+0x294>)
 8007410:	4313      	orrs	r3, r2
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007418:	2b00      	cmp	r3, #0
 800741a:	d005      	beq.n	8007428 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	699b      	ldr	r3, [r3, #24]
 8007420:	f043 0208 	orr.w	r2, r3, #8
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007428:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800742a:	2b01      	cmp	r3, #1
 800742c:	d107      	bne.n	800743e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	699b      	ldr	r3, [r3, #24]
 8007432:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007436:	f043 0304 	orr.w	r3, r3, #4
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800743e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007440:	4618      	mov	r0, r3
 8007442:	3718      	adds	r7, #24
 8007444:	46bd      	mov	sp, r7
 8007446:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800744a:	b004      	add	sp, #16
 800744c:	4770      	bx	lr
 800744e:	bf00      	nop
 8007450:	803c3800 	.word	0x803c3800

08007454 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007454:	b480      	push	{r7}
 8007456:	b085      	sub	sp, #20
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800745e:	2300      	movs	r3, #0
 8007460:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	019b      	lsls	r3, r3, #6
 8007466:	f043 0220 	orr.w	r2, r3, #32
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	3301      	adds	r3, #1
 8007472:	60fb      	str	r3, [r7, #12]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	4a09      	ldr	r2, [pc, #36]	; (800749c <USB_FlushTxFifo+0x48>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d901      	bls.n	8007480 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800747c:	2303      	movs	r3, #3
 800747e:	e006      	b.n	800748e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	f003 0320 	and.w	r3, r3, #32
 8007488:	2b20      	cmp	r3, #32
 800748a:	d0f0      	beq.n	800746e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800748c:	2300      	movs	r3, #0
}
 800748e:	4618      	mov	r0, r3
 8007490:	3714      	adds	r7, #20
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr
 800749a:	bf00      	nop
 800749c:	00030d40 	.word	0x00030d40

080074a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b085      	sub	sp, #20
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80074a8:	2300      	movs	r3, #0
 80074aa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2210      	movs	r2, #16
 80074b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	3301      	adds	r3, #1
 80074b6:	60fb      	str	r3, [r7, #12]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	4a09      	ldr	r2, [pc, #36]	; (80074e0 <USB_FlushRxFifo+0x40>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d901      	bls.n	80074c4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80074c0:	2303      	movs	r3, #3
 80074c2:	e006      	b.n	80074d2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	691b      	ldr	r3, [r3, #16]
 80074c8:	f003 0310 	and.w	r3, r3, #16
 80074cc:	2b10      	cmp	r3, #16
 80074ce:	d0f0      	beq.n	80074b2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80074d0:	2300      	movs	r3, #0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3714      	adds	r7, #20
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr
 80074de:	bf00      	nop
 80074e0:	00030d40 	.word	0x00030d40

080074e4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b085      	sub	sp, #20
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	460b      	mov	r3, r1
 80074ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	78fb      	ldrb	r3, [r7, #3]
 80074fe:	68f9      	ldr	r1, [r7, #12]
 8007500:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007504:	4313      	orrs	r3, r2
 8007506:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	3714      	adds	r7, #20
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr

08007516 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007516:	b480      	push	{r7}
 8007518:	b085      	sub	sp, #20
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68fa      	ldr	r2, [r7, #12]
 800752c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007530:	f023 0303 	bic.w	r3, r3, #3
 8007534:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	68fa      	ldr	r2, [r7, #12]
 8007540:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007544:	f043 0302 	orr.w	r3, r3, #2
 8007548:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800754a:	2300      	movs	r3, #0
}
 800754c:	4618      	mov	r0, r3
 800754e:	3714      	adds	r7, #20
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007558:	b480      	push	{r7}
 800755a:	b085      	sub	sp, #20
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007560:	2300      	movs	r3, #0
 8007562:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	3301      	adds	r3, #1
 8007568:	60fb      	str	r3, [r7, #12]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	4a13      	ldr	r2, [pc, #76]	; (80075bc <USB_CoreReset+0x64>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d901      	bls.n	8007576 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007572:	2303      	movs	r3, #3
 8007574:	e01b      	b.n	80075ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	691b      	ldr	r3, [r3, #16]
 800757a:	2b00      	cmp	r3, #0
 800757c:	daf2      	bge.n	8007564 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800757e:	2300      	movs	r3, #0
 8007580:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	691b      	ldr	r3, [r3, #16]
 8007586:	f043 0201 	orr.w	r2, r3, #1
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	3301      	adds	r3, #1
 8007592:	60fb      	str	r3, [r7, #12]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	4a09      	ldr	r2, [pc, #36]	; (80075bc <USB_CoreReset+0x64>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d901      	bls.n	80075a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800759c:	2303      	movs	r3, #3
 800759e:	e006      	b.n	80075ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	691b      	ldr	r3, [r3, #16]
 80075a4:	f003 0301 	and.w	r3, r3, #1
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d0f0      	beq.n	800758e <USB_CoreReset+0x36>

  return HAL_OK;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3714      	adds	r7, #20
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr
 80075ba:	bf00      	nop
 80075bc:	00030d40 	.word	0x00030d40

080075c0 <network_configure_activations>:


AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b085      	sub	sp, #20
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, AI_NETWORK_ACTIVATIONS_ALIGNMENT));
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	3303      	adds	r3, #3
 80075d0:	f023 0303 	bic.w	r3, r3, #3
 80075d4:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    conv2d_scratch0_array.data = AI_PTR(activations + 0);
 80075d6:	4a18      	ldr	r2, [pc, #96]	; (8007638 <network_configure_activations+0x78>)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6093      	str	r3, [r2, #8]
    conv2d_scratch0_array.data_start = AI_PTR(activations + 0);
 80075dc:	4a16      	ldr	r2, [pc, #88]	; (8007638 <network_configure_activations+0x78>)
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	60d3      	str	r3, [r2, #12]
    input_0_output_array.data = AI_PTR(NULL);
 80075e2:	4b16      	ldr	r3, [pc, #88]	; (800763c <network_configure_activations+0x7c>)
 80075e4:	2200      	movs	r2, #0
 80075e6:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 80075e8:	4b14      	ldr	r3, [pc, #80]	; (800763c <network_configure_activations+0x7c>)
 80075ea:	2200      	movs	r2, #0
 80075ec:	60da      	str	r2, [r3, #12]
    conv2d_output_array.data = AI_PTR(activations + 864);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80075f4:	4a12      	ldr	r2, [pc, #72]	; (8007640 <network_configure_activations+0x80>)
 80075f6:	6093      	str	r3, [r2, #8]
    conv2d_output_array.data_start = AI_PTR(activations + 864);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80075fe:	4a10      	ldr	r2, [pc, #64]	; (8007640 <network_configure_activations+0x80>)
 8007600:	60d3      	str	r3, [r2, #12]
    dense_output_array.data = AI_PTR(activations + 0);
 8007602:	4a10      	ldr	r2, [pc, #64]	; (8007644 <network_configure_activations+0x84>)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	6093      	str	r3, [r2, #8]
    dense_output_array.data_start = AI_PTR(activations + 0);
 8007608:	4a0e      	ldr	r2, [pc, #56]	; (8007644 <network_configure_activations+0x84>)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(activations + 48);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	3330      	adds	r3, #48	; 0x30
 8007612:	4a0d      	ldr	r2, [pc, #52]	; (8007648 <network_configure_activations+0x88>)
 8007614:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(activations + 48);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	3330      	adds	r3, #48	; 0x30
 800761a:	4a0b      	ldr	r2, [pc, #44]	; (8007648 <network_configure_activations+0x88>)
 800761c:	60d3      	str	r3, [r2, #12]
    dense_1_nl_output_array.data = AI_PTR(NULL);
 800761e:	4b0b      	ldr	r3, [pc, #44]	; (800764c <network_configure_activations+0x8c>)
 8007620:	2200      	movs	r2, #0
 8007622:	609a      	str	r2, [r3, #8]
    dense_1_nl_output_array.data_start = AI_PTR(NULL);
 8007624:	4b09      	ldr	r3, [pc, #36]	; (800764c <network_configure_activations+0x8c>)
 8007626:	2200      	movs	r2, #0
 8007628:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 800762a:	2301      	movs	r3, #1
}
 800762c:	4618      	mov	r0, r3
 800762e:	3714      	adds	r7, #20
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr
 8007638:	20000074 	.word	0x20000074
 800763c:	200000e4 	.word	0x200000e4
 8007640:	200000f4 	.word	0x200000f4
 8007644:	20000104 	.word	0x20000104
 8007648:	20000114 	.word	0x20000114
 800764c:	20000124 	.word	0x20000124

08007650 <network_configure_weights>:


AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 8007650:	b480      	push	{r7}
 8007652:	b085      	sub	sp, #20
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	691b      	ldr	r3, [r3, #16]
 800765e:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8007660:	4b33      	ldr	r3, [pc, #204]	; (8007730 <network_configure_weights+0xe0>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007668:	4a31      	ldr	r2, [pc, #196]	; (8007730 <network_configure_weights+0xe0>)
 800766a:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights + 5392);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f503 53a8 	add.w	r3, r3, #5376	; 0x1500
 8007672:	3310      	adds	r3, #16
 8007674:	4a2e      	ldr	r2, [pc, #184]	; (8007730 <network_configure_weights+0xe0>)
 8007676:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights + 5392);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f503 53a8 	add.w	r3, r3, #5376	; 0x1500
 800767e:	3310      	adds	r3, #16
 8007680:	4a2b      	ldr	r2, [pc, #172]	; (8007730 <network_configure_weights+0xe0>)
 8007682:	60d3      	str	r3, [r2, #12]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8007684:	4b2b      	ldr	r3, [pc, #172]	; (8007734 <network_configure_weights+0xe4>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800768c:	4a29      	ldr	r2, [pc, #164]	; (8007734 <network_configure_weights+0xe4>)
 800768e:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights + 5296);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f503 53a5 	add.w	r3, r3, #5280	; 0x14a0
 8007696:	3310      	adds	r3, #16
 8007698:	4a26      	ldr	r2, [pc, #152]	; (8007734 <network_configure_weights+0xe4>)
 800769a:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights + 5296);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f503 53a5 	add.w	r3, r3, #5280	; 0x14a0
 80076a2:	3310      	adds	r3, #16
 80076a4:	4a23      	ldr	r2, [pc, #140]	; (8007734 <network_configure_weights+0xe4>)
 80076a6:	60d3      	str	r3, [r2, #12]
    dense_bias_array.format |= AI_FMT_FLAG_CONST;
 80076a8:	4b23      	ldr	r3, [pc, #140]	; (8007738 <network_configure_weights+0xe8>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80076b0:	4a21      	ldr	r2, [pc, #132]	; (8007738 <network_configure_weights+0xe8>)
 80076b2:	6013      	str	r3, [r2, #0]
    dense_bias_array.data = AI_PTR(weights + 5248);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f503 53a4 	add.w	r3, r3, #5248	; 0x1480
 80076ba:	4a1f      	ldr	r2, [pc, #124]	; (8007738 <network_configure_weights+0xe8>)
 80076bc:	6093      	str	r3, [r2, #8]
    dense_bias_array.data_start = AI_PTR(weights + 5248);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f503 53a4 	add.w	r3, r3, #5248	; 0x1480
 80076c4:	4a1c      	ldr	r2, [pc, #112]	; (8007738 <network_configure_weights+0xe8>)
 80076c6:	60d3      	str	r3, [r2, #12]
    dense_weights_array.format |= AI_FMT_FLAG_CONST;
 80076c8:	4b1c      	ldr	r3, [pc, #112]	; (800773c <network_configure_weights+0xec>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80076d0:	4a1a      	ldr	r2, [pc, #104]	; (800773c <network_configure_weights+0xec>)
 80076d2:	6013      	str	r3, [r2, #0]
    dense_weights_array.data = AI_PTR(weights + 2656);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f503 6326 	add.w	r3, r3, #2656	; 0xa60
 80076da:	4a18      	ldr	r2, [pc, #96]	; (800773c <network_configure_weights+0xec>)
 80076dc:	6093      	str	r3, [r2, #8]
    dense_weights_array.data_start = AI_PTR(weights + 1632);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 80076e4:	4a15      	ldr	r2, [pc, #84]	; (800773c <network_configure_weights+0xec>)
 80076e6:	60d3      	str	r3, [r2, #12]
    conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 80076e8:	4b15      	ldr	r3, [pc, #84]	; (8007740 <network_configure_weights+0xf0>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80076f0:	4a13      	ldr	r2, [pc, #76]	; (8007740 <network_configure_weights+0xf0>)
 80076f2:	6013      	str	r3, [r2, #0]
    conv2d_bias_array.data = AI_PTR(weights + 1536);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80076fa:	4a11      	ldr	r2, [pc, #68]	; (8007740 <network_configure_weights+0xf0>)
 80076fc:	6093      	str	r3, [r2, #8]
    conv2d_bias_array.data_start = AI_PTR(weights + 1536);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8007704:	4a0e      	ldr	r2, [pc, #56]	; (8007740 <network_configure_weights+0xf0>)
 8007706:	60d3      	str	r3, [r2, #12]
    conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8007708:	4b0e      	ldr	r3, [pc, #56]	; (8007744 <network_configure_weights+0xf4>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007710:	4a0c      	ldr	r2, [pc, #48]	; (8007744 <network_configure_weights+0xf4>)
 8007712:	6013      	str	r3, [r2, #0]
    conv2d_weights_array.data = AI_PTR(weights + 0);
 8007714:	4a0b      	ldr	r2, [pc, #44]	; (8007744 <network_configure_weights+0xf4>)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	6093      	str	r3, [r2, #8]
    conv2d_weights_array.data_start = AI_PTR(weights + 0);
 800771a:	4a0a      	ldr	r2, [pc, #40]	; (8007744 <network_configure_weights+0xf4>)
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	60d3      	str	r3, [r2, #12]
  }

  return true;
 8007720:	2301      	movs	r3, #1
}
 8007722:	4618      	mov	r0, r3
 8007724:	3714      	adds	r7, #20
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr
 800772e:	bf00      	nop
 8007730:	20000084 	.word	0x20000084
 8007734:	20000094 	.word	0x20000094
 8007738:	200000a4 	.word	0x200000a4
 800773c:	200000b4 	.word	0x200000b4
 8007740:	200000c4 	.word	0x200000c4
 8007744:	200000d4 	.word	0x200000d4

08007748 <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 f895 	bl	8007880 <ai_platform_network_get_error>
 8007756:	4603      	mov	r3, r0
}
 8007758:	4618      	mov	r0, r3
 800775a:	3708      	adds	r7, #8
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af02      	add	r7, sp, #8
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800776a:	2300      	movs	r3, #0
 800776c:	9301      	str	r3, [sp, #4]
 800776e:	2303      	movs	r3, #3
 8007770:	9300      	str	r3, [sp, #0]
 8007772:	2301      	movs	r3, #1
 8007774:	4a04      	ldr	r2, [pc, #16]	; (8007788 <ai_network_create+0x28>)
 8007776:	6839      	ldr	r1, [r7, #0]
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 f8b3 	bl	80078e4 <ai_platform_network_create>
 800777e:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8007780:	4618      	mov	r0, r3
 8007782:	3708      	adds	r7, #8
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}
 8007788:	20000014 	.word	0x20000014

0800778c <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8007796:	6839      	ldr	r1, [r7, #0]
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 f8fb 	bl	8007994 <ai_platform_network_init>
 800779e:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d101      	bne.n	80077aa <ai_network_init+0x1e>
 80077a6:	2300      	movs	r3, #0
 80077a8:	e02b      	b.n	8007802 <ai_network_init+0x76>

  ai_bool ok = true;
 80077aa:	2301      	movs	r3, #1
 80077ac:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, &params->params);
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	4619      	mov	r1, r3
 80077b2:	68f8      	ldr	r0, [r7, #12]
 80077b4:	f7ff ff4c 	bl	8007650 <network_configure_weights>
 80077b8:	4603      	mov	r3, r0
 80077ba:	461a      	mov	r2, r3
 80077bc:	7afb      	ldrb	r3, [r7, #11]
 80077be:	4013      	ands	r3, r2
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	bf14      	ite	ne
 80077c4:	2301      	movne	r3, #1
 80077c6:	2300      	moveq	r3, #0
 80077c8:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, &params->activations);
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	3318      	adds	r3, #24
 80077ce:	4619      	mov	r1, r3
 80077d0:	68f8      	ldr	r0, [r7, #12]
 80077d2:	f7ff fef5 	bl	80075c0 <network_configure_activations>
 80077d6:	4603      	mov	r3, r0
 80077d8:	461a      	mov	r2, r3
 80077da:	7afb      	ldrb	r3, [r7, #11]
 80077dc:	4013      	ands	r3, r2
 80077de:	2b00      	cmp	r3, #0
 80077e0:	bf14      	ite	ne
 80077e2:	2301      	movne	r3, #1
 80077e4:	2300      	moveq	r3, #0
 80077e6:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 f951 	bl	8007a90 <ai_platform_network_post_init>
 80077ee:	4603      	mov	r3, r0
 80077f0:	461a      	mov	r2, r3
 80077f2:	7afb      	ldrb	r3, [r7, #11]
 80077f4:	4013      	ands	r3, r2
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	bf14      	ite	ne
 80077fa:	2301      	movne	r3, #1
 80077fc:	2300      	moveq	r3, #0
 80077fe:	72fb      	strb	r3, [r7, #11]

  return ok;
 8007800:	7afb      	ldrb	r3, [r7, #11]
}
 8007802:	4618      	mov	r0, r3
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}

0800780a <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800780a:	b580      	push	{r7, lr}
 800780c:	b084      	sub	sp, #16
 800780e:	af00      	add	r7, sp, #0
 8007810:	60f8      	str	r0, [r7, #12]
 8007812:	60b9      	str	r1, [r7, #8]
 8007814:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	68b9      	ldr	r1, [r7, #8]
 800781a:	68f8      	ldr	r0, [r7, #12]
 800781c:	f000 f980 	bl	8007b20 <ai_platform_network_process>
 8007820:	4603      	mov	r3, r0
}
 8007822:	4618      	mov	r0, r3
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
	...

0800782c <ai_network_data_weights_get>:
#include "network_data.h"

ai_handle ai_network_data_weights_get(void)
{
 800782c:	b480      	push	{r7}
 800782e:	af00      	add	r7, sp, #0
    0x49, 0xbe, 0xe0, 0x03, 0x20, 0xbf, 0xa3, 0x85, 0x0c, 0x3f,
    0x9e, 0x68, 0xb6, 0x3e, 0x88, 0x58, 0x30, 0x3f, 0xd1, 0x0a,
    0x02, 0xbf, 0x14, 0xf5, 0x73, 0xbd, 0x04, 0xf5, 0x73, 0x3d
  };

  return AI_HANDLE_PTR(s_network_weights);
 8007830:	4b02      	ldr	r3, [pc, #8]	; (800783c <ai_network_data_weights_get+0x10>)

}
 8007832:	4618      	mov	r0, r3
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr
 800783c:	0800cb1c 	.word	0x0800cb1c

08007840 <_platform_network_state_setup.isra.1>:
 8007840:	b430      	push	{r4, r5}
 8007842:	68dd      	ldr	r5, [r3, #12]
 8007844:	695c      	ldr	r4, [r3, #20]
 8007846:	68ed      	ldr	r5, [r5, #12]
 8007848:	68e4      	ldr	r4, [r4, #12]
 800784a:	fb04 f405 	mul.w	r4, r4, r5
 800784e:	6084      	str	r4, [r0, #8]
 8007850:	8809      	ldrh	r1, [r1, #0]
 8007852:	fb04 f401 	mul.w	r4, r4, r1
 8007856:	60c4      	str	r4, [r0, #12]
 8007858:	6811      	ldr	r1, [r2, #0]
 800785a:	6041      	str	r1, [r0, #4]
 800785c:	6812      	ldr	r2, [r2, #0]
 800785e:	4414      	add	r4, r2
 8007860:	6004      	str	r4, [r0, #0]
 8007862:	699a      	ldr	r2, [r3, #24]
 8007864:	6814      	ldr	r4, [r2, #0]
 8007866:	00a4      	lsls	r4, r4, #2
 8007868:	d407      	bmi.n	800787a <_platform_network_state_setup.isra.1+0x3a>
 800786a:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
 800786e:	1b64      	subs	r4, r4, r5
 8007870:	4421      	add	r1, r4
 8007872:	6091      	str	r1, [r2, #8]
 8007874:	699b      	ldr	r3, [r3, #24]
 8007876:	6842      	ldr	r2, [r0, #4]
 8007878:	60da      	str	r2, [r3, #12]
 800787a:	bc30      	pop	{r4, r5}
 800787c:	4770      	bx	lr
	...

08007880 <ai_platform_network_get_error>:
 8007880:	b410      	push	{r4}
 8007882:	b120      	cbz	r0, 800788e <ai_platform_network_get_error+0xe>
 8007884:	4b11      	ldr	r3, [pc, #68]	; (80078cc <ai_platform_network_get_error+0x4c>)
 8007886:	6802      	ldr	r2, [r0, #0]
 8007888:	429a      	cmp	r2, r3
 800788a:	bf18      	it	ne
 800788c:	2000      	movne	r0, #0
 800788e:	4910      	ldr	r1, [pc, #64]	; (80078d0 <ai_platform_network_get_error+0x50>)
 8007890:	4a10      	ldr	r2, [pc, #64]	; (80078d4 <ai_platform_network_get_error+0x54>)
 8007892:	680b      	ldr	r3, [r1, #0]
 8007894:	2401      	movs	r4, #1
 8007896:	f023 0301 	bic.w	r3, r3, #1
 800789a:	600b      	str	r3, [r1, #0]
 800789c:	4613      	mov	r3, r2
 800789e:	6014      	str	r4, [r2, #0]
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	2a00      	cmp	r2, #0
 80078a4:	d1fc      	bne.n	80078a0 <ai_platform_network_get_error+0x20>
 80078a6:	4b0c      	ldr	r3, [pc, #48]	; (80078d8 <ai_platform_network_get_error+0x58>)
 80078a8:	4a0c      	ldr	r2, [pc, #48]	; (80078dc <ai_platform_network_get_error+0x5c>)
 80078aa:	601a      	str	r2, [r3, #0]
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	4b0c      	ldr	r3, [pc, #48]	; (80078e0 <ai_platform_network_get_error+0x60>)
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d000      	beq.n	80078b6 <ai_platform_network_get_error+0x36>
 80078b4:	e7fe      	b.n	80078b4 <ai_platform_network_get_error+0x34>
 80078b6:	b120      	cbz	r0, 80078c2 <ai_platform_network_get_error+0x42>
 80078b8:	3010      	adds	r0, #16
 80078ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078be:	f000 bb3b 	b.w	8007f38 <core_get_error>
 80078c2:	f241 0010 	movw	r0, #4112	; 0x1010
 80078c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078ca:	4770      	bx	lr
 80078cc:	a1c00100 	.word	0xa1c00100
 80078d0:	e0002000 	.word	0xe0002000
 80078d4:	40023008 	.word	0x40023008
 80078d8:	40023000 	.word	0x40023000
 80078dc:	f407a5c2 	.word	0xf407a5c2
 80078e0:	b5e8b5cd 	.word	0xb5e8b5cd

080078e4 <ai_platform_network_create>:
 80078e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078e8:	4e23      	ldr	r6, [pc, #140]	; (8007978 <ai_platform_network_create+0x94>)
 80078ea:	4924      	ldr	r1, [pc, #144]	; (800797c <ai_platform_network_create+0x98>)
 80078ec:	6835      	ldr	r5, [r6, #0]
 80078ee:	b082      	sub	sp, #8
 80078f0:	f025 0501 	bic.w	r5, r5, #1
 80078f4:	f89d 7020 	ldrb.w	r7, [sp, #32]
 80078f8:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 80078fc:	6035      	str	r5, [r6, #0]
 80078fe:	2501      	movs	r5, #1
 8007900:	600d      	str	r5, [r1, #0]
 8007902:	680d      	ldr	r5, [r1, #0]
 8007904:	2d00      	cmp	r5, #0
 8007906:	d1fc      	bne.n	8007902 <ai_platform_network_create+0x1e>
 8007908:	491d      	ldr	r1, [pc, #116]	; (8007980 <ai_platform_network_create+0x9c>)
 800790a:	4e1e      	ldr	r6, [pc, #120]	; (8007984 <ai_platform_network_create+0xa0>)
 800790c:	600e      	str	r6, [r1, #0]
 800790e:	680e      	ldr	r6, [r1, #0]
 8007910:	491d      	ldr	r1, [pc, #116]	; (8007988 <ai_platform_network_create+0xa4>)
 8007912:	428e      	cmp	r6, r1
 8007914:	d000      	beq.n	8007918 <ai_platform_network_create+0x34>
 8007916:	e7fe      	b.n	8007916 <ai_platform_network_create+0x32>
 8007918:	b1d0      	cbz	r0, 8007950 <ai_platform_network_create+0x6c>
 800791a:	4698      	mov	r8, r3
 800791c:	4613      	mov	r3, r2
 800791e:	4a1b      	ldr	r2, [pc, #108]	; (800798c <ai_platform_network_create+0xa8>)
 8007920:	601a      	str	r2, [r3, #0]
 8007922:	6003      	str	r3, [r0, #0]
 8007924:	4606      	mov	r6, r0
 8007926:	f000 fb05 	bl	8007f34 <core_init>
 800792a:	b1b0      	cbz	r0, 800795a <ai_platform_network_create+0x76>
 800792c:	0223      	lsls	r3, r4, #8
 800792e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007932:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 8007936:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 800793a:	d910      	bls.n	800795e <ai_platform_network_create+0x7a>
 800793c:	2201      	movs	r2, #1
 800793e:	2300      	movs	r3, #0
 8007940:	6033      	str	r3, [r6, #0]
 8007942:	2310      	movs	r3, #16
 8007944:	2000      	movs	r0, #0
 8007946:	f362 0007 	bfi	r0, r2, #0, #8
 800794a:	f363 201f 	bfi	r0, r3, #8, #24
 800794e:	e001      	b.n	8007954 <ai_platform_network_create+0x70>
 8007950:	f241 0010 	movw	r0, #4112	; 0x1010
 8007954:	b002      	add	sp, #8
 8007956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800795a:	2230      	movs	r2, #48	; 0x30
 800795c:	e7ef      	b.n	800793e <ai_platform_network_create+0x5a>
 800795e:	a802      	add	r0, sp, #8
 8007960:	4b0b      	ldr	r3, [pc, #44]	; (8007990 <ai_platform_network_create+0xac>)
 8007962:	f840 3d04 	str.w	r3, [r0, #-4]!
 8007966:	f002 fa31 	bl	8009dcc <ai_check_custom_types>
 800796a:	b110      	cbz	r0, 8007972 <ai_platform_network_create+0x8e>
 800796c:	462b      	mov	r3, r5
 800796e:	462a      	mov	r2, r5
 8007970:	e7e8      	b.n	8007944 <ai_platform_network_create+0x60>
 8007972:	2202      	movs	r2, #2
 8007974:	e7e3      	b.n	800793e <ai_platform_network_create+0x5a>
 8007976:	bf00      	nop
 8007978:	e0002000 	.word	0xe0002000
 800797c:	40023008 	.word	0x40023008
 8007980:	40023000 	.word	0x40023000
 8007984:	f407a5c2 	.word	0xf407a5c2
 8007988:	b5e8b5cd 	.word	0xb5e8b5cd
 800798c:	a1c00100 	.word	0xa1c00100
 8007990:	84048403 	.word	0x84048403

08007994 <ai_platform_network_init>:
 8007994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007996:	460c      	mov	r4, r1
 8007998:	4605      	mov	r5, r0
 800799a:	b120      	cbz	r0, 80079a6 <ai_platform_network_init+0x12>
 800799c:	4b36      	ldr	r3, [pc, #216]	; (8007a78 <ai_platform_network_init+0xe4>)
 800799e:	6802      	ldr	r2, [r0, #0]
 80079a0:	429a      	cmp	r2, r3
 80079a2:	bf18      	it	ne
 80079a4:	2500      	movne	r5, #0
 80079a6:	4935      	ldr	r1, [pc, #212]	; (8007a7c <ai_platform_network_init+0xe8>)
 80079a8:	4a35      	ldr	r2, [pc, #212]	; (8007a80 <ai_platform_network_init+0xec>)
 80079aa:	680b      	ldr	r3, [r1, #0]
 80079ac:	2001      	movs	r0, #1
 80079ae:	f023 0301 	bic.w	r3, r3, #1
 80079b2:	600b      	str	r3, [r1, #0]
 80079b4:	4613      	mov	r3, r2
 80079b6:	6010      	str	r0, [r2, #0]
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	2a00      	cmp	r2, #0
 80079bc:	d1fc      	bne.n	80079b8 <ai_platform_network_init+0x24>
 80079be:	4b31      	ldr	r3, [pc, #196]	; (8007a84 <ai_platform_network_init+0xf0>)
 80079c0:	4a31      	ldr	r2, [pc, #196]	; (8007a88 <ai_platform_network_init+0xf4>)
 80079c2:	601a      	str	r2, [r3, #0]
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	4b31      	ldr	r3, [pc, #196]	; (8007a8c <ai_platform_network_init+0xf8>)
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d000      	beq.n	80079ce <ai_platform_network_init+0x3a>
 80079cc:	e7fe      	b.n	80079cc <ai_platform_network_init+0x38>
 80079ce:	b33d      	cbz	r5, 8007a20 <ai_platform_network_init+0x8c>
 80079d0:	b344      	cbz	r4, 8007a24 <ai_platform_network_init+0x90>
 80079d2:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80079d4:	6926      	ldr	r6, [r4, #16]
 80079d6:	2f00      	cmp	r7, #0
 80079d8:	d03d      	beq.n	8007a56 <ai_platform_network_init+0xc2>
 80079da:	b35e      	cbz	r6, 8007a34 <ai_platform_network_init+0xa0>
 80079dc:	4627      	mov	r7, r4
 80079de:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80079e0:	f105 0618 	add.w	r6, r5, #24
 80079e4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80079e6:	e897 0003 	ldmia.w	r7, {r0, r1}
 80079ea:	e886 0003 	stmia.w	r6, {r0, r1}
 80079ee:	3418      	adds	r4, #24
 80079f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80079f2:	f105 0630 	add.w	r6, r5, #48	; 0x30
 80079f6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80079f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80079fc:	e886 0003 	stmia.w	r6, {r0, r1}
 8007a00:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8007a02:	2303      	movs	r3, #3
 8007a04:	60eb      	str	r3, [r5, #12]
 8007a06:	b15a      	cbz	r2, 8007a20 <ai_platform_network_init+0x8c>
 8007a08:	68d3      	ldr	r3, [r2, #12]
 8007a0a:	6095      	str	r5, [r2, #8]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d007      	beq.n	8007a20 <ai_platform_network_init+0x8c>
 8007a10:	b133      	cbz	r3, 8007a20 <ai_platform_network_init+0x8c>
 8007a12:	68da      	ldr	r2, [r3, #12]
 8007a14:	609d      	str	r5, [r3, #8]
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d002      	beq.n	8007a20 <ai_platform_network_init+0x8c>
 8007a1a:	4613      	mov	r3, r2
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d1f8      	bne.n	8007a12 <ai_platform_network_init+0x7e>
 8007a20:	4628      	mov	r0, r5
 8007a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a24:	f105 0010 	add.w	r0, r5, #16
 8007a28:	2211      	movs	r2, #17
 8007a2a:	2110      	movs	r1, #16
 8007a2c:	f000 fa8a 	bl	8007f44 <core_set_error>
 8007a30:	4625      	mov	r5, r4
 8007a32:	e7f5      	b.n	8007a20 <ai_platform_network_init+0x8c>
 8007a34:	8921      	ldrh	r1, [r4, #8]
 8007a36:	88e2      	ldrh	r2, [r4, #6]
 8007a38:	68e3      	ldr	r3, [r4, #12]
 8007a3a:	fb02 f201 	mul.w	r2, r2, r1
 8007a3e:	fb03 f302 	mul.w	r3, r3, r2
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d0ca      	beq.n	80079dc <ai_platform_network_init+0x48>
 8007a46:	f105 0010 	add.w	r0, r5, #16
 8007a4a:	2212      	movs	r2, #18
 8007a4c:	2110      	movs	r1, #16
 8007a4e:	f000 fa79 	bl	8007f44 <core_set_error>
 8007a52:	4635      	mov	r5, r6
 8007a54:	e7e4      	b.n	8007a20 <ai_platform_network_init+0x8c>
 8007a56:	8c21      	ldrh	r1, [r4, #32]
 8007a58:	8be2      	ldrh	r2, [r4, #30]
 8007a5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a5c:	fb02 f201 	mul.w	r2, r2, r1
 8007a60:	fb03 f302 	mul.w	r3, r3, r2
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d0b8      	beq.n	80079da <ai_platform_network_init+0x46>
 8007a68:	f105 0010 	add.w	r0, r5, #16
 8007a6c:	2213      	movs	r2, #19
 8007a6e:	2110      	movs	r1, #16
 8007a70:	f000 fa68 	bl	8007f44 <core_set_error>
 8007a74:	463d      	mov	r5, r7
 8007a76:	e7d3      	b.n	8007a20 <ai_platform_network_init+0x8c>
 8007a78:	a1c00100 	.word	0xa1c00100
 8007a7c:	e0002000 	.word	0xe0002000
 8007a80:	40023008 	.word	0x40023008
 8007a84:	40023000 	.word	0x40023000
 8007a88:	f407a5c2 	.word	0xf407a5c2
 8007a8c:	b5e8b5cd 	.word	0xb5e8b5cd

08007a90 <ai_platform_network_post_init>:
 8007a90:	b538      	push	{r3, r4, r5, lr}
 8007a92:	4604      	mov	r4, r0
 8007a94:	b120      	cbz	r0, 8007aa0 <ai_platform_network_post_init+0x10>
 8007a96:	4b1c      	ldr	r3, [pc, #112]	; (8007b08 <ai_platform_network_post_init+0x78>)
 8007a98:	6802      	ldr	r2, [r0, #0]
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	bf18      	it	ne
 8007a9e:	2400      	movne	r4, #0
 8007aa0:	491a      	ldr	r1, [pc, #104]	; (8007b0c <ai_platform_network_post_init+0x7c>)
 8007aa2:	4a1b      	ldr	r2, [pc, #108]	; (8007b10 <ai_platform_network_post_init+0x80>)
 8007aa4:	680b      	ldr	r3, [r1, #0]
 8007aa6:	2001      	movs	r0, #1
 8007aa8:	f023 0301 	bic.w	r3, r3, #1
 8007aac:	600b      	str	r3, [r1, #0]
 8007aae:	4613      	mov	r3, r2
 8007ab0:	6010      	str	r0, [r2, #0]
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	2a00      	cmp	r2, #0
 8007ab6:	d1fc      	bne.n	8007ab2 <ai_platform_network_post_init+0x22>
 8007ab8:	4b16      	ldr	r3, [pc, #88]	; (8007b14 <ai_platform_network_post_init+0x84>)
 8007aba:	4a17      	ldr	r2, [pc, #92]	; (8007b18 <ai_platform_network_post_init+0x88>)
 8007abc:	601a      	str	r2, [r3, #0]
 8007abe:	681a      	ldr	r2, [r3, #0]
 8007ac0:	4b16      	ldr	r3, [pc, #88]	; (8007b1c <ai_platform_network_post_init+0x8c>)
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d000      	beq.n	8007ac8 <ai_platform_network_post_init+0x38>
 8007ac6:	e7fe      	b.n	8007ac6 <ai_platform_network_post_init+0x36>
 8007ac8:	b1a4      	cbz	r4, 8007af4 <ai_platform_network_post_init+0x64>
 8007aca:	68e3      	ldr	r3, [r4, #12]
 8007acc:	f013 0502 	ands.w	r5, r3, #2
 8007ad0:	d012      	beq.n	8007af8 <ai_platform_network_post_init+0x68>
 8007ad2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ad4:	b163      	cbz	r3, 8007af0 <ai_platform_network_post_init+0x60>
 8007ad6:	6d25      	ldr	r5, [r4, #80]	; 0x50
 8007ad8:	b91d      	cbnz	r5, 8007ae2 <ai_platform_network_post_init+0x52>
 8007ada:	e009      	b.n	8007af0 <ai_platform_network_post_init+0x60>
 8007adc:	461d      	mov	r5, r3
 8007ade:	b13b      	cbz	r3, 8007af0 <ai_platform_network_post_init+0x60>
 8007ae0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ae2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8007ae4:	4629      	mov	r1, r5
 8007ae6:	2000      	movs	r0, #0
 8007ae8:	4798      	blx	r3
 8007aea:	68eb      	ldr	r3, [r5, #12]
 8007aec:	42ab      	cmp	r3, r5
 8007aee:	d1f5      	bne.n	8007adc <ai_platform_network_post_init+0x4c>
 8007af0:	2001      	movs	r0, #1
 8007af2:	bd38      	pop	{r3, r4, r5, pc}
 8007af4:	4620      	mov	r0, r4
 8007af6:	bd38      	pop	{r3, r4, r5, pc}
 8007af8:	f104 0010 	add.w	r0, r4, #16
 8007afc:	2210      	movs	r2, #16
 8007afe:	2111      	movs	r1, #17
 8007b00:	f000 fa20 	bl	8007f44 <core_set_error>
 8007b04:	4628      	mov	r0, r5
 8007b06:	bd38      	pop	{r3, r4, r5, pc}
 8007b08:	a1c00100 	.word	0xa1c00100
 8007b0c:	e0002000 	.word	0xe0002000
 8007b10:	40023008 	.word	0x40023008
 8007b14:	40023000 	.word	0x40023000
 8007b18:	f407a5c2 	.word	0xf407a5c2
 8007b1c:	b5e8b5cd 	.word	0xb5e8b5cd

08007b20 <ai_platform_network_process>:
 8007b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b24:	b083      	sub	sp, #12
 8007b26:	4604      	mov	r4, r0
 8007b28:	9201      	str	r2, [sp, #4]
 8007b2a:	b120      	cbz	r0, 8007b36 <ai_platform_network_process+0x16>
 8007b2c:	4ba5      	ldr	r3, [pc, #660]	; (8007dc4 <ai_platform_network_process+0x2a4>)
 8007b2e:	6802      	ldr	r2, [r0, #0]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	bf18      	it	ne
 8007b34:	2400      	movne	r4, #0
 8007b36:	48a4      	ldr	r0, [pc, #656]	; (8007dc8 <ai_platform_network_process+0x2a8>)
 8007b38:	4ba4      	ldr	r3, [pc, #656]	; (8007dcc <ai_platform_network_process+0x2ac>)
 8007b3a:	6802      	ldr	r2, [r0, #0]
 8007b3c:	f022 0201 	bic.w	r2, r2, #1
 8007b40:	6002      	str	r2, [r0, #0]
 8007b42:	2201      	movs	r2, #1
 8007b44:	601a      	str	r2, [r3, #0]
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	2a00      	cmp	r2, #0
 8007b4a:	d1fc      	bne.n	8007b46 <ai_platform_network_process+0x26>
 8007b4c:	4ba0      	ldr	r3, [pc, #640]	; (8007dd0 <ai_platform_network_process+0x2b0>)
 8007b4e:	4aa1      	ldr	r2, [pc, #644]	; (8007dd4 <ai_platform_network_process+0x2b4>)
 8007b50:	601a      	str	r2, [r3, #0]
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	4ba0      	ldr	r3, [pc, #640]	; (8007dd8 <ai_platform_network_process+0x2b8>)
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d000      	beq.n	8007b5c <ai_platform_network_process+0x3c>
 8007b5a:	e7fe      	b.n	8007b5a <ai_platform_network_process+0x3a>
 8007b5c:	2c00      	cmp	r4, #0
 8007b5e:	d066      	beq.n	8007c2e <ai_platform_network_process+0x10e>
 8007b60:	f8b4 7048 	ldrh.w	r7, [r4, #72]	; 0x48
 8007b64:	b107      	cbz	r7, 8007b68 <ai_platform_network_process+0x48>
 8007b66:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 8007b68:	68e3      	ldr	r3, [r4, #12]
 8007b6a:	f003 0303 	and.w	r3, r3, #3
 8007b6e:	2600      	movs	r6, #0
 8007b70:	2b03      	cmp	r3, #3
 8007b72:	6166      	str	r6, [r4, #20]
 8007b74:	f040 80fe 	bne.w	8007d74 <ai_platform_network_process+0x254>
 8007b78:	2900      	cmp	r1, #0
 8007b7a:	d07f      	beq.n	8007c7c <ai_platform_network_process+0x15c>
 8007b7c:	2f00      	cmp	r7, #0
 8007b7e:	d07d      	beq.n	8007c7c <ai_platform_network_process+0x15c>
 8007b80:	883b      	ldrh	r3, [r7, #0]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d07a      	beq.n	8007c7c <ai_platform_network_process+0x15c>
 8007b86:	460d      	mov	r5, r1
 8007b88:	46a0      	mov	r8, r4
 8007b8a:	f835 9f04 	ldrh.w	r9, [r5, #4]!
 8007b8e:	429e      	cmp	r6, r3
 8007b90:	d27d      	bcs.n	8007c8e <ai_platform_network_process+0x16e>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d07a      	beq.n	8007c8e <ai_platform_network_process+0x16e>
 8007b98:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 8007b9c:	2c00      	cmp	r4, #0
 8007b9e:	d076      	beq.n	8007c8e <ai_platform_network_process+0x16e>
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	eb13 1a06 	adds.w	sl, r3, r6, lsl #4
 8007ba8:	d067      	beq.n	8007c7a <ai_platform_network_process+0x15a>
 8007baa:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8007bae:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 8007bb2:	69a0      	ldr	r0, [r4, #24]
 8007bb4:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8007bb8:	6841      	ldr	r1, [r0, #4]
 8007bba:	fb0b f30e 	mul.w	r3, fp, lr
 8007bbe:	fb0c f303 	mul.w	r3, ip, r3
 8007bc2:	4299      	cmp	r1, r3
 8007bc4:	d350      	bcc.n	8007c68 <ai_platform_network_process+0x148>
 8007bc6:	68e3      	ldr	r3, [r4, #12]
 8007bc8:	68da      	ldr	r2, [r3, #12]
 8007bca:	455a      	cmp	r2, fp
 8007bcc:	d14c      	bne.n	8007c68 <ai_platform_network_process+0x148>
 8007bce:	689a      	ldr	r2, [r3, #8]
 8007bd0:	4572      	cmp	r2, lr
 8007bd2:	d149      	bne.n	8007c68 <ai_platform_network_process+0x148>
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	459c      	cmp	ip, r3
 8007bd8:	d146      	bne.n	8007c68 <ai_platform_network_process+0x148>
 8007bda:	6800      	ldr	r0, [r0, #0]
 8007bdc:	f002 f9a6 	bl	8009f2c <ai_array_get_byte_size>
 8007be0:	68e2      	ldr	r2, [r4, #12]
 8007be2:	6963      	ldr	r3, [r4, #20]
 8007be4:	68d2      	ldr	r2, [r2, #12]
 8007be6:	68db      	ldr	r3, [r3, #12]
 8007be8:	fb03 f302 	mul.w	r3, r3, r2
 8007bec:	4298      	cmp	r0, r3
 8007bee:	d33b      	bcc.n	8007c68 <ai_platform_network_process+0x148>
 8007bf0:	69a3      	ldr	r3, [r4, #24]
 8007bf2:	6818      	ldr	r0, [r3, #0]
 8007bf4:	f002 f94e 	bl	8009e94 <ai_array_to_buffer_fmt>
 8007bf8:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8007bfc:	4043      	eors	r3, r0
 8007bfe:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8007c02:	d128      	bne.n	8007c56 <ai_platform_network_process+0x136>
 8007c04:	68eb      	ldr	r3, [r5, #12]
 8007c06:	b1f3      	cbz	r3, 8007c46 <ai_platform_network_process+0x126>
 8007c08:	f8b5 b000 	ldrh.w	fp, [r5]
 8007c0c:	f1bb 0f00 	cmp.w	fp, #0
 8007c10:	d012      	beq.n	8007c38 <ai_platform_network_process+0x118>
 8007c12:	4623      	mov	r3, r4
 8007c14:	f105 020c 	add.w	r2, r5, #12
 8007c18:	4629      	mov	r1, r5
 8007c1a:	4650      	mov	r0, sl
 8007c1c:	f7ff fe10 	bl	8007840 <_platform_network_state_setup.isra.1>
 8007c20:	45d9      	cmp	r9, fp
 8007c22:	883b      	ldrh	r3, [r7, #0]
 8007c24:	bf38      	it	cc
 8007c26:	46d9      	movcc	r9, fp
 8007c28:	3601      	adds	r6, #1
 8007c2a:	3518      	adds	r5, #24
 8007c2c:	e7af      	b.n	8007b8e <ai_platform_network_process+0x6e>
 8007c2e:	46a3      	mov	fp, r4
 8007c30:	4658      	mov	r0, fp
 8007c32:	b003      	add	sp, #12
 8007c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c38:	f108 0010 	add.w	r0, r8, #16
 8007c3c:	2221      	movs	r2, #33	; 0x21
 8007c3e:	2112      	movs	r1, #18
 8007c40:	f000 f980 	bl	8007f44 <core_set_error>
 8007c44:	e7f4      	b.n	8007c30 <ai_platform_network_process+0x110>
 8007c46:	f108 0010 	add.w	r0, r8, #16
 8007c4a:	2217      	movs	r2, #23
 8007c4c:	2112      	movs	r1, #18
 8007c4e:	469b      	mov	fp, r3
 8007c50:	f000 f978 	bl	8007f44 <core_set_error>
 8007c54:	e7ec      	b.n	8007c30 <ai_platform_network_process+0x110>
 8007c56:	f108 0010 	add.w	r0, r8, #16
 8007c5a:	2219      	movs	r2, #25
 8007c5c:	2112      	movs	r1, #18
 8007c5e:	f000 f971 	bl	8007f44 <core_set_error>
 8007c62:	f04f 0b00 	mov.w	fp, #0
 8007c66:	e7e3      	b.n	8007c30 <ai_platform_network_process+0x110>
 8007c68:	f108 0010 	add.w	r0, r8, #16
 8007c6c:	2218      	movs	r2, #24
 8007c6e:	2112      	movs	r1, #18
 8007c70:	f000 f968 	bl	8007f44 <core_set_error>
 8007c74:	f04f 0b00 	mov.w	fp, #0
 8007c78:	e7da      	b.n	8007c30 <ai_platform_network_process+0x110>
 8007c7a:	4644      	mov	r4, r8
 8007c7c:	f104 0010 	add.w	r0, r4, #16
 8007c80:	2217      	movs	r2, #23
 8007c82:	2112      	movs	r1, #18
 8007c84:	f000 f95e 	bl	8007f44 <core_set_error>
 8007c88:	f04f 0b00 	mov.w	fp, #0
 8007c8c:	e7d0      	b.n	8007c30 <ai_platform_network_process+0x110>
 8007c8e:	9a01      	ldr	r2, [sp, #4]
 8007c90:	f8b8 3048 	ldrh.w	r3, [r8, #72]	; 0x48
 8007c94:	4644      	mov	r4, r8
 8007c96:	2a00      	cmp	r2, #0
 8007c98:	f000 80a4 	beq.w	8007de4 <ai_platform_network_process+0x2c4>
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	f240 8140 	bls.w	8007f22 <ai_platform_network_process+0x402>
 8007ca2:	f8d8 804c 	ldr.w	r8, [r8, #76]	; 0x4c
 8007ca6:	f118 0f0c 	cmn.w	r8, #12
 8007caa:	f000 813a 	beq.w	8007f22 <ai_platform_network_process+0x402>
 8007cae:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	f000 8135 	beq.w	8007f22 <ai_platform_network_process+0x402>
 8007cb8:	3204      	adds	r2, #4
 8007cba:	4615      	mov	r5, r2
 8007cbc:	2700      	movs	r7, #0
 8007cbe:	429f      	cmp	r7, r3
 8007cc0:	f080 808c 	bcs.w	8007ddc <ai_platform_network_process+0x2bc>
 8007cc4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	f000 8087 	beq.w	8007ddc <ai_platform_network_process+0x2bc>
 8007cce:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 8007cd2:	2e00      	cmp	r6, #0
 8007cd4:	f000 8082 	beq.w	8007ddc <ai_platform_network_process+0x2bc>
 8007cd8:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	eb13 1a07 	adds.w	sl, r3, r7, lsl #4
 8007ce2:	d067      	beq.n	8007db4 <ai_platform_network_process+0x294>
 8007ce4:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8007ce8:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 8007cec:	69b0      	ldr	r0, [r6, #24]
 8007cee:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8007cf2:	6841      	ldr	r1, [r0, #4]
 8007cf4:	fb0b f30e 	mul.w	r3, fp, lr
 8007cf8:	fb0c f303 	mul.w	r3, ip, r3
 8007cfc:	4299      	cmp	r1, r3
 8007cfe:	f0c0 8110 	bcc.w	8007f22 <ai_platform_network_process+0x402>
 8007d02:	68f3      	ldr	r3, [r6, #12]
 8007d04:	68da      	ldr	r2, [r3, #12]
 8007d06:	455a      	cmp	r2, fp
 8007d08:	f040 810b 	bne.w	8007f22 <ai_platform_network_process+0x402>
 8007d0c:	689a      	ldr	r2, [r3, #8]
 8007d0e:	4572      	cmp	r2, lr
 8007d10:	f040 8107 	bne.w	8007f22 <ai_platform_network_process+0x402>
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	459c      	cmp	ip, r3
 8007d18:	f040 8103 	bne.w	8007f22 <ai_platform_network_process+0x402>
 8007d1c:	6800      	ldr	r0, [r0, #0]
 8007d1e:	f002 f905 	bl	8009f2c <ai_array_get_byte_size>
 8007d22:	68f2      	ldr	r2, [r6, #12]
 8007d24:	6973      	ldr	r3, [r6, #20]
 8007d26:	68d2      	ldr	r2, [r2, #12]
 8007d28:	68db      	ldr	r3, [r3, #12]
 8007d2a:	fb03 f302 	mul.w	r3, r3, r2
 8007d2e:	4298      	cmp	r0, r3
 8007d30:	f0c0 80f7 	bcc.w	8007f22 <ai_platform_network_process+0x402>
 8007d34:	69b3      	ldr	r3, [r6, #24]
 8007d36:	6818      	ldr	r0, [r3, #0]
 8007d38:	f002 f8ac 	bl	8009e94 <ai_array_to_buffer_fmt>
 8007d3c:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8007d40:	4043      	eors	r3, r0
 8007d42:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8007d46:	d12c      	bne.n	8007da2 <ai_platform_network_process+0x282>
 8007d48:	68eb      	ldr	r3, [r5, #12]
 8007d4a:	b313      	cbz	r3, 8007d92 <ai_platform_network_process+0x272>
 8007d4c:	f8b5 b000 	ldrh.w	fp, [r5]
 8007d50:	f1bb 0f00 	cmp.w	fp, #0
 8007d54:	d016      	beq.n	8007d84 <ai_platform_network_process+0x264>
 8007d56:	4633      	mov	r3, r6
 8007d58:	f105 020c 	add.w	r2, r5, #12
 8007d5c:	4629      	mov	r1, r5
 8007d5e:	4650      	mov	r0, sl
 8007d60:	f7ff fd6e 	bl	8007840 <_platform_network_state_setup.isra.1>
 8007d64:	45d9      	cmp	r9, fp
 8007d66:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8007d6a:	bf38      	it	cc
 8007d6c:	46d9      	movcc	r9, fp
 8007d6e:	3701      	adds	r7, #1
 8007d70:	3518      	adds	r5, #24
 8007d72:	e7a4      	b.n	8007cbe <ai_platform_network_process+0x19e>
 8007d74:	f104 0010 	add.w	r0, r4, #16
 8007d78:	2230      	movs	r2, #48	; 0x30
 8007d7a:	2111      	movs	r1, #17
 8007d7c:	f000 f8e2 	bl	8007f44 <core_set_error>
 8007d80:	46b3      	mov	fp, r6
 8007d82:	e755      	b.n	8007c30 <ai_platform_network_process+0x110>
 8007d84:	f104 0010 	add.w	r0, r4, #16
 8007d88:	2221      	movs	r2, #33	; 0x21
 8007d8a:	2113      	movs	r1, #19
 8007d8c:	f000 f8da 	bl	8007f44 <core_set_error>
 8007d90:	e74e      	b.n	8007c30 <ai_platform_network_process+0x110>
 8007d92:	f104 0010 	add.w	r0, r4, #16
 8007d96:	2217      	movs	r2, #23
 8007d98:	2113      	movs	r1, #19
 8007d9a:	469b      	mov	fp, r3
 8007d9c:	f000 f8d2 	bl	8007f44 <core_set_error>
 8007da0:	e746      	b.n	8007c30 <ai_platform_network_process+0x110>
 8007da2:	f104 0010 	add.w	r0, r4, #16
 8007da6:	2219      	movs	r2, #25
 8007da8:	2113      	movs	r1, #19
 8007daa:	f000 f8cb 	bl	8007f44 <core_set_error>
 8007dae:	f04f 0b00 	mov.w	fp, #0
 8007db2:	e73d      	b.n	8007c30 <ai_platform_network_process+0x110>
 8007db4:	f104 0010 	add.w	r0, r4, #16
 8007db8:	2217      	movs	r2, #23
 8007dba:	2113      	movs	r1, #19
 8007dbc:	f000 f8c2 	bl	8007f44 <core_set_error>
 8007dc0:	46d3      	mov	fp, sl
 8007dc2:	e735      	b.n	8007c30 <ai_platform_network_process+0x110>
 8007dc4:	a1c00100 	.word	0xa1c00100
 8007dc8:	e0002000 	.word	0xe0002000
 8007dcc:	40023008 	.word	0x40023008
 8007dd0:	40023000 	.word	0x40023000
 8007dd4:	f407a5c2 	.word	0xf407a5c2
 8007dd8:	b5e8b5cd 	.word	0xb5e8b5cd
 8007ddc:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8007de0:	f8a4 9014 	strh.w	r9, [r4, #20]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f000 8099 	beq.w	8007f1c <ai_platform_network_process+0x3fc>
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8007dee:	f240 8093 	bls.w	8007f18 <ai_platform_network_process+0x3f8>
 8007df2:	f105 070c 	add.w	r7, r5, #12
 8007df6:	8ae0      	ldrh	r0, [r4, #22]
 8007df8:	8aa3      	ldrh	r3, [r4, #20]
 8007dfa:	4283      	cmp	r3, r0
 8007dfc:	d977      	bls.n	8007eee <ai_platform_network_process+0x3ce>
 8007dfe:	46a3      	mov	fp, r4
 8007e00:	2d00      	cmp	r5, #0
 8007e02:	d032      	beq.n	8007e6a <ai_platform_network_process+0x34a>
 8007e04:	882b      	ldrh	r3, [r5, #0]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d02f      	beq.n	8007e6a <ai_platform_network_process+0x34a>
 8007e0a:	686b      	ldr	r3, [r5, #4]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d02c      	beq.n	8007e6a <ai_platform_network_process+0x34a>
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f04f 0800 	mov.w	r8, #0
 8007e16:	b343      	cbz	r3, 8007e6a <ai_platform_network_process+0x34a>
 8007e18:	68a9      	ldr	r1, [r5, #8]
 8007e1a:	699a      	ldr	r2, [r3, #24]
 8007e1c:	f8d1 a000 	ldr.w	sl, [r1]
 8007e20:	6814      	ldr	r4, [r2, #0]
 8007e22:	6890      	ldr	r0, [r2, #8]
 8007e24:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8007e28:	eb0a 0609 	add.w	r6, sl, r9
 8007e2c:	00a4      	lsls	r4, r4, #2
 8007e2e:	6871      	ldr	r1, [r6, #4]
 8007e30:	d45f      	bmi.n	8007ef2 <ai_platform_network_process+0x3d2>
 8007e32:	68d4      	ldr	r4, [r2, #12]
 8007e34:	1b00      	subs	r0, r0, r4
 8007e36:	4401      	add	r1, r0
 8007e38:	6091      	str	r1, [r2, #8]
 8007e3a:	699b      	ldr	r3, [r3, #24]
 8007e3c:	6872      	ldr	r2, [r6, #4]
 8007e3e:	60da      	str	r2, [r3, #12]
 8007e40:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8007e44:	f85a 2009 	ldr.w	r2, [sl, r9]
 8007e48:	440b      	add	r3, r1
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	bf24      	itt	cs
 8007e4e:	68f3      	ldrcs	r3, [r6, #12]
 8007e50:	1ad3      	subcs	r3, r2, r3
 8007e52:	6073      	str	r3, [r6, #4]
 8007e54:	882b      	ldrh	r3, [r5, #0]
 8007e56:	f108 0801 	add.w	r8, r8, #1
 8007e5a:	4598      	cmp	r8, r3
 8007e5c:	d205      	bcs.n	8007e6a <ai_platform_network_process+0x34a>
 8007e5e:	686b      	ldr	r3, [r5, #4]
 8007e60:	b11b      	cbz	r3, 8007e6a <ai_platform_network_process+0x34a>
 8007e62:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d1d6      	bne.n	8007e18 <ai_platform_network_process+0x2f8>
 8007e6a:	4658      	mov	r0, fp
 8007e6c:	f001 ffd8 	bl	8009e20 <ai_layers_forward_all>
 8007e70:	2f00      	cmp	r7, #0
 8007e72:	d032      	beq.n	8007eda <ai_platform_network_process+0x3ba>
 8007e74:	883b      	ldrh	r3, [r7, #0]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d02f      	beq.n	8007eda <ai_platform_network_process+0x3ba>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	b36b      	cbz	r3, 8007eda <ai_platform_network_process+0x3ba>
 8007e7e:	6818      	ldr	r0, [r3, #0]
 8007e80:	b358      	cbz	r0, 8007eda <ai_platform_network_process+0x3ba>
 8007e82:	f04f 0800 	mov.w	r8, #0
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	6981      	ldr	r1, [r0, #24]
 8007e8a:	f8d3 a000 	ldr.w	sl, [r3]
 8007e8e:	680c      	ldr	r4, [r1, #0]
 8007e90:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8007e94:	eb0a 0609 	add.w	r6, sl, r9
 8007e98:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 8007e9c:	00a4      	lsls	r4, r4, #2
 8007e9e:	eb0c 0302 	add.w	r3, ip, r2
 8007ea2:	d42a      	bmi.n	8007efa <ai_platform_network_process+0x3da>
 8007ea4:	f85a 2009 	ldr.w	r2, [sl, r9]
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	bf24      	itt	cs
 8007eac:	68f3      	ldrcs	r3, [r6, #12]
 8007eae:	1ad3      	subcs	r3, r2, r3
 8007eb0:	6073      	str	r3, [r6, #4]
 8007eb2:	6981      	ldr	r1, [r0, #24]
 8007eb4:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 8007eb8:	1b12      	subs	r2, r2, r4
 8007eba:	4413      	add	r3, r2
 8007ebc:	608b      	str	r3, [r1, #8]
 8007ebe:	6983      	ldr	r3, [r0, #24]
 8007ec0:	6872      	ldr	r2, [r6, #4]
 8007ec2:	60da      	str	r2, [r3, #12]
 8007ec4:	883b      	ldrh	r3, [r7, #0]
 8007ec6:	f108 0801 	add.w	r8, r8, #1
 8007eca:	4598      	cmp	r8, r3
 8007ecc:	d205      	bcs.n	8007eda <ai_platform_network_process+0x3ba>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	b11b      	cbz	r3, 8007eda <ai_platform_network_process+0x3ba>
 8007ed2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007ed6:	2800      	cmp	r0, #0
 8007ed8:	d1d5      	bne.n	8007e86 <ai_platform_network_process+0x366>
 8007eda:	f8bb 0016 	ldrh.w	r0, [fp, #22]
 8007ede:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8007ee2:	3001      	adds	r0, #1
 8007ee4:	b280      	uxth	r0, r0
 8007ee6:	4283      	cmp	r3, r0
 8007ee8:	f8ab 0016 	strh.w	r0, [fp, #22]
 8007eec:	d888      	bhi.n	8007e00 <ai_platform_network_process+0x2e0>
 8007eee:	4683      	mov	fp, r0
 8007ef0:	e69e      	b.n	8007c30 <ai_platform_network_process+0x110>
 8007ef2:	68b2      	ldr	r2, [r6, #8]
 8007ef4:	f002 f86e 	bl	8009fd4 <memcpy>
 8007ef8:	e7a2      	b.n	8007e40 <ai_platform_network_process+0x320>
 8007efa:	6889      	ldr	r1, [r1, #8]
 8007efc:	4660      	mov	r0, ip
 8007efe:	f002 f869 	bl	8009fd4 <memcpy>
 8007f02:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8007f06:	f85a 2009 	ldr.w	r2, [sl, r9]
 8007f0a:	440b      	add	r3, r1
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	bf24      	itt	cs
 8007f10:	68f3      	ldrcs	r3, [r6, #12]
 8007f12:	1ad3      	subcs	r3, r2, r3
 8007f14:	6073      	str	r3, [r6, #4]
 8007f16:	e7d5      	b.n	8007ec4 <ai_platform_network_process+0x3a4>
 8007f18:	2700      	movs	r7, #0
 8007f1a:	e76c      	b.n	8007df6 <ai_platform_network_process+0x2d6>
 8007f1c:	461d      	mov	r5, r3
 8007f1e:	461f      	mov	r7, r3
 8007f20:	e769      	b.n	8007df6 <ai_platform_network_process+0x2d6>
 8007f22:	f104 0010 	add.w	r0, r4, #16
 8007f26:	2218      	movs	r2, #24
 8007f28:	2113      	movs	r1, #19
 8007f2a:	f000 f80b 	bl	8007f44 <core_set_error>
 8007f2e:	f04f 0b00 	mov.w	fp, #0
 8007f32:	e67d      	b.n	8007c30 <ai_platform_network_process+0x110>

08007f34 <core_init>:
 8007f34:	2001      	movs	r0, #1
 8007f36:	4770      	bx	lr

08007f38 <core_get_error>:
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	6800      	ldr	r0, [r0, #0]
 8007f3e:	601a      	str	r2, [r3, #0]
 8007f40:	4770      	bx	lr
 8007f42:	bf00      	nop

08007f44 <core_set_error>:
 8007f44:	7803      	ldrb	r3, [r0, #0]
 8007f46:	b933      	cbnz	r3, 8007f56 <core_set_error+0x12>
 8007f48:	7001      	strb	r1, [r0, #0]
 8007f4a:	6803      	ldr	r3, [r0, #0]
 8007f4c:	f362 231f 	bfi	r3, r2, #8, #24
 8007f50:	6003      	str	r3, [r0, #0]
 8007f52:	2001      	movs	r0, #1
 8007f54:	4770      	bx	lr
 8007f56:	2000      	movs	r0, #0
 8007f58:	4770      	bx	lr
 8007f5a:	bf00      	nop

08007f5c <func_dummy>:
 8007f5c:	4770      	bx	lr
 8007f5e:	bf00      	nop

08007f60 <ai_dict8_dot_array_f32>:
 8007f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f64:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007f68:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 8007f6c:	f000 80c0 	beq.w	80080f0 <ai_dict8_dot_array_f32+0x190>
 8007f70:	f101 0408 	add.w	r4, r1, #8
 8007f74:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8007f78:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80080f8 <ai_dict8_dot_array_f32+0x198>
 8007f7c:	eb04 0e09 	add.w	lr, r4, r9
 8007f80:	f103 0520 	add.w	r5, r3, #32
 8007f84:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 8007f88:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 8007f8c:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 8007f90:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 8007f94:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 8007f98:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 8007f9c:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 8007fa0:	ed55 3a04 	vldr	s7, [r5, #-16]
 8007fa4:	ed55 4a03 	vldr	s9, [r5, #-12]
 8007fa8:	ed55 5a02 	vldr	s11, [r5, #-8]
 8007fac:	ed55 6a01 	vldr	s13, [r5, #-4]
 8007fb0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007fb4:	edd6 7a00 	vldr	s15, [r6]
 8007fb8:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 8007fbc:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8007fc0:	ee67 7a83 	vmul.f32	s15, s15, s6
 8007fc4:	ed9a 3a00 	vldr	s6, [sl]
 8007fc8:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 8007fcc:	eee3 7a05 	vfma.f32	s15, s6, s10
 8007fd0:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8007fd4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007fd8:	ed97 3a00 	vldr	s6, [r7]
 8007fdc:	ed96 5a00 	vldr	s10, [r6]
 8007fe0:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 8007fe4:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 8007fe8:	eee3 7a04 	vfma.f32	s15, s6, s8
 8007fec:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8007ff0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007ff4:	ed9a 3a00 	vldr	s6, [sl]
 8007ff8:	ed96 4a00 	vldr	s8, [r6]
 8007ffc:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 8008000:	eee5 7a06 	vfma.f32	s15, s10, s12
 8008004:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8008008:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800800c:	ed97 5a00 	vldr	s10, [r7]
 8008010:	ed96 6a00 	vldr	s12, [r6]
 8008014:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008018:	3408      	adds	r4, #8
 800801a:	45a6      	cmp	lr, r4
 800801c:	f105 0520 	add.w	r5, r5, #32
 8008020:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008024:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008028:	eee6 7a26 	vfma.f32	s15, s12, s13
 800802c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008030:	d1a8      	bne.n	8007f84 <ai_dict8_dot_array_f32+0x24>
 8008032:	4449      	add	r1, r9
 8008034:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8008038:	f01c 0c07 	ands.w	ip, ip, #7
 800803c:	d050      	beq.n	80080e0 <ai_dict8_dot_array_f32+0x180>
 800803e:	780c      	ldrb	r4, [r1, #0]
 8008040:	edd3 6a00 	vldr	s13, [r3]
 8008044:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8008048:	edd4 7a00 	vldr	s15, [r4]
 800804c:	f1bc 0f01 	cmp.w	ip, #1
 8008050:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008054:	d044      	beq.n	80080e0 <ai_dict8_dot_array_f32+0x180>
 8008056:	784c      	ldrb	r4, [r1, #1]
 8008058:	edd3 6a01 	vldr	s13, [r3, #4]
 800805c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8008060:	edd4 7a00 	vldr	s15, [r4]
 8008064:	f1bc 0f02 	cmp.w	ip, #2
 8008068:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800806c:	d038      	beq.n	80080e0 <ai_dict8_dot_array_f32+0x180>
 800806e:	788c      	ldrb	r4, [r1, #2]
 8008070:	edd3 6a02 	vldr	s13, [r3, #8]
 8008074:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8008078:	edd4 7a00 	vldr	s15, [r4]
 800807c:	f1bc 0f03 	cmp.w	ip, #3
 8008080:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008084:	d02c      	beq.n	80080e0 <ai_dict8_dot_array_f32+0x180>
 8008086:	78cc      	ldrb	r4, [r1, #3]
 8008088:	edd3 6a03 	vldr	s13, [r3, #12]
 800808c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8008090:	edd4 7a00 	vldr	s15, [r4]
 8008094:	f1bc 0f04 	cmp.w	ip, #4
 8008098:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800809c:	d020      	beq.n	80080e0 <ai_dict8_dot_array_f32+0x180>
 800809e:	790c      	ldrb	r4, [r1, #4]
 80080a0:	edd3 6a04 	vldr	s13, [r3, #16]
 80080a4:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80080a8:	edd4 7a00 	vldr	s15, [r4]
 80080ac:	f1bc 0f05 	cmp.w	ip, #5
 80080b0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80080b4:	d014      	beq.n	80080e0 <ai_dict8_dot_array_f32+0x180>
 80080b6:	794c      	ldrb	r4, [r1, #5]
 80080b8:	edd3 6a05 	vldr	s13, [r3, #20]
 80080bc:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80080c0:	edd4 7a00 	vldr	s15, [r4]
 80080c4:	f1bc 0f06 	cmp.w	ip, #6
 80080c8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80080cc:	d008      	beq.n	80080e0 <ai_dict8_dot_array_f32+0x180>
 80080ce:	7989      	ldrb	r1, [r1, #6]
 80080d0:	edd3 7a06 	vldr	s15, [r3, #24]
 80080d4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80080d8:	edd2 6a00 	vldr	s13, [r2]
 80080dc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80080e0:	edd0 7a00 	vldr	s15, [r0]
 80080e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080e8:	ed80 7a00 	vstr	s14, [r0]
 80080ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080f0:	ed9f 7a01 	vldr	s14, [pc, #4]	; 80080f8 <ai_dict8_dot_array_f32+0x198>
 80080f4:	e7a0      	b.n	8008038 <ai_dict8_dot_array_f32+0xd8>
 80080f6:	bf00      	nop
 80080f8:	00000000 	.word	0x00000000

080080fc <ai_dict4_dot_array_f32>:
 80080fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008100:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008102:	f027 0c01 	bic.w	ip, r7, #1
 8008106:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 800810a:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800810e:	f000 80ae 	beq.w	800826e <ai_dict4_dot_array_f32+0x172>
 8008112:	1d0d      	adds	r5, r1, #4
 8008114:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8008118:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8008274 <ai_dict4_dot_array_f32+0x178>
 800811c:	eb05 0e09 	add.w	lr, r5, r9
 8008120:	f103 0420 	add.w	r4, r3, #32
 8008124:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 8008128:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 800812c:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 8008130:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 8008134:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 8008138:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 800813c:	ed14 5a04 	vldr	s10, [r4, #-16]
 8008140:	ed54 5a03 	vldr	s11, [r4, #-12]
 8008144:	ed14 6a02 	vldr	s12, [r4, #-8]
 8008148:	ed54 6a01 	vldr	s13, [r4, #-4]
 800814c:	f006 0a0f 	and.w	sl, r6, #15
 8008150:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8008154:	edda 7a00 	vldr	s15, [sl]
 8008158:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 800815c:	0936      	lsrs	r6, r6, #4
 800815e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008162:	ee67 7a83 	vmul.f32	s15, s15, s6
 8008166:	ed96 3a00 	vldr	s6, [r6]
 800816a:	ea4f 161b 	mov.w	r6, fp, lsr #4
 800816e:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008172:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008176:	f00b 0b0f 	and.w	fp, fp, #15
 800817a:	edd6 3a00 	vldr	s7, [r6]
 800817e:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 8008182:	eee3 7a84 	vfma.f32	s15, s7, s8
 8008186:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 800818a:	3504      	adds	r5, #4
 800818c:	ed9b 4a00 	vldr	s8, [fp]
 8008190:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 8008194:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008198:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 800819c:	f00a 0a0f 	and.w	sl, sl, #15
 80081a0:	eddb 4a00 	vldr	s9, [fp]
 80081a4:	eee4 7a85 	vfma.f32	s15, s9, s10
 80081a8:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80081ac:	45ae      	cmp	lr, r5
 80081ae:	ed9a 5a00 	vldr	s10, [sl]
 80081b2:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 80081b6:	eee5 7a25 	vfma.f32	s15, s10, s11
 80081ba:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80081be:	f006 060f 	and.w	r6, r6, #15
 80081c2:	edda 5a00 	vldr	s11, [sl]
 80081c6:	eee5 7a86 	vfma.f32	s15, s11, s12
 80081ca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80081ce:	f104 0420 	add.w	r4, r4, #32
 80081d2:	ed96 6a00 	vldr	s12, [r6]
 80081d6:	eee6 7a26 	vfma.f32	s15, s12, s13
 80081da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80081de:	d1a1      	bne.n	8008124 <ai_dict4_dot_array_f32+0x28>
 80081e0:	4449      	add	r1, r9
 80081e2:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 80081e6:	459c      	cmp	ip, r3
 80081e8:	d92d      	bls.n	8008246 <ai_dict4_dot_array_f32+0x14a>
 80081ea:	f10c 0c07 	add.w	ip, ip, #7
 80081ee:	f103 0508 	add.w	r5, r3, #8
 80081f2:	ebac 0c05 	sub.w	ip, ip, r5
 80081f6:	f02c 0407 	bic.w	r4, ip, #7
 80081fa:	f103 0810 	add.w	r8, r3, #16
 80081fe:	44a0      	add	r8, r4
 8008200:	f101 3eff 	add.w	lr, r1, #4294967295
 8008204:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8008208:	ed15 6a01 	vldr	s12, [r5, #-4]
 800820c:	ed55 6a02 	vldr	s13, [r5, #-8]
 8008210:	f004 060f 	and.w	r6, r4, #15
 8008214:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008218:	0924      	lsrs	r4, r4, #4
 800821a:	edd6 7a00 	vldr	s15, [r6]
 800821e:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8008222:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008226:	ed94 6a00 	vldr	s12, [r4]
 800822a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800822e:	3508      	adds	r5, #8
 8008230:	45a8      	cmp	r8, r5
 8008232:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008236:	d1e5      	bne.n	8008204 <ai_dict4_dot_array_f32+0x108>
 8008238:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800823c:	f10c 0c01 	add.w	ip, ip, #1
 8008240:	4461      	add	r1, ip
 8008242:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8008246:	07fc      	lsls	r4, r7, #31
 8008248:	d509      	bpl.n	800825e <ai_dict4_dot_array_f32+0x162>
 800824a:	7809      	ldrb	r1, [r1, #0]
 800824c:	edd3 7a00 	vldr	s15, [r3]
 8008250:	090b      	lsrs	r3, r1, #4
 8008252:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8008256:	edd2 6a00 	vldr	s13, [r2]
 800825a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800825e:	edd0 7a00 	vldr	s15, [r0]
 8008262:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008266:	ed80 7a00 	vstr	s14, [r0]
 800826a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800826e:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8008274 <ai_dict4_dot_array_f32+0x178>
 8008272:	e7b8      	b.n	80081e6 <ai_dict4_dot_array_f32+0xea>
 8008274:	00000000 	.word	0x00000000

08008278 <ai_dict_decompress_f32>:
 8008278:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800827c:	9f08      	ldr	r7, [sp, #32]
 800827e:	2b04      	cmp	r3, #4
 8008280:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8008284:	d00e      	beq.n	80082a4 <ai_dict_decompress_f32+0x2c>
 8008286:	2b08      	cmp	r3, #8
 8008288:	d10a      	bne.n	80082a0 <ai_dict_decompress_f32+0x28>
 800828a:	42b8      	cmp	r0, r7
 800828c:	d208      	bcs.n	80082a0 <ai_dict_decompress_f32+0x28>
 800828e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008292:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f840 3b04 	str.w	r3, [r0], #4
 800829c:	4287      	cmp	r7, r0
 800829e:	d8f6      	bhi.n	800828e <ai_dict_decompress_f32+0x16>
 80082a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082a4:	9b07      	ldr	r3, [sp, #28]
 80082a6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80082aa:	ea4f 09cc 	mov.w	r9, ip, lsl #3
 80082ae:	f10c 38ff 	add.w	r8, ip, #4294967295
 80082b2:	f003 0e01 	and.w	lr, r3, #1
 80082b6:	42b8      	cmp	r0, r7
 80082b8:	d2f2      	bcs.n	80082a0 <ai_dict_decompress_f32+0x28>
 80082ba:	f1bc 0f00 	cmp.w	ip, #0
 80082be:	d01a      	beq.n	80082f6 <ai_dict_decompress_f32+0x7e>
 80082c0:	f100 0508 	add.w	r5, r0, #8
 80082c4:	1e4c      	subs	r4, r1, #1
 80082c6:	eb01 0608 	add.w	r6, r1, r8
 80082ca:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80082ce:	091b      	lsrs	r3, r3, #4
 80082d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80082d4:	42a6      	cmp	r6, r4
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f845 3c08 	str.w	r3, [r5, #-8]
 80082dc:	7823      	ldrb	r3, [r4, #0]
 80082de:	f003 030f 	and.w	r3, r3, #15
 80082e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80082e6:	f105 0508 	add.w	r5, r5, #8
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f845 3c0c 	str.w	r3, [r5, #-12]
 80082f0:	d1eb      	bne.n	80082ca <ai_dict_decompress_f32+0x52>
 80082f2:	4461      	add	r1, ip
 80082f4:	4448      	add	r0, r9
 80082f6:	f1be 0f00 	cmp.w	lr, #0
 80082fa:	d103      	bne.n	8008304 <ai_dict_decompress_f32+0x8c>
 80082fc:	4287      	cmp	r7, r0
 80082fe:	d8dc      	bhi.n	80082ba <ai_dict_decompress_f32+0x42>
 8008300:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008304:	780b      	ldrb	r3, [r1, #0]
 8008306:	091b      	lsrs	r3, r3, #4
 8008308:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800830c:	3101      	adds	r1, #1
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	6003      	str	r3, [r0, #0]
 8008312:	3004      	adds	r0, #4
 8008314:	e7cf      	b.n	80082b6 <ai_dict_decompress_f32+0x3e>
 8008316:	bf00      	nop

08008318 <forward_conv2d_nl_pool>:
 8008318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800831c:	ed2d 8b10 	vpush	{d8-d15}
 8008320:	b0e1      	sub	sp, #388	; 0x184
 8008322:	6943      	ldr	r3, [r0, #20]
 8008324:	af0a      	add	r7, sp, #40	; 0x28
 8008326:	881a      	ldrh	r2, [r3, #0]
 8008328:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 800832c:	2a00      	cmp	r2, #0
 800832e:	f001 8106 	beq.w	800953e <forward_conv2d_nl_pool+0x1226>
 8008332:	685c      	ldr	r4, [r3, #4]
 8008334:	6862      	ldr	r2, [r4, #4]
 8008336:	2a00      	cmp	r2, #0
 8008338:	f001 80fe 	beq.w	8009538 <forward_conv2d_nl_pool+0x1220>
 800833c:	f8d2 c000 	ldr.w	ip, [r2]
 8008340:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8008344:	2a01      	cmp	r2, #1
 8008346:	f241 80f4 	bls.w	8009532 <forward_conv2d_nl_pool+0x121a>
 800834a:	6922      	ldr	r2, [r4, #16]
 800834c:	2a00      	cmp	r2, #0
 800834e:	f001 80eb 	beq.w	8009528 <forward_conv2d_nl_pool+0x1210>
 8008352:	f8d2 9000 	ldr.w	r9, [r2]
 8008356:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800835a:	2a02      	cmp	r2, #2
 800835c:	f001 80e9 	beq.w	8009532 <forward_conv2d_nl_pool+0x121a>
 8008360:	69e6      	ldr	r6, [r4, #28]
 8008362:	2e00      	cmp	r6, #0
 8008364:	f001 80d9 	beq.w	800951a <forward_conv2d_nl_pool+0x1202>
 8008368:	f114 0218 	adds.w	r2, r4, #24
 800836c:	6835      	ldr	r5, [r6, #0]
 800836e:	d004      	beq.n	800837a <forward_conv2d_nl_pool+0x62>
 8008370:	8b22      	ldrh	r2, [r4, #24]
 8008372:	2a01      	cmp	r2, #1
 8008374:	f241 80e6 	bls.w	8009544 <forward_conv2d_nl_pool+0x122c>
 8008378:	6872      	ldr	r2, [r6, #4]
 800837a:	68b4      	ldr	r4, [r6, #8]
 800837c:	f8dc b018 	ldr.w	fp, [ip, #24]
 8008380:	f8dc 800c 	ldr.w	r8, [ip, #12]
 8008384:	f8db 1008 	ldr.w	r1, [fp, #8]
 8008388:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800838c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008390:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 8008394:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
 8008398:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800839c:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 80083a0:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80083a4:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 80083a8:	f8de 1004 	ldr.w	r1, [lr, #4]
 80083ac:	6b86      	ldr	r6, [r0, #56]	; 0x38
 80083ae:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 80083b2:	f8de 100c 	ldr.w	r1, [lr, #12]
 80083b6:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 80083ba:	f8de 1008 	ldr.w	r1, [lr, #8]
 80083be:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 80083c2:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 80083c6:	6831      	ldr	r1, [r6, #0]
 80083c8:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
 80083cc:	6871      	ldr	r1, [r6, #4]
 80083ce:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 80083d2:	f8da 1004 	ldr.w	r1, [sl, #4]
 80083d6:	f8c7 1154 	str.w	r1, [r7, #340]	; 0x154
 80083da:	f8da 1008 	ldr.w	r1, [sl, #8]
 80083de:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 80083e2:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80083e4:	f8d5 c018 	ldr.w	ip, [r5, #24]
 80083e8:	6809      	ldr	r1, [r1, #0]
 80083ea:	68b6      	ldr	r6, [r6, #8]
 80083ec:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 80083f0:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80083f2:	6849      	ldr	r1, [r1, #4]
 80083f4:	6479      	str	r1, [r7, #68]	; 0x44
 80083f6:	f8dc 1008 	ldr.w	r1, [ip, #8]
 80083fa:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
 80083fe:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8008400:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8008404:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8008406:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 800840a:	6981      	ldr	r1, [r0, #24]
 800840c:	f8c7 1124 	str.w	r1, [r7, #292]	; 0x124
 8008410:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8008412:	64f9      	str	r1, [r7, #76]	; 0x4c
 8008414:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8008416:	64b9      	str	r1, [r7, #72]	; 0x48
 8008418:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800841a:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 800841e:	e9d0 ab0b 	ldrd	sl, fp, [r0, #44]	; 0x2c
 8008422:	2a00      	cmp	r2, #0
 8008424:	f001 806c 	beq.w	8009500 <forward_conv2d_nl_pool+0x11e8>
 8008428:	6992      	ldr	r2, [r2, #24]
 800842a:	6892      	ldr	r2, [r2, #8]
 800842c:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8008430:	4680      	mov	r8, r0
 8008432:	69c2      	ldr	r2, [r0, #28]
 8008434:	2c00      	cmp	r4, #0
 8008436:	f001 8058 	beq.w	80094ea <forward_conv2d_nl_pool+0x11d2>
 800843a:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 800843e:	6892      	ldr	r2, [r2, #8]
 8008440:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008444:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800844e:	f001 fd6d 	bl	8009f2c <ai_array_get_byte_size>
 8008452:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8008456:	f8d5 c018 	ldr.w	ip, [r5, #24]
 800845a:	881a      	ldrh	r2, [r3, #0]
 800845c:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
 8008460:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8008464:	f8b7 0144 	ldrh.w	r0, [r7, #324]	; 0x144
 8008468:	f8d8 1054 	ldr.w	r1, [r8, #84]	; 0x54
 800846c:	6439      	str	r1, [r7, #64]	; 0x40
 800846e:	fa10 f586 	uxtah	r5, r0, r6
 8008472:	f8dc 1000 	ldr.w	r1, [ip]
 8008476:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
 800847a:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800847e:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8008482:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008486:	f3c1 16c6 	ubfx	r6, r1, #7, #7
 800848a:	1e44      	subs	r4, r0, #1
 800848c:	f3c1 5041 	ubfx	r0, r1, #21, #2
 8008490:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008494:	fa1f f28b 	uxth.w	r2, fp
 8008498:	eb05 0e01 	add.w	lr, r5, r1
 800849c:	f8d7 5120 	ldr.w	r5, [r7, #288]	; 0x120
 80084a0:	f8dc 1000 	ldr.w	r1, [ip]
 80084a4:	3a01      	subs	r2, #1
 80084a6:	fb04 5402 	mla	r4, r4, r2, r5
 80084aa:	fa1f f28a 	uxth.w	r2, sl
 80084ae:	f8c7 408c 	str.w	r4, [r7, #140]	; 0x8c
 80084b2:	1e54      	subs	r4, r2, #1
 80084b4:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 80084b8:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 80084bc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80084c0:	f8d7 5154 	ldr.w	r5, [r7, #340]	; 0x154
 80084c4:	fa46 f000 	asr.w	r0, r6, r0
 80084c8:	f3c1 4643 	ubfx	r6, r1, #17, #4
 80084cc:	f8b7 114c 	ldrh.w	r1, [r7, #332]	; 0x14c
 80084d0:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 80084d4:	ebae 0202 	sub.w	r2, lr, r2
 80084d8:	fbb2 f2f1 	udiv	r2, r2, r1
 80084dc:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 80084e0:	3d01      	subs	r5, #1
 80084e2:	fb05 1104 	mla	r1, r5, r4, r1
 80084e6:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80084ea:	1c51      	adds	r1, r2, #1
 80084ec:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80084f0:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 80084f4:	497c      	ldr	r1, [pc, #496]	; (80086e8 <forward_conv2d_nl_pool+0x3d0>)
 80084f6:	4614      	mov	r4, r2
 80084f8:	2a00      	cmp	r2, #0
 80084fa:	bf08      	it	eq
 80084fc:	460c      	moveq	r4, r1
 80084fe:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 8008502:	f8c7 40d4 	str.w	r4, [r7, #212]	; 0xd4
 8008506:	2e04      	cmp	r6, #4
 8008508:	b280      	uxth	r0, r0
 800850a:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 800850e:	f000 8382 	beq.w	8008c16 <forward_conv2d_nl_pool+0x8fe>
 8008512:	2e08      	cmp	r6, #8
 8008514:	f000 837f 	beq.w	8008c16 <forward_conv2d_nl_pool+0x8fe>
 8008518:	f8d9 2018 	ldr.w	r2, [r9, #24]
 800851c:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8008520:	f9b7 2134 	ldrsh.w	r2, [r7, #308]	; 0x134
 8008524:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 8008528:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800852c:	2a03      	cmp	r2, #3
 800852e:	f241 8000 	bls.w	8009532 <forward_conv2d_nl_pool+0x121a>
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008536:	2b00      	cmp	r3, #0
 8008538:	f000 836b 	beq.w	8008c12 <forward_conv2d_nl_pool+0x8fa>
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8008542:	68da      	ldr	r2, [r3, #12]
 8008544:	699b      	ldr	r3, [r3, #24]
 8008546:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800854a:	6899      	ldr	r1, [r3, #8]
 800854c:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 8008550:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8008554:	6896      	ldr	r6, [r2, #8]
 8008556:	f8c7 6144 	str.w	r6, [r7, #324]	; 0x144
 800855a:	4249      	negs	r1, r1
 800855c:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 8008560:	2800      	cmp	r0, #0
 8008562:	f000 82e1 	beq.w	8008b28 <forward_conv2d_nl_pool+0x810>
 8008566:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800856a:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800856e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8008572:	f8d7 50c4 	ldr.w	r5, [r7, #196]	; 0xc4
 8008576:	ed9f 8a5d 	vldr	s16, [pc, #372]	; 80086ec <forward_conv2d_nl_pool+0x3d4>
 800857a:	fb03 f200 	mul.w	r2, r3, r0
 800857e:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8008582:	008c      	lsls	r4, r1, #2
 8008584:	fb04 f000 	mul.w	r0, r4, r0
 8008588:	f8c7 40e8 	str.w	r4, [r7, #232]	; 0xe8
 800858c:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8008590:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 8008594:	fb01 fc02 	mul.w	ip, r1, r2
 8008598:	00a2      	lsls	r2, r4, #2
 800859a:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 800859e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80085a2:	f8c7 c080 	str.w	ip, [r7, #128]	; 0x80
 80085a6:	00ab      	lsls	r3, r5, #2
 80085a8:	4694      	mov	ip, r2
 80085aa:	fb0c f204 	mul.w	r2, ip, r4
 80085ae:	fb04 f303 	mul.w	r3, r4, r3
 80085b2:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 80085b6:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 80085ba:	00a4      	lsls	r4, r4, #2
 80085bc:	f8c7 40ac 	str.w	r4, [r7, #172]	; 0xac
 80085c0:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 80085c4:	f04f 0c00 	mov.w	ip, #0
 80085c8:	fa0f f58a 	sxth.w	r5, sl
 80085cc:	f8c7 c0f0 	str.w	ip, [r7, #240]	; 0xf0
 80085d0:	46a4      	mov	ip, r4
 80085d2:	f8d7 4120 	ldr.w	r4, [r7, #288]	; 0x120
 80085d6:	f8c7 50f4 	str.w	r5, [r7, #244]	; 0xf4
 80085da:	fa0f f58b 	sxth.w	r5, fp
 80085de:	f8c7 5104 	str.w	r5, [r7, #260]	; 0x104
 80085e2:	fb0c fc04 	mul.w	ip, ip, r4
 80085e6:	f8c7 c038 	str.w	ip, [r7, #56]	; 0x38
 80085ea:	fb06 fc03 	mul.w	ip, r6, r3
 80085ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085f2:	f8c7 c054 	str.w	ip, [r7, #84]	; 0x54
 80085f6:	4240      	negs	r0, r0
 80085f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80085fc:	469c      	mov	ip, r3
 80085fe:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 8008602:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008606:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 800860a:	f8b7 5130 	ldrh.w	r5, [r7, #304]	; 0x130
 800860e:	f8c7 50f8 	str.w	r5, [r7, #248]	; 0xf8
 8008612:	fb00 f303 	mul.w	r3, r0, r3
 8008616:	460d      	mov	r5, r1
 8008618:	fb0c fc04 	mul.w	ip, ip, r4
 800861c:	62bb      	str	r3, [r7, #40]	; 0x28
 800861e:	fb04 f305 	mul.w	r3, r4, r5
 8008622:	f8c7 c07c 	str.w	ip, [r7, #124]	; 0x7c
 8008626:	f8d7 50f8 	ldr.w	r5, [r7, #248]	; 0xf8
 800862a:	627b      	str	r3, [r7, #36]	; 0x24
 800862c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008630:	46a6      	mov	lr, r4
 8008632:	f8d7 40fc 	ldr.w	r4, [r7, #252]	; 0xfc
 8008636:	fb05 f503 	mul.w	r5, r5, r3
 800863a:	667d      	str	r5, [r7, #100]	; 0x64
 800863c:	4625      	mov	r5, r4
 800863e:	fb05 f503 	mul.w	r5, r5, r3
 8008642:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008646:	66bd      	str	r5, [r7, #104]	; 0x68
 8008648:	fb00 f101 	mul.w	r1, r0, r1
 800864c:	fb03 f306 	mul.w	r3, r3, r6
 8008650:	617b      	str	r3, [r7, #20]
 8008652:	008b      	lsls	r3, r1, #2
 8008654:	637b      	str	r3, [r7, #52]	; 0x34
 8008656:	0093      	lsls	r3, r2, #2
 8008658:	653b      	str	r3, [r7, #80]	; 0x50
 800865a:	0083      	lsls	r3, r0, #2
 800865c:	623b      	str	r3, [r7, #32]
 800865e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008662:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8008666:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800866a:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800866e:	2400      	movs	r4, #0
 8008670:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008672:	4603      	mov	r3, r0
 8008674:	fb03 f301 	mul.w	r3, r3, r1
 8008678:	f8c7 40d0 	str.w	r4, [r7, #208]	; 0xd0
 800867c:	f8d7 40cc 	ldr.w	r4, [r7, #204]	; 0xcc
 8008680:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008684:	00d1      	lsls	r1, r2, #3
 8008686:	0113      	lsls	r3, r2, #4
 8008688:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 800868c:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8008690:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8008694:	fb00 f004 	mul.w	r0, r0, r4
 8008698:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800869c:	66f8      	str	r0, [r7, #108]	; 0x6c
 800869e:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 80086a2:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 80086a6:	469a      	mov	sl, r3
 80086a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	f340 81d5 	ble.w	8008a5c <forward_conv2d_nl_pool+0x744>
 80086b2:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 80086b6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80086ba:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80086be:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80086c2:	2900      	cmp	r1, #0
 80086c4:	441a      	add	r2, r3
 80086c6:	bfb4      	ite	lt
 80086c8:	2100      	movlt	r1, #0
 80086ca:	2300      	movge	r3, #0
 80086cc:	4282      	cmp	r2, r0
 80086ce:	bf28      	it	cs
 80086d0:	4602      	movcs	r2, r0
 80086d2:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 80086d6:	2801      	cmp	r0, #1
 80086d8:	f000 840c 	beq.w	8008ef4 <forward_conv2d_nl_pool+0xbdc>
 80086dc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80086e0:	4281      	cmp	r1, r0
 80086e2:	f000 82c6 	beq.w	8008c72 <forward_conv2d_nl_pool+0x95a>
 80086e6:	e003      	b.n	80086f0 <forward_conv2d_nl_pool+0x3d8>
 80086e8:	08007f5d 	.word	0x08007f5d
 80086ec:	00000000 	.word	0x00000000
 80086f0:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80086f4:	2900      	cmp	r1, #0
 80086f6:	f000 81a4 	beq.w	8008a42 <forward_conv2d_nl_pool+0x72a>
 80086fa:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 80086fe:	fb93 f1f0 	sdiv	r1, r3, r0
 8008702:	fb00 3111 	mls	r1, r0, r1, r3
 8008706:	1a41      	subs	r1, r0, r1
 8008708:	1ad2      	subs	r2, r2, r3
 800870a:	fb91 f5f0 	sdiv	r5, r1, r0
 800870e:	fb00 1515 	mls	r5, r0, r5, r1
 8008712:	1b52      	subs	r2, r2, r5
 8008714:	4601      	mov	r1, r0
 8008716:	4402      	add	r2, r0
 8008718:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 800871c:	f8d7 6120 	ldr.w	r6, [r7, #288]	; 0x120
 8008720:	f8c7 a010 	str.w	sl, [r7, #16]
 8008724:	4604      	mov	r4, r0
 8008726:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800872a:	fbb4 f4f0 	udiv	r4, r4, r0
 800872e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008730:	f8c7 b018 	str.w	fp, [r7, #24]
 8008734:	3a01      	subs	r2, #1
 8008736:	fb92 f8f1 	sdiv	r8, r2, r1
 800873a:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800873e:	eba0 0c04 	sub.w	ip, r0, r4
 8008742:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8008746:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800874a:	4614      	mov	r4, r2
 800874c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8008750:	fbb4 f2f2 	udiv	r2, r4, r2
 8008754:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8008758:	663a      	str	r2, [r7, #96]	; 0x60
 800875a:	441d      	add	r5, r3
 800875c:	fb0e f000 	mul.w	r0, lr, r0
 8008760:	440b      	add	r3, r1
 8008762:	eba6 0608 	sub.w	r6, r6, r8
 8008766:	fb04 f505 	mul.w	r5, r4, r5
 800876a:	3b01      	subs	r3, #1
 800876c:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8008770:	fb93 f3f4 	sdiv	r3, r3, r4
 8008774:	fb00 f406 	mul.w	r4, r0, r6
 8008778:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800877c:	677d      	str	r5, [r7, #116]	; 0x74
 800877e:	0091      	lsls	r1, r2, #2
 8008780:	fb00 f003 	mul.w	r0, r0, r3
 8008784:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 8008788:	65f8      	str	r0, [r7, #92]	; 0x5c
 800878a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800878e:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 8008792:	f8c7 40e4 	str.w	r4, [r7, #228]	; 0xe4
 8008796:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 800879a:	1ac3      	subs	r3, r0, r3
 800879c:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 80087a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80087a4:	008b      	lsls	r3, r1, #2
 80087a6:	633b      	str	r3, [r7, #48]	; 0x30
 80087a8:	00d3      	lsls	r3, r2, #3
 80087aa:	61fb      	str	r3, [r7, #28]
 80087ac:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80087b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80087b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80087b8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80087bc:	2300      	movs	r3, #0
 80087be:	ea4f 098c 	mov.w	r9, ip, lsl #2
 80087c2:	67bb      	str	r3, [r7, #120]	; 0x78
 80087c4:	46c2      	mov	sl, r8
 80087c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80087ca:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80087ce:	eb03 0c02 	add.w	ip, r3, r2
 80087d2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	f2c0 811f 	blt.w	8008a1a <forward_conv2d_nl_pool+0x702>
 80087dc:	2000      	movs	r0, #0
 80087de:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 80087e0:	f8d7 80f4 	ldr.w	r8, [r7, #244]	; 0xf4
 80087e4:	4605      	mov	r5, r0
 80087e6:	4606      	mov	r6, r0
 80087e8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80087ec:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80087f0:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 80087f4:	4413      	add	r3, r2
 80087f6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80087fa:	440a      	add	r2, r1
 80087fc:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8008800:	428b      	cmp	r3, r1
 8008802:	bf94      	ite	ls
 8008804:	ebc6 0303 	rsbls	r3, r6, r3
 8008808:	ebc6 0301 	rsbhi	r3, r6, r1
 800880c:	4415      	add	r5, r2
 800880e:	1a1b      	subs	r3, r3, r0
 8008810:	00a4      	lsls	r4, r4, #2
 8008812:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8008816:	f8d7 60c0 	ldr.w	r6, [r7, #192]	; 0xc0
 800881a:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800881e:	6dfd      	ldr	r5, [r7, #92]	; 0x5c
 8008820:	4602      	mov	r2, r0
 8008822:	2800      	cmp	r0, #0
 8008824:	bf08      	it	eq
 8008826:	4662      	moveq	r2, ip
 8008828:	f108 31ff 	add.w	r1, r8, #4294967295
 800882c:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8008830:	fb91 f1f0 	sdiv	r1, r1, r0
 8008834:	4429      	add	r1, r5
 8008836:	f8d7 5128 	ldr.w	r5, [r7, #296]	; 0x128
 800883a:	fb0e 5501 	mla	r5, lr, r1, r5
 800883e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8008842:	4403      	add	r3, r0
 8008844:	fb01 6104 	mla	r1, r1, r4, r6
 8008848:	3b01      	subs	r3, #1
 800884a:	fb93 f6f0 	sdiv	r6, r3, r0
 800884e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008850:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 8008854:	fb06 3110 	mls	r1, r6, r0, r3
 8008858:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800885c:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8008860:	4562      	cmp	r2, ip
 8008862:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008866:	bf08      	it	eq
 8008868:	eeb0 6a48 	vmoveq.f32	s12, s16
 800886c:	1b9b      	subs	r3, r3, r6
 800886e:	2800      	cmp	r0, #0
 8008870:	d070      	beq.n	8008954 <forward_conv2d_nl_pool+0x63c>
 8008872:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8008876:	fb0e f803 	mul.w	r8, lr, r3
 800887a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800887c:	fb01 fb00 	mul.w	fp, r1, r0
 8008880:	2b00      	cmp	r3, #0
 8008882:	d067      	beq.n	8008954 <forward_conv2d_nl_pool+0x63c>
 8008884:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008888:	18d3      	adds	r3, r2, r3
 800888a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800888e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008892:	1a9b      	subs	r3, r3, r2
 8008894:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008896:	2300      	movs	r3, #0
 8008898:	673b      	str	r3, [r7, #112]	; 0x70
 800889a:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800889e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a0:	4413      	add	r3, r2
 80088a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80088a4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80088a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088aa:	4413      	add	r3, r2
 80088ac:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80088b0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80088b4:	ecf3 7a01 	vldmia	r3!, {s15}
 80088b8:	f1ba 0f00 	cmp.w	sl, #0
 80088bc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80088c0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80088c4:	f340 80a7 	ble.w	8008a16 <forward_conv2d_nl_pool+0x6fe>
 80088c8:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 80088cc:	f04f 0c00 	mov.w	ip, #0
 80088d0:	2e00      	cmp	r6, #0
 80088d2:	dd19      	ble.n	8008908 <forward_conv2d_nl_pool+0x5f0>
 80088d4:	2100      	movs	r1, #0
 80088d6:	eb00 040e 	add.w	r4, r0, lr
 80088da:	4284      	cmp	r4, r0
 80088dc:	d910      	bls.n	8008900 <forward_conv2d_nl_pool+0x5e8>
 80088de:	4603      	mov	r3, r0
 80088e0:	462a      	mov	r2, r5
 80088e2:	ecb3 7a01 	vldmia	r3!, {s14}
 80088e6:	ecf2 6a01 	vldmia	r2!, {s13}
 80088ea:	429c      	cmp	r4, r3
 80088ec:	eee6 7a87 	vfma.f32	s15, s13, s14
 80088f0:	d8f7      	bhi.n	80088e2 <forward_conv2d_nl_pool+0x5ca>
 80088f2:	43c3      	mvns	r3, r0
 80088f4:	441c      	add	r4, r3
 80088f6:	f024 0403 	bic.w	r4, r4, #3
 80088fa:	3404      	adds	r4, #4
 80088fc:	4425      	add	r5, r4
 80088fe:	4420      	add	r0, r4
 8008900:	3101      	adds	r1, #1
 8008902:	428e      	cmp	r6, r1
 8008904:	4448      	add	r0, r9
 8008906:	d1e6      	bne.n	80088d6 <forward_conv2d_nl_pool+0x5be>
 8008908:	f10c 0c01 	add.w	ip, ip, #1
 800890c:	45e2      	cmp	sl, ip
 800890e:	4458      	add	r0, fp
 8008910:	4445      	add	r5, r8
 8008912:	d1dd      	bne.n	80088d0 <forward_conv2d_nl_pool+0x5b8>
 8008914:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8008918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800891c:	441d      	add	r5, r3
 800891e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008922:	ece3 7a01 	vstmia	r3!, {s15}
 8008926:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800892a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800892e:	4293      	cmp	r3, r2
 8008930:	d1be      	bne.n	80088b0 <forward_conv2d_nl_pool+0x598>
 8008932:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8008936:	69f9      	ldr	r1, [r7, #28]
 8008938:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800893a:	4472      	add	r2, lr
 800893c:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8008940:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008942:	1a52      	subs	r2, r2, r1
 8008944:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 8008948:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800894c:	3301      	adds	r3, #1
 800894e:	429a      	cmp	r2, r3
 8008950:	673b      	str	r3, [r7, #112]	; 0x70
 8008952:	d1a2      	bne.n	800889a <forward_conv2d_nl_pool+0x582>
 8008954:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8008958:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800895c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800895e:	4608      	mov	r0, r1
 8008960:	4410      	add	r0, r2
 8008962:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8008966:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
 800896a:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800896e:	4401      	add	r1, r0
 8008970:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8008974:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8008978:	1a8a      	subs	r2, r1, r2
 800897a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800897e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8008982:	3301      	adds	r3, #1
 8008984:	429a      	cmp	r2, r3
 8008986:	67bb      	str	r3, [r7, #120]	; 0x78
 8008988:	f47f af1d 	bne.w	80087c6 <forward_conv2d_nl_pool+0x4ae>
 800898c:	f8d7 b018 	ldr.w	fp, [r7, #24]
 8008990:	f8d7 a010 	ldr.w	sl, [r7, #16]
 8008994:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008998:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800899c:	699b      	ldr	r3, [r3, #24]
 800899e:	2a00      	cmp	r2, #0
 80089a0:	f000 8165 	beq.w	8008c6e <forward_conv2d_nl_pool+0x956>
 80089a4:	2400      	movs	r4, #0
 80089a6:	f8d7 5098 	ldr.w	r5, [r7, #152]	; 0x98
 80089aa:	f8d7 614c 	ldr.w	r6, [r7, #332]	; 0x14c
 80089ae:	f8d7 8134 	ldr.w	r8, [r7, #308]	; 0x134
 80089b2:	f8d7 90e0 	ldr.w	r9, [r7, #224]	; 0xe0
 80089b6:	f8c7 4150 	str.w	r4, [r7, #336]	; 0x150
 80089ba:	609e      	str	r6, [r3, #8]
 80089bc:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80089c0:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80089c4:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 80089c8:	462b      	mov	r3, r5
 80089ca:	4608      	mov	r0, r1
 80089cc:	47a0      	blx	r4
 80089ce:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80089d2:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80089d6:	6859      	ldr	r1, [r3, #4]
 80089d8:	68da      	ldr	r2, [r3, #12]
 80089da:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 80089de:	4405      	add	r5, r0
 80089e0:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 80089e4:	0089      	lsls	r1, r1, #2
 80089e6:	4406      	add	r6, r0
 80089e8:	eba5 0c09 	sub.w	ip, r5, r9
 80089ec:	1850      	adds	r0, r2, r1
 80089ee:	45a4      	cmp	ip, r4
 80089f0:	bfa8      	it	ge
 80089f2:	464d      	movge	r5, r9
 80089f4:	4286      	cmp	r6, r0
 80089f6:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 80089fa:	bf28      	it	cs
 80089fc:	1a76      	subcs	r6, r6, r1
 80089fe:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8008a02:	3001      	adds	r0, #1
 8008a04:	4281      	cmp	r1, r0
 8008a06:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
 8008a0a:	d1d6      	bne.n	80089ba <forward_conv2d_nl_pool+0x6a2>
 8008a0c:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
 8008a10:	f8c7 614c 	str.w	r6, [r7, #332]	; 0x14c
 8008a14:	e019      	b.n	8008a4a <forward_conv2d_nl_pool+0x732>
 8008a16:	461a      	mov	r2, r3
 8008a18:	e77e      	b.n	8008918 <forward_conv2d_nl_pool+0x600>
 8008a1a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8008a1e:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8008a22:	fb90 f3f2 	sdiv	r3, r0, r2
 8008a26:	fb02 0313 	mls	r3, r2, r3, r0
 8008a2a:	1ad3      	subs	r3, r2, r3
 8008a2c:	4605      	mov	r5, r0
 8008a2e:	fb93 f0f2 	sdiv	r0, r3, r2
 8008a32:	fb02 3010 	mls	r0, r2, r0, r3
 8008a36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a38:	462e      	mov	r6, r5
 8008a3a:	18c4      	adds	r4, r0, r3
 8008a3c:	eb02 0805 	add.w	r8, r2, r5
 8008a40:	e6d2      	b.n	80087e8 <forward_conv2d_nl_pool+0x4d0>
 8008a42:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008a46:	699b      	ldr	r3, [r3, #24]
 8008a48:	68da      	ldr	r2, [r3, #12]
 8008a4a:	609a      	str	r2, [r3, #8]
 8008a4c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008a50:	3301      	adds	r3, #1
 8008a52:	b21b      	sxth	r3, r3
 8008a54:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8008a58:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008a5c:	3b01      	subs	r3, #1
 8008a5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008a62:	f100 8089 	bmi.w	8008b78 <forward_conv2d_nl_pool+0x860>
 8008a66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008a6a:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 8008a6e:	42a3      	cmp	r3, r4
 8008a70:	d867      	bhi.n	8008b42 <forward_conv2d_nl_pool+0x82a>
 8008a72:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	6990      	ldr	r0, [r2, #24]
 8008a7a:	9301      	str	r3, [sp, #4]
 8008a7c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008a80:	f8d7 80c4 	ldr.w	r8, [r7, #196]	; 0xc4
 8008a84:	f8b7 5094 	ldrh.w	r5, [r7, #148]	; 0x94
 8008a88:	1a9b      	subs	r3, r3, r2
 8008a8a:	fa1f f188 	uxth.w	r1, r8
 8008a8e:	b29a      	uxth	r2, r3
 8008a90:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008a94:	9308      	str	r3, [sp, #32]
 8008a96:	9105      	str	r1, [sp, #20]
 8008a98:	2601      	movs	r6, #1
 8008a9a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008a9e:	9607      	str	r6, [sp, #28]
 8008aa0:	f8d7 6084 	ldr.w	r6, [r7, #132]	; 0x84
 8008aa4:	9506      	str	r5, [sp, #24]
 8008aa6:	f8b7 5044 	ldrh.w	r5, [r7, #68]	; 0x44
 8008aaa:	9304      	str	r3, [sp, #16]
 8008aac:	1a64      	subs	r4, r4, r1
 8008aae:	b2b1      	uxth	r1, r6
 8008ab0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008ab4:	9300      	str	r3, [sp, #0]
 8008ab6:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8008aba:	b224      	sxth	r4, r4
 8008abc:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 8008ac0:	f8b7 1144 	ldrh.w	r1, [r7, #324]	; 0x144
 8008ac4:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8008ac8:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8008aca:	47a0      	blx	r4
 8008acc:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8008ad0:	f8d7 511c 	ldr.w	r5, [r7, #284]	; 0x11c
 8008ad4:	688a      	ldr	r2, [r1, #8]
 8008ad6:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8008ad8:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8008adc:	fa0f f388 	sxth.w	r3, r8
 8008ae0:	1af3      	subs	r3, r6, r3
 8008ae2:	4422      	add	r2, r4
 8008ae4:	462e      	mov	r6, r5
 8008ae6:	f8d7 40cc 	ldr.w	r4, [r7, #204]	; 0xcc
 8008aea:	f8d7 5118 	ldr.w	r5, [r7, #280]	; 0x118
 8008aee:	608a      	str	r2, [r1, #8]
 8008af0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008af4:	4426      	add	r6, r4
 8008af6:	b21b      	sxth	r3, r3
 8008af8:	1b2c      	subs	r4, r5, r4
 8008afa:	f8c7 4118 	str.w	r4, [r7, #280]	; 0x118
 8008afe:	6efd      	ldr	r5, [r7, #108]	; 0x6c
 8008b00:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 8008b04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008b08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008b0c:	f8c7 611c 	str.w	r6, [r7, #284]	; 0x11c
 8008b10:	3001      	adds	r0, #1
 8008b12:	442c      	add	r4, r5
 8008b14:	4283      	cmp	r3, r0
 8008b16:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 8008b1a:	f8c7 4114 	str.w	r4, [r7, #276]	; 0x114
 8008b1e:	f63f adc3 	bhi.w	80086a8 <forward_conv2d_nl_pool+0x390>
 8008b22:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008b26:	699b      	ldr	r3, [r3, #24]
 8008b28:	68da      	ldr	r2, [r3, #12]
 8008b2a:	609a      	str	r2, [r3, #8]
 8008b2c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008b30:	68d3      	ldr	r3, [r2, #12]
 8008b32:	6093      	str	r3, [r2, #8]
 8008b34:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	ecbd 8b10 	vpop	{d8-d15}
 8008b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b42:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8008b46:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008b4a:	4611      	mov	r1, r2
 8008b4c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8008b50:	4419      	add	r1, r3
 8008b52:	1ad3      	subs	r3, r2, r3
 8008b54:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008b58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b5e:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 8008b62:	4413      	add	r3, r2
 8008b64:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008b68:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8008b6c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008b70:	4293      	cmp	r3, r2
 8008b72:	f63f ad99 	bhi.w	80086a8 <forward_conv2d_nl_pool+0x390>
 8008b76:	e7d4      	b.n	8008b22 <forward_conv2d_nl_pool+0x80a>
 8008b78:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008b7c:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 8008b80:	699a      	ldr	r2, [r3, #24]
 8008b82:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 8008b86:	68d1      	ldr	r1, [r2, #12]
 8008b88:	6853      	ldr	r3, [r2, #4]
 8008b8a:	697a      	ldr	r2, [r7, #20]
 8008b8c:	fb00 4012 	mls	r0, r0, r2, r4
 8008b90:	009b      	lsls	r3, r3, #2
 8008b92:	4281      	cmp	r1, r0
 8008b94:	bf88      	it	hi
 8008b96:	18c0      	addhi	r0, r0, r3
 8008b98:	4281      	cmp	r1, r0
 8008b9a:	eb01 0203 	add.w	r2, r1, r3
 8008b9e:	d216      	bcs.n	8008bce <forward_conv2d_nl_pool+0x8b6>
 8008ba0:	f9b7 10b8 	ldrsh.w	r1, [r7, #184]	; 0xb8
 8008ba4:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 8008ba8:	42a1      	cmp	r1, r4
 8008baa:	d010      	beq.n	8008bce <forward_conv2d_nl_pool+0x8b6>
 8008bac:	4290      	cmp	r0, r2
 8008bae:	d20e      	bcs.n	8008bce <forward_conv2d_nl_pool+0x8b6>
 8008bb0:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8008bb4:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 8008bb8:	f850 3b04 	ldr.w	r3, [r0], #4
 8008bbc:	f841 3b04 	str.w	r3, [r1], #4
 8008bc0:	69a2      	ldr	r2, [r4, #24]
 8008bc2:	6853      	ldr	r3, [r2, #4]
 8008bc4:	68d2      	ldr	r2, [r2, #12]
 8008bc6:	009b      	lsls	r3, r3, #2
 8008bc8:	441a      	add	r2, r3
 8008bca:	4282      	cmp	r2, r0
 8008bcc:	d8f4      	bhi.n	8008bb8 <forward_conv2d_nl_pool+0x8a0>
 8008bce:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8008bd2:	f8d7 40b8 	ldr.w	r4, [r7, #184]	; 0xb8
 8008bd6:	f8b7 1140 	ldrh.w	r1, [r7, #320]	; 0x140
 8008bda:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 8008bdc:	4420      	add	r0, r4
 8008bde:	f8d7 40c4 	ldr.w	r4, [r7, #196]	; 0xc4
 8008be2:	1a40      	subs	r0, r0, r1
 8008be4:	4421      	add	r1, r4
 8008be6:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 8008bea:	442c      	add	r4, r5
 8008bec:	b209      	sxth	r1, r1
 8008bee:	b200      	sxth	r0, r0
 8008bf0:	4294      	cmp	r4, r2
 8008bf2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 8008bf6:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
 8008bfa:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 8008bfe:	4621      	mov	r1, r4
 8008c00:	f4ff af31 	bcc.w	8008a66 <forward_conv2d_nl_pool+0x74e>
 8008c04:	425b      	negs	r3, r3
 8008c06:	4419      	add	r1, r3
 8008c08:	4291      	cmp	r1, r2
 8008c0a:	d2fc      	bcs.n	8008c06 <forward_conv2d_nl_pool+0x8ee>
 8008c0c:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 8008c10:	e729      	b.n	8008a66 <forward_conv2d_nl_pool+0x74e>
 8008c12:	68db      	ldr	r3, [r3, #12]
 8008c14:	deff      	udf	#255	; 0xff
 8008c16:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8008c1a:	2a00      	cmp	r2, #0
 8008c1c:	f43f ac7c 	beq.w	8008518 <forward_conv2d_nl_pool+0x200>
 8008c20:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8008c24:	2903      	cmp	r1, #3
 8008c26:	f240 8484 	bls.w	8009532 <forward_conv2d_nl_pool+0x121a>
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c2e:	b1db      	cbz	r3, 8008c68 <forward_conv2d_nl_pool+0x950>
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	b1cb      	cbz	r3, 8008c68 <forward_conv2d_nl_pool+0x950>
 8008c34:	699b      	ldr	r3, [r3, #24]
 8008c36:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8008c3a:	e9d3 3401 	ldrd	r3, r4, [r3, #4]
 8008c3e:	9301      	str	r3, [sp, #4]
 8008c40:	4603      	mov	r3, r0
 8008c42:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8008c46:	9000      	str	r0, [sp, #0]
 8008c48:	4620      	mov	r0, r4
 8008c4a:	f7ff fb15 	bl	8008278 <ai_dict_decompress_f32>
 8008c4e:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8008c52:	b12c      	cbz	r4, 8008c60 <forward_conv2d_nl_pool+0x948>
 8008c54:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 8008c58:	881a      	ldrh	r2, [r3, #0]
 8008c5a:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8008c5e:	e45b      	b.n	8008518 <forward_conv2d_nl_pool+0x200>
 8008c60:	881a      	ldrh	r2, [r3, #0]
 8008c62:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8008c66:	e457      	b.n	8008518 <forward_conv2d_nl_pool+0x200>
 8008c68:	2300      	movs	r3, #0
 8008c6a:	699b      	ldr	r3, [r3, #24]
 8008c6c:	deff      	udf	#255	; 0xff
 8008c6e:	68da      	ldr	r2, [r3, #12]
 8008c70:	e6eb      	b.n	8008a4a <forward_conv2d_nl_pool+0x732>
 8008c72:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008c74:	2901      	cmp	r1, #1
 8008c76:	f47f ad3b 	bne.w	80086f0 <forward_conv2d_nl_pool+0x3d8>
 8008c7a:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8008c7e:	2900      	cmp	r1, #0
 8008c80:	f43f aedf 	beq.w	8008a42 <forward_conv2d_nl_pool+0x72a>
 8008c84:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8008c88:	f8d7 6154 	ldr.w	r6, [r7, #340]	; 0x154
 8008c8c:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8008c90:	1ad2      	subs	r2, r2, r3
 8008c92:	1a8c      	subs	r4, r1, r2
 8008c94:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8008c98:	00b2      	lsls	r2, r6, #2
 8008c9a:	fb02 f204 	mul.w	r2, r2, r4
 8008c9e:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8008ca2:	fbb1 f1f0 	udiv	r1, r1, r0
 8008ca6:	ebc1 7081 	rsb	r0, r1, r1, lsl #30
 8008caa:	460d      	mov	r5, r1
 8008cac:	6339      	str	r1, [r7, #48]	; 0x30
 8008cae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008cb0:	ebc1 7141 	rsb	r1, r1, r1, lsl #29
 8008cb4:	0082      	lsls	r2, r0, #2
 8008cb6:	65ba      	str	r2, [r7, #88]	; 0x58
 8008cb8:	00ca      	lsls	r2, r1, #3
 8008cba:	607a      	str	r2, [r7, #4]
 8008cbc:	00aa      	lsls	r2, r5, #2
 8008cbe:	60ba      	str	r2, [r7, #8]
 8008cc0:	fb03 f206 	mul.w	r2, r3, r6
 8008cc4:	67ba      	str	r2, [r7, #120]	; 0x78
 8008cc6:	6a3a      	ldr	r2, [r7, #32]
 8008cc8:	fb02 f303 	mul.w	r3, r2, r3
 8008ccc:	61bb      	str	r3, [r7, #24]
 8008cce:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008cd2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008cd6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008cda:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8008cde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ce2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008cec:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	f2c0 826e 	blt.w	80091d2 <forward_conv2d_nl_pool+0xeba>
 8008cf6:	2100      	movs	r1, #0
 8008cf8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008cfa:	460a      	mov	r2, r1
 8008cfc:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 8008d00:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8008d04:	f8d7 5088 	ldr.w	r5, [r7, #136]	; 0x88
 8008d08:	4420      	add	r0, r4
 8008d0a:	4408      	add	r0, r1
 8008d0c:	f8d7 4108 	ldr.w	r4, [r7, #264]	; 0x108
 8008d10:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 8008d14:	190c      	adds	r4, r1, r4
 8008d16:	42ac      	cmp	r4, r5
 8008d18:	bf28      	it	cs
 8008d1a:	462c      	movcs	r4, r5
 8008d1c:	f8d7 512c 	ldr.w	r5, [r7, #300]	; 0x12c
 8008d20:	0080      	lsls	r0, r0, #2
 8008d22:	1aa4      	subs	r4, r4, r2
 8008d24:	2d00      	cmp	r5, #0
 8008d26:	f000 8245 	beq.w	80091b4 <forward_conv2d_nl_pool+0xe9c>
 8008d2a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008d2e:	f8d7 6150 	ldr.w	r6, [r7, #336]	; 0x150
 8008d32:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8008d36:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8008d3a:	42b5      	cmp	r5, r6
 8008d3c:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 8008d40:	eba3 0204 	sub.w	r2, r3, r4
 8008d44:	eba1 0104 	sub.w	r1, r1, r4
 8008d48:	bf08      	it	eq
 8008d4a:	eef0 3a48 	vmoveq.f32	s7, s16
 8008d4e:	462b      	mov	r3, r5
 8008d50:	69bd      	ldr	r5, [r7, #24]
 8008d52:	f8d7 60c0 	ldr.w	r6, [r7, #192]	; 0xc0
 8008d56:	4428      	add	r0, r5
 8008d58:	f8d7 513c 	ldr.w	r5, [r7, #316]	; 0x13c
 8008d5c:	fb05 6e00 	mla	lr, r5, r0, r6
 8008d60:	eb0e 000b 	add.w	r0, lr, fp
 8008d64:	4586      	cmp	lr, r0
 8008d66:	61f8      	str	r0, [r7, #28]
 8008d68:	f080 80a5 	bcs.w	8008eb6 <forward_conv2d_nl_pool+0xb9e>
 8008d6c:	0092      	lsls	r2, r2, #2
 8008d6e:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8008d72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d74:	fb01 f10b 	mul.w	r1, r1, fp
 8008d78:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 8008d7c:	f024 0803 	bic.w	r8, r4, #3
 8008d80:	2a00      	cmp	r2, #0
 8008d82:	f000 8098 	beq.w	8008eb6 <forward_conv2d_nl_pool+0xb9e>
 8008d86:	f108 32ff 	add.w	r2, r8, #4294967295
 8008d8a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008d8c:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8008d90:	0892      	lsrs	r2, r2, #2
 8008d92:	3201      	adds	r2, #1
 8008d94:	4401      	add	r1, r0
 8008d96:	fb02 f00a 	mul.w	r0, r2, sl
 8008d9a:	6638      	str	r0, [r7, #96]	; 0x60
 8008d9c:	0110      	lsls	r0, r2, #4
 8008d9e:	0092      	lsls	r2, r2, #2
 8008da0:	65fa      	str	r2, [r7, #92]	; 0x5c
 8008da2:	1aca      	subs	r2, r1, r3
 8008da4:	613a      	str	r2, [r7, #16]
 8008da6:	68ba      	ldr	r2, [r7, #8]
 8008da8:	6738      	str	r0, [r7, #112]	; 0x70
 8008daa:	4413      	add	r3, r2
 8008dac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008db0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008db4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008db6:	4413      	add	r3, r2
 8008db8:	60fb      	str	r3, [r7, #12]
 8008dba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	4413      	add	r3, r2
 8008dc2:	677b      	str	r3, [r7, #116]	; 0x74
 8008dc4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008dc8:	ecf3 6a01 	vldmia	r3!, {s13}
 8008dcc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008dd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8008dda:	dd57      	ble.n	8008e8c <forward_conv2d_nl_pool+0xb74>
 8008ddc:	4676      	mov	r6, lr
 8008dde:	f04f 0c00 	mov.w	ip, #0
 8008de2:	f1b8 0f00 	cmp.w	r8, #0
 8008de6:	f340 81e3 	ble.w	80091b0 <forward_conv2d_nl_pool+0xe98>
 8008dea:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8008dee:	f109 0310 	add.w	r3, r9, #16
 8008df2:	18b1      	adds	r1, r6, r2
 8008df4:	2000      	movs	r0, #0
 8008df6:	4632      	mov	r2, r6
 8008df8:	eb02 050b 	add.w	r5, r2, fp
 8008dfc:	ed95 7a00 	vldr	s14, [r5]
 8008e00:	ed53 7a03 	vldr	s15, [r3, #-12]
 8008e04:	ed92 4a00 	vldr	s8, [r2]
 8008e08:	ed53 4a04 	vldr	s9, [r3, #-16]
 8008e0c:	ed91 5a00 	vldr	s10, [r1]
 8008e10:	ed53 5a02 	vldr	s11, [r3, #-8]
 8008e14:	ed13 6a01 	vldr	s12, [r3, #-4]
 8008e18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e1c:	eb01 050b 	add.w	r5, r1, fp
 8008e20:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008e24:	3004      	adds	r0, #4
 8008e26:	4540      	cmp	r0, r8
 8008e28:	ed95 7a00 	vldr	s14, [r5]
 8008e2c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008e30:	4452      	add	r2, sl
 8008e32:	4451      	add	r1, sl
 8008e34:	f103 0310 	add.w	r3, r3, #16
 8008e38:	eee7 7a06 	vfma.f32	s15, s14, s12
 8008e3c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008e40:	dbda      	blt.n	8008df8 <forward_conv2d_nl_pool+0xae0>
 8008e42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008e44:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8008e46:	441e      	add	r6, r3
 8008e48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008e4a:	4499      	add	r9, r3
 8008e4c:	42a0      	cmp	r0, r4
 8008e4e:	da11      	bge.n	8008e74 <forward_conv2d_nl_pool+0xb5c>
 8008e50:	4602      	mov	r2, r0
 8008e52:	4633      	mov	r3, r6
 8008e54:	4649      	mov	r1, r9
 8008e56:	edd3 7a00 	vldr	s15, [r3]
 8008e5a:	ecb1 7a01 	vldmia	r1!, {s14}
 8008e5e:	3201      	adds	r2, #1
 8008e60:	42a2      	cmp	r2, r4
 8008e62:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008e66:	445b      	add	r3, fp
 8008e68:	d1f5      	bne.n	8008e56 <forward_conv2d_nl_pool+0xb3e>
 8008e6a:	1a20      	subs	r0, r4, r0
 8008e6c:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 8008e70:	fb00 660b 	mla	r6, r0, fp, r6
 8008e74:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008e78:	441e      	add	r6, r3
 8008e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e7e:	4499      	add	r9, r3
 8008e80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e84:	f10c 0c01 	add.w	ip, ip, #1
 8008e88:	4563      	cmp	r3, ip
 8008e8a:	d1aa      	bne.n	8008de2 <forward_conv2d_nl_pool+0xaca>
 8008e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e8e:	4499      	add	r9, r3
 8008e90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e92:	ece3 6a01 	vstmia	r3!, {s13}
 8008e96:	677b      	str	r3, [r7, #116]	; 0x74
 8008e98:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d191      	bne.n	8008dc4 <forward_conv2d_nl_pool+0xaac>
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	1a9b      	subs	r3, r3, r2
 8008ea6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008eaa:	69fb      	ldr	r3, [r7, #28]
 8008eac:	f10e 0e04 	add.w	lr, lr, #4
 8008eb0:	459e      	cmp	lr, r3
 8008eb2:	f4ff af7d 	bcc.w	8008db0 <forward_conv2d_nl_pool+0xa98>
 8008eb6:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8008eba:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8008ebe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008ec2:	440a      	add	r2, r1
 8008ec4:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8008ec8:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8008ecc:	4608      	mov	r0, r1
 8008ece:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8008ed2:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8008ed6:	4410      	add	r0, r2
 8008ed8:	1a8a      	subs	r2, r1, r2
 8008eda:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 8008ede:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8008ee2:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008eee:	f47f aefd 	bne.w	8008cec <forward_conv2d_nl_pool+0x9d4>
 8008ef2:	e54f      	b.n	8008994 <forward_conv2d_nl_pool+0x67c>
 8008ef4:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8008ef6:	2801      	cmp	r0, #1
 8008ef8:	f47f abfa 	bne.w	80086f0 <forward_conv2d_nl_pool+0x3d8>
 8008efc:	1ad2      	subs	r2, r2, r3
 8008efe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008f00:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8008f04:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8008f08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008f0a:	fb00 4101 	mla	r1, r0, r1, r4
 8008f0e:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8008f12:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8008f16:	f080 8173 	bcs.w	8009200 <forward_conv2d_nl_pool+0xee8>
 8008f1a:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8008f1e:	2a00      	cmp	r2, #0
 8008f20:	f43f ad38 	beq.w	8008994 <forward_conv2d_nl_pool+0x67c>
 8008f24:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008f28:	fb02 f303 	mul.w	r3, r2, r3
 8008f2c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008f2e:	677b      	str	r3, [r7, #116]	; 0x74
 8008f30:	1a9b      	subs	r3, r3, r2
 8008f32:	663b      	str	r3, [r7, #96]	; 0x60
 8008f34:	188b      	adds	r3, r1, r2
 8008f36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f38:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f3c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008f40:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008f44:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008f48:	e9c7 ab0b 	strd	sl, fp, [r7, #44]	; 0x2c
 8008f4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008f54:	2300      	movs	r3, #0
 8008f56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008f5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	f000 814b 	beq.w	80091fa <forward_conv2d_nl_pool+0xee2>
 8008f64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008f68:	ed93 6a00 	vldr	s12, [r3]
 8008f6c:	3304      	adds	r3, #4
 8008f6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008f72:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	f000 8101 	beq.w	800917e <forward_conv2d_nl_pool+0xe66>
 8008f7c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008f80:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8008f84:	eb03 0802 	add.w	r8, r3, r2
 8008f88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008f8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f90:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008f94:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008f98:	67bb      	str	r3, [r7, #120]	; 0x78
 8008f9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f9e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008fa2:	f04f 0b00 	mov.w	fp, #0
 8008fa6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	f2c0 811c 	blt.w	80091e8 <forward_conv2d_nl_pool+0xed0>
 8008fb0:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8008fb4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 8008fbc:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8008fc0:	eb02 0c04 	add.w	ip, r2, r4
 8008fc4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8008fc8:	4540      	cmp	r0, r8
 8008fca:	bf94      	ite	ls
 8008fcc:	ebc3 0300 	rsbls	r3, r3, r0
 8008fd0:	ebc3 0308 	rsbhi	r3, r3, r8
 8008fd4:	eba2 0903 	sub.w	r9, r2, r3
 8008fd8:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8008fdc:	1ac4      	subs	r4, r0, r3
 8008fde:	fb03 f302 	mul.w	r3, r3, r2
 8008fe2:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8008fe6:	2a00      	cmp	r2, #0
 8008fe8:	f340 80fb 	ble.w	80091e2 <forward_conv2d_nl_pool+0xeca>
 8008fec:	f023 050f 	bic.w	r5, r3, #15
 8008ff0:	f8d7 60e8 	ldr.w	r6, [r7, #232]	; 0xe8
 8008ff4:	1e68      	subs	r0, r5, #1
 8008ff6:	0900      	lsrs	r0, r0, #4
 8008ff8:	3001      	adds	r0, #1
 8008ffa:	fb06 f204 	mul.w	r2, r6, r4
 8008ffe:	673a      	str	r2, [r7, #112]	; 0x70
 8009000:	0102      	lsls	r2, r0, #4
 8009002:	65ba      	str	r2, [r7, #88]	; 0x58
 8009004:	fb06 f909 	mul.w	r9, r6, r9
 8009008:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 800900c:	eef0 6a46 	vmov.f32	s13, s12
 8009010:	f04f 0e00 	mov.w	lr, #0
 8009014:	4662      	mov	r2, ip
 8009016:	2d00      	cmp	r5, #0
 8009018:	f340 80e1 	ble.w	80091de <forward_conv2d_nl_pool+0xec6>
 800901c:	f101 0440 	add.w	r4, r1, #64	; 0x40
 8009020:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8009024:	2600      	movs	r6, #0
 8009026:	ed50 fa0f 	vldr	s31, [r0, #-60]	; 0xffffffc4
 800902a:	ed54 7a0f 	vldr	s15, [r4, #-60]	; 0xffffffc4
 800902e:	ed10 fa10 	vldr	s30, [r0, #-64]	; 0xffffffc0
 8009032:	ed54 ea10 	vldr	s29, [r4, #-64]	; 0xffffffc0
 8009036:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 800903a:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 800903e:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 8009042:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 8009046:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 800904a:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 800904e:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 8009052:	ed50 aa0a 	vldr	s21, [r0, #-40]	; 0xffffffd8
 8009056:	ed14 aa0a 	vldr	s20, [r4, #-40]	; 0xffffffd8
 800905a:	ed50 9a09 	vldr	s19, [r0, #-36]	; 0xffffffdc
 800905e:	ed14 9a09 	vldr	s18, [r4, #-36]	; 0xffffffdc
 8009062:	ed54 8a08 	vldr	s17, [r4, #-32]	; 0xffffffe0
 8009066:	ed10 0a08 	vldr	s0, [r0, #-32]	; 0xffffffe0
 800906a:	ed54 0a07 	vldr	s1, [r4, #-28]	; 0xffffffe4
 800906e:	ed10 1a07 	vldr	s2, [r0, #-28]	; 0xffffffe4
 8009072:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 8009076:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 800907a:	ed50 2a05 	vldr	s5, [r0, #-20]	; 0xffffffec
 800907e:	ed14 3a05 	vldr	s6, [r4, #-20]	; 0xffffffec
 8009082:	ed50 3a04 	vldr	s7, [r0, #-16]
 8009086:	ed14 4a04 	vldr	s8, [r4, #-16]
 800908a:	ed50 4a03 	vldr	s9, [r0, #-12]
 800908e:	ed14 5a03 	vldr	s10, [r4, #-12]
 8009092:	ed50 5a02 	vldr	s11, [r0, #-8]
 8009096:	ed14 7a02 	vldr	s14, [r4, #-8]
 800909a:	ee67 7aaf 	vmul.f32	s15, s15, s31
 800909e:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 80090a2:	eeef 7a2e 	vfma.f32	s15, s30, s29
 80090a6:	3610      	adds	r6, #16
 80090a8:	42b5      	cmp	r5, r6
 80090aa:	ed14 fa01 	vldr	s30, [r4, #-4]
 80090ae:	ed50 ea01 	vldr	s29, [r0, #-4]
 80090b2:	eeee 7a2f 	vfma.f32	s15, s28, s31
 80090b6:	f104 0440 	add.w	r4, r4, #64	; 0x40
 80090ba:	f100 0040 	add.w	r0, r0, #64	; 0x40
 80090be:	eeed 7a8d 	vfma.f32	s15, s27, s26
 80090c2:	eeec 7a8c 	vfma.f32	s15, s25, s24
 80090c6:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 80090ca:	eeea 7a8a 	vfma.f32	s15, s21, s20
 80090ce:	eee9 7a89 	vfma.f32	s15, s19, s18
 80090d2:	eee8 7a80 	vfma.f32	s15, s17, s0
 80090d6:	eee0 7a81 	vfma.f32	s15, s1, s2
 80090da:	eee1 7a82 	vfma.f32	s15, s3, s4
 80090de:	eee2 7a83 	vfma.f32	s15, s5, s6
 80090e2:	eee3 7a84 	vfma.f32	s15, s7, s8
 80090e6:	eee4 7a85 	vfma.f32	s15, s9, s10
 80090ea:	eee5 7a87 	vfma.f32	s15, s11, s14
 80090ee:	eeef 7a2e 	vfma.f32	s15, s30, s29
 80090f2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80090f6:	dc96      	bgt.n	8009026 <forward_conv2d_nl_pool+0xd0e>
 80090f8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80090fa:	4451      	add	r1, sl
 80090fc:	4452      	add	r2, sl
 80090fe:	4283      	cmp	r3, r0
 8009100:	dd0f      	ble.n	8009122 <forward_conv2d_nl_pool+0xe0a>
 8009102:	4604      	mov	r4, r0
 8009104:	468c      	mov	ip, r1
 8009106:	4616      	mov	r6, r2
 8009108:	ecb6 7a01 	vldmia	r6!, {s14}
 800910c:	ecfc 7a01 	vldmia	ip!, {s15}
 8009110:	3401      	adds	r4, #1
 8009112:	42a3      	cmp	r3, r4
 8009114:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009118:	d1f6      	bne.n	8009108 <forward_conv2d_nl_pool+0xdf0>
 800911a:	1a18      	subs	r0, r3, r0
 800911c:	0080      	lsls	r0, r0, #2
 800911e:	4402      	add	r2, r0
 8009120:	4401      	add	r1, r0
 8009122:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8009124:	4402      	add	r2, r0
 8009126:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 800912a:	f10e 0e01 	add.w	lr, lr, #1
 800912e:	4570      	cmp	r0, lr
 8009130:	4449      	add	r1, r9
 8009132:	f47f af70 	bne.w	8009016 <forward_conv2d_nl_pool+0xcfe>
 8009136:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800913a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800913c:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8009140:	edc3 6a00 	vstr	s13, [r3]
 8009144:	4608      	mov	r0, r1
 8009146:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800914a:	440b      	add	r3, r1
 800914c:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8009150:	67bb      	str	r3, [r7, #120]	; 0x78
 8009152:	4410      	add	r0, r2
 8009154:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009156:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
 800915a:	4608      	mov	r0, r1
 800915c:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8009160:	4418      	add	r0, r3
 8009162:	1acb      	subs	r3, r1, r3
 8009164:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009168:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800916c:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 8009170:	f10b 0b01 	add.w	fp, fp, #1
 8009174:	455b      	cmp	r3, fp
 8009176:	eba8 0802 	sub.w	r8, r8, r2
 800917a:	f47f af14 	bne.w	8008fa6 <forward_conv2d_nl_pool+0xc8e>
 800917e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8009182:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009184:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009188:	440a      	add	r2, r1
 800918a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800918e:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8009192:	3204      	adds	r2, #4
 8009194:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 8009198:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800919c:	3301      	adds	r3, #1
 800919e:	429a      	cmp	r2, r3
 80091a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80091a4:	f47f aed9 	bne.w	8008f5a <forward_conv2d_nl_pool+0xc42>
 80091a8:	e9d7 ab0b 	ldrd	sl, fp, [r7, #44]	; 0x2c
 80091ac:	f7ff bbf2 	b.w	8008994 <forward_conv2d_nl_pool+0x67c>
 80091b0:	2000      	movs	r0, #0
 80091b2:	e64b      	b.n	8008e4c <forward_conv2d_nl_pool+0xb34>
 80091b4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80091b8:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 80091bc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80091c0:	1b19      	subs	r1, r3, r4
 80091c2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80091c6:	eef0 3a48 	vmov.f32	s7, s16
 80091ca:	1b1a      	subs	r2, r3, r4
 80091cc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80091d0:	e5be      	b.n	8008d50 <forward_conv2d_nl_pool+0xa38>
 80091d2:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 80091d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80091d8:	460a      	mov	r2, r1
 80091da:	440b      	add	r3, r1
 80091dc:	e58e      	b.n	8008cfc <forward_conv2d_nl_pool+0x9e4>
 80091de:	2000      	movs	r0, #0
 80091e0:	e78d      	b.n	80090fe <forward_conv2d_nl_pool+0xde6>
 80091e2:	eef0 6a46 	vmov.f32	s13, s12
 80091e6:	e7a6      	b.n	8009136 <forward_conv2d_nl_pool+0xe1e>
 80091e8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80091ec:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80091f0:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 80091f4:	eba8 0303 	sub.w	r3, r8, r3
 80091f8:	e6de      	b.n	8008fb8 <forward_conv2d_nl_pool+0xca0>
 80091fa:	eeb0 6a48 	vmov.f32	s12, s16
 80091fe:	e6b8      	b.n	8008f72 <forward_conv2d_nl_pool+0xc5a>
 8009200:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009204:	f8c7 d070 	str.w	sp, [r7, #112]	; 0x70
 8009208:	320a      	adds	r2, #10
 800920a:	f022 0207 	bic.w	r2, r2, #7
 800920e:	ebad 0d02 	sub.w	sp, sp, r2
 8009212:	aa0a      	add	r2, sp, #40	; 0x28
 8009214:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8009218:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800921c:	2a00      	cmp	r2, #0
 800921e:	f000 814f 	beq.w	80094c0 <forward_conv2d_nl_pool+0x11a8>
 8009222:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009226:	fb02 f303 	mul.w	r3, r2, r3
 800922a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800922c:	663b      	str	r3, [r7, #96]	; 0x60
 800922e:	1a9b      	subs	r3, r3, r2
 8009230:	65bb      	str	r3, [r7, #88]	; 0x58
 8009232:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009236:	4413      	add	r3, r2
 8009238:	633b      	str	r3, [r7, #48]	; 0x30
 800923a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800923e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009242:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009246:	67bb      	str	r3, [r7, #120]	; 0x78
 8009248:	e9c7 ab06 	strd	sl, fp, [r7, #24]
 800924c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009250:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009254:	2300      	movs	r3, #0
 8009256:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800925a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800925e:	b13b      	cbz	r3, 8009270 <forward_conv2d_nl_pool+0xf58>
 8009260:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009264:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8009268:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800926c:	f000 feb2 	bl	8009fd4 <memcpy>
 8009270:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009274:	2b00      	cmp	r3, #0
 8009276:	f000 8135 	beq.w	80094e4 <forward_conv2d_nl_pool+0x11cc>
 800927a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800927c:	ed93 6a00 	vldr	s12, [r3]
 8009280:	3304      	adds	r3, #4
 8009282:	67bb      	str	r3, [r7, #120]	; 0x78
 8009284:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8009288:	2b00      	cmp	r3, #0
 800928a:	f000 8101 	beq.w	8009490 <forward_conv2d_nl_pool+0x1178>
 800928e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009292:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8009296:	eb03 0802 	add.w	r8, r3, r2
 800929a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800929c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80092a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80092a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80092aa:	677b      	str	r3, [r7, #116]	; 0x74
 80092ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80092b4:	f04f 0b00 	mov.w	fp, #0
 80092b8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80092bc:	2b00      	cmp	r3, #0
 80092be:	f2c0 8108 	blt.w	80094d2 <forward_conv2d_nl_pool+0x11ba>
 80092c2:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80092c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80092c8:	2300      	movs	r3, #0
 80092ca:	f8d7 40d8 	ldr.w	r4, [r7, #216]	; 0xd8
 80092ce:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 80092d2:	eb02 0c04 	add.w	ip, r2, r4
 80092d6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80092da:	4540      	cmp	r0, r8
 80092dc:	bf94      	ite	ls
 80092de:	ebc3 0300 	rsbls	r3, r3, r0
 80092e2:	ebc3 0308 	rsbhi	r3, r3, r8
 80092e6:	eba2 0903 	sub.w	r9, r2, r3
 80092ea:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80092ee:	1ac4      	subs	r4, r0, r3
 80092f0:	fb03 f302 	mul.w	r3, r3, r2
 80092f4:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80092f8:	2a00      	cmp	r2, #0
 80092fa:	f340 80e7 	ble.w	80094cc <forward_conv2d_nl_pool+0x11b4>
 80092fe:	f023 050f 	bic.w	r5, r3, #15
 8009302:	f8d7 60e8 	ldr.w	r6, [r7, #232]	; 0xe8
 8009306:	1e68      	subs	r0, r5, #1
 8009308:	0900      	lsrs	r0, r0, #4
 800930a:	3001      	adds	r0, #1
 800930c:	fb06 f204 	mul.w	r2, r6, r4
 8009310:	65fa      	str	r2, [r7, #92]	; 0x5c
 8009312:	0102      	lsls	r2, r0, #4
 8009314:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009316:	fb06 f909 	mul.w	r9, r6, r9
 800931a:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 800931e:	eef0 6a46 	vmov.f32	s13, s12
 8009322:	f04f 0e00 	mov.w	lr, #0
 8009326:	4662      	mov	r2, ip
 8009328:	2d00      	cmp	r5, #0
 800932a:	f340 80cd 	ble.w	80094c8 <forward_conv2d_nl_pool+0x11b0>
 800932e:	f101 0440 	add.w	r4, r1, #64	; 0x40
 8009332:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8009336:	2600      	movs	r6, #0
 8009338:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 800933c:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 8009340:	ed10 fa10 	vldr	s30, [r0, #-64]	; 0xffffffc0
 8009344:	ed54 ea10 	vldr	s29, [r4, #-64]	; 0xffffffc0
 8009348:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 800934c:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 8009350:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 8009354:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 8009358:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 800935c:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 8009360:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 8009364:	ed50 aa0a 	vldr	s21, [r0, #-40]	; 0xffffffd8
 8009368:	ed14 aa0a 	vldr	s20, [r4, #-40]	; 0xffffffd8
 800936c:	ed50 9a09 	vldr	s19, [r0, #-36]	; 0xffffffdc
 8009370:	ed14 9a09 	vldr	s18, [r4, #-36]	; 0xffffffdc
 8009374:	ed54 8a08 	vldr	s17, [r4, #-32]	; 0xffffffe0
 8009378:	ed10 0a08 	vldr	s0, [r0, #-32]	; 0xffffffe0
 800937c:	ed50 0a07 	vldr	s1, [r0, #-28]	; 0xffffffe4
 8009380:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 8009384:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 8009388:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 800938c:	ed50 2a05 	vldr	s5, [r0, #-20]	; 0xffffffec
 8009390:	ed14 3a05 	vldr	s6, [r4, #-20]	; 0xffffffec
 8009394:	ed54 3a04 	vldr	s7, [r4, #-16]
 8009398:	ed10 4a04 	vldr	s8, [r0, #-16]
 800939c:	ed54 4a03 	vldr	s9, [r4, #-12]
 80093a0:	ed10 5a03 	vldr	s10, [r0, #-12]
 80093a4:	ed50 5a02 	vldr	s11, [r0, #-8]
 80093a8:	ed14 7a02 	vldr	s14, [r4, #-8]
 80093ac:	ee67 7aaf 	vmul.f32	s15, s15, s31
 80093b0:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 80093b4:	eeef 7a2e 	vfma.f32	s15, s30, s29
 80093b8:	3610      	adds	r6, #16
 80093ba:	42ae      	cmp	r6, r5
 80093bc:	ed14 fa01 	vldr	s30, [r4, #-4]
 80093c0:	ed50 ea01 	vldr	s29, [r0, #-4]
 80093c4:	eeee 7a2f 	vfma.f32	s15, s28, s31
 80093c8:	f104 0440 	add.w	r4, r4, #64	; 0x40
 80093cc:	f100 0040 	add.w	r0, r0, #64	; 0x40
 80093d0:	eeed 7a8d 	vfma.f32	s15, s27, s26
 80093d4:	eeec 7a8c 	vfma.f32	s15, s25, s24
 80093d8:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 80093dc:	eeea 7a8a 	vfma.f32	s15, s21, s20
 80093e0:	eee9 7a89 	vfma.f32	s15, s19, s18
 80093e4:	eee8 7a80 	vfma.f32	s15, s17, s0
 80093e8:	eee0 7a81 	vfma.f32	s15, s1, s2
 80093ec:	eee1 7a82 	vfma.f32	s15, s3, s4
 80093f0:	eee2 7a83 	vfma.f32	s15, s5, s6
 80093f4:	eee3 7a84 	vfma.f32	s15, s7, s8
 80093f8:	eee4 7a85 	vfma.f32	s15, s9, s10
 80093fc:	eee5 7a87 	vfma.f32	s15, s11, s14
 8009400:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8009404:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009408:	db96      	blt.n	8009338 <forward_conv2d_nl_pool+0x1020>
 800940a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800940c:	4451      	add	r1, sl
 800940e:	4452      	add	r2, sl
 8009410:	4283      	cmp	r3, r0
 8009412:	dd0f      	ble.n	8009434 <forward_conv2d_nl_pool+0x111c>
 8009414:	4604      	mov	r4, r0
 8009416:	468c      	mov	ip, r1
 8009418:	4616      	mov	r6, r2
 800941a:	ecb6 7a01 	vldmia	r6!, {s14}
 800941e:	ecfc 7a01 	vldmia	ip!, {s15}
 8009422:	3401      	adds	r4, #1
 8009424:	42a3      	cmp	r3, r4
 8009426:	eee7 6a27 	vfma.f32	s13, s14, s15
 800942a:	d1f6      	bne.n	800941a <forward_conv2d_nl_pool+0x1102>
 800942c:	1a18      	subs	r0, r3, r0
 800942e:	0080      	lsls	r0, r0, #2
 8009430:	4402      	add	r2, r0
 8009432:	4401      	add	r1, r0
 8009434:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8009436:	4402      	add	r2, r0
 8009438:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 800943c:	f10e 0e01 	add.w	lr, lr, #1
 8009440:	4570      	cmp	r0, lr
 8009442:	4449      	add	r1, r9
 8009444:	f47f af70 	bne.w	8009328 <forward_conv2d_nl_pool+0x1010>
 8009448:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800944c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800944e:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8009452:	edc3 6a00 	vstr	s13, [r3]
 8009456:	4608      	mov	r0, r1
 8009458:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800945c:	440b      	add	r3, r1
 800945e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8009462:	677b      	str	r3, [r7, #116]	; 0x74
 8009464:	4410      	add	r0, r2
 8009466:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009468:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
 800946c:	4608      	mov	r0, r1
 800946e:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8009472:	4418      	add	r0, r3
 8009474:	1acb      	subs	r3, r1, r3
 8009476:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800947a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800947e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 8009482:	f10b 0b01 	add.w	fp, fp, #1
 8009486:	455b      	cmp	r3, fp
 8009488:	eba8 0802 	sub.w	r8, r8, r2
 800948c:	f47f af14 	bne.w	80092b8 <forward_conv2d_nl_pool+0xfa0>
 8009490:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8009494:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8009498:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800949c:	440a      	add	r2, r1
 800949e:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80094a2:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80094a6:	3204      	adds	r2, #4
 80094a8:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 80094ac:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80094b0:	3301      	adds	r3, #1
 80094b2:	429a      	cmp	r2, r3
 80094b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80094b8:	f47f aecf 	bne.w	800925a <forward_conv2d_nl_pool+0xf42>
 80094bc:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80094c0:	f8d7 d070 	ldr.w	sp, [r7, #112]	; 0x70
 80094c4:	f7ff ba66 	b.w	8008994 <forward_conv2d_nl_pool+0x67c>
 80094c8:	2000      	movs	r0, #0
 80094ca:	e7a1      	b.n	8009410 <forward_conv2d_nl_pool+0x10f8>
 80094cc:	eef0 6a46 	vmov.f32	s13, s12
 80094d0:	e7ba      	b.n	8009448 <forward_conv2d_nl_pool+0x1130>
 80094d2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80094d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80094da:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 80094de:	eba8 0303 	sub.w	r3, r8, r3
 80094e2:	e6f2      	b.n	80092ca <forward_conv2d_nl_pool+0xfb2>
 80094e4:	eeb0 6a48 	vmov.f32	s12, s16
 80094e8:	e6cc      	b.n	8009284 <forward_conv2d_nl_pool+0xf6c>
 80094ea:	b16a      	cbz	r2, 8009508 <forward_conv2d_nl_pool+0x11f0>
 80094ec:	6892      	ldr	r2, [r2, #8]
 80094ee:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80094f2:	2201      	movs	r2, #1
 80094f4:	f8c7 40a4 	str.w	r4, [r7, #164]	; 0xa4
 80094f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80094fc:	f7fe bfb2 	b.w	8008464 <forward_conv2d_nl_pool+0x14c>
 8009500:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8009504:	f7fe bf94 	b.w	8008430 <forward_conv2d_nl_pool+0x118>
 8009508:	2201      	movs	r2, #1
 800950a:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 800950e:	f8c7 40a4 	str.w	r4, [r7, #164]	; 0xa4
 8009512:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009516:	f7fe bfa5 	b.w	8008464 <forward_conv2d_nl_pool+0x14c>
 800951a:	3418      	adds	r4, #24
 800951c:	d007      	beq.n	800952e <forward_conv2d_nl_pool+0x1216>
 800951e:	4632      	mov	r2, r6
 8009520:	4635      	mov	r5, r6
 8009522:	4634      	mov	r4, r6
 8009524:	f7fe bf2a 	b.w	800837c <forward_conv2d_nl_pool+0x64>
 8009528:	4691      	mov	r9, r2
 800952a:	f7fe bf14 	b.w	8008356 <forward_conv2d_nl_pool+0x3e>
 800952e:	68e3      	ldr	r3, [r4, #12]
 8009530:	deff      	udf	#255	; 0xff
 8009532:	2300      	movs	r3, #0
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	deff      	udf	#255	; 0xff
 8009538:	4694      	mov	ip, r2
 800953a:	f7fe bf01 	b.w	8008340 <forward_conv2d_nl_pool+0x28>
 800953e:	4613      	mov	r3, r2
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	deff      	udf	#255	; 0xff
 8009544:	2200      	movs	r2, #0
 8009546:	f7fe bf18 	b.w	800837a <forward_conv2d_nl_pool+0x62>
 800954a:	bf00      	nop

0800954c <forward_dense>:
 800954c:	6942      	ldr	r2, [r0, #20]
 800954e:	8813      	ldrh	r3, [r2, #0]
 8009550:	2b00      	cmp	r3, #0
 8009552:	f000 81ca 	beq.w	80098ea <forward_dense+0x39e>
 8009556:	6852      	ldr	r2, [r2, #4]
 8009558:	6850      	ldr	r0, [r2, #4]
 800955a:	b100      	cbz	r0, 800955e <forward_dense+0x12>
 800955c:	6800      	ldr	r0, [r0, #0]
 800955e:	2b01      	cmp	r3, #1
 8009560:	f240 81c0 	bls.w	80098e4 <forward_dense+0x398>
 8009564:	6911      	ldr	r1, [r2, #16]
 8009566:	b101      	cbz	r1, 800956a <forward_dense+0x1e>
 8009568:	6809      	ldr	r1, [r1, #0]
 800956a:	2b02      	cmp	r3, #2
 800956c:	f000 81bf 	beq.w	80098ee <forward_dense+0x3a2>
 8009570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009574:	ed2d 8b10 	vpush	{d8-d15}
 8009578:	69d3      	ldr	r3, [r2, #28]
 800957a:	b091      	sub	sp, #68	; 0x44
 800957c:	2b00      	cmp	r3, #0
 800957e:	f000 820b 	beq.w	8009998 <forward_dense+0x44c>
 8009582:	681c      	ldr	r4, [r3, #0]
 8009584:	9408      	str	r4, [sp, #32]
 8009586:	f112 0418 	adds.w	r4, r2, #24
 800958a:	f000 81df 	beq.w	800994c <forward_dense+0x400>
 800958e:	8b12      	ldrh	r2, [r2, #24]
 8009590:	2a01      	cmp	r2, #1
 8009592:	f240 81fe 	bls.w	8009992 <forward_dense+0x446>
 8009596:	2b00      	cmp	r3, #0
 8009598:	f000 81da 	beq.w	8009950 <forward_dense+0x404>
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	9306      	str	r3, [sp, #24]
 80095a0:	9b08      	ldr	r3, [sp, #32]
 80095a2:	68cc      	ldr	r4, [r1, #12]
 80095a4:	699b      	ldr	r3, [r3, #24]
 80095a6:	68c5      	ldr	r5, [r0, #12]
 80095a8:	681a      	ldr	r2, [r3, #0]
 80095aa:	f8d5 8004 	ldr.w	r8, [r5, #4]
 80095ae:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80095b2:	f3c2 1cc6 	ubfx	ip, r2, #7, #7
 80095b6:	f3c2 5541 	ubfx	r5, r2, #21, #2
 80095ba:	fa4c f505 	asr.w	r5, ip, r5
 80095be:	f3c2 4243 	ubfx	r2, r2, #17, #4
 80095c2:	950b      	str	r5, [sp, #44]	; 0x2c
 80095c4:	2a04      	cmp	r2, #4
 80095c6:	fb07 f506 	mul.w	r5, r7, r6
 80095ca:	6864      	ldr	r4, [r4, #4]
 80095cc:	9507      	str	r5, [sp, #28]
 80095ce:	f000 81dd 	beq.w	800998c <forward_dense+0x440>
 80095d2:	2a08      	cmp	r2, #8
 80095d4:	f000 81da 	beq.w	800998c <forward_dense+0x440>
 80095d8:	f04f 0a00 	mov.w	sl, #0
 80095dc:	698a      	ldr	r2, [r1, #24]
 80095de:	6981      	ldr	r1, [r0, #24]
 80095e0:	6890      	ldr	r0, [r2, #8]
 80095e2:	9a08      	ldr	r2, [sp, #32]
 80095e4:	9004      	str	r0, [sp, #16]
 80095e6:	6952      	ldr	r2, [r2, #20]
 80095e8:	688f      	ldr	r7, [r1, #8]
 80095ea:	f8d2 9004 	ldr.w	r9, [r2, #4]
 80095ee:	00a2      	lsls	r2, r4, #2
 80095f0:	9209      	str	r2, [sp, #36]	; 0x24
 80095f2:	1886      	adds	r6, r0, r2
 80095f4:	9a07      	ldr	r2, [sp, #28]
 80095f6:	2a00      	cmp	r2, #0
 80095f8:	f000 81c3 	beq.w	8009982 <forward_dense+0x436>
 80095fc:	f1a8 0210 	sub.w	r2, r8, #16
 8009600:	0912      	lsrs	r2, r2, #4
 8009602:	3201      	adds	r2, #1
 8009604:	0192      	lsls	r2, r2, #6
 8009606:	920c      	str	r2, [sp, #48]	; 0x30
 8009608:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800960c:	920a      	str	r2, [sp, #40]	; 0x28
 800960e:	689d      	ldr	r5, [r3, #8]
 8009610:	9b06      	ldr	r3, [sp, #24]
 8009612:	eddf aad0 	vldr	s21, [pc, #832]	; 8009954 <forward_dense+0x408>
 8009616:	2200      	movs	r2, #0
 8009618:	9205      	str	r2, [sp, #20]
 800961a:	f008 020f 	and.w	r2, r8, #15
 800961e:	920d      	str	r2, [sp, #52]	; 0x34
 8009620:	2b00      	cmp	r3, #0
 8009622:	d043      	beq.n	80096ac <forward_dense+0x160>
 8009624:	699b      	ldr	r3, [r3, #24]
 8009626:	689c      	ldr	r4, [r3, #8]
 8009628:	9b04      	ldr	r3, [sp, #16]
 800962a:	f1ba 0f00 	cmp.w	sl, #0
 800962e:	d042      	beq.n	80096b6 <forward_dense+0x16a>
 8009630:	42b3      	cmp	r3, r6
 8009632:	d22a      	bcs.n	800968a <forward_dense+0x13e>
 8009634:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009636:	469b      	mov	fp, r3
 8009638:	ab0f      	add	r3, sp, #60	; 0x3c
 800963a:	9303      	str	r3, [sp, #12]
 800963c:	2a04      	cmp	r2, #4
 800963e:	4633      	mov	r3, r6
 8009640:	4646      	mov	r6, r8
 8009642:	4698      	mov	r8, r3
 8009644:	f000 8156 	beq.w	80098f4 <forward_dense+0x3a8>
 8009648:	2c00      	cmp	r4, #0
 800964a:	f000 8185 	beq.w	8009958 <forward_dense+0x40c>
 800964e:	f8d4 c000 	ldr.w	ip, [r4]
 8009652:	9803      	ldr	r0, [sp, #12]
 8009654:	9600      	str	r6, [sp, #0]
 8009656:	463b      	mov	r3, r7
 8009658:	4629      	mov	r1, r5
 800965a:	4652      	mov	r2, sl
 800965c:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8009660:	f7fe fc7e 	bl	8007f60 <ai_dict8_dot_array_f32>
 8009664:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009666:	f84b 3b04 	str.w	r3, [fp], #4
 800966a:	45c3      	cmp	fp, r8
 800966c:	f104 0404 	add.w	r4, r4, #4
 8009670:	444d      	add	r5, r9
 8009672:	d3e9      	bcc.n	8009648 <forward_dense+0xfc>
 8009674:	4643      	mov	r3, r8
 8009676:	46b0      	mov	r8, r6
 8009678:	461e      	mov	r6, r3
 800967a:	9a04      	ldr	r2, [sp, #16]
 800967c:	43d3      	mvns	r3, r2
 800967e:	4433      	add	r3, r6
 8009680:	f023 0303 	bic.w	r3, r3, #3
 8009684:	3304      	adds	r3, #4
 8009686:	18d3      	adds	r3, r2, r3
 8009688:	9304      	str	r3, [sp, #16]
 800968a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800968c:	9b05      	ldr	r3, [sp, #20]
 800968e:	4417      	add	r7, r2
 8009690:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009692:	4416      	add	r6, r2
 8009694:	9a07      	ldr	r2, [sp, #28]
 8009696:	3301      	adds	r3, #1
 8009698:	4293      	cmp	r3, r2
 800969a:	9305      	str	r3, [sp, #20]
 800969c:	f000 8171 	beq.w	8009982 <forward_dense+0x436>
 80096a0:	9b08      	ldr	r3, [sp, #32]
 80096a2:	699b      	ldr	r3, [r3, #24]
 80096a4:	689d      	ldr	r5, [r3, #8]
 80096a6:	9b06      	ldr	r3, [sp, #24]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d1bb      	bne.n	8009624 <forward_dense+0xd8>
 80096ac:	461c      	mov	r4, r3
 80096ae:	9b04      	ldr	r3, [sp, #16]
 80096b0:	f1ba 0f00 	cmp.w	sl, #0
 80096b4:	d1bc      	bne.n	8009630 <forward_dense+0xe4>
 80096b6:	42b3      	cmp	r3, r6
 80096b8:	d2e7      	bcs.n	800968a <forward_dense+0x13e>
 80096ba:	4618      	mov	r0, r3
 80096bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80096be:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 80096c2:	eb07 0c03 	add.w	ip, r7, r3
 80096c6:	469e      	mov	lr, r3
 80096c8:	2c00      	cmp	r4, #0
 80096ca:	f000 80ff 	beq.w	80098cc <forward_dense+0x380>
 80096ce:	f1b8 0f0f 	cmp.w	r8, #15
 80096d2:	edd4 fa00 	vldr	s31, [r4]
 80096d6:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8009954 <forward_dense+0x408>
 80096da:	f104 0404 	add.w	r4, r4, #4
 80096de:	f240 80fd 	bls.w	80098dc <forward_dense+0x390>
 80096e2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80096e6:	f105 0340 	add.w	r3, r5, #64	; 0x40
 80096ea:	4641      	mov	r1, r8
 80096ec:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 80096f0:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 80096f4:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 80096f8:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 80096fc:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 8009700:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 8009704:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 8009708:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 800970c:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 8009710:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 8009714:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 8009718:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 800971c:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 8009720:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 8009724:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 8009728:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 800972c:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 8009730:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 8009734:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 8009738:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 800973c:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 8009740:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 8009744:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 8009748:	ed13 4a04 	vldr	s8, [r3, #-16]
 800974c:	ed52 4a04 	vldr	s9, [r2, #-16]
 8009750:	ed12 5a03 	vldr	s10, [r2, #-12]
 8009754:	ed53 5a03 	vldr	s11, [r3, #-12]
 8009758:	ed12 6a02 	vldr	s12, [r2, #-8]
 800975c:	ed13 7a02 	vldr	s14, [r3, #-8]
 8009760:	ee67 7a8f 	vmul.f32	s15, s15, s30
 8009764:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 8009768:	eeee 7a8e 	vfma.f32	s15, s29, s28
 800976c:	3910      	subs	r1, #16
 800976e:	290f      	cmp	r1, #15
 8009770:	ed53 ea01 	vldr	s29, [r3, #-4]
 8009774:	ed12 ea01 	vldr	s28, [r2, #-4]
 8009778:	eeed 7a8f 	vfma.f32	s15, s27, s30
 800977c:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8009780:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8009784:	eeed 7a2c 	vfma.f32	s15, s26, s25
 8009788:	eeec 7a2b 	vfma.f32	s15, s24, s23
 800978c:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 8009790:	eee9 7a89 	vfma.f32	s15, s19, s18
 8009794:	eee8 7a88 	vfma.f32	s15, s17, s16
 8009798:	eee0 7a20 	vfma.f32	s15, s0, s1
 800979c:	eee1 7a21 	vfma.f32	s15, s2, s3
 80097a0:	eee2 7a22 	vfma.f32	s15, s4, s5
 80097a4:	eee3 7a23 	vfma.f32	s15, s6, s7
 80097a8:	eee4 7a24 	vfma.f32	s15, s8, s9
 80097ac:	eee5 7a25 	vfma.f32	s15, s10, s11
 80097b0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80097b4:	eeee 7a8e 	vfma.f32	s15, s29, s28
 80097b8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80097bc:	d896      	bhi.n	80096ec <forward_dense+0x1a0>
 80097be:	eb05 010e 	add.w	r1, r5, lr
 80097c2:	465b      	mov	r3, fp
 80097c4:	4662      	mov	r2, ip
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d075      	beq.n	80098b6 <forward_dense+0x36a>
 80097ca:	ed91 7a00 	vldr	s14, [r1]
 80097ce:	edd2 7a00 	vldr	s15, [r2]
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80097d8:	d06d      	beq.n	80098b6 <forward_dense+0x36a>
 80097da:	ed91 7a01 	vldr	s14, [r1, #4]
 80097de:	edd2 7a01 	vldr	s15, [r2, #4]
 80097e2:	2b02      	cmp	r3, #2
 80097e4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80097e8:	d065      	beq.n	80098b6 <forward_dense+0x36a>
 80097ea:	ed91 7a02 	vldr	s14, [r1, #8]
 80097ee:	edd2 7a02 	vldr	s15, [r2, #8]
 80097f2:	2b03      	cmp	r3, #3
 80097f4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80097f8:	d05d      	beq.n	80098b6 <forward_dense+0x36a>
 80097fa:	ed91 7a03 	vldr	s14, [r1, #12]
 80097fe:	edd2 7a03 	vldr	s15, [r2, #12]
 8009802:	2b04      	cmp	r3, #4
 8009804:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009808:	d055      	beq.n	80098b6 <forward_dense+0x36a>
 800980a:	ed91 7a04 	vldr	s14, [r1, #16]
 800980e:	edd2 7a04 	vldr	s15, [r2, #16]
 8009812:	2b05      	cmp	r3, #5
 8009814:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009818:	d04d      	beq.n	80098b6 <forward_dense+0x36a>
 800981a:	ed91 7a05 	vldr	s14, [r1, #20]
 800981e:	edd2 7a05 	vldr	s15, [r2, #20]
 8009822:	2b06      	cmp	r3, #6
 8009824:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009828:	d045      	beq.n	80098b6 <forward_dense+0x36a>
 800982a:	ed91 7a06 	vldr	s14, [r1, #24]
 800982e:	edd2 7a06 	vldr	s15, [r2, #24]
 8009832:	2b07      	cmp	r3, #7
 8009834:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009838:	d03d      	beq.n	80098b6 <forward_dense+0x36a>
 800983a:	ed91 7a07 	vldr	s14, [r1, #28]
 800983e:	edd2 7a07 	vldr	s15, [r2, #28]
 8009842:	2b08      	cmp	r3, #8
 8009844:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009848:	d035      	beq.n	80098b6 <forward_dense+0x36a>
 800984a:	ed91 7a08 	vldr	s14, [r1, #32]
 800984e:	edd2 7a08 	vldr	s15, [r2, #32]
 8009852:	2b09      	cmp	r3, #9
 8009854:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009858:	d02d      	beq.n	80098b6 <forward_dense+0x36a>
 800985a:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 800985e:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8009862:	2b0a      	cmp	r3, #10
 8009864:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009868:	d025      	beq.n	80098b6 <forward_dense+0x36a>
 800986a:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 800986e:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8009872:	2b0b      	cmp	r3, #11
 8009874:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009878:	d01d      	beq.n	80098b6 <forward_dense+0x36a>
 800987a:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 800987e:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8009882:	2b0c      	cmp	r3, #12
 8009884:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009888:	d015      	beq.n	80098b6 <forward_dense+0x36a>
 800988a:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 800988e:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8009892:	2b0d      	cmp	r3, #13
 8009894:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009898:	d00d      	beq.n	80098b6 <forward_dense+0x36a>
 800989a:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 800989e:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80098a2:	2b0e      	cmp	r3, #14
 80098a4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80098a8:	d005      	beq.n	80098b6 <forward_dense+0x36a>
 80098aa:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 80098ae:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 80098b2:	eee7 6a27 	vfma.f32	s13, s14, s15
 80098b6:	444d      	add	r5, r9
 80098b8:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 80098bc:	ece0 6a01 	vstmia	r0!, {s13}
 80098c0:	42b0      	cmp	r0, r6
 80098c2:	f4bf aeda 	bcs.w	800967a <forward_dense+0x12e>
 80098c6:	2c00      	cmp	r4, #0
 80098c8:	f47f af01 	bne.w	80096ce <forward_dense+0x182>
 80098cc:	f1b8 0f0f 	cmp.w	r8, #15
 80098d0:	eef0 fa6a 	vmov.f32	s31, s21
 80098d4:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8009954 <forward_dense+0x408>
 80098d8:	f63f af03 	bhi.w	80096e2 <forward_dense+0x196>
 80098dc:	4643      	mov	r3, r8
 80098de:	4629      	mov	r1, r5
 80098e0:	463a      	mov	r2, r7
 80098e2:	e770      	b.n	80097c6 <forward_dense+0x27a>
 80098e4:	2300      	movs	r3, #0
 80098e6:	685b      	ldr	r3, [r3, #4]
 80098e8:	deff      	udf	#255	; 0xff
 80098ea:	685b      	ldr	r3, [r3, #4]
 80098ec:	deff      	udf	#255	; 0xff
 80098ee:	2300      	movs	r3, #0
 80098f0:	685b      	ldr	r3, [r3, #4]
 80098f2:	deff      	udf	#255	; 0xff
 80098f4:	b1ac      	cbz	r4, 8009922 <forward_dense+0x3d6>
 80098f6:	f8d4 c000 	ldr.w	ip, [r4]
 80098fa:	9803      	ldr	r0, [sp, #12]
 80098fc:	9600      	str	r6, [sp, #0]
 80098fe:	463b      	mov	r3, r7
 8009900:	4629      	mov	r1, r5
 8009902:	4652      	mov	r2, sl
 8009904:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8009908:	f7fe fbf8 	bl	80080fc <ai_dict4_dot_array_f32>
 800990c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800990e:	f84b 3b04 	str.w	r3, [fp], #4
 8009912:	45c3      	cmp	fp, r8
 8009914:	f104 0404 	add.w	r4, r4, #4
 8009918:	444d      	add	r5, r9
 800991a:	f4bf aeab 	bcs.w	8009674 <forward_dense+0x128>
 800991e:	2c00      	cmp	r4, #0
 8009920:	d1e9      	bne.n	80098f6 <forward_dense+0x3aa>
 8009922:	4634      	mov	r4, r6
 8009924:	4646      	mov	r6, r8
 8009926:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800992a:	9400      	str	r4, [sp, #0]
 800992c:	463b      	mov	r3, r7
 800992e:	4629      	mov	r1, r5
 8009930:	4652      	mov	r2, sl
 8009932:	4640      	mov	r0, r8
 8009934:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8009938:	f7fe fbe0 	bl	80080fc <ai_dict4_dot_array_f32>
 800993c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800993e:	f84b 3b04 	str.w	r3, [fp], #4
 8009942:	45b3      	cmp	fp, r6
 8009944:	444d      	add	r5, r9
 8009946:	d3f0      	bcc.n	800992a <forward_dense+0x3de>
 8009948:	46a0      	mov	r8, r4
 800994a:	e696      	b.n	800967a <forward_dense+0x12e>
 800994c:	9406      	str	r4, [sp, #24]
 800994e:	e627      	b.n	80095a0 <forward_dense+0x54>
 8009950:	9306      	str	r3, [sp, #24]
 8009952:	e625      	b.n	80095a0 <forward_dense+0x54>
 8009954:	00000000 	.word	0x00000000
 8009958:	4634      	mov	r4, r6
 800995a:	4646      	mov	r6, r8
 800995c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009960:	9400      	str	r4, [sp, #0]
 8009962:	463b      	mov	r3, r7
 8009964:	4629      	mov	r1, r5
 8009966:	4652      	mov	r2, sl
 8009968:	4640      	mov	r0, r8
 800996a:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 800996e:	f7fe faf7 	bl	8007f60 <ai_dict8_dot_array_f32>
 8009972:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009974:	f84b 3b04 	str.w	r3, [fp], #4
 8009978:	45b3      	cmp	fp, r6
 800997a:	444d      	add	r5, r9
 800997c:	d3f0      	bcc.n	8009960 <forward_dense+0x414>
 800997e:	46a0      	mov	r8, r4
 8009980:	e67b      	b.n	800967a <forward_dense+0x12e>
 8009982:	b011      	add	sp, #68	; 0x44
 8009984:	ecbd 8b10 	vpop	{d8-d15}
 8009988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800998c:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 8009990:	e624      	b.n	80095dc <forward_dense+0x90>
 8009992:	2300      	movs	r3, #0
 8009994:	9306      	str	r3, [sp, #24]
 8009996:	e603      	b.n	80095a0 <forward_dense+0x54>
 8009998:	9308      	str	r3, [sp, #32]
 800999a:	e5f4      	b.n	8009586 <forward_dense+0x3a>

0800999c <nl_func_relu_array_f32>:
 800999c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80099a0:	3a01      	subs	r2, #1
 80099a2:	688b      	ldr	r3, [r1, #8]
 80099a4:	6880      	ldr	r0, [r0, #8]
 80099a6:	0092      	lsls	r2, r2, #2
 80099a8:	189b      	adds	r3, r3, r2
 80099aa:	d21a      	bcs.n	80099e2 <nl_func_relu_array_f32+0x46>
 80099ac:	b410      	push	{r4}
 80099ae:	3204      	adds	r2, #4
 80099b0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80099e4 <nl_func_relu_array_f32+0x48>
 80099b4:	4410      	add	r0, r2
 80099b6:	3304      	adds	r3, #4
 80099b8:	ed53 7a01 	vldr	s15, [r3, #-4]
 80099bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80099c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099c4:	bfb8      	it	lt
 80099c6:	eef0 7a47 	vmovlt.f32	s15, s14
 80099ca:	ed60 7a01 	vstmdb	r0!, {s15}
 80099ce:	688c      	ldr	r4, [r1, #8]
 80099d0:	f1a3 0208 	sub.w	r2, r3, #8
 80099d4:	4294      	cmp	r4, r2
 80099d6:	f1a3 0304 	sub.w	r3, r3, #4
 80099da:	d9ed      	bls.n	80099b8 <nl_func_relu_array_f32+0x1c>
 80099dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099e0:	4770      	bx	lr
 80099e2:	4770      	bx	lr
 80099e4:	00000000 	.word	0x00000000

080099e8 <forward_sm>:
 80099e8:	6942      	ldr	r2, [r0, #20]
 80099ea:	8813      	ldrh	r3, [r2, #0]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	f000 808a 	beq.w	8009b06 <forward_sm+0x11e>
 80099f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099f6:	ed2d 8b04 	vpush	{d8-d9}
 80099fa:	6852      	ldr	r2, [r2, #4]
 80099fc:	6855      	ldr	r5, [r2, #4]
 80099fe:	b085      	sub	sp, #20
 8009a00:	b105      	cbz	r5, 8009a04 <forward_sm+0x1c>
 8009a02:	682d      	ldr	r5, [r5, #0]
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	d976      	bls.n	8009af6 <forward_sm+0x10e>
 8009a08:	6913      	ldr	r3, [r2, #16]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d071      	beq.n	8009af2 <forward_sm+0x10a>
 8009a0e:	681f      	ldr	r7, [r3, #0]
 8009a10:	68ec      	ldr	r4, [r5, #12]
 8009a12:	68fa      	ldr	r2, [r7, #12]
 8009a14:	68ab      	ldr	r3, [r5, #8]
 8009a16:	6850      	ldr	r0, [r2, #4]
 8009a18:	6862      	ldr	r2, [r4, #4]
 8009a1a:	9201      	str	r2, [sp, #4]
 8009a1c:	0a1b      	lsrs	r3, r3, #8
 8009a1e:	d074      	beq.n	8009b0a <forward_sm+0x122>
 8009a20:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009a24:	2201      	movs	r2, #1
 8009a26:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009a2a:	429c      	cmp	r4, r3
 8009a2c:	fb01 f202 	mul.w	r2, r1, r2
 8009a30:	d1f9      	bne.n	8009a26 <forward_sm+0x3e>
 8009a32:	69ae      	ldr	r6, [r5, #24]
 8009a34:	f8d7 9018 	ldr.w	r9, [r7, #24]
 8009a38:	9f01      	ldr	r7, [sp, #4]
 8009a3a:	68b5      	ldr	r5, [r6, #8]
 8009a3c:	68f3      	ldr	r3, [r6, #12]
 8009a3e:	f8d9 4008 	ldr.w	r4, [r9, #8]
 8009a42:	1bd1      	subs	r1, r2, r7
 8009a44:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 8009a48:	1a12      	subs	r2, r2, r0
 8009a4a:	429d      	cmp	r5, r3
 8009a4c:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8009a50:	d345      	bcc.n	8009ade <forward_sm+0xf6>
 8009a52:	00bb      	lsls	r3, r7, #2
 8009a54:	ea4f 0880 	mov.w	r8, r0, lsl #2
 8009a58:	9300      	str	r3, [sp, #0]
 8009a5a:	f1c8 0200 	rsb	r2, r8, #0
 8009a5e:	425b      	negs	r3, r3
 8009a60:	9203      	str	r2, [sp, #12]
 8009a62:	9302      	str	r3, [sp, #8]
 8009a64:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8009a68:	60b5      	str	r5, [r6, #8]
 8009a6a:	9b01      	ldr	r3, [sp, #4]
 8009a6c:	f8c9 4008 	str.w	r4, [r9, #8]
 8009a70:	68b2      	ldr	r2, [r6, #8]
 8009a72:	2b01      	cmp	r3, #1
 8009a74:	ed92 8a00 	vldr	s16, [r2]
 8009a78:	d940      	bls.n	8009afc <forward_sm+0x114>
 8009a7a:	9900      	ldr	r1, [sp, #0]
 8009a7c:	1d13      	adds	r3, r2, #4
 8009a7e:	1857      	adds	r7, r2, r1
 8009a80:	ecf3 7a01 	vldmia	r3!, {s15}
 8009a84:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8009a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a8c:	bfb8      	it	lt
 8009a8e:	eeb0 8a67 	vmovlt.f32	s16, s15
 8009a92:	429f      	cmp	r7, r3
 8009a94:	d1f4      	bne.n	8009a80 <forward_sm+0x98>
 8009a96:	eddf 8a1e 	vldr	s17, [pc, #120]	; 8009b10 <forward_sm+0x128>
 8009a9a:	4692      	mov	sl, r2
 8009a9c:	46a3      	mov	fp, r4
 8009a9e:	46a0      	mov	r8, r4
 8009aa0:	ecba 0a01 	vldmia	sl!, {s0}
 8009aa4:	ee30 0a48 	vsub.f32	s0, s0, s16
 8009aa8:	f002 fe22 	bl	800c6f0 <expf>
 8009aac:	4557      	cmp	r7, sl
 8009aae:	eca8 0a01 	vstmia	r8!, {s0}
 8009ab2:	ee78 8a80 	vadd.f32	s17, s17, s0
 8009ab6:	d1f3      	bne.n	8009aa0 <forward_sm+0xb8>
 8009ab8:	ee89 7a28 	vdiv.f32	s14, s18, s17
 8009abc:	9b00      	ldr	r3, [sp, #0]
 8009abe:	18e2      	adds	r2, r4, r3
 8009ac0:	eddb 7a00 	vldr	s15, [fp]
 8009ac4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ac8:	eceb 7a01 	vstmia	fp!, {s15}
 8009acc:	455a      	cmp	r2, fp
 8009ace:	d1f7      	bne.n	8009ac0 <forward_sm+0xd8>
 8009ad0:	9a02      	ldr	r2, [sp, #8]
 8009ad2:	68f3      	ldr	r3, [r6, #12]
 8009ad4:	4415      	add	r5, r2
 8009ad6:	9a03      	ldr	r2, [sp, #12]
 8009ad8:	429d      	cmp	r5, r3
 8009ada:	4414      	add	r4, r2
 8009adc:	d2c4      	bcs.n	8009a68 <forward_sm+0x80>
 8009ade:	60b3      	str	r3, [r6, #8]
 8009ae0:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8009ae4:	f8c9 3008 	str.w	r3, [r9, #8]
 8009ae8:	b005      	add	sp, #20
 8009aea:	ecbd 8b04 	vpop	{d8-d9}
 8009aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009af2:	68db      	ldr	r3, [r3, #12]
 8009af4:	deff      	udf	#255	; 0xff
 8009af6:	2300      	movs	r3, #0
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	deff      	udf	#255	; 0xff
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d0e7      	beq.n	8009ad0 <forward_sm+0xe8>
 8009b00:	9b00      	ldr	r3, [sp, #0]
 8009b02:	18d7      	adds	r7, r2, r3
 8009b04:	e7c7      	b.n	8009a96 <forward_sm+0xae>
 8009b06:	685b      	ldr	r3, [r3, #4]
 8009b08:	deff      	udf	#255	; 0xff
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	e791      	b.n	8009a32 <forward_sm+0x4a>
 8009b0e:	bf00      	nop
 8009b10:	00000000 	.word	0x00000000

08009b14 <pool_func_mp_array_f32>:
 8009b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b18:	b093      	sub	sp, #76	; 0x4c
 8009b1a:	f8d0 b008 	ldr.w	fp, [r0, #8]
 8009b1e:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8009b20:	f8bd 407c 	ldrh.w	r4, [sp, #124]	; 0x7c
 8009b24:	68a8      	ldr	r0, [r5, #8]
 8009b26:	f8bd 5080 	ldrh.w	r5, [sp, #128]	; 0x80
 8009b2a:	9508      	str	r5, [sp, #32]
 8009b2c:	f8bd 5084 	ldrh.w	r5, [sp, #132]	; 0x84
 8009b30:	9002      	str	r0, [sp, #8]
 8009b32:	950d      	str	r5, [sp, #52]	; 0x34
 8009b34:	f8bd 0070 	ldrh.w	r0, [sp, #112]	; 0x70
 8009b38:	f8bd 5088 	ldrh.w	r5, [sp, #136]	; 0x88
 8009b3c:	9004      	str	r0, [sp, #16]
 8009b3e:	9506      	str	r5, [sp, #24]
 8009b40:	f8bd 0074 	ldrh.w	r0, [sp, #116]	; 0x74
 8009b44:	f8bd 508c 	ldrh.w	r5, [sp, #140]	; 0x8c
 8009b48:	9009      	str	r0, [sp, #36]	; 0x24
 8009b4a:	950b      	str	r5, [sp, #44]	; 0x2c
 8009b4c:	f8bd 0078 	ldrh.w	r0, [sp, #120]	; 0x78
 8009b50:	9200      	str	r2, [sp, #0]
 8009b52:	468a      	mov	sl, r1
 8009b54:	4699      	mov	r9, r3
 8009b56:	b95c      	cbnz	r4, 8009b70 <pool_func_mp_array_f32+0x5c>
 8009b58:	b950      	cbnz	r0, 8009b70 <pool_func_mp_array_f32+0x5c>
 8009b5a:	9b04      	ldr	r3, [sp, #16]
 8009b5c:	1a5a      	subs	r2, r3, r1
 8009b5e:	9b06      	ldr	r3, [sp, #24]
 8009b60:	9908      	ldr	r1, [sp, #32]
 8009b62:	3a01      	subs	r2, #1
 8009b64:	3b01      	subs	r3, #1
 8009b66:	fb13 2301 	smlabb	r3, r3, r1, r2
 8009b6a:	041a      	lsls	r2, r3, #16
 8009b6c:	f100 809b 	bmi.w	8009ca6 <pool_func_mp_array_f32+0x192>
 8009b70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	f000 808b 	beq.w	8009c8e <pool_func_mp_array_f32+0x17a>
 8009b78:	9b06      	ldr	r3, [sp, #24]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	f000 8087 	beq.w	8009c8e <pool_func_mp_array_f32+0x17a>
 8009b80:	f1b9 0f00 	cmp.w	r9, #0
 8009b84:	f000 8083 	beq.w	8009c8e <pool_func_mp_array_f32+0x17a>
 8009b88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b8a:	1b1c      	subs	r4, r3, r4
 8009b8c:	9b04      	ldr	r3, [sp, #16]
 8009b8e:	1a1b      	subs	r3, r3, r0
 8009b90:	b29b      	uxth	r3, r3
 8009b92:	4240      	negs	r0, r0
 8009b94:	2200      	movs	r2, #0
 8009b96:	b2a1      	uxth	r1, r4
 8009b98:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b9a:	b283      	uxth	r3, r0
 8009b9c:	920e      	str	r2, [sp, #56]	; 0x38
 8009b9e:	910c      	str	r1, [sp, #48]	; 0x30
 8009ba0:	9310      	str	r3, [sp, #64]	; 0x40
 8009ba2:	9c06      	ldr	r4, [sp, #24]
 8009ba4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ba8:	fb02 f204 	mul.w	r2, r2, r4
 8009bac:	1acb      	subs	r3, r1, r3
 8009bae:	920a      	str	r2, [sp, #40]	; 0x28
 8009bb0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009bb2:	9205      	str	r2, [sp, #20]
 8009bb4:	2000      	movs	r0, #0
 8009bb6:	b21b      	sxth	r3, r3
 8009bb8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009bba:	9303      	str	r3, [sp, #12]
 8009bbc:	9007      	str	r0, [sp, #28]
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	fa0f f881 	sxth.w	r8, r1
 8009bc4:	9204      	str	r2, [sp, #16]
 8009bc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009bc8:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 8009bcc:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 8009bd0:	4413      	add	r3, r2
 8009bd2:	f04f 0e00 	mov.w	lr, #0
 8009bd6:	fb09 f303 	mul.w	r3, r9, r3
 8009bda:	9301      	str	r3, [sp, #4]
 8009bdc:	ea04 77e4 	and.w	r7, r4, r4, asr #31
 8009be0:	4675      	mov	r5, lr
 8009be2:	9903      	ldr	r1, [sp, #12]
 8009be4:	eddf 7a78 	vldr	s15, [pc, #480]	; 8009dc8 <pool_func_mp_array_f32+0x2b4>
 8009be8:	4588      	cmp	r8, r1
 8009bea:	dd24      	ble.n	8009c36 <pool_func_mp_array_f32+0x122>
 8009bec:	4564      	cmp	r4, ip
 8009bee:	dd1e      	ble.n	8009c2e <pool_func_mp_array_f32+0x11a>
 8009bf0:	2900      	cmp	r1, #0
 8009bf2:	fb0a f601 	mul.w	r6, sl, r1
 8009bf6:	db1a      	blt.n	8009c2e <pool_func_mp_array_f32+0x11a>
 8009bf8:	9b00      	ldr	r3, [sp, #0]
 8009bfa:	4299      	cmp	r1, r3
 8009bfc:	da17      	bge.n	8009c2e <pool_func_mp_array_f32+0x11a>
 8009bfe:	f1bc 0f00 	cmp.w	ip, #0
 8009c02:	4663      	mov	r3, ip
 8009c04:	db46      	blt.n	8009c94 <pool_func_mp_array_f32+0x180>
 8009c06:	18f2      	adds	r2, r6, r3
 8009c08:	fb09 5202 	mla	r2, r9, r2, r5
 8009c0c:	1c58      	adds	r0, r3, #1
 8009c0e:	459a      	cmp	sl, r3
 8009c10:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 8009c14:	b203      	sxth	r3, r0
 8009c16:	dd08      	ble.n	8009c2a <pool_func_mp_array_f32+0x116>
 8009c18:	ed92 7a00 	vldr	s14, [r2]
 8009c1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c24:	bfb8      	it	lt
 8009c26:	eef0 7a47 	vmovlt.f32	s15, s14
 8009c2a:	429c      	cmp	r4, r3
 8009c2c:	dceb      	bgt.n	8009c06 <pool_func_mp_array_f32+0xf2>
 8009c2e:	3101      	adds	r1, #1
 8009c30:	b209      	sxth	r1, r1
 8009c32:	4588      	cmp	r8, r1
 8009c34:	dcda      	bgt.n	8009bec <pool_func_mp_array_f32+0xd8>
 8009c36:	9b01      	ldr	r3, [sp, #4]
 8009c38:	f10e 0e01 	add.w	lr, lr, #1
 8009c3c:	441d      	add	r5, r3
 8009c3e:	9b02      	ldr	r3, [sp, #8]
 8009c40:	fa0f fe8e 	sxth.w	lr, lr
 8009c44:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8009c48:	45ce      	cmp	lr, r9
 8009c4a:	edc5 7a00 	vstr	s15, [r5]
 8009c4e:	4675      	mov	r5, lr
 8009c50:	dbc7      	blt.n	8009be2 <pool_func_mp_array_f32+0xce>
 8009c52:	9b07      	ldr	r3, [sp, #28]
 8009c54:	9808      	ldr	r0, [sp, #32]
 8009c56:	3301      	adds	r3, #1
 8009c58:	b219      	sxth	r1, r3
 8009c5a:	9b05      	ldr	r3, [sp, #20]
 8009c5c:	9107      	str	r1, [sp, #28]
 8009c5e:	461a      	mov	r2, r3
 8009c60:	4402      	add	r2, r0
 8009c62:	9b04      	ldr	r3, [sp, #16]
 8009c64:	b292      	uxth	r2, r2
 8009c66:	9205      	str	r2, [sp, #20]
 8009c68:	9a06      	ldr	r2, [sp, #24]
 8009c6a:	4403      	add	r3, r0
 8009c6c:	b29b      	uxth	r3, r3
 8009c6e:	428a      	cmp	r2, r1
 8009c70:	9304      	str	r3, [sp, #16]
 8009c72:	460b      	mov	r3, r1
 8009c74:	dca7      	bgt.n	8009bc6 <pool_func_mp_array_f32+0xb2>
 8009c76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c78:	3301      	adds	r3, #1
 8009c7a:	b21a      	sxth	r2, r3
 8009c7c:	e9dd 310c 	ldrd	r3, r1, [sp, #48]	; 0x30
 8009c80:	440b      	add	r3, r1
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	930c      	str	r3, [sp, #48]	; 0x30
 8009c86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c88:	920e      	str	r2, [sp, #56]	; 0x38
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	dc89      	bgt.n	8009ba2 <pool_func_mp_array_f32+0x8e>
 8009c8e:	b013      	add	sp, #76	; 0x4c
 8009c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c94:	3301      	adds	r3, #1
 8009c96:	b21b      	sxth	r3, r3
 8009c98:	42bb      	cmp	r3, r7
 8009c9a:	dac6      	bge.n	8009c2a <pool_func_mp_array_f32+0x116>
 8009c9c:	3301      	adds	r3, #1
 8009c9e:	b21b      	sxth	r3, r3
 8009ca0:	42bb      	cmp	r3, r7
 8009ca2:	dbf7      	blt.n	8009c94 <pool_func_mp_array_f32+0x180>
 8009ca4:	e7c1      	b.n	8009c2a <pool_func_mp_array_f32+0x116>
 8009ca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ca8:	9a00      	ldr	r2, [sp, #0]
 8009caa:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009cac:	1a9a      	subs	r2, r3, r2
 8009cae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cb0:	3a01      	subs	r2, #1
 8009cb2:	3b01      	subs	r3, #1
 8009cb4:	fb13 2301 	smlabb	r3, r3, r1, r2
 8009cb8:	041b      	lsls	r3, r3, #16
 8009cba:	f57f af59 	bpl.w	8009b70 <pool_func_mp_array_f32+0x5c>
 8009cbe:	fb0a f309 	mul.w	r3, sl, r9
 8009cc2:	009b      	lsls	r3, r3, #2
 8009cc4:	e9cd ba0f 	strd	fp, sl, [sp, #60]	; 0x3c
 8009cc8:	930e      	str	r3, [sp, #56]	; 0x38
 8009cca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ccc:	9001      	str	r0, [sp, #4]
 8009cce:	ea4f 0c89 	mov.w	ip, r9, lsl #2
 8009cd2:	9300      	str	r3, [sp, #0]
 8009cd4:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8009cd8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009cda:	429a      	cmp	r2, r3
 8009cdc:	ddd7      	ble.n	8009c8e <pool_func_mp_array_f32+0x17a>
 8009cde:	9a00      	ldr	r2, [sp, #0]
 8009ce0:	9906      	ldr	r1, [sp, #24]
 8009ce2:	fa0f f882 	sxth.w	r8, r2
 8009ce6:	2900      	cmp	r1, #0
 8009ce8:	d062      	beq.n	8009db0 <pool_func_mp_array_f32+0x29c>
 8009cea:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009cec:	fb01 f303 	mul.w	r3, r1, r3
 8009cf0:	1a12      	subs	r2, r2, r0
 8009cf2:	9305      	str	r3, [sp, #20]
 8009cf4:	b213      	sxth	r3, r2
 8009cf6:	9307      	str	r3, [sp, #28]
 8009cf8:	f1b9 0f00 	cmp.w	r9, #0
 8009cfc:	d058      	beq.n	8009db0 <pool_func_mp_array_f32+0x29c>
 8009cfe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009d00:	fb02 f303 	mul.w	r3, r2, r3
 8009d04:	2600      	movs	r6, #0
 8009d06:	930c      	str	r3, [sp, #48]	; 0x30
 8009d08:	9b04      	ldr	r3, [sp, #16]
 8009d0a:	9303      	str	r3, [sp, #12]
 8009d0c:	4637      	mov	r7, r6
 8009d0e:	46b2      	mov	sl, r6
 8009d10:	9b05      	ldr	r3, [sp, #20]
 8009d12:	9611      	str	r6, [sp, #68]	; 0x44
 8009d14:	eb0a 0b03 	add.w	fp, sl, r3
 8009d18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d1a:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 8009d1e:	b235      	sxth	r5, r6
 8009d20:	18eb      	adds	r3, r5, r3
 8009d22:	f04f 0a00 	mov.w	sl, #0
 8009d26:	fb09 f303 	mul.w	r3, r9, r3
 8009d2a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009d2c:	930a      	str	r3, [sp, #40]	; 0x28
 8009d2e:	fb09 fb0b 	mul.w	fp, r9, fp
 8009d32:	46d6      	mov	lr, sl
 8009d34:	9807      	ldr	r0, [sp, #28]
 8009d36:	4580      	cmp	r8, r0
 8009d38:	dd43      	ble.n	8009dc2 <pool_func_mp_array_f32+0x2ae>
 8009d3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d3c:	eddf 7a22 	vldr	s15, [pc, #136]	; 8009dc8 <pool_func_mp_array_f32+0x2b4>
 8009d40:	eb0e 0403 	add.w	r4, lr, r3
 8009d44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d46:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009d4a:	42a9      	cmp	r1, r5
 8009d4c:	dd0f      	ble.n	8009d6e <pool_func_mp_array_f32+0x25a>
 8009d4e:	4622      	mov	r2, r4
 8009d50:	462b      	mov	r3, r5
 8009d52:	ed92 7a00 	vldr	s14, [r2]
 8009d56:	3301      	adds	r3, #1
 8009d58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d60:	b21b      	sxth	r3, r3
 8009d62:	bfb8      	it	lt
 8009d64:	eef0 7a47 	vmovlt.f32	s15, s14
 8009d68:	4299      	cmp	r1, r3
 8009d6a:	4462      	add	r2, ip
 8009d6c:	d1f1      	bne.n	8009d52 <pool_func_mp_array_f32+0x23e>
 8009d6e:	3001      	adds	r0, #1
 8009d70:	b200      	sxth	r0, r0
 8009d72:	4580      	cmp	r8, r0
 8009d74:	4434      	add	r4, r6
 8009d76:	d1e8      	bne.n	8009d4a <pool_func_mp_array_f32+0x236>
 8009d78:	f10a 0a01 	add.w	sl, sl, #1
 8009d7c:	9a02      	ldr	r2, [sp, #8]
 8009d7e:	eb0b 030e 	add.w	r3, fp, lr
 8009d82:	fa0f fa8a 	sxth.w	sl, sl
 8009d86:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009d8a:	45ca      	cmp	sl, r9
 8009d8c:	edc3 7a00 	vstr	s15, [r3]
 8009d90:	46d6      	mov	lr, sl
 8009d92:	dbcf      	blt.n	8009d34 <pool_func_mp_array_f32+0x220>
 8009d94:	9b03      	ldr	r3, [sp, #12]
 8009d96:	9a08      	ldr	r2, [sp, #32]
 8009d98:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8009d9a:	4413      	add	r3, r2
 8009d9c:	b29b      	uxth	r3, r3
 8009d9e:	3701      	adds	r7, #1
 8009da0:	9303      	str	r3, [sp, #12]
 8009da2:	9b06      	ldr	r3, [sp, #24]
 8009da4:	b23f      	sxth	r7, r7
 8009da6:	4416      	add	r6, r2
 8009da8:	42bb      	cmp	r3, r7
 8009daa:	b2b6      	uxth	r6, r6
 8009dac:	46ba      	mov	sl, r7
 8009dae:	dcaf      	bgt.n	8009d10 <pool_func_mp_array_f32+0x1fc>
 8009db0:	9b00      	ldr	r3, [sp, #0]
 8009db2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009db4:	4413      	add	r3, r2
 8009db6:	b29b      	uxth	r3, r3
 8009db8:	9300      	str	r3, [sp, #0]
 8009dba:	9b01      	ldr	r3, [sp, #4]
 8009dbc:	3301      	adds	r3, #1
 8009dbe:	9301      	str	r3, [sp, #4]
 8009dc0:	e788      	b.n	8009cd4 <pool_func_mp_array_f32+0x1c0>
 8009dc2:	eddf 7a01 	vldr	s15, [pc, #4]	; 8009dc8 <pool_func_mp_array_f32+0x2b4>
 8009dc6:	e7d7      	b.n	8009d78 <pool_func_mp_array_f32+0x264>
 8009dc8:	cf000000 	.word	0xcf000000

08009dcc <ai_check_custom_types>:
 8009dcc:	4b13      	ldr	r3, [pc, #76]	; (8009e1c <ai_check_custom_types+0x50>)
 8009dce:	b082      	sub	sp, #8
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	9301      	str	r3, [sp, #4]
 8009dd4:	b118      	cbz	r0, 8009dde <ai_check_custom_types+0x12>
 8009dd6:	7803      	ldrb	r3, [r0, #0]
 8009dd8:	2b03      	cmp	r3, #3
 8009dda:	d002      	beq.n	8009de2 <ai_check_custom_types+0x16>
 8009ddc:	2000      	movs	r0, #0
 8009dde:	b002      	add	sp, #8
 8009de0:	4770      	bx	lr
 8009de2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d004      	beq.n	8009df4 <ai_check_custom_types+0x28>
 8009dea:	2001      	movs	r0, #1
 8009dec:	f080 0001 	eor.w	r0, r0, #1
 8009df0:	b002      	add	sp, #8
 8009df2:	4770      	bx	lr
 8009df4:	7842      	ldrb	r2, [r0, #1]
 8009df6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009dfa:	429a      	cmp	r2, r3
 8009dfc:	f100 0001 	add.w	r0, r0, #1
 8009e00:	d1f3      	bne.n	8009dea <ai_check_custom_types+0x1e>
 8009e02:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8009e06:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d1ed      	bne.n	8009dea <ai_check_custom_types+0x1e>
 8009e0e:	7842      	ldrb	r2, [r0, #1]
 8009e10:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009e14:	429a      	cmp	r2, r3
 8009e16:	d1e8      	bne.n	8009dea <ai_check_custom_types+0x1e>
 8009e18:	2000      	movs	r0, #0
 8009e1a:	e7e7      	b.n	8009dec <ai_check_custom_types+0x20>
 8009e1c:	0800cab0 	.word	0x0800cab0

08009e20 <ai_layers_forward_all>:
 8009e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e22:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8009e24:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8009e26:	4604      	mov	r4, r0
 8009e28:	b31e      	cbz	r6, 8009e72 <ai_layers_forward_all+0x52>
 8009e2a:	b1cd      	cbz	r5, 8009e60 <ai_layers_forward_all+0x40>
 8009e2c:	6545      	str	r5, [r0, #84]	; 0x54
 8009e2e:	4629      	mov	r1, r5
 8009e30:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8009e32:	2001      	movs	r0, #1
 8009e34:	47b0      	blx	r6
 8009e36:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8009e38:	2700      	movs	r7, #0
 8009e3a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8009e3c:	2002      	movs	r0, #2
 8009e3e:	47b0      	blx	r6
 8009e40:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8009e42:	692b      	ldr	r3, [r5, #16]
 8009e44:	4628      	mov	r0, r5
 8009e46:	4798      	blx	r3
 8009e48:	68eb      	ldr	r3, [r5, #12]
 8009e4a:	429d      	cmp	r5, r3
 8009e4c:	f04f 0003 	mov.w	r0, #3
 8009e50:	4619      	mov	r1, r3
 8009e52:	d006      	beq.n	8009e62 <ai_layers_forward_all+0x42>
 8009e54:	6563      	str	r3, [r4, #84]	; 0x54
 8009e56:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8009e58:	47b0      	blx	r6
 8009e5a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8009e5c:	2900      	cmp	r1, #0
 8009e5e:	d1ec      	bne.n	8009e3a <ai_layers_forward_all+0x1a>
 8009e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e62:	2100      	movs	r1, #0
 8009e64:	6567      	str	r7, [r4, #84]	; 0x54
 8009e66:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8009e68:	47b0      	blx	r6
 8009e6a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8009e6c:	2900      	cmp	r1, #0
 8009e6e:	d1e4      	bne.n	8009e3a <ai_layers_forward_all+0x1a>
 8009e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e72:	2d00      	cmp	r5, #0
 8009e74:	d0f4      	beq.n	8009e60 <ai_layers_forward_all+0x40>
 8009e76:	6545      	str	r5, [r0, #84]	; 0x54
 8009e78:	692b      	ldr	r3, [r5, #16]
 8009e7a:	4628      	mov	r0, r5
 8009e7c:	4798      	blx	r3
 8009e7e:	68eb      	ldr	r3, [r5, #12]
 8009e80:	42ab      	cmp	r3, r5
 8009e82:	d004      	beq.n	8009e8e <ai_layers_forward_all+0x6e>
 8009e84:	6563      	str	r3, [r4, #84]	; 0x54
 8009e86:	461d      	mov	r5, r3
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d1f5      	bne.n	8009e78 <ai_layers_forward_all+0x58>
 8009e8c:	e7e8      	b.n	8009e60 <ai_layers_forward_all+0x40>
 8009e8e:	2300      	movs	r3, #0
 8009e90:	6563      	str	r3, [r4, #84]	; 0x54
 8009e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009e94 <ai_array_to_buffer_fmt>:
 8009e94:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8009e98:	2b02      	cmp	r3, #2
 8009e9a:	d01f      	beq.n	8009edc <ai_array_to_buffer_fmt+0x48>
 8009e9c:	4a1c      	ldr	r2, [pc, #112]	; (8009f10 <ai_array_to_buffer_fmt+0x7c>)
 8009e9e:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d00a      	beq.n	8009ebc <ai_array_to_buffer_fmt+0x28>
 8009ea6:	dc0d      	bgt.n	8009ec4 <ai_array_to_buffer_fmt+0x30>
 8009ea8:	4a1a      	ldr	r2, [pc, #104]	; (8009f14 <ai_array_to_buffer_fmt+0x80>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d006      	beq.n	8009ebc <ai_array_to_buffer_fmt+0x28>
 8009eae:	dd1d      	ble.n	8009eec <ai_array_to_buffer_fmt+0x58>
 8009eb0:	4a19      	ldr	r2, [pc, #100]	; (8009f18 <ai_array_to_buffer_fmt+0x84>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d002      	beq.n	8009ebc <ai_array_to_buffer_fmt+0x28>
 8009eb6:	320f      	adds	r2, #15
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d10d      	bne.n	8009ed8 <ai_array_to_buffer_fmt+0x44>
 8009ebc:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8009ec0:	4318      	orrs	r0, r3
 8009ec2:	4770      	bx	lr
 8009ec4:	4a15      	ldr	r2, [pc, #84]	; (8009f1c <ai_array_to_buffer_fmt+0x88>)
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d0f8      	beq.n	8009ebc <ai_array_to_buffer_fmt+0x28>
 8009eca:	dd18      	ble.n	8009efe <ai_array_to_buffer_fmt+0x6a>
 8009ecc:	4a14      	ldr	r2, [pc, #80]	; (8009f20 <ai_array_to_buffer_fmt+0x8c>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d0f4      	beq.n	8009ebc <ai_array_to_buffer_fmt+0x28>
 8009ed2:	4a14      	ldr	r2, [pc, #80]	; (8009f24 <ai_array_to_buffer_fmt+0x90>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d0f1      	beq.n	8009ebc <ai_array_to_buffer_fmt+0x28>
 8009ed8:	2340      	movs	r3, #64	; 0x40
 8009eda:	e7ef      	b.n	8009ebc <ai_array_to_buffer_fmt+0x28>
 8009edc:	4b12      	ldr	r3, [pc, #72]	; (8009f28 <ai_array_to_buffer_fmt+0x94>)
 8009ede:	4003      	ands	r3, r0
 8009ee0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009ee4:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8009ee8:	4318      	orrs	r0, r3
 8009eea:	4770      	bx	lr
 8009eec:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	d0e3      	beq.n	8009ebc <ai_array_to_buffer_fmt+0x28>
 8009ef4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d0df      	beq.n	8009ebc <ai_array_to_buffer_fmt+0x28>
 8009efc:	e7ec      	b.n	8009ed8 <ai_array_to_buffer_fmt+0x44>
 8009efe:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d0da      	beq.n	8009ebc <ai_array_to_buffer_fmt+0x28>
 8009f06:	3207      	adds	r2, #7
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d0d7      	beq.n	8009ebc <ai_array_to_buffer_fmt+0x28>
 8009f0c:	e7e4      	b.n	8009ed8 <ai_array_to_buffer_fmt+0x44>
 8009f0e:	bf00      	nop
 8009f10:	00840040 	.word	0x00840040
 8009f14:	00040447 	.word	0x00040447
 8009f18:	00040840 	.word	0x00040840
 8009f1c:	00840840 	.word	0x00840840
 8009f20:	0084084f 	.word	0x0084084f
 8009f24:	01821040 	.word	0x01821040
 8009f28:	00803fff 	.word	0x00803fff

08009f2c <ai_array_get_byte_size>:
 8009f2c:	b1c1      	cbz	r1, 8009f60 <ai_array_get_byte_size+0x34>
 8009f2e:	f3c0 3282 	ubfx	r2, r0, #14, #3
 8009f32:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8009f36:	4413      	add	r3, r2
 8009f38:	fb01 f103 	mul.w	r1, r1, r3
 8009f3c:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8009f40:	3107      	adds	r1, #7
 8009f42:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8009f46:	f021 0107 	bic.w	r1, r1, #7
 8009f4a:	2804      	cmp	r0, #4
 8009f4c:	fa21 f102 	lsr.w	r1, r1, r2
 8009f50:	d008      	beq.n	8009f64 <ai_array_get_byte_size+0x38>
 8009f52:	2808      	cmp	r0, #8
 8009f54:	d101      	bne.n	8009f5a <ai_array_get_byte_size+0x2e>
 8009f56:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8009f5a:	3107      	adds	r1, #7
 8009f5c:	08c8      	lsrs	r0, r1, #3
 8009f5e:	4770      	bx	lr
 8009f60:	4608      	mov	r0, r1
 8009f62:	4770      	bx	lr
 8009f64:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8009f68:	3107      	adds	r1, #7
 8009f6a:	08c8      	lsrs	r0, r1, #3
 8009f6c:	4770      	bx	lr
 8009f6e:	bf00      	nop

08009f70 <__errno>:
 8009f70:	4b01      	ldr	r3, [pc, #4]	; (8009f78 <__errno+0x8>)
 8009f72:	6818      	ldr	r0, [r3, #0]
 8009f74:	4770      	bx	lr
 8009f76:	bf00      	nop
 8009f78:	2000061c 	.word	0x2000061c

08009f7c <__libc_init_array>:
 8009f7c:	b570      	push	{r4, r5, r6, lr}
 8009f7e:	4e0d      	ldr	r6, [pc, #52]	; (8009fb4 <__libc_init_array+0x38>)
 8009f80:	4c0d      	ldr	r4, [pc, #52]	; (8009fb8 <__libc_init_array+0x3c>)
 8009f82:	1ba4      	subs	r4, r4, r6
 8009f84:	10a4      	asrs	r4, r4, #2
 8009f86:	2500      	movs	r5, #0
 8009f88:	42a5      	cmp	r5, r4
 8009f8a:	d109      	bne.n	8009fa0 <__libc_init_array+0x24>
 8009f8c:	4e0b      	ldr	r6, [pc, #44]	; (8009fbc <__libc_init_array+0x40>)
 8009f8e:	4c0c      	ldr	r4, [pc, #48]	; (8009fc0 <__libc_init_array+0x44>)
 8009f90:	f002 fd08 	bl	800c9a4 <_init>
 8009f94:	1ba4      	subs	r4, r4, r6
 8009f96:	10a4      	asrs	r4, r4, #2
 8009f98:	2500      	movs	r5, #0
 8009f9a:	42a5      	cmp	r5, r4
 8009f9c:	d105      	bne.n	8009faa <__libc_init_array+0x2e>
 8009f9e:	bd70      	pop	{r4, r5, r6, pc}
 8009fa0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009fa4:	4798      	blx	r3
 8009fa6:	3501      	adds	r5, #1
 8009fa8:	e7ee      	b.n	8009f88 <__libc_init_array+0xc>
 8009faa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009fae:	4798      	blx	r3
 8009fb0:	3501      	adds	r5, #1
 8009fb2:	e7f2      	b.n	8009f9a <__libc_init_array+0x1e>
 8009fb4:	0800e320 	.word	0x0800e320
 8009fb8:	0800e320 	.word	0x0800e320
 8009fbc:	0800e320 	.word	0x0800e320
 8009fc0:	0800e324 	.word	0x0800e324

08009fc4 <malloc>:
 8009fc4:	4b02      	ldr	r3, [pc, #8]	; (8009fd0 <malloc+0xc>)
 8009fc6:	4601      	mov	r1, r0
 8009fc8:	6818      	ldr	r0, [r3, #0]
 8009fca:	f000 b865 	b.w	800a098 <_malloc_r>
 8009fce:	bf00      	nop
 8009fd0:	2000061c 	.word	0x2000061c

08009fd4 <memcpy>:
 8009fd4:	b510      	push	{r4, lr}
 8009fd6:	1e43      	subs	r3, r0, #1
 8009fd8:	440a      	add	r2, r1
 8009fda:	4291      	cmp	r1, r2
 8009fdc:	d100      	bne.n	8009fe0 <memcpy+0xc>
 8009fde:	bd10      	pop	{r4, pc}
 8009fe0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fe4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009fe8:	e7f7      	b.n	8009fda <memcpy+0x6>

08009fea <memset>:
 8009fea:	4402      	add	r2, r0
 8009fec:	4603      	mov	r3, r0
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d100      	bne.n	8009ff4 <memset+0xa>
 8009ff2:	4770      	bx	lr
 8009ff4:	f803 1b01 	strb.w	r1, [r3], #1
 8009ff8:	e7f9      	b.n	8009fee <memset+0x4>
	...

08009ffc <_free_r>:
 8009ffc:	b538      	push	{r3, r4, r5, lr}
 8009ffe:	4605      	mov	r5, r0
 800a000:	2900      	cmp	r1, #0
 800a002:	d045      	beq.n	800a090 <_free_r+0x94>
 800a004:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a008:	1f0c      	subs	r4, r1, #4
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	bfb8      	it	lt
 800a00e:	18e4      	addlt	r4, r4, r3
 800a010:	f001 fe76 	bl	800bd00 <__malloc_lock>
 800a014:	4a1f      	ldr	r2, [pc, #124]	; (800a094 <_free_r+0x98>)
 800a016:	6813      	ldr	r3, [r2, #0]
 800a018:	4610      	mov	r0, r2
 800a01a:	b933      	cbnz	r3, 800a02a <_free_r+0x2e>
 800a01c:	6063      	str	r3, [r4, #4]
 800a01e:	6014      	str	r4, [r2, #0]
 800a020:	4628      	mov	r0, r5
 800a022:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a026:	f001 be6c 	b.w	800bd02 <__malloc_unlock>
 800a02a:	42a3      	cmp	r3, r4
 800a02c:	d90c      	bls.n	800a048 <_free_r+0x4c>
 800a02e:	6821      	ldr	r1, [r4, #0]
 800a030:	1862      	adds	r2, r4, r1
 800a032:	4293      	cmp	r3, r2
 800a034:	bf04      	itt	eq
 800a036:	681a      	ldreq	r2, [r3, #0]
 800a038:	685b      	ldreq	r3, [r3, #4]
 800a03a:	6063      	str	r3, [r4, #4]
 800a03c:	bf04      	itt	eq
 800a03e:	1852      	addeq	r2, r2, r1
 800a040:	6022      	streq	r2, [r4, #0]
 800a042:	6004      	str	r4, [r0, #0]
 800a044:	e7ec      	b.n	800a020 <_free_r+0x24>
 800a046:	4613      	mov	r3, r2
 800a048:	685a      	ldr	r2, [r3, #4]
 800a04a:	b10a      	cbz	r2, 800a050 <_free_r+0x54>
 800a04c:	42a2      	cmp	r2, r4
 800a04e:	d9fa      	bls.n	800a046 <_free_r+0x4a>
 800a050:	6819      	ldr	r1, [r3, #0]
 800a052:	1858      	adds	r0, r3, r1
 800a054:	42a0      	cmp	r0, r4
 800a056:	d10b      	bne.n	800a070 <_free_r+0x74>
 800a058:	6820      	ldr	r0, [r4, #0]
 800a05a:	4401      	add	r1, r0
 800a05c:	1858      	adds	r0, r3, r1
 800a05e:	4282      	cmp	r2, r0
 800a060:	6019      	str	r1, [r3, #0]
 800a062:	d1dd      	bne.n	800a020 <_free_r+0x24>
 800a064:	6810      	ldr	r0, [r2, #0]
 800a066:	6852      	ldr	r2, [r2, #4]
 800a068:	605a      	str	r2, [r3, #4]
 800a06a:	4401      	add	r1, r0
 800a06c:	6019      	str	r1, [r3, #0]
 800a06e:	e7d7      	b.n	800a020 <_free_r+0x24>
 800a070:	d902      	bls.n	800a078 <_free_r+0x7c>
 800a072:	230c      	movs	r3, #12
 800a074:	602b      	str	r3, [r5, #0]
 800a076:	e7d3      	b.n	800a020 <_free_r+0x24>
 800a078:	6820      	ldr	r0, [r4, #0]
 800a07a:	1821      	adds	r1, r4, r0
 800a07c:	428a      	cmp	r2, r1
 800a07e:	bf04      	itt	eq
 800a080:	6811      	ldreq	r1, [r2, #0]
 800a082:	6852      	ldreq	r2, [r2, #4]
 800a084:	6062      	str	r2, [r4, #4]
 800a086:	bf04      	itt	eq
 800a088:	1809      	addeq	r1, r1, r0
 800a08a:	6021      	streq	r1, [r4, #0]
 800a08c:	605c      	str	r4, [r3, #4]
 800a08e:	e7c7      	b.n	800a020 <_free_r+0x24>
 800a090:	bd38      	pop	{r3, r4, r5, pc}
 800a092:	bf00      	nop
 800a094:	200008cc 	.word	0x200008cc

0800a098 <_malloc_r>:
 800a098:	b570      	push	{r4, r5, r6, lr}
 800a09a:	1ccd      	adds	r5, r1, #3
 800a09c:	f025 0503 	bic.w	r5, r5, #3
 800a0a0:	3508      	adds	r5, #8
 800a0a2:	2d0c      	cmp	r5, #12
 800a0a4:	bf38      	it	cc
 800a0a6:	250c      	movcc	r5, #12
 800a0a8:	2d00      	cmp	r5, #0
 800a0aa:	4606      	mov	r6, r0
 800a0ac:	db01      	blt.n	800a0b2 <_malloc_r+0x1a>
 800a0ae:	42a9      	cmp	r1, r5
 800a0b0:	d903      	bls.n	800a0ba <_malloc_r+0x22>
 800a0b2:	230c      	movs	r3, #12
 800a0b4:	6033      	str	r3, [r6, #0]
 800a0b6:	2000      	movs	r0, #0
 800a0b8:	bd70      	pop	{r4, r5, r6, pc}
 800a0ba:	f001 fe21 	bl	800bd00 <__malloc_lock>
 800a0be:	4a21      	ldr	r2, [pc, #132]	; (800a144 <_malloc_r+0xac>)
 800a0c0:	6814      	ldr	r4, [r2, #0]
 800a0c2:	4621      	mov	r1, r4
 800a0c4:	b991      	cbnz	r1, 800a0ec <_malloc_r+0x54>
 800a0c6:	4c20      	ldr	r4, [pc, #128]	; (800a148 <_malloc_r+0xb0>)
 800a0c8:	6823      	ldr	r3, [r4, #0]
 800a0ca:	b91b      	cbnz	r3, 800a0d4 <_malloc_r+0x3c>
 800a0cc:	4630      	mov	r0, r6
 800a0ce:	f000 fd15 	bl	800aafc <_sbrk_r>
 800a0d2:	6020      	str	r0, [r4, #0]
 800a0d4:	4629      	mov	r1, r5
 800a0d6:	4630      	mov	r0, r6
 800a0d8:	f000 fd10 	bl	800aafc <_sbrk_r>
 800a0dc:	1c43      	adds	r3, r0, #1
 800a0de:	d124      	bne.n	800a12a <_malloc_r+0x92>
 800a0e0:	230c      	movs	r3, #12
 800a0e2:	6033      	str	r3, [r6, #0]
 800a0e4:	4630      	mov	r0, r6
 800a0e6:	f001 fe0c 	bl	800bd02 <__malloc_unlock>
 800a0ea:	e7e4      	b.n	800a0b6 <_malloc_r+0x1e>
 800a0ec:	680b      	ldr	r3, [r1, #0]
 800a0ee:	1b5b      	subs	r3, r3, r5
 800a0f0:	d418      	bmi.n	800a124 <_malloc_r+0x8c>
 800a0f2:	2b0b      	cmp	r3, #11
 800a0f4:	d90f      	bls.n	800a116 <_malloc_r+0x7e>
 800a0f6:	600b      	str	r3, [r1, #0]
 800a0f8:	50cd      	str	r5, [r1, r3]
 800a0fa:	18cc      	adds	r4, r1, r3
 800a0fc:	4630      	mov	r0, r6
 800a0fe:	f001 fe00 	bl	800bd02 <__malloc_unlock>
 800a102:	f104 000b 	add.w	r0, r4, #11
 800a106:	1d23      	adds	r3, r4, #4
 800a108:	f020 0007 	bic.w	r0, r0, #7
 800a10c:	1ac3      	subs	r3, r0, r3
 800a10e:	d0d3      	beq.n	800a0b8 <_malloc_r+0x20>
 800a110:	425a      	negs	r2, r3
 800a112:	50e2      	str	r2, [r4, r3]
 800a114:	e7d0      	b.n	800a0b8 <_malloc_r+0x20>
 800a116:	428c      	cmp	r4, r1
 800a118:	684b      	ldr	r3, [r1, #4]
 800a11a:	bf16      	itet	ne
 800a11c:	6063      	strne	r3, [r4, #4]
 800a11e:	6013      	streq	r3, [r2, #0]
 800a120:	460c      	movne	r4, r1
 800a122:	e7eb      	b.n	800a0fc <_malloc_r+0x64>
 800a124:	460c      	mov	r4, r1
 800a126:	6849      	ldr	r1, [r1, #4]
 800a128:	e7cc      	b.n	800a0c4 <_malloc_r+0x2c>
 800a12a:	1cc4      	adds	r4, r0, #3
 800a12c:	f024 0403 	bic.w	r4, r4, #3
 800a130:	42a0      	cmp	r0, r4
 800a132:	d005      	beq.n	800a140 <_malloc_r+0xa8>
 800a134:	1a21      	subs	r1, r4, r0
 800a136:	4630      	mov	r0, r6
 800a138:	f000 fce0 	bl	800aafc <_sbrk_r>
 800a13c:	3001      	adds	r0, #1
 800a13e:	d0cf      	beq.n	800a0e0 <_malloc_r+0x48>
 800a140:	6025      	str	r5, [r4, #0]
 800a142:	e7db      	b.n	800a0fc <_malloc_r+0x64>
 800a144:	200008cc 	.word	0x200008cc
 800a148:	200008d0 	.word	0x200008d0

0800a14c <__cvt>:
 800a14c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a150:	ec55 4b10 	vmov	r4, r5, d0
 800a154:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800a156:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a15a:	2d00      	cmp	r5, #0
 800a15c:	460e      	mov	r6, r1
 800a15e:	4691      	mov	r9, r2
 800a160:	4619      	mov	r1, r3
 800a162:	bfb8      	it	lt
 800a164:	4622      	movlt	r2, r4
 800a166:	462b      	mov	r3, r5
 800a168:	f027 0720 	bic.w	r7, r7, #32
 800a16c:	bfbb      	ittet	lt
 800a16e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a172:	461d      	movlt	r5, r3
 800a174:	2300      	movge	r3, #0
 800a176:	232d      	movlt	r3, #45	; 0x2d
 800a178:	bfb8      	it	lt
 800a17a:	4614      	movlt	r4, r2
 800a17c:	2f46      	cmp	r7, #70	; 0x46
 800a17e:	700b      	strb	r3, [r1, #0]
 800a180:	d004      	beq.n	800a18c <__cvt+0x40>
 800a182:	2f45      	cmp	r7, #69	; 0x45
 800a184:	d100      	bne.n	800a188 <__cvt+0x3c>
 800a186:	3601      	adds	r6, #1
 800a188:	2102      	movs	r1, #2
 800a18a:	e000      	b.n	800a18e <__cvt+0x42>
 800a18c:	2103      	movs	r1, #3
 800a18e:	ab03      	add	r3, sp, #12
 800a190:	9301      	str	r3, [sp, #4]
 800a192:	ab02      	add	r3, sp, #8
 800a194:	9300      	str	r3, [sp, #0]
 800a196:	4632      	mov	r2, r6
 800a198:	4653      	mov	r3, sl
 800a19a:	ec45 4b10 	vmov	d0, r4, r5
 800a19e:	f000 fe0b 	bl	800adb8 <_dtoa_r>
 800a1a2:	2f47      	cmp	r7, #71	; 0x47
 800a1a4:	4680      	mov	r8, r0
 800a1a6:	d102      	bne.n	800a1ae <__cvt+0x62>
 800a1a8:	f019 0f01 	tst.w	r9, #1
 800a1ac:	d026      	beq.n	800a1fc <__cvt+0xb0>
 800a1ae:	2f46      	cmp	r7, #70	; 0x46
 800a1b0:	eb08 0906 	add.w	r9, r8, r6
 800a1b4:	d111      	bne.n	800a1da <__cvt+0x8e>
 800a1b6:	f898 3000 	ldrb.w	r3, [r8]
 800a1ba:	2b30      	cmp	r3, #48	; 0x30
 800a1bc:	d10a      	bne.n	800a1d4 <__cvt+0x88>
 800a1be:	2200      	movs	r2, #0
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	4620      	mov	r0, r4
 800a1c4:	4629      	mov	r1, r5
 800a1c6:	f7f6 fc7f 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1ca:	b918      	cbnz	r0, 800a1d4 <__cvt+0x88>
 800a1cc:	f1c6 0601 	rsb	r6, r6, #1
 800a1d0:	f8ca 6000 	str.w	r6, [sl]
 800a1d4:	f8da 3000 	ldr.w	r3, [sl]
 800a1d8:	4499      	add	r9, r3
 800a1da:	2200      	movs	r2, #0
 800a1dc:	2300      	movs	r3, #0
 800a1de:	4620      	mov	r0, r4
 800a1e0:	4629      	mov	r1, r5
 800a1e2:	f7f6 fc71 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1e6:	b938      	cbnz	r0, 800a1f8 <__cvt+0xac>
 800a1e8:	2230      	movs	r2, #48	; 0x30
 800a1ea:	9b03      	ldr	r3, [sp, #12]
 800a1ec:	454b      	cmp	r3, r9
 800a1ee:	d205      	bcs.n	800a1fc <__cvt+0xb0>
 800a1f0:	1c59      	adds	r1, r3, #1
 800a1f2:	9103      	str	r1, [sp, #12]
 800a1f4:	701a      	strb	r2, [r3, #0]
 800a1f6:	e7f8      	b.n	800a1ea <__cvt+0x9e>
 800a1f8:	f8cd 900c 	str.w	r9, [sp, #12]
 800a1fc:	9b03      	ldr	r3, [sp, #12]
 800a1fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a200:	eba3 0308 	sub.w	r3, r3, r8
 800a204:	4640      	mov	r0, r8
 800a206:	6013      	str	r3, [r2, #0]
 800a208:	b004      	add	sp, #16
 800a20a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a20e <__exponent>:
 800a20e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a210:	2900      	cmp	r1, #0
 800a212:	4604      	mov	r4, r0
 800a214:	bfba      	itte	lt
 800a216:	4249      	neglt	r1, r1
 800a218:	232d      	movlt	r3, #45	; 0x2d
 800a21a:	232b      	movge	r3, #43	; 0x2b
 800a21c:	2909      	cmp	r1, #9
 800a21e:	f804 2b02 	strb.w	r2, [r4], #2
 800a222:	7043      	strb	r3, [r0, #1]
 800a224:	dd20      	ble.n	800a268 <__exponent+0x5a>
 800a226:	f10d 0307 	add.w	r3, sp, #7
 800a22a:	461f      	mov	r7, r3
 800a22c:	260a      	movs	r6, #10
 800a22e:	fb91 f5f6 	sdiv	r5, r1, r6
 800a232:	fb06 1115 	mls	r1, r6, r5, r1
 800a236:	3130      	adds	r1, #48	; 0x30
 800a238:	2d09      	cmp	r5, #9
 800a23a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a23e:	f103 32ff 	add.w	r2, r3, #4294967295
 800a242:	4629      	mov	r1, r5
 800a244:	dc09      	bgt.n	800a25a <__exponent+0x4c>
 800a246:	3130      	adds	r1, #48	; 0x30
 800a248:	3b02      	subs	r3, #2
 800a24a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a24e:	42bb      	cmp	r3, r7
 800a250:	4622      	mov	r2, r4
 800a252:	d304      	bcc.n	800a25e <__exponent+0x50>
 800a254:	1a10      	subs	r0, r2, r0
 800a256:	b003      	add	sp, #12
 800a258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a25a:	4613      	mov	r3, r2
 800a25c:	e7e7      	b.n	800a22e <__exponent+0x20>
 800a25e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a262:	f804 2b01 	strb.w	r2, [r4], #1
 800a266:	e7f2      	b.n	800a24e <__exponent+0x40>
 800a268:	2330      	movs	r3, #48	; 0x30
 800a26a:	4419      	add	r1, r3
 800a26c:	7083      	strb	r3, [r0, #2]
 800a26e:	1d02      	adds	r2, r0, #4
 800a270:	70c1      	strb	r1, [r0, #3]
 800a272:	e7ef      	b.n	800a254 <__exponent+0x46>

0800a274 <_printf_float>:
 800a274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a278:	b08d      	sub	sp, #52	; 0x34
 800a27a:	460c      	mov	r4, r1
 800a27c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800a280:	4616      	mov	r6, r2
 800a282:	461f      	mov	r7, r3
 800a284:	4605      	mov	r5, r0
 800a286:	f001 fcc9 	bl	800bc1c <_localeconv_r>
 800a28a:	6803      	ldr	r3, [r0, #0]
 800a28c:	9304      	str	r3, [sp, #16]
 800a28e:	4618      	mov	r0, r3
 800a290:	f7f5 ff9e 	bl	80001d0 <strlen>
 800a294:	2300      	movs	r3, #0
 800a296:	930a      	str	r3, [sp, #40]	; 0x28
 800a298:	f8d8 3000 	ldr.w	r3, [r8]
 800a29c:	9005      	str	r0, [sp, #20]
 800a29e:	3307      	adds	r3, #7
 800a2a0:	f023 0307 	bic.w	r3, r3, #7
 800a2a4:	f103 0208 	add.w	r2, r3, #8
 800a2a8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a2ac:	f8d4 b000 	ldr.w	fp, [r4]
 800a2b0:	f8c8 2000 	str.w	r2, [r8]
 800a2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a2bc:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a2c0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a2c4:	9307      	str	r3, [sp, #28]
 800a2c6:	f8cd 8018 	str.w	r8, [sp, #24]
 800a2ca:	f04f 32ff 	mov.w	r2, #4294967295
 800a2ce:	4ba7      	ldr	r3, [pc, #668]	; (800a56c <_printf_float+0x2f8>)
 800a2d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a2d4:	f7f6 fc2a 	bl	8000b2c <__aeabi_dcmpun>
 800a2d8:	bb70      	cbnz	r0, 800a338 <_printf_float+0xc4>
 800a2da:	f04f 32ff 	mov.w	r2, #4294967295
 800a2de:	4ba3      	ldr	r3, [pc, #652]	; (800a56c <_printf_float+0x2f8>)
 800a2e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a2e4:	f7f6 fc04 	bl	8000af0 <__aeabi_dcmple>
 800a2e8:	bb30      	cbnz	r0, 800a338 <_printf_float+0xc4>
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	4640      	mov	r0, r8
 800a2f0:	4649      	mov	r1, r9
 800a2f2:	f7f6 fbf3 	bl	8000adc <__aeabi_dcmplt>
 800a2f6:	b110      	cbz	r0, 800a2fe <_printf_float+0x8a>
 800a2f8:	232d      	movs	r3, #45	; 0x2d
 800a2fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2fe:	4a9c      	ldr	r2, [pc, #624]	; (800a570 <_printf_float+0x2fc>)
 800a300:	4b9c      	ldr	r3, [pc, #624]	; (800a574 <_printf_float+0x300>)
 800a302:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a306:	bf8c      	ite	hi
 800a308:	4690      	movhi	r8, r2
 800a30a:	4698      	movls	r8, r3
 800a30c:	2303      	movs	r3, #3
 800a30e:	f02b 0204 	bic.w	r2, fp, #4
 800a312:	6123      	str	r3, [r4, #16]
 800a314:	6022      	str	r2, [r4, #0]
 800a316:	f04f 0900 	mov.w	r9, #0
 800a31a:	9700      	str	r7, [sp, #0]
 800a31c:	4633      	mov	r3, r6
 800a31e:	aa0b      	add	r2, sp, #44	; 0x2c
 800a320:	4621      	mov	r1, r4
 800a322:	4628      	mov	r0, r5
 800a324:	f000 f9e6 	bl	800a6f4 <_printf_common>
 800a328:	3001      	adds	r0, #1
 800a32a:	f040 808d 	bne.w	800a448 <_printf_float+0x1d4>
 800a32e:	f04f 30ff 	mov.w	r0, #4294967295
 800a332:	b00d      	add	sp, #52	; 0x34
 800a334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a338:	4642      	mov	r2, r8
 800a33a:	464b      	mov	r3, r9
 800a33c:	4640      	mov	r0, r8
 800a33e:	4649      	mov	r1, r9
 800a340:	f7f6 fbf4 	bl	8000b2c <__aeabi_dcmpun>
 800a344:	b110      	cbz	r0, 800a34c <_printf_float+0xd8>
 800a346:	4a8c      	ldr	r2, [pc, #560]	; (800a578 <_printf_float+0x304>)
 800a348:	4b8c      	ldr	r3, [pc, #560]	; (800a57c <_printf_float+0x308>)
 800a34a:	e7da      	b.n	800a302 <_printf_float+0x8e>
 800a34c:	6861      	ldr	r1, [r4, #4]
 800a34e:	1c4b      	adds	r3, r1, #1
 800a350:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800a354:	a80a      	add	r0, sp, #40	; 0x28
 800a356:	d13e      	bne.n	800a3d6 <_printf_float+0x162>
 800a358:	2306      	movs	r3, #6
 800a35a:	6063      	str	r3, [r4, #4]
 800a35c:	2300      	movs	r3, #0
 800a35e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a362:	ab09      	add	r3, sp, #36	; 0x24
 800a364:	9300      	str	r3, [sp, #0]
 800a366:	ec49 8b10 	vmov	d0, r8, r9
 800a36a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a36e:	6022      	str	r2, [r4, #0]
 800a370:	f8cd a004 	str.w	sl, [sp, #4]
 800a374:	6861      	ldr	r1, [r4, #4]
 800a376:	4628      	mov	r0, r5
 800a378:	f7ff fee8 	bl	800a14c <__cvt>
 800a37c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800a380:	2b47      	cmp	r3, #71	; 0x47
 800a382:	4680      	mov	r8, r0
 800a384:	d109      	bne.n	800a39a <_printf_float+0x126>
 800a386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a388:	1cd8      	adds	r0, r3, #3
 800a38a:	db02      	blt.n	800a392 <_printf_float+0x11e>
 800a38c:	6862      	ldr	r2, [r4, #4]
 800a38e:	4293      	cmp	r3, r2
 800a390:	dd47      	ble.n	800a422 <_printf_float+0x1ae>
 800a392:	f1aa 0a02 	sub.w	sl, sl, #2
 800a396:	fa5f fa8a 	uxtb.w	sl, sl
 800a39a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a39e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a3a0:	d824      	bhi.n	800a3ec <_printf_float+0x178>
 800a3a2:	3901      	subs	r1, #1
 800a3a4:	4652      	mov	r2, sl
 800a3a6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a3aa:	9109      	str	r1, [sp, #36]	; 0x24
 800a3ac:	f7ff ff2f 	bl	800a20e <__exponent>
 800a3b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a3b2:	1813      	adds	r3, r2, r0
 800a3b4:	2a01      	cmp	r2, #1
 800a3b6:	4681      	mov	r9, r0
 800a3b8:	6123      	str	r3, [r4, #16]
 800a3ba:	dc02      	bgt.n	800a3c2 <_printf_float+0x14e>
 800a3bc:	6822      	ldr	r2, [r4, #0]
 800a3be:	07d1      	lsls	r1, r2, #31
 800a3c0:	d501      	bpl.n	800a3c6 <_printf_float+0x152>
 800a3c2:	3301      	adds	r3, #1
 800a3c4:	6123      	str	r3, [r4, #16]
 800a3c6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d0a5      	beq.n	800a31a <_printf_float+0xa6>
 800a3ce:	232d      	movs	r3, #45	; 0x2d
 800a3d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3d4:	e7a1      	b.n	800a31a <_printf_float+0xa6>
 800a3d6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800a3da:	f000 8177 	beq.w	800a6cc <_printf_float+0x458>
 800a3de:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a3e2:	d1bb      	bne.n	800a35c <_printf_float+0xe8>
 800a3e4:	2900      	cmp	r1, #0
 800a3e6:	d1b9      	bne.n	800a35c <_printf_float+0xe8>
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	e7b6      	b.n	800a35a <_printf_float+0xe6>
 800a3ec:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800a3f0:	d119      	bne.n	800a426 <_printf_float+0x1b2>
 800a3f2:	2900      	cmp	r1, #0
 800a3f4:	6863      	ldr	r3, [r4, #4]
 800a3f6:	dd0c      	ble.n	800a412 <_printf_float+0x19e>
 800a3f8:	6121      	str	r1, [r4, #16]
 800a3fa:	b913      	cbnz	r3, 800a402 <_printf_float+0x18e>
 800a3fc:	6822      	ldr	r2, [r4, #0]
 800a3fe:	07d2      	lsls	r2, r2, #31
 800a400:	d502      	bpl.n	800a408 <_printf_float+0x194>
 800a402:	3301      	adds	r3, #1
 800a404:	440b      	add	r3, r1
 800a406:	6123      	str	r3, [r4, #16]
 800a408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a40a:	65a3      	str	r3, [r4, #88]	; 0x58
 800a40c:	f04f 0900 	mov.w	r9, #0
 800a410:	e7d9      	b.n	800a3c6 <_printf_float+0x152>
 800a412:	b913      	cbnz	r3, 800a41a <_printf_float+0x1a6>
 800a414:	6822      	ldr	r2, [r4, #0]
 800a416:	07d0      	lsls	r0, r2, #31
 800a418:	d501      	bpl.n	800a41e <_printf_float+0x1aa>
 800a41a:	3302      	adds	r3, #2
 800a41c:	e7f3      	b.n	800a406 <_printf_float+0x192>
 800a41e:	2301      	movs	r3, #1
 800a420:	e7f1      	b.n	800a406 <_printf_float+0x192>
 800a422:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800a426:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a42a:	4293      	cmp	r3, r2
 800a42c:	db05      	blt.n	800a43a <_printf_float+0x1c6>
 800a42e:	6822      	ldr	r2, [r4, #0]
 800a430:	6123      	str	r3, [r4, #16]
 800a432:	07d1      	lsls	r1, r2, #31
 800a434:	d5e8      	bpl.n	800a408 <_printf_float+0x194>
 800a436:	3301      	adds	r3, #1
 800a438:	e7e5      	b.n	800a406 <_printf_float+0x192>
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	bfd4      	ite	le
 800a43e:	f1c3 0302 	rsble	r3, r3, #2
 800a442:	2301      	movgt	r3, #1
 800a444:	4413      	add	r3, r2
 800a446:	e7de      	b.n	800a406 <_printf_float+0x192>
 800a448:	6823      	ldr	r3, [r4, #0]
 800a44a:	055a      	lsls	r2, r3, #21
 800a44c:	d407      	bmi.n	800a45e <_printf_float+0x1ea>
 800a44e:	6923      	ldr	r3, [r4, #16]
 800a450:	4642      	mov	r2, r8
 800a452:	4631      	mov	r1, r6
 800a454:	4628      	mov	r0, r5
 800a456:	47b8      	blx	r7
 800a458:	3001      	adds	r0, #1
 800a45a:	d12b      	bne.n	800a4b4 <_printf_float+0x240>
 800a45c:	e767      	b.n	800a32e <_printf_float+0xba>
 800a45e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a462:	f240 80dc 	bls.w	800a61e <_printf_float+0x3aa>
 800a466:	2200      	movs	r2, #0
 800a468:	2300      	movs	r3, #0
 800a46a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a46e:	f7f6 fb2b 	bl	8000ac8 <__aeabi_dcmpeq>
 800a472:	2800      	cmp	r0, #0
 800a474:	d033      	beq.n	800a4de <_printf_float+0x26a>
 800a476:	2301      	movs	r3, #1
 800a478:	4a41      	ldr	r2, [pc, #260]	; (800a580 <_printf_float+0x30c>)
 800a47a:	4631      	mov	r1, r6
 800a47c:	4628      	mov	r0, r5
 800a47e:	47b8      	blx	r7
 800a480:	3001      	adds	r0, #1
 800a482:	f43f af54 	beq.w	800a32e <_printf_float+0xba>
 800a486:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a48a:	429a      	cmp	r2, r3
 800a48c:	db02      	blt.n	800a494 <_printf_float+0x220>
 800a48e:	6823      	ldr	r3, [r4, #0]
 800a490:	07d8      	lsls	r0, r3, #31
 800a492:	d50f      	bpl.n	800a4b4 <_printf_float+0x240>
 800a494:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a498:	4631      	mov	r1, r6
 800a49a:	4628      	mov	r0, r5
 800a49c:	47b8      	blx	r7
 800a49e:	3001      	adds	r0, #1
 800a4a0:	f43f af45 	beq.w	800a32e <_printf_float+0xba>
 800a4a4:	f04f 0800 	mov.w	r8, #0
 800a4a8:	f104 091a 	add.w	r9, r4, #26
 800a4ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4ae:	3b01      	subs	r3, #1
 800a4b0:	4543      	cmp	r3, r8
 800a4b2:	dc09      	bgt.n	800a4c8 <_printf_float+0x254>
 800a4b4:	6823      	ldr	r3, [r4, #0]
 800a4b6:	079b      	lsls	r3, r3, #30
 800a4b8:	f100 8103 	bmi.w	800a6c2 <_printf_float+0x44e>
 800a4bc:	68e0      	ldr	r0, [r4, #12]
 800a4be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4c0:	4298      	cmp	r0, r3
 800a4c2:	bfb8      	it	lt
 800a4c4:	4618      	movlt	r0, r3
 800a4c6:	e734      	b.n	800a332 <_printf_float+0xbe>
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	464a      	mov	r2, r9
 800a4cc:	4631      	mov	r1, r6
 800a4ce:	4628      	mov	r0, r5
 800a4d0:	47b8      	blx	r7
 800a4d2:	3001      	adds	r0, #1
 800a4d4:	f43f af2b 	beq.w	800a32e <_printf_float+0xba>
 800a4d8:	f108 0801 	add.w	r8, r8, #1
 800a4dc:	e7e6      	b.n	800a4ac <_printf_float+0x238>
 800a4de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	dc2b      	bgt.n	800a53c <_printf_float+0x2c8>
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	4a26      	ldr	r2, [pc, #152]	; (800a580 <_printf_float+0x30c>)
 800a4e8:	4631      	mov	r1, r6
 800a4ea:	4628      	mov	r0, r5
 800a4ec:	47b8      	blx	r7
 800a4ee:	3001      	adds	r0, #1
 800a4f0:	f43f af1d 	beq.w	800a32e <_printf_float+0xba>
 800a4f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4f6:	b923      	cbnz	r3, 800a502 <_printf_float+0x28e>
 800a4f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4fa:	b913      	cbnz	r3, 800a502 <_printf_float+0x28e>
 800a4fc:	6823      	ldr	r3, [r4, #0]
 800a4fe:	07d9      	lsls	r1, r3, #31
 800a500:	d5d8      	bpl.n	800a4b4 <_printf_float+0x240>
 800a502:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a506:	4631      	mov	r1, r6
 800a508:	4628      	mov	r0, r5
 800a50a:	47b8      	blx	r7
 800a50c:	3001      	adds	r0, #1
 800a50e:	f43f af0e 	beq.w	800a32e <_printf_float+0xba>
 800a512:	f04f 0900 	mov.w	r9, #0
 800a516:	f104 0a1a 	add.w	sl, r4, #26
 800a51a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a51c:	425b      	negs	r3, r3
 800a51e:	454b      	cmp	r3, r9
 800a520:	dc01      	bgt.n	800a526 <_printf_float+0x2b2>
 800a522:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a524:	e794      	b.n	800a450 <_printf_float+0x1dc>
 800a526:	2301      	movs	r3, #1
 800a528:	4652      	mov	r2, sl
 800a52a:	4631      	mov	r1, r6
 800a52c:	4628      	mov	r0, r5
 800a52e:	47b8      	blx	r7
 800a530:	3001      	adds	r0, #1
 800a532:	f43f aefc 	beq.w	800a32e <_printf_float+0xba>
 800a536:	f109 0901 	add.w	r9, r9, #1
 800a53a:	e7ee      	b.n	800a51a <_printf_float+0x2a6>
 800a53c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a53e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a540:	429a      	cmp	r2, r3
 800a542:	bfa8      	it	ge
 800a544:	461a      	movge	r2, r3
 800a546:	2a00      	cmp	r2, #0
 800a548:	4691      	mov	r9, r2
 800a54a:	dd07      	ble.n	800a55c <_printf_float+0x2e8>
 800a54c:	4613      	mov	r3, r2
 800a54e:	4631      	mov	r1, r6
 800a550:	4642      	mov	r2, r8
 800a552:	4628      	mov	r0, r5
 800a554:	47b8      	blx	r7
 800a556:	3001      	adds	r0, #1
 800a558:	f43f aee9 	beq.w	800a32e <_printf_float+0xba>
 800a55c:	f104 031a 	add.w	r3, r4, #26
 800a560:	f04f 0b00 	mov.w	fp, #0
 800a564:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a568:	9306      	str	r3, [sp, #24]
 800a56a:	e015      	b.n	800a598 <_printf_float+0x324>
 800a56c:	7fefffff 	.word	0x7fefffff
 800a570:	0800e03c 	.word	0x0800e03c
 800a574:	0800e038 	.word	0x0800e038
 800a578:	0800e044 	.word	0x0800e044
 800a57c:	0800e040 	.word	0x0800e040
 800a580:	0800e048 	.word	0x0800e048
 800a584:	2301      	movs	r3, #1
 800a586:	9a06      	ldr	r2, [sp, #24]
 800a588:	4631      	mov	r1, r6
 800a58a:	4628      	mov	r0, r5
 800a58c:	47b8      	blx	r7
 800a58e:	3001      	adds	r0, #1
 800a590:	f43f aecd 	beq.w	800a32e <_printf_float+0xba>
 800a594:	f10b 0b01 	add.w	fp, fp, #1
 800a598:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a59c:	ebaa 0309 	sub.w	r3, sl, r9
 800a5a0:	455b      	cmp	r3, fp
 800a5a2:	dcef      	bgt.n	800a584 <_printf_float+0x310>
 800a5a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a5a8:	429a      	cmp	r2, r3
 800a5aa:	44d0      	add	r8, sl
 800a5ac:	db15      	blt.n	800a5da <_printf_float+0x366>
 800a5ae:	6823      	ldr	r3, [r4, #0]
 800a5b0:	07da      	lsls	r2, r3, #31
 800a5b2:	d412      	bmi.n	800a5da <_printf_float+0x366>
 800a5b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a5b8:	eba3 020a 	sub.w	r2, r3, sl
 800a5bc:	eba3 0a01 	sub.w	sl, r3, r1
 800a5c0:	4592      	cmp	sl, r2
 800a5c2:	bfa8      	it	ge
 800a5c4:	4692      	movge	sl, r2
 800a5c6:	f1ba 0f00 	cmp.w	sl, #0
 800a5ca:	dc0e      	bgt.n	800a5ea <_printf_float+0x376>
 800a5cc:	f04f 0800 	mov.w	r8, #0
 800a5d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a5d4:	f104 091a 	add.w	r9, r4, #26
 800a5d8:	e019      	b.n	800a60e <_printf_float+0x39a>
 800a5da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a5de:	4631      	mov	r1, r6
 800a5e0:	4628      	mov	r0, r5
 800a5e2:	47b8      	blx	r7
 800a5e4:	3001      	adds	r0, #1
 800a5e6:	d1e5      	bne.n	800a5b4 <_printf_float+0x340>
 800a5e8:	e6a1      	b.n	800a32e <_printf_float+0xba>
 800a5ea:	4653      	mov	r3, sl
 800a5ec:	4642      	mov	r2, r8
 800a5ee:	4631      	mov	r1, r6
 800a5f0:	4628      	mov	r0, r5
 800a5f2:	47b8      	blx	r7
 800a5f4:	3001      	adds	r0, #1
 800a5f6:	d1e9      	bne.n	800a5cc <_printf_float+0x358>
 800a5f8:	e699      	b.n	800a32e <_printf_float+0xba>
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	464a      	mov	r2, r9
 800a5fe:	4631      	mov	r1, r6
 800a600:	4628      	mov	r0, r5
 800a602:	47b8      	blx	r7
 800a604:	3001      	adds	r0, #1
 800a606:	f43f ae92 	beq.w	800a32e <_printf_float+0xba>
 800a60a:	f108 0801 	add.w	r8, r8, #1
 800a60e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a612:	1a9b      	subs	r3, r3, r2
 800a614:	eba3 030a 	sub.w	r3, r3, sl
 800a618:	4543      	cmp	r3, r8
 800a61a:	dcee      	bgt.n	800a5fa <_printf_float+0x386>
 800a61c:	e74a      	b.n	800a4b4 <_printf_float+0x240>
 800a61e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a620:	2a01      	cmp	r2, #1
 800a622:	dc01      	bgt.n	800a628 <_printf_float+0x3b4>
 800a624:	07db      	lsls	r3, r3, #31
 800a626:	d53a      	bpl.n	800a69e <_printf_float+0x42a>
 800a628:	2301      	movs	r3, #1
 800a62a:	4642      	mov	r2, r8
 800a62c:	4631      	mov	r1, r6
 800a62e:	4628      	mov	r0, r5
 800a630:	47b8      	blx	r7
 800a632:	3001      	adds	r0, #1
 800a634:	f43f ae7b 	beq.w	800a32e <_printf_float+0xba>
 800a638:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a63c:	4631      	mov	r1, r6
 800a63e:	4628      	mov	r0, r5
 800a640:	47b8      	blx	r7
 800a642:	3001      	adds	r0, #1
 800a644:	f108 0801 	add.w	r8, r8, #1
 800a648:	f43f ae71 	beq.w	800a32e <_printf_float+0xba>
 800a64c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a64e:	2200      	movs	r2, #0
 800a650:	f103 3aff 	add.w	sl, r3, #4294967295
 800a654:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a658:	2300      	movs	r3, #0
 800a65a:	f7f6 fa35 	bl	8000ac8 <__aeabi_dcmpeq>
 800a65e:	b9c8      	cbnz	r0, 800a694 <_printf_float+0x420>
 800a660:	4653      	mov	r3, sl
 800a662:	4642      	mov	r2, r8
 800a664:	4631      	mov	r1, r6
 800a666:	4628      	mov	r0, r5
 800a668:	47b8      	blx	r7
 800a66a:	3001      	adds	r0, #1
 800a66c:	d10e      	bne.n	800a68c <_printf_float+0x418>
 800a66e:	e65e      	b.n	800a32e <_printf_float+0xba>
 800a670:	2301      	movs	r3, #1
 800a672:	4652      	mov	r2, sl
 800a674:	4631      	mov	r1, r6
 800a676:	4628      	mov	r0, r5
 800a678:	47b8      	blx	r7
 800a67a:	3001      	adds	r0, #1
 800a67c:	f43f ae57 	beq.w	800a32e <_printf_float+0xba>
 800a680:	f108 0801 	add.w	r8, r8, #1
 800a684:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a686:	3b01      	subs	r3, #1
 800a688:	4543      	cmp	r3, r8
 800a68a:	dcf1      	bgt.n	800a670 <_printf_float+0x3fc>
 800a68c:	464b      	mov	r3, r9
 800a68e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a692:	e6de      	b.n	800a452 <_printf_float+0x1de>
 800a694:	f04f 0800 	mov.w	r8, #0
 800a698:	f104 0a1a 	add.w	sl, r4, #26
 800a69c:	e7f2      	b.n	800a684 <_printf_float+0x410>
 800a69e:	2301      	movs	r3, #1
 800a6a0:	e7df      	b.n	800a662 <_printf_float+0x3ee>
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	464a      	mov	r2, r9
 800a6a6:	4631      	mov	r1, r6
 800a6a8:	4628      	mov	r0, r5
 800a6aa:	47b8      	blx	r7
 800a6ac:	3001      	adds	r0, #1
 800a6ae:	f43f ae3e 	beq.w	800a32e <_printf_float+0xba>
 800a6b2:	f108 0801 	add.w	r8, r8, #1
 800a6b6:	68e3      	ldr	r3, [r4, #12]
 800a6b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a6ba:	1a9b      	subs	r3, r3, r2
 800a6bc:	4543      	cmp	r3, r8
 800a6be:	dcf0      	bgt.n	800a6a2 <_printf_float+0x42e>
 800a6c0:	e6fc      	b.n	800a4bc <_printf_float+0x248>
 800a6c2:	f04f 0800 	mov.w	r8, #0
 800a6c6:	f104 0919 	add.w	r9, r4, #25
 800a6ca:	e7f4      	b.n	800a6b6 <_printf_float+0x442>
 800a6cc:	2900      	cmp	r1, #0
 800a6ce:	f43f ae8b 	beq.w	800a3e8 <_printf_float+0x174>
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a6d8:	ab09      	add	r3, sp, #36	; 0x24
 800a6da:	9300      	str	r3, [sp, #0]
 800a6dc:	ec49 8b10 	vmov	d0, r8, r9
 800a6e0:	6022      	str	r2, [r4, #0]
 800a6e2:	f8cd a004 	str.w	sl, [sp, #4]
 800a6e6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a6ea:	4628      	mov	r0, r5
 800a6ec:	f7ff fd2e 	bl	800a14c <__cvt>
 800a6f0:	4680      	mov	r8, r0
 800a6f2:	e648      	b.n	800a386 <_printf_float+0x112>

0800a6f4 <_printf_common>:
 800a6f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6f8:	4691      	mov	r9, r2
 800a6fa:	461f      	mov	r7, r3
 800a6fc:	688a      	ldr	r2, [r1, #8]
 800a6fe:	690b      	ldr	r3, [r1, #16]
 800a700:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a704:	4293      	cmp	r3, r2
 800a706:	bfb8      	it	lt
 800a708:	4613      	movlt	r3, r2
 800a70a:	f8c9 3000 	str.w	r3, [r9]
 800a70e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a712:	4606      	mov	r6, r0
 800a714:	460c      	mov	r4, r1
 800a716:	b112      	cbz	r2, 800a71e <_printf_common+0x2a>
 800a718:	3301      	adds	r3, #1
 800a71a:	f8c9 3000 	str.w	r3, [r9]
 800a71e:	6823      	ldr	r3, [r4, #0]
 800a720:	0699      	lsls	r1, r3, #26
 800a722:	bf42      	ittt	mi
 800a724:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a728:	3302      	addmi	r3, #2
 800a72a:	f8c9 3000 	strmi.w	r3, [r9]
 800a72e:	6825      	ldr	r5, [r4, #0]
 800a730:	f015 0506 	ands.w	r5, r5, #6
 800a734:	d107      	bne.n	800a746 <_printf_common+0x52>
 800a736:	f104 0a19 	add.w	sl, r4, #25
 800a73a:	68e3      	ldr	r3, [r4, #12]
 800a73c:	f8d9 2000 	ldr.w	r2, [r9]
 800a740:	1a9b      	subs	r3, r3, r2
 800a742:	42ab      	cmp	r3, r5
 800a744:	dc28      	bgt.n	800a798 <_printf_common+0xa4>
 800a746:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a74a:	6822      	ldr	r2, [r4, #0]
 800a74c:	3300      	adds	r3, #0
 800a74e:	bf18      	it	ne
 800a750:	2301      	movne	r3, #1
 800a752:	0692      	lsls	r2, r2, #26
 800a754:	d42d      	bmi.n	800a7b2 <_printf_common+0xbe>
 800a756:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a75a:	4639      	mov	r1, r7
 800a75c:	4630      	mov	r0, r6
 800a75e:	47c0      	blx	r8
 800a760:	3001      	adds	r0, #1
 800a762:	d020      	beq.n	800a7a6 <_printf_common+0xb2>
 800a764:	6823      	ldr	r3, [r4, #0]
 800a766:	68e5      	ldr	r5, [r4, #12]
 800a768:	f8d9 2000 	ldr.w	r2, [r9]
 800a76c:	f003 0306 	and.w	r3, r3, #6
 800a770:	2b04      	cmp	r3, #4
 800a772:	bf08      	it	eq
 800a774:	1aad      	subeq	r5, r5, r2
 800a776:	68a3      	ldr	r3, [r4, #8]
 800a778:	6922      	ldr	r2, [r4, #16]
 800a77a:	bf0c      	ite	eq
 800a77c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a780:	2500      	movne	r5, #0
 800a782:	4293      	cmp	r3, r2
 800a784:	bfc4      	itt	gt
 800a786:	1a9b      	subgt	r3, r3, r2
 800a788:	18ed      	addgt	r5, r5, r3
 800a78a:	f04f 0900 	mov.w	r9, #0
 800a78e:	341a      	adds	r4, #26
 800a790:	454d      	cmp	r5, r9
 800a792:	d11a      	bne.n	800a7ca <_printf_common+0xd6>
 800a794:	2000      	movs	r0, #0
 800a796:	e008      	b.n	800a7aa <_printf_common+0xb6>
 800a798:	2301      	movs	r3, #1
 800a79a:	4652      	mov	r2, sl
 800a79c:	4639      	mov	r1, r7
 800a79e:	4630      	mov	r0, r6
 800a7a0:	47c0      	blx	r8
 800a7a2:	3001      	adds	r0, #1
 800a7a4:	d103      	bne.n	800a7ae <_printf_common+0xba>
 800a7a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a7aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7ae:	3501      	adds	r5, #1
 800a7b0:	e7c3      	b.n	800a73a <_printf_common+0x46>
 800a7b2:	18e1      	adds	r1, r4, r3
 800a7b4:	1c5a      	adds	r2, r3, #1
 800a7b6:	2030      	movs	r0, #48	; 0x30
 800a7b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a7bc:	4422      	add	r2, r4
 800a7be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a7c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a7c6:	3302      	adds	r3, #2
 800a7c8:	e7c5      	b.n	800a756 <_printf_common+0x62>
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	4622      	mov	r2, r4
 800a7ce:	4639      	mov	r1, r7
 800a7d0:	4630      	mov	r0, r6
 800a7d2:	47c0      	blx	r8
 800a7d4:	3001      	adds	r0, #1
 800a7d6:	d0e6      	beq.n	800a7a6 <_printf_common+0xb2>
 800a7d8:	f109 0901 	add.w	r9, r9, #1
 800a7dc:	e7d8      	b.n	800a790 <_printf_common+0x9c>
	...

0800a7e0 <_printf_i>:
 800a7e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a7e4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a7e8:	460c      	mov	r4, r1
 800a7ea:	7e09      	ldrb	r1, [r1, #24]
 800a7ec:	b085      	sub	sp, #20
 800a7ee:	296e      	cmp	r1, #110	; 0x6e
 800a7f0:	4617      	mov	r7, r2
 800a7f2:	4606      	mov	r6, r0
 800a7f4:	4698      	mov	r8, r3
 800a7f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a7f8:	f000 80b3 	beq.w	800a962 <_printf_i+0x182>
 800a7fc:	d822      	bhi.n	800a844 <_printf_i+0x64>
 800a7fe:	2963      	cmp	r1, #99	; 0x63
 800a800:	d036      	beq.n	800a870 <_printf_i+0x90>
 800a802:	d80a      	bhi.n	800a81a <_printf_i+0x3a>
 800a804:	2900      	cmp	r1, #0
 800a806:	f000 80b9 	beq.w	800a97c <_printf_i+0x19c>
 800a80a:	2958      	cmp	r1, #88	; 0x58
 800a80c:	f000 8083 	beq.w	800a916 <_printf_i+0x136>
 800a810:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a814:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a818:	e032      	b.n	800a880 <_printf_i+0xa0>
 800a81a:	2964      	cmp	r1, #100	; 0x64
 800a81c:	d001      	beq.n	800a822 <_printf_i+0x42>
 800a81e:	2969      	cmp	r1, #105	; 0x69
 800a820:	d1f6      	bne.n	800a810 <_printf_i+0x30>
 800a822:	6820      	ldr	r0, [r4, #0]
 800a824:	6813      	ldr	r3, [r2, #0]
 800a826:	0605      	lsls	r5, r0, #24
 800a828:	f103 0104 	add.w	r1, r3, #4
 800a82c:	d52a      	bpl.n	800a884 <_printf_i+0xa4>
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	6011      	str	r1, [r2, #0]
 800a832:	2b00      	cmp	r3, #0
 800a834:	da03      	bge.n	800a83e <_printf_i+0x5e>
 800a836:	222d      	movs	r2, #45	; 0x2d
 800a838:	425b      	negs	r3, r3
 800a83a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a83e:	486f      	ldr	r0, [pc, #444]	; (800a9fc <_printf_i+0x21c>)
 800a840:	220a      	movs	r2, #10
 800a842:	e039      	b.n	800a8b8 <_printf_i+0xd8>
 800a844:	2973      	cmp	r1, #115	; 0x73
 800a846:	f000 809d 	beq.w	800a984 <_printf_i+0x1a4>
 800a84a:	d808      	bhi.n	800a85e <_printf_i+0x7e>
 800a84c:	296f      	cmp	r1, #111	; 0x6f
 800a84e:	d020      	beq.n	800a892 <_printf_i+0xb2>
 800a850:	2970      	cmp	r1, #112	; 0x70
 800a852:	d1dd      	bne.n	800a810 <_printf_i+0x30>
 800a854:	6823      	ldr	r3, [r4, #0]
 800a856:	f043 0320 	orr.w	r3, r3, #32
 800a85a:	6023      	str	r3, [r4, #0]
 800a85c:	e003      	b.n	800a866 <_printf_i+0x86>
 800a85e:	2975      	cmp	r1, #117	; 0x75
 800a860:	d017      	beq.n	800a892 <_printf_i+0xb2>
 800a862:	2978      	cmp	r1, #120	; 0x78
 800a864:	d1d4      	bne.n	800a810 <_printf_i+0x30>
 800a866:	2378      	movs	r3, #120	; 0x78
 800a868:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a86c:	4864      	ldr	r0, [pc, #400]	; (800aa00 <_printf_i+0x220>)
 800a86e:	e055      	b.n	800a91c <_printf_i+0x13c>
 800a870:	6813      	ldr	r3, [r2, #0]
 800a872:	1d19      	adds	r1, r3, #4
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	6011      	str	r1, [r2, #0]
 800a878:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a87c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a880:	2301      	movs	r3, #1
 800a882:	e08c      	b.n	800a99e <_printf_i+0x1be>
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	6011      	str	r1, [r2, #0]
 800a888:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a88c:	bf18      	it	ne
 800a88e:	b21b      	sxthne	r3, r3
 800a890:	e7cf      	b.n	800a832 <_printf_i+0x52>
 800a892:	6813      	ldr	r3, [r2, #0]
 800a894:	6825      	ldr	r5, [r4, #0]
 800a896:	1d18      	adds	r0, r3, #4
 800a898:	6010      	str	r0, [r2, #0]
 800a89a:	0628      	lsls	r0, r5, #24
 800a89c:	d501      	bpl.n	800a8a2 <_printf_i+0xc2>
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	e002      	b.n	800a8a8 <_printf_i+0xc8>
 800a8a2:	0668      	lsls	r0, r5, #25
 800a8a4:	d5fb      	bpl.n	800a89e <_printf_i+0xbe>
 800a8a6:	881b      	ldrh	r3, [r3, #0]
 800a8a8:	4854      	ldr	r0, [pc, #336]	; (800a9fc <_printf_i+0x21c>)
 800a8aa:	296f      	cmp	r1, #111	; 0x6f
 800a8ac:	bf14      	ite	ne
 800a8ae:	220a      	movne	r2, #10
 800a8b0:	2208      	moveq	r2, #8
 800a8b2:	2100      	movs	r1, #0
 800a8b4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a8b8:	6865      	ldr	r5, [r4, #4]
 800a8ba:	60a5      	str	r5, [r4, #8]
 800a8bc:	2d00      	cmp	r5, #0
 800a8be:	f2c0 8095 	blt.w	800a9ec <_printf_i+0x20c>
 800a8c2:	6821      	ldr	r1, [r4, #0]
 800a8c4:	f021 0104 	bic.w	r1, r1, #4
 800a8c8:	6021      	str	r1, [r4, #0]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d13d      	bne.n	800a94a <_printf_i+0x16a>
 800a8ce:	2d00      	cmp	r5, #0
 800a8d0:	f040 808e 	bne.w	800a9f0 <_printf_i+0x210>
 800a8d4:	4665      	mov	r5, ip
 800a8d6:	2a08      	cmp	r2, #8
 800a8d8:	d10b      	bne.n	800a8f2 <_printf_i+0x112>
 800a8da:	6823      	ldr	r3, [r4, #0]
 800a8dc:	07db      	lsls	r3, r3, #31
 800a8de:	d508      	bpl.n	800a8f2 <_printf_i+0x112>
 800a8e0:	6923      	ldr	r3, [r4, #16]
 800a8e2:	6862      	ldr	r2, [r4, #4]
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	bfde      	ittt	le
 800a8e8:	2330      	movle	r3, #48	; 0x30
 800a8ea:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a8ee:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a8f2:	ebac 0305 	sub.w	r3, ip, r5
 800a8f6:	6123      	str	r3, [r4, #16]
 800a8f8:	f8cd 8000 	str.w	r8, [sp]
 800a8fc:	463b      	mov	r3, r7
 800a8fe:	aa03      	add	r2, sp, #12
 800a900:	4621      	mov	r1, r4
 800a902:	4630      	mov	r0, r6
 800a904:	f7ff fef6 	bl	800a6f4 <_printf_common>
 800a908:	3001      	adds	r0, #1
 800a90a:	d14d      	bne.n	800a9a8 <_printf_i+0x1c8>
 800a90c:	f04f 30ff 	mov.w	r0, #4294967295
 800a910:	b005      	add	sp, #20
 800a912:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a916:	4839      	ldr	r0, [pc, #228]	; (800a9fc <_printf_i+0x21c>)
 800a918:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a91c:	6813      	ldr	r3, [r2, #0]
 800a91e:	6821      	ldr	r1, [r4, #0]
 800a920:	1d1d      	adds	r5, r3, #4
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	6015      	str	r5, [r2, #0]
 800a926:	060a      	lsls	r2, r1, #24
 800a928:	d50b      	bpl.n	800a942 <_printf_i+0x162>
 800a92a:	07ca      	lsls	r2, r1, #31
 800a92c:	bf44      	itt	mi
 800a92e:	f041 0120 	orrmi.w	r1, r1, #32
 800a932:	6021      	strmi	r1, [r4, #0]
 800a934:	b91b      	cbnz	r3, 800a93e <_printf_i+0x15e>
 800a936:	6822      	ldr	r2, [r4, #0]
 800a938:	f022 0220 	bic.w	r2, r2, #32
 800a93c:	6022      	str	r2, [r4, #0]
 800a93e:	2210      	movs	r2, #16
 800a940:	e7b7      	b.n	800a8b2 <_printf_i+0xd2>
 800a942:	064d      	lsls	r5, r1, #25
 800a944:	bf48      	it	mi
 800a946:	b29b      	uxthmi	r3, r3
 800a948:	e7ef      	b.n	800a92a <_printf_i+0x14a>
 800a94a:	4665      	mov	r5, ip
 800a94c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a950:	fb02 3311 	mls	r3, r2, r1, r3
 800a954:	5cc3      	ldrb	r3, [r0, r3]
 800a956:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a95a:	460b      	mov	r3, r1
 800a95c:	2900      	cmp	r1, #0
 800a95e:	d1f5      	bne.n	800a94c <_printf_i+0x16c>
 800a960:	e7b9      	b.n	800a8d6 <_printf_i+0xf6>
 800a962:	6813      	ldr	r3, [r2, #0]
 800a964:	6825      	ldr	r5, [r4, #0]
 800a966:	6961      	ldr	r1, [r4, #20]
 800a968:	1d18      	adds	r0, r3, #4
 800a96a:	6010      	str	r0, [r2, #0]
 800a96c:	0628      	lsls	r0, r5, #24
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	d501      	bpl.n	800a976 <_printf_i+0x196>
 800a972:	6019      	str	r1, [r3, #0]
 800a974:	e002      	b.n	800a97c <_printf_i+0x19c>
 800a976:	066a      	lsls	r2, r5, #25
 800a978:	d5fb      	bpl.n	800a972 <_printf_i+0x192>
 800a97a:	8019      	strh	r1, [r3, #0]
 800a97c:	2300      	movs	r3, #0
 800a97e:	6123      	str	r3, [r4, #16]
 800a980:	4665      	mov	r5, ip
 800a982:	e7b9      	b.n	800a8f8 <_printf_i+0x118>
 800a984:	6813      	ldr	r3, [r2, #0]
 800a986:	1d19      	adds	r1, r3, #4
 800a988:	6011      	str	r1, [r2, #0]
 800a98a:	681d      	ldr	r5, [r3, #0]
 800a98c:	6862      	ldr	r2, [r4, #4]
 800a98e:	2100      	movs	r1, #0
 800a990:	4628      	mov	r0, r5
 800a992:	f7f5 fc25 	bl	80001e0 <memchr>
 800a996:	b108      	cbz	r0, 800a99c <_printf_i+0x1bc>
 800a998:	1b40      	subs	r0, r0, r5
 800a99a:	6060      	str	r0, [r4, #4]
 800a99c:	6863      	ldr	r3, [r4, #4]
 800a99e:	6123      	str	r3, [r4, #16]
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9a6:	e7a7      	b.n	800a8f8 <_printf_i+0x118>
 800a9a8:	6923      	ldr	r3, [r4, #16]
 800a9aa:	462a      	mov	r2, r5
 800a9ac:	4639      	mov	r1, r7
 800a9ae:	4630      	mov	r0, r6
 800a9b0:	47c0      	blx	r8
 800a9b2:	3001      	adds	r0, #1
 800a9b4:	d0aa      	beq.n	800a90c <_printf_i+0x12c>
 800a9b6:	6823      	ldr	r3, [r4, #0]
 800a9b8:	079b      	lsls	r3, r3, #30
 800a9ba:	d413      	bmi.n	800a9e4 <_printf_i+0x204>
 800a9bc:	68e0      	ldr	r0, [r4, #12]
 800a9be:	9b03      	ldr	r3, [sp, #12]
 800a9c0:	4298      	cmp	r0, r3
 800a9c2:	bfb8      	it	lt
 800a9c4:	4618      	movlt	r0, r3
 800a9c6:	e7a3      	b.n	800a910 <_printf_i+0x130>
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	464a      	mov	r2, r9
 800a9cc:	4639      	mov	r1, r7
 800a9ce:	4630      	mov	r0, r6
 800a9d0:	47c0      	blx	r8
 800a9d2:	3001      	adds	r0, #1
 800a9d4:	d09a      	beq.n	800a90c <_printf_i+0x12c>
 800a9d6:	3501      	adds	r5, #1
 800a9d8:	68e3      	ldr	r3, [r4, #12]
 800a9da:	9a03      	ldr	r2, [sp, #12]
 800a9dc:	1a9b      	subs	r3, r3, r2
 800a9de:	42ab      	cmp	r3, r5
 800a9e0:	dcf2      	bgt.n	800a9c8 <_printf_i+0x1e8>
 800a9e2:	e7eb      	b.n	800a9bc <_printf_i+0x1dc>
 800a9e4:	2500      	movs	r5, #0
 800a9e6:	f104 0919 	add.w	r9, r4, #25
 800a9ea:	e7f5      	b.n	800a9d8 <_printf_i+0x1f8>
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d1ac      	bne.n	800a94a <_printf_i+0x16a>
 800a9f0:	7803      	ldrb	r3, [r0, #0]
 800a9f2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a9f6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a9fa:	e76c      	b.n	800a8d6 <_printf_i+0xf6>
 800a9fc:	0800e04a 	.word	0x0800e04a
 800aa00:	0800e05b 	.word	0x0800e05b

0800aa04 <iprintf>:
 800aa04:	b40f      	push	{r0, r1, r2, r3}
 800aa06:	4b0a      	ldr	r3, [pc, #40]	; (800aa30 <iprintf+0x2c>)
 800aa08:	b513      	push	{r0, r1, r4, lr}
 800aa0a:	681c      	ldr	r4, [r3, #0]
 800aa0c:	b124      	cbz	r4, 800aa18 <iprintf+0x14>
 800aa0e:	69a3      	ldr	r3, [r4, #24]
 800aa10:	b913      	cbnz	r3, 800aa18 <iprintf+0x14>
 800aa12:	4620      	mov	r0, r4
 800aa14:	f001 f878 	bl	800bb08 <__sinit>
 800aa18:	ab05      	add	r3, sp, #20
 800aa1a:	9a04      	ldr	r2, [sp, #16]
 800aa1c:	68a1      	ldr	r1, [r4, #8]
 800aa1e:	9301      	str	r3, [sp, #4]
 800aa20:	4620      	mov	r0, r4
 800aa22:	f001 fc83 	bl	800c32c <_vfiprintf_r>
 800aa26:	b002      	add	sp, #8
 800aa28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa2c:	b004      	add	sp, #16
 800aa2e:	4770      	bx	lr
 800aa30:	2000061c 	.word	0x2000061c

0800aa34 <_puts_r>:
 800aa34:	b570      	push	{r4, r5, r6, lr}
 800aa36:	460e      	mov	r6, r1
 800aa38:	4605      	mov	r5, r0
 800aa3a:	b118      	cbz	r0, 800aa44 <_puts_r+0x10>
 800aa3c:	6983      	ldr	r3, [r0, #24]
 800aa3e:	b90b      	cbnz	r3, 800aa44 <_puts_r+0x10>
 800aa40:	f001 f862 	bl	800bb08 <__sinit>
 800aa44:	69ab      	ldr	r3, [r5, #24]
 800aa46:	68ac      	ldr	r4, [r5, #8]
 800aa48:	b913      	cbnz	r3, 800aa50 <_puts_r+0x1c>
 800aa4a:	4628      	mov	r0, r5
 800aa4c:	f001 f85c 	bl	800bb08 <__sinit>
 800aa50:	4b23      	ldr	r3, [pc, #140]	; (800aae0 <_puts_r+0xac>)
 800aa52:	429c      	cmp	r4, r3
 800aa54:	d117      	bne.n	800aa86 <_puts_r+0x52>
 800aa56:	686c      	ldr	r4, [r5, #4]
 800aa58:	89a3      	ldrh	r3, [r4, #12]
 800aa5a:	071b      	lsls	r3, r3, #28
 800aa5c:	d51d      	bpl.n	800aa9a <_puts_r+0x66>
 800aa5e:	6923      	ldr	r3, [r4, #16]
 800aa60:	b1db      	cbz	r3, 800aa9a <_puts_r+0x66>
 800aa62:	3e01      	subs	r6, #1
 800aa64:	68a3      	ldr	r3, [r4, #8]
 800aa66:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800aa6a:	3b01      	subs	r3, #1
 800aa6c:	60a3      	str	r3, [r4, #8]
 800aa6e:	b9e9      	cbnz	r1, 800aaac <_puts_r+0x78>
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	da2e      	bge.n	800aad2 <_puts_r+0x9e>
 800aa74:	4622      	mov	r2, r4
 800aa76:	210a      	movs	r1, #10
 800aa78:	4628      	mov	r0, r5
 800aa7a:	f000 f84f 	bl	800ab1c <__swbuf_r>
 800aa7e:	3001      	adds	r0, #1
 800aa80:	d011      	beq.n	800aaa6 <_puts_r+0x72>
 800aa82:	200a      	movs	r0, #10
 800aa84:	e011      	b.n	800aaaa <_puts_r+0x76>
 800aa86:	4b17      	ldr	r3, [pc, #92]	; (800aae4 <_puts_r+0xb0>)
 800aa88:	429c      	cmp	r4, r3
 800aa8a:	d101      	bne.n	800aa90 <_puts_r+0x5c>
 800aa8c:	68ac      	ldr	r4, [r5, #8]
 800aa8e:	e7e3      	b.n	800aa58 <_puts_r+0x24>
 800aa90:	4b15      	ldr	r3, [pc, #84]	; (800aae8 <_puts_r+0xb4>)
 800aa92:	429c      	cmp	r4, r3
 800aa94:	bf08      	it	eq
 800aa96:	68ec      	ldreq	r4, [r5, #12]
 800aa98:	e7de      	b.n	800aa58 <_puts_r+0x24>
 800aa9a:	4621      	mov	r1, r4
 800aa9c:	4628      	mov	r0, r5
 800aa9e:	f000 f88f 	bl	800abc0 <__swsetup_r>
 800aaa2:	2800      	cmp	r0, #0
 800aaa4:	d0dd      	beq.n	800aa62 <_puts_r+0x2e>
 800aaa6:	f04f 30ff 	mov.w	r0, #4294967295
 800aaaa:	bd70      	pop	{r4, r5, r6, pc}
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	da04      	bge.n	800aaba <_puts_r+0x86>
 800aab0:	69a2      	ldr	r2, [r4, #24]
 800aab2:	429a      	cmp	r2, r3
 800aab4:	dc06      	bgt.n	800aac4 <_puts_r+0x90>
 800aab6:	290a      	cmp	r1, #10
 800aab8:	d004      	beq.n	800aac4 <_puts_r+0x90>
 800aaba:	6823      	ldr	r3, [r4, #0]
 800aabc:	1c5a      	adds	r2, r3, #1
 800aabe:	6022      	str	r2, [r4, #0]
 800aac0:	7019      	strb	r1, [r3, #0]
 800aac2:	e7cf      	b.n	800aa64 <_puts_r+0x30>
 800aac4:	4622      	mov	r2, r4
 800aac6:	4628      	mov	r0, r5
 800aac8:	f000 f828 	bl	800ab1c <__swbuf_r>
 800aacc:	3001      	adds	r0, #1
 800aace:	d1c9      	bne.n	800aa64 <_puts_r+0x30>
 800aad0:	e7e9      	b.n	800aaa6 <_puts_r+0x72>
 800aad2:	6823      	ldr	r3, [r4, #0]
 800aad4:	200a      	movs	r0, #10
 800aad6:	1c5a      	adds	r2, r3, #1
 800aad8:	6022      	str	r2, [r4, #0]
 800aada:	7018      	strb	r0, [r3, #0]
 800aadc:	e7e5      	b.n	800aaaa <_puts_r+0x76>
 800aade:	bf00      	nop
 800aae0:	0800e09c 	.word	0x0800e09c
 800aae4:	0800e0bc 	.word	0x0800e0bc
 800aae8:	0800e07c 	.word	0x0800e07c

0800aaec <puts>:
 800aaec:	4b02      	ldr	r3, [pc, #8]	; (800aaf8 <puts+0xc>)
 800aaee:	4601      	mov	r1, r0
 800aaf0:	6818      	ldr	r0, [r3, #0]
 800aaf2:	f7ff bf9f 	b.w	800aa34 <_puts_r>
 800aaf6:	bf00      	nop
 800aaf8:	2000061c 	.word	0x2000061c

0800aafc <_sbrk_r>:
 800aafc:	b538      	push	{r3, r4, r5, lr}
 800aafe:	4c06      	ldr	r4, [pc, #24]	; (800ab18 <_sbrk_r+0x1c>)
 800ab00:	2300      	movs	r3, #0
 800ab02:	4605      	mov	r5, r0
 800ab04:	4608      	mov	r0, r1
 800ab06:	6023      	str	r3, [r4, #0]
 800ab08:	f7f7 f902 	bl	8001d10 <_sbrk>
 800ab0c:	1c43      	adds	r3, r0, #1
 800ab0e:	d102      	bne.n	800ab16 <_sbrk_r+0x1a>
 800ab10:	6823      	ldr	r3, [r4, #0]
 800ab12:	b103      	cbz	r3, 800ab16 <_sbrk_r+0x1a>
 800ab14:	602b      	str	r3, [r5, #0]
 800ab16:	bd38      	pop	{r3, r4, r5, pc}
 800ab18:	20001750 	.word	0x20001750

0800ab1c <__swbuf_r>:
 800ab1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab1e:	460e      	mov	r6, r1
 800ab20:	4614      	mov	r4, r2
 800ab22:	4605      	mov	r5, r0
 800ab24:	b118      	cbz	r0, 800ab2e <__swbuf_r+0x12>
 800ab26:	6983      	ldr	r3, [r0, #24]
 800ab28:	b90b      	cbnz	r3, 800ab2e <__swbuf_r+0x12>
 800ab2a:	f000 ffed 	bl	800bb08 <__sinit>
 800ab2e:	4b21      	ldr	r3, [pc, #132]	; (800abb4 <__swbuf_r+0x98>)
 800ab30:	429c      	cmp	r4, r3
 800ab32:	d12a      	bne.n	800ab8a <__swbuf_r+0x6e>
 800ab34:	686c      	ldr	r4, [r5, #4]
 800ab36:	69a3      	ldr	r3, [r4, #24]
 800ab38:	60a3      	str	r3, [r4, #8]
 800ab3a:	89a3      	ldrh	r3, [r4, #12]
 800ab3c:	071a      	lsls	r2, r3, #28
 800ab3e:	d52e      	bpl.n	800ab9e <__swbuf_r+0x82>
 800ab40:	6923      	ldr	r3, [r4, #16]
 800ab42:	b363      	cbz	r3, 800ab9e <__swbuf_r+0x82>
 800ab44:	6923      	ldr	r3, [r4, #16]
 800ab46:	6820      	ldr	r0, [r4, #0]
 800ab48:	1ac0      	subs	r0, r0, r3
 800ab4a:	6963      	ldr	r3, [r4, #20]
 800ab4c:	b2f6      	uxtb	r6, r6
 800ab4e:	4283      	cmp	r3, r0
 800ab50:	4637      	mov	r7, r6
 800ab52:	dc04      	bgt.n	800ab5e <__swbuf_r+0x42>
 800ab54:	4621      	mov	r1, r4
 800ab56:	4628      	mov	r0, r5
 800ab58:	f000 ff6c 	bl	800ba34 <_fflush_r>
 800ab5c:	bb28      	cbnz	r0, 800abaa <__swbuf_r+0x8e>
 800ab5e:	68a3      	ldr	r3, [r4, #8]
 800ab60:	3b01      	subs	r3, #1
 800ab62:	60a3      	str	r3, [r4, #8]
 800ab64:	6823      	ldr	r3, [r4, #0]
 800ab66:	1c5a      	adds	r2, r3, #1
 800ab68:	6022      	str	r2, [r4, #0]
 800ab6a:	701e      	strb	r6, [r3, #0]
 800ab6c:	6963      	ldr	r3, [r4, #20]
 800ab6e:	3001      	adds	r0, #1
 800ab70:	4283      	cmp	r3, r0
 800ab72:	d004      	beq.n	800ab7e <__swbuf_r+0x62>
 800ab74:	89a3      	ldrh	r3, [r4, #12]
 800ab76:	07db      	lsls	r3, r3, #31
 800ab78:	d519      	bpl.n	800abae <__swbuf_r+0x92>
 800ab7a:	2e0a      	cmp	r6, #10
 800ab7c:	d117      	bne.n	800abae <__swbuf_r+0x92>
 800ab7e:	4621      	mov	r1, r4
 800ab80:	4628      	mov	r0, r5
 800ab82:	f000 ff57 	bl	800ba34 <_fflush_r>
 800ab86:	b190      	cbz	r0, 800abae <__swbuf_r+0x92>
 800ab88:	e00f      	b.n	800abaa <__swbuf_r+0x8e>
 800ab8a:	4b0b      	ldr	r3, [pc, #44]	; (800abb8 <__swbuf_r+0x9c>)
 800ab8c:	429c      	cmp	r4, r3
 800ab8e:	d101      	bne.n	800ab94 <__swbuf_r+0x78>
 800ab90:	68ac      	ldr	r4, [r5, #8]
 800ab92:	e7d0      	b.n	800ab36 <__swbuf_r+0x1a>
 800ab94:	4b09      	ldr	r3, [pc, #36]	; (800abbc <__swbuf_r+0xa0>)
 800ab96:	429c      	cmp	r4, r3
 800ab98:	bf08      	it	eq
 800ab9a:	68ec      	ldreq	r4, [r5, #12]
 800ab9c:	e7cb      	b.n	800ab36 <__swbuf_r+0x1a>
 800ab9e:	4621      	mov	r1, r4
 800aba0:	4628      	mov	r0, r5
 800aba2:	f000 f80d 	bl	800abc0 <__swsetup_r>
 800aba6:	2800      	cmp	r0, #0
 800aba8:	d0cc      	beq.n	800ab44 <__swbuf_r+0x28>
 800abaa:	f04f 37ff 	mov.w	r7, #4294967295
 800abae:	4638      	mov	r0, r7
 800abb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abb2:	bf00      	nop
 800abb4:	0800e09c 	.word	0x0800e09c
 800abb8:	0800e0bc 	.word	0x0800e0bc
 800abbc:	0800e07c 	.word	0x0800e07c

0800abc0 <__swsetup_r>:
 800abc0:	4b32      	ldr	r3, [pc, #200]	; (800ac8c <__swsetup_r+0xcc>)
 800abc2:	b570      	push	{r4, r5, r6, lr}
 800abc4:	681d      	ldr	r5, [r3, #0]
 800abc6:	4606      	mov	r6, r0
 800abc8:	460c      	mov	r4, r1
 800abca:	b125      	cbz	r5, 800abd6 <__swsetup_r+0x16>
 800abcc:	69ab      	ldr	r3, [r5, #24]
 800abce:	b913      	cbnz	r3, 800abd6 <__swsetup_r+0x16>
 800abd0:	4628      	mov	r0, r5
 800abd2:	f000 ff99 	bl	800bb08 <__sinit>
 800abd6:	4b2e      	ldr	r3, [pc, #184]	; (800ac90 <__swsetup_r+0xd0>)
 800abd8:	429c      	cmp	r4, r3
 800abda:	d10f      	bne.n	800abfc <__swsetup_r+0x3c>
 800abdc:	686c      	ldr	r4, [r5, #4]
 800abde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abe2:	b29a      	uxth	r2, r3
 800abe4:	0715      	lsls	r5, r2, #28
 800abe6:	d42c      	bmi.n	800ac42 <__swsetup_r+0x82>
 800abe8:	06d0      	lsls	r0, r2, #27
 800abea:	d411      	bmi.n	800ac10 <__swsetup_r+0x50>
 800abec:	2209      	movs	r2, #9
 800abee:	6032      	str	r2, [r6, #0]
 800abf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abf4:	81a3      	strh	r3, [r4, #12]
 800abf6:	f04f 30ff 	mov.w	r0, #4294967295
 800abfa:	e03e      	b.n	800ac7a <__swsetup_r+0xba>
 800abfc:	4b25      	ldr	r3, [pc, #148]	; (800ac94 <__swsetup_r+0xd4>)
 800abfe:	429c      	cmp	r4, r3
 800ac00:	d101      	bne.n	800ac06 <__swsetup_r+0x46>
 800ac02:	68ac      	ldr	r4, [r5, #8]
 800ac04:	e7eb      	b.n	800abde <__swsetup_r+0x1e>
 800ac06:	4b24      	ldr	r3, [pc, #144]	; (800ac98 <__swsetup_r+0xd8>)
 800ac08:	429c      	cmp	r4, r3
 800ac0a:	bf08      	it	eq
 800ac0c:	68ec      	ldreq	r4, [r5, #12]
 800ac0e:	e7e6      	b.n	800abde <__swsetup_r+0x1e>
 800ac10:	0751      	lsls	r1, r2, #29
 800ac12:	d512      	bpl.n	800ac3a <__swsetup_r+0x7a>
 800ac14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac16:	b141      	cbz	r1, 800ac2a <__swsetup_r+0x6a>
 800ac18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac1c:	4299      	cmp	r1, r3
 800ac1e:	d002      	beq.n	800ac26 <__swsetup_r+0x66>
 800ac20:	4630      	mov	r0, r6
 800ac22:	f7ff f9eb 	bl	8009ffc <_free_r>
 800ac26:	2300      	movs	r3, #0
 800ac28:	6363      	str	r3, [r4, #52]	; 0x34
 800ac2a:	89a3      	ldrh	r3, [r4, #12]
 800ac2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ac30:	81a3      	strh	r3, [r4, #12]
 800ac32:	2300      	movs	r3, #0
 800ac34:	6063      	str	r3, [r4, #4]
 800ac36:	6923      	ldr	r3, [r4, #16]
 800ac38:	6023      	str	r3, [r4, #0]
 800ac3a:	89a3      	ldrh	r3, [r4, #12]
 800ac3c:	f043 0308 	orr.w	r3, r3, #8
 800ac40:	81a3      	strh	r3, [r4, #12]
 800ac42:	6923      	ldr	r3, [r4, #16]
 800ac44:	b94b      	cbnz	r3, 800ac5a <__swsetup_r+0x9a>
 800ac46:	89a3      	ldrh	r3, [r4, #12]
 800ac48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ac4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac50:	d003      	beq.n	800ac5a <__swsetup_r+0x9a>
 800ac52:	4621      	mov	r1, r4
 800ac54:	4630      	mov	r0, r6
 800ac56:	f001 f813 	bl	800bc80 <__smakebuf_r>
 800ac5a:	89a2      	ldrh	r2, [r4, #12]
 800ac5c:	f012 0301 	ands.w	r3, r2, #1
 800ac60:	d00c      	beq.n	800ac7c <__swsetup_r+0xbc>
 800ac62:	2300      	movs	r3, #0
 800ac64:	60a3      	str	r3, [r4, #8]
 800ac66:	6963      	ldr	r3, [r4, #20]
 800ac68:	425b      	negs	r3, r3
 800ac6a:	61a3      	str	r3, [r4, #24]
 800ac6c:	6923      	ldr	r3, [r4, #16]
 800ac6e:	b953      	cbnz	r3, 800ac86 <__swsetup_r+0xc6>
 800ac70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac74:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800ac78:	d1ba      	bne.n	800abf0 <__swsetup_r+0x30>
 800ac7a:	bd70      	pop	{r4, r5, r6, pc}
 800ac7c:	0792      	lsls	r2, r2, #30
 800ac7e:	bf58      	it	pl
 800ac80:	6963      	ldrpl	r3, [r4, #20]
 800ac82:	60a3      	str	r3, [r4, #8]
 800ac84:	e7f2      	b.n	800ac6c <__swsetup_r+0xac>
 800ac86:	2000      	movs	r0, #0
 800ac88:	e7f7      	b.n	800ac7a <__swsetup_r+0xba>
 800ac8a:	bf00      	nop
 800ac8c:	2000061c 	.word	0x2000061c
 800ac90:	0800e09c 	.word	0x0800e09c
 800ac94:	0800e0bc 	.word	0x0800e0bc
 800ac98:	0800e07c 	.word	0x0800e07c

0800ac9c <quorem>:
 800ac9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aca0:	6903      	ldr	r3, [r0, #16]
 800aca2:	690c      	ldr	r4, [r1, #16]
 800aca4:	42a3      	cmp	r3, r4
 800aca6:	4680      	mov	r8, r0
 800aca8:	f2c0 8082 	blt.w	800adb0 <quorem+0x114>
 800acac:	3c01      	subs	r4, #1
 800acae:	f101 0714 	add.w	r7, r1, #20
 800acb2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800acb6:	f100 0614 	add.w	r6, r0, #20
 800acba:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800acbe:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800acc2:	eb06 030c 	add.w	r3, r6, ip
 800acc6:	3501      	adds	r5, #1
 800acc8:	eb07 090c 	add.w	r9, r7, ip
 800accc:	9301      	str	r3, [sp, #4]
 800acce:	fbb0 f5f5 	udiv	r5, r0, r5
 800acd2:	b395      	cbz	r5, 800ad3a <quorem+0x9e>
 800acd4:	f04f 0a00 	mov.w	sl, #0
 800acd8:	4638      	mov	r0, r7
 800acda:	46b6      	mov	lr, r6
 800acdc:	46d3      	mov	fp, sl
 800acde:	f850 2b04 	ldr.w	r2, [r0], #4
 800ace2:	b293      	uxth	r3, r2
 800ace4:	fb05 a303 	mla	r3, r5, r3, sl
 800ace8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800acec:	b29b      	uxth	r3, r3
 800acee:	ebab 0303 	sub.w	r3, fp, r3
 800acf2:	0c12      	lsrs	r2, r2, #16
 800acf4:	f8de b000 	ldr.w	fp, [lr]
 800acf8:	fb05 a202 	mla	r2, r5, r2, sl
 800acfc:	fa13 f38b 	uxtah	r3, r3, fp
 800ad00:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800ad04:	fa1f fb82 	uxth.w	fp, r2
 800ad08:	f8de 2000 	ldr.w	r2, [lr]
 800ad0c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800ad10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ad14:	b29b      	uxth	r3, r3
 800ad16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ad1a:	4581      	cmp	r9, r0
 800ad1c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800ad20:	f84e 3b04 	str.w	r3, [lr], #4
 800ad24:	d2db      	bcs.n	800acde <quorem+0x42>
 800ad26:	f856 300c 	ldr.w	r3, [r6, ip]
 800ad2a:	b933      	cbnz	r3, 800ad3a <quorem+0x9e>
 800ad2c:	9b01      	ldr	r3, [sp, #4]
 800ad2e:	3b04      	subs	r3, #4
 800ad30:	429e      	cmp	r6, r3
 800ad32:	461a      	mov	r2, r3
 800ad34:	d330      	bcc.n	800ad98 <quorem+0xfc>
 800ad36:	f8c8 4010 	str.w	r4, [r8, #16]
 800ad3a:	4640      	mov	r0, r8
 800ad3c:	f001 f9f8 	bl	800c130 <__mcmp>
 800ad40:	2800      	cmp	r0, #0
 800ad42:	db25      	blt.n	800ad90 <quorem+0xf4>
 800ad44:	3501      	adds	r5, #1
 800ad46:	4630      	mov	r0, r6
 800ad48:	f04f 0c00 	mov.w	ip, #0
 800ad4c:	f857 2b04 	ldr.w	r2, [r7], #4
 800ad50:	f8d0 e000 	ldr.w	lr, [r0]
 800ad54:	b293      	uxth	r3, r2
 800ad56:	ebac 0303 	sub.w	r3, ip, r3
 800ad5a:	0c12      	lsrs	r2, r2, #16
 800ad5c:	fa13 f38e 	uxtah	r3, r3, lr
 800ad60:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ad64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ad68:	b29b      	uxth	r3, r3
 800ad6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ad6e:	45b9      	cmp	r9, r7
 800ad70:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ad74:	f840 3b04 	str.w	r3, [r0], #4
 800ad78:	d2e8      	bcs.n	800ad4c <quorem+0xb0>
 800ad7a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800ad7e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800ad82:	b92a      	cbnz	r2, 800ad90 <quorem+0xf4>
 800ad84:	3b04      	subs	r3, #4
 800ad86:	429e      	cmp	r6, r3
 800ad88:	461a      	mov	r2, r3
 800ad8a:	d30b      	bcc.n	800ada4 <quorem+0x108>
 800ad8c:	f8c8 4010 	str.w	r4, [r8, #16]
 800ad90:	4628      	mov	r0, r5
 800ad92:	b003      	add	sp, #12
 800ad94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad98:	6812      	ldr	r2, [r2, #0]
 800ad9a:	3b04      	subs	r3, #4
 800ad9c:	2a00      	cmp	r2, #0
 800ad9e:	d1ca      	bne.n	800ad36 <quorem+0x9a>
 800ada0:	3c01      	subs	r4, #1
 800ada2:	e7c5      	b.n	800ad30 <quorem+0x94>
 800ada4:	6812      	ldr	r2, [r2, #0]
 800ada6:	3b04      	subs	r3, #4
 800ada8:	2a00      	cmp	r2, #0
 800adaa:	d1ef      	bne.n	800ad8c <quorem+0xf0>
 800adac:	3c01      	subs	r4, #1
 800adae:	e7ea      	b.n	800ad86 <quorem+0xea>
 800adb0:	2000      	movs	r0, #0
 800adb2:	e7ee      	b.n	800ad92 <quorem+0xf6>
 800adb4:	0000      	movs	r0, r0
	...

0800adb8 <_dtoa_r>:
 800adb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adbc:	ec57 6b10 	vmov	r6, r7, d0
 800adc0:	b097      	sub	sp, #92	; 0x5c
 800adc2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800adc4:	9106      	str	r1, [sp, #24]
 800adc6:	4604      	mov	r4, r0
 800adc8:	920b      	str	r2, [sp, #44]	; 0x2c
 800adca:	9312      	str	r3, [sp, #72]	; 0x48
 800adcc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800add0:	e9cd 6700 	strd	r6, r7, [sp]
 800add4:	b93d      	cbnz	r5, 800ade6 <_dtoa_r+0x2e>
 800add6:	2010      	movs	r0, #16
 800add8:	f7ff f8f4 	bl	8009fc4 <malloc>
 800addc:	6260      	str	r0, [r4, #36]	; 0x24
 800adde:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ade2:	6005      	str	r5, [r0, #0]
 800ade4:	60c5      	str	r5, [r0, #12]
 800ade6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ade8:	6819      	ldr	r1, [r3, #0]
 800adea:	b151      	cbz	r1, 800ae02 <_dtoa_r+0x4a>
 800adec:	685a      	ldr	r2, [r3, #4]
 800adee:	604a      	str	r2, [r1, #4]
 800adf0:	2301      	movs	r3, #1
 800adf2:	4093      	lsls	r3, r2
 800adf4:	608b      	str	r3, [r1, #8]
 800adf6:	4620      	mov	r0, r4
 800adf8:	f000 ffb8 	bl	800bd6c <_Bfree>
 800adfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800adfe:	2200      	movs	r2, #0
 800ae00:	601a      	str	r2, [r3, #0]
 800ae02:	1e3b      	subs	r3, r7, #0
 800ae04:	bfbb      	ittet	lt
 800ae06:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ae0a:	9301      	strlt	r3, [sp, #4]
 800ae0c:	2300      	movge	r3, #0
 800ae0e:	2201      	movlt	r2, #1
 800ae10:	bfac      	ite	ge
 800ae12:	f8c8 3000 	strge.w	r3, [r8]
 800ae16:	f8c8 2000 	strlt.w	r2, [r8]
 800ae1a:	4baf      	ldr	r3, [pc, #700]	; (800b0d8 <_dtoa_r+0x320>)
 800ae1c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ae20:	ea33 0308 	bics.w	r3, r3, r8
 800ae24:	d114      	bne.n	800ae50 <_dtoa_r+0x98>
 800ae26:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ae28:	f242 730f 	movw	r3, #9999	; 0x270f
 800ae2c:	6013      	str	r3, [r2, #0]
 800ae2e:	9b00      	ldr	r3, [sp, #0]
 800ae30:	b923      	cbnz	r3, 800ae3c <_dtoa_r+0x84>
 800ae32:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800ae36:	2800      	cmp	r0, #0
 800ae38:	f000 8542 	beq.w	800b8c0 <_dtoa_r+0xb08>
 800ae3c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae3e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800b0ec <_dtoa_r+0x334>
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	f000 8544 	beq.w	800b8d0 <_dtoa_r+0xb18>
 800ae48:	f10b 0303 	add.w	r3, fp, #3
 800ae4c:	f000 bd3e 	b.w	800b8cc <_dtoa_r+0xb14>
 800ae50:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ae54:	2200      	movs	r2, #0
 800ae56:	2300      	movs	r3, #0
 800ae58:	4630      	mov	r0, r6
 800ae5a:	4639      	mov	r1, r7
 800ae5c:	f7f5 fe34 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae60:	4681      	mov	r9, r0
 800ae62:	b168      	cbz	r0, 800ae80 <_dtoa_r+0xc8>
 800ae64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ae66:	2301      	movs	r3, #1
 800ae68:	6013      	str	r3, [r2, #0]
 800ae6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	f000 8524 	beq.w	800b8ba <_dtoa_r+0xb02>
 800ae72:	4b9a      	ldr	r3, [pc, #616]	; (800b0dc <_dtoa_r+0x324>)
 800ae74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ae76:	f103 3bff 	add.w	fp, r3, #4294967295
 800ae7a:	6013      	str	r3, [r2, #0]
 800ae7c:	f000 bd28 	b.w	800b8d0 <_dtoa_r+0xb18>
 800ae80:	aa14      	add	r2, sp, #80	; 0x50
 800ae82:	a915      	add	r1, sp, #84	; 0x54
 800ae84:	ec47 6b10 	vmov	d0, r6, r7
 800ae88:	4620      	mov	r0, r4
 800ae8a:	f001 f9c8 	bl	800c21e <__d2b>
 800ae8e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ae92:	9004      	str	r0, [sp, #16]
 800ae94:	2d00      	cmp	r5, #0
 800ae96:	d07c      	beq.n	800af92 <_dtoa_r+0x1da>
 800ae98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ae9c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800aea0:	46b2      	mov	sl, r6
 800aea2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800aea6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800aeaa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800aeae:	2200      	movs	r2, #0
 800aeb0:	4b8b      	ldr	r3, [pc, #556]	; (800b0e0 <_dtoa_r+0x328>)
 800aeb2:	4650      	mov	r0, sl
 800aeb4:	4659      	mov	r1, fp
 800aeb6:	f7f5 f9e7 	bl	8000288 <__aeabi_dsub>
 800aeba:	a381      	add	r3, pc, #516	; (adr r3, 800b0c0 <_dtoa_r+0x308>)
 800aebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec0:	f7f5 fb9a 	bl	80005f8 <__aeabi_dmul>
 800aec4:	a380      	add	r3, pc, #512	; (adr r3, 800b0c8 <_dtoa_r+0x310>)
 800aec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeca:	f7f5 f9df 	bl	800028c <__adddf3>
 800aece:	4606      	mov	r6, r0
 800aed0:	4628      	mov	r0, r5
 800aed2:	460f      	mov	r7, r1
 800aed4:	f7f5 fb26 	bl	8000524 <__aeabi_i2d>
 800aed8:	a37d      	add	r3, pc, #500	; (adr r3, 800b0d0 <_dtoa_r+0x318>)
 800aeda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aede:	f7f5 fb8b 	bl	80005f8 <__aeabi_dmul>
 800aee2:	4602      	mov	r2, r0
 800aee4:	460b      	mov	r3, r1
 800aee6:	4630      	mov	r0, r6
 800aee8:	4639      	mov	r1, r7
 800aeea:	f7f5 f9cf 	bl	800028c <__adddf3>
 800aeee:	4606      	mov	r6, r0
 800aef0:	460f      	mov	r7, r1
 800aef2:	f7f5 fe31 	bl	8000b58 <__aeabi_d2iz>
 800aef6:	2200      	movs	r2, #0
 800aef8:	4682      	mov	sl, r0
 800aefa:	2300      	movs	r3, #0
 800aefc:	4630      	mov	r0, r6
 800aefe:	4639      	mov	r1, r7
 800af00:	f7f5 fdec 	bl	8000adc <__aeabi_dcmplt>
 800af04:	b148      	cbz	r0, 800af1a <_dtoa_r+0x162>
 800af06:	4650      	mov	r0, sl
 800af08:	f7f5 fb0c 	bl	8000524 <__aeabi_i2d>
 800af0c:	4632      	mov	r2, r6
 800af0e:	463b      	mov	r3, r7
 800af10:	f7f5 fdda 	bl	8000ac8 <__aeabi_dcmpeq>
 800af14:	b908      	cbnz	r0, 800af1a <_dtoa_r+0x162>
 800af16:	f10a 3aff 	add.w	sl, sl, #4294967295
 800af1a:	f1ba 0f16 	cmp.w	sl, #22
 800af1e:	d859      	bhi.n	800afd4 <_dtoa_r+0x21c>
 800af20:	4970      	ldr	r1, [pc, #448]	; (800b0e4 <_dtoa_r+0x32c>)
 800af22:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800af26:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af2e:	f7f5 fdf3 	bl	8000b18 <__aeabi_dcmpgt>
 800af32:	2800      	cmp	r0, #0
 800af34:	d050      	beq.n	800afd8 <_dtoa_r+0x220>
 800af36:	f10a 3aff 	add.w	sl, sl, #4294967295
 800af3a:	2300      	movs	r3, #0
 800af3c:	930f      	str	r3, [sp, #60]	; 0x3c
 800af3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800af40:	1b5d      	subs	r5, r3, r5
 800af42:	f1b5 0801 	subs.w	r8, r5, #1
 800af46:	bf49      	itett	mi
 800af48:	f1c5 0301 	rsbmi	r3, r5, #1
 800af4c:	2300      	movpl	r3, #0
 800af4e:	9305      	strmi	r3, [sp, #20]
 800af50:	f04f 0800 	movmi.w	r8, #0
 800af54:	bf58      	it	pl
 800af56:	9305      	strpl	r3, [sp, #20]
 800af58:	f1ba 0f00 	cmp.w	sl, #0
 800af5c:	db3e      	blt.n	800afdc <_dtoa_r+0x224>
 800af5e:	2300      	movs	r3, #0
 800af60:	44d0      	add	r8, sl
 800af62:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800af66:	9307      	str	r3, [sp, #28]
 800af68:	9b06      	ldr	r3, [sp, #24]
 800af6a:	2b09      	cmp	r3, #9
 800af6c:	f200 8090 	bhi.w	800b090 <_dtoa_r+0x2d8>
 800af70:	2b05      	cmp	r3, #5
 800af72:	bfc4      	itt	gt
 800af74:	3b04      	subgt	r3, #4
 800af76:	9306      	strgt	r3, [sp, #24]
 800af78:	9b06      	ldr	r3, [sp, #24]
 800af7a:	f1a3 0302 	sub.w	r3, r3, #2
 800af7e:	bfcc      	ite	gt
 800af80:	2500      	movgt	r5, #0
 800af82:	2501      	movle	r5, #1
 800af84:	2b03      	cmp	r3, #3
 800af86:	f200 808f 	bhi.w	800b0a8 <_dtoa_r+0x2f0>
 800af8a:	e8df f003 	tbb	[pc, r3]
 800af8e:	7f7d      	.short	0x7f7d
 800af90:	7131      	.short	0x7131
 800af92:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800af96:	441d      	add	r5, r3
 800af98:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800af9c:	2820      	cmp	r0, #32
 800af9e:	dd13      	ble.n	800afc8 <_dtoa_r+0x210>
 800afa0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800afa4:	9b00      	ldr	r3, [sp, #0]
 800afa6:	fa08 f800 	lsl.w	r8, r8, r0
 800afaa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800afae:	fa23 f000 	lsr.w	r0, r3, r0
 800afb2:	ea48 0000 	orr.w	r0, r8, r0
 800afb6:	f7f5 faa5 	bl	8000504 <__aeabi_ui2d>
 800afba:	2301      	movs	r3, #1
 800afbc:	4682      	mov	sl, r0
 800afbe:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800afc2:	3d01      	subs	r5, #1
 800afc4:	9313      	str	r3, [sp, #76]	; 0x4c
 800afc6:	e772      	b.n	800aeae <_dtoa_r+0xf6>
 800afc8:	9b00      	ldr	r3, [sp, #0]
 800afca:	f1c0 0020 	rsb	r0, r0, #32
 800afce:	fa03 f000 	lsl.w	r0, r3, r0
 800afd2:	e7f0      	b.n	800afb6 <_dtoa_r+0x1fe>
 800afd4:	2301      	movs	r3, #1
 800afd6:	e7b1      	b.n	800af3c <_dtoa_r+0x184>
 800afd8:	900f      	str	r0, [sp, #60]	; 0x3c
 800afda:	e7b0      	b.n	800af3e <_dtoa_r+0x186>
 800afdc:	9b05      	ldr	r3, [sp, #20]
 800afde:	eba3 030a 	sub.w	r3, r3, sl
 800afe2:	9305      	str	r3, [sp, #20]
 800afe4:	f1ca 0300 	rsb	r3, sl, #0
 800afe8:	9307      	str	r3, [sp, #28]
 800afea:	2300      	movs	r3, #0
 800afec:	930e      	str	r3, [sp, #56]	; 0x38
 800afee:	e7bb      	b.n	800af68 <_dtoa_r+0x1b0>
 800aff0:	2301      	movs	r3, #1
 800aff2:	930a      	str	r3, [sp, #40]	; 0x28
 800aff4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	dd59      	ble.n	800b0ae <_dtoa_r+0x2f6>
 800affa:	9302      	str	r3, [sp, #8]
 800affc:	4699      	mov	r9, r3
 800affe:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b000:	2200      	movs	r2, #0
 800b002:	6072      	str	r2, [r6, #4]
 800b004:	2204      	movs	r2, #4
 800b006:	f102 0014 	add.w	r0, r2, #20
 800b00a:	4298      	cmp	r0, r3
 800b00c:	6871      	ldr	r1, [r6, #4]
 800b00e:	d953      	bls.n	800b0b8 <_dtoa_r+0x300>
 800b010:	4620      	mov	r0, r4
 800b012:	f000 fe77 	bl	800bd04 <_Balloc>
 800b016:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b018:	6030      	str	r0, [r6, #0]
 800b01a:	f1b9 0f0e 	cmp.w	r9, #14
 800b01e:	f8d3 b000 	ldr.w	fp, [r3]
 800b022:	f200 80e6 	bhi.w	800b1f2 <_dtoa_r+0x43a>
 800b026:	2d00      	cmp	r5, #0
 800b028:	f000 80e3 	beq.w	800b1f2 <_dtoa_r+0x43a>
 800b02c:	ed9d 7b00 	vldr	d7, [sp]
 800b030:	f1ba 0f00 	cmp.w	sl, #0
 800b034:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800b038:	dd74      	ble.n	800b124 <_dtoa_r+0x36c>
 800b03a:	4a2a      	ldr	r2, [pc, #168]	; (800b0e4 <_dtoa_r+0x32c>)
 800b03c:	f00a 030f 	and.w	r3, sl, #15
 800b040:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b044:	ed93 7b00 	vldr	d7, [r3]
 800b048:	ea4f 162a 	mov.w	r6, sl, asr #4
 800b04c:	06f0      	lsls	r0, r6, #27
 800b04e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800b052:	d565      	bpl.n	800b120 <_dtoa_r+0x368>
 800b054:	4b24      	ldr	r3, [pc, #144]	; (800b0e8 <_dtoa_r+0x330>)
 800b056:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b05a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b05e:	f7f5 fbf5 	bl	800084c <__aeabi_ddiv>
 800b062:	e9cd 0100 	strd	r0, r1, [sp]
 800b066:	f006 060f 	and.w	r6, r6, #15
 800b06a:	2503      	movs	r5, #3
 800b06c:	4f1e      	ldr	r7, [pc, #120]	; (800b0e8 <_dtoa_r+0x330>)
 800b06e:	e04c      	b.n	800b10a <_dtoa_r+0x352>
 800b070:	2301      	movs	r3, #1
 800b072:	930a      	str	r3, [sp, #40]	; 0x28
 800b074:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b076:	4453      	add	r3, sl
 800b078:	f103 0901 	add.w	r9, r3, #1
 800b07c:	9302      	str	r3, [sp, #8]
 800b07e:	464b      	mov	r3, r9
 800b080:	2b01      	cmp	r3, #1
 800b082:	bfb8      	it	lt
 800b084:	2301      	movlt	r3, #1
 800b086:	e7ba      	b.n	800affe <_dtoa_r+0x246>
 800b088:	2300      	movs	r3, #0
 800b08a:	e7b2      	b.n	800aff2 <_dtoa_r+0x23a>
 800b08c:	2300      	movs	r3, #0
 800b08e:	e7f0      	b.n	800b072 <_dtoa_r+0x2ba>
 800b090:	2501      	movs	r5, #1
 800b092:	2300      	movs	r3, #0
 800b094:	9306      	str	r3, [sp, #24]
 800b096:	950a      	str	r5, [sp, #40]	; 0x28
 800b098:	f04f 33ff 	mov.w	r3, #4294967295
 800b09c:	9302      	str	r3, [sp, #8]
 800b09e:	4699      	mov	r9, r3
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	2312      	movs	r3, #18
 800b0a4:	920b      	str	r2, [sp, #44]	; 0x2c
 800b0a6:	e7aa      	b.n	800affe <_dtoa_r+0x246>
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	930a      	str	r3, [sp, #40]	; 0x28
 800b0ac:	e7f4      	b.n	800b098 <_dtoa_r+0x2e0>
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	9302      	str	r3, [sp, #8]
 800b0b2:	4699      	mov	r9, r3
 800b0b4:	461a      	mov	r2, r3
 800b0b6:	e7f5      	b.n	800b0a4 <_dtoa_r+0x2ec>
 800b0b8:	3101      	adds	r1, #1
 800b0ba:	6071      	str	r1, [r6, #4]
 800b0bc:	0052      	lsls	r2, r2, #1
 800b0be:	e7a2      	b.n	800b006 <_dtoa_r+0x24e>
 800b0c0:	636f4361 	.word	0x636f4361
 800b0c4:	3fd287a7 	.word	0x3fd287a7
 800b0c8:	8b60c8b3 	.word	0x8b60c8b3
 800b0cc:	3fc68a28 	.word	0x3fc68a28
 800b0d0:	509f79fb 	.word	0x509f79fb
 800b0d4:	3fd34413 	.word	0x3fd34413
 800b0d8:	7ff00000 	.word	0x7ff00000
 800b0dc:	0800e049 	.word	0x0800e049
 800b0e0:	3ff80000 	.word	0x3ff80000
 800b0e4:	0800e108 	.word	0x0800e108
 800b0e8:	0800e0e0 	.word	0x0800e0e0
 800b0ec:	0800e075 	.word	0x0800e075
 800b0f0:	07f1      	lsls	r1, r6, #31
 800b0f2:	d508      	bpl.n	800b106 <_dtoa_r+0x34e>
 800b0f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b0f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0fc:	f7f5 fa7c 	bl	80005f8 <__aeabi_dmul>
 800b100:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b104:	3501      	adds	r5, #1
 800b106:	1076      	asrs	r6, r6, #1
 800b108:	3708      	adds	r7, #8
 800b10a:	2e00      	cmp	r6, #0
 800b10c:	d1f0      	bne.n	800b0f0 <_dtoa_r+0x338>
 800b10e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b112:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b116:	f7f5 fb99 	bl	800084c <__aeabi_ddiv>
 800b11a:	e9cd 0100 	strd	r0, r1, [sp]
 800b11e:	e01a      	b.n	800b156 <_dtoa_r+0x39e>
 800b120:	2502      	movs	r5, #2
 800b122:	e7a3      	b.n	800b06c <_dtoa_r+0x2b4>
 800b124:	f000 80a0 	beq.w	800b268 <_dtoa_r+0x4b0>
 800b128:	f1ca 0600 	rsb	r6, sl, #0
 800b12c:	4b9f      	ldr	r3, [pc, #636]	; (800b3ac <_dtoa_r+0x5f4>)
 800b12e:	4fa0      	ldr	r7, [pc, #640]	; (800b3b0 <_dtoa_r+0x5f8>)
 800b130:	f006 020f 	and.w	r2, r6, #15
 800b134:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b13c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b140:	f7f5 fa5a 	bl	80005f8 <__aeabi_dmul>
 800b144:	e9cd 0100 	strd	r0, r1, [sp]
 800b148:	1136      	asrs	r6, r6, #4
 800b14a:	2300      	movs	r3, #0
 800b14c:	2502      	movs	r5, #2
 800b14e:	2e00      	cmp	r6, #0
 800b150:	d17f      	bne.n	800b252 <_dtoa_r+0x49a>
 800b152:	2b00      	cmp	r3, #0
 800b154:	d1e1      	bne.n	800b11a <_dtoa_r+0x362>
 800b156:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b158:	2b00      	cmp	r3, #0
 800b15a:	f000 8087 	beq.w	800b26c <_dtoa_r+0x4b4>
 800b15e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b162:	2200      	movs	r2, #0
 800b164:	4b93      	ldr	r3, [pc, #588]	; (800b3b4 <_dtoa_r+0x5fc>)
 800b166:	4630      	mov	r0, r6
 800b168:	4639      	mov	r1, r7
 800b16a:	f7f5 fcb7 	bl	8000adc <__aeabi_dcmplt>
 800b16e:	2800      	cmp	r0, #0
 800b170:	d07c      	beq.n	800b26c <_dtoa_r+0x4b4>
 800b172:	f1b9 0f00 	cmp.w	r9, #0
 800b176:	d079      	beq.n	800b26c <_dtoa_r+0x4b4>
 800b178:	9b02      	ldr	r3, [sp, #8]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	dd35      	ble.n	800b1ea <_dtoa_r+0x432>
 800b17e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b182:	9308      	str	r3, [sp, #32]
 800b184:	4639      	mov	r1, r7
 800b186:	2200      	movs	r2, #0
 800b188:	4b8b      	ldr	r3, [pc, #556]	; (800b3b8 <_dtoa_r+0x600>)
 800b18a:	4630      	mov	r0, r6
 800b18c:	f7f5 fa34 	bl	80005f8 <__aeabi_dmul>
 800b190:	e9cd 0100 	strd	r0, r1, [sp]
 800b194:	9f02      	ldr	r7, [sp, #8]
 800b196:	3501      	adds	r5, #1
 800b198:	4628      	mov	r0, r5
 800b19a:	f7f5 f9c3 	bl	8000524 <__aeabi_i2d>
 800b19e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b1a2:	f7f5 fa29 	bl	80005f8 <__aeabi_dmul>
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	4b84      	ldr	r3, [pc, #528]	; (800b3bc <_dtoa_r+0x604>)
 800b1aa:	f7f5 f86f 	bl	800028c <__adddf3>
 800b1ae:	4605      	mov	r5, r0
 800b1b0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800b1b4:	2f00      	cmp	r7, #0
 800b1b6:	d15d      	bne.n	800b274 <_dtoa_r+0x4bc>
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	4b81      	ldr	r3, [pc, #516]	; (800b3c0 <_dtoa_r+0x608>)
 800b1bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b1c0:	f7f5 f862 	bl	8000288 <__aeabi_dsub>
 800b1c4:	462a      	mov	r2, r5
 800b1c6:	4633      	mov	r3, r6
 800b1c8:	e9cd 0100 	strd	r0, r1, [sp]
 800b1cc:	f7f5 fca4 	bl	8000b18 <__aeabi_dcmpgt>
 800b1d0:	2800      	cmp	r0, #0
 800b1d2:	f040 8288 	bne.w	800b6e6 <_dtoa_r+0x92e>
 800b1d6:	462a      	mov	r2, r5
 800b1d8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b1dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b1e0:	f7f5 fc7c 	bl	8000adc <__aeabi_dcmplt>
 800b1e4:	2800      	cmp	r0, #0
 800b1e6:	f040 827c 	bne.w	800b6e2 <_dtoa_r+0x92a>
 800b1ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b1ee:	e9cd 2300 	strd	r2, r3, [sp]
 800b1f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	f2c0 8150 	blt.w	800b49a <_dtoa_r+0x6e2>
 800b1fa:	f1ba 0f0e 	cmp.w	sl, #14
 800b1fe:	f300 814c 	bgt.w	800b49a <_dtoa_r+0x6e2>
 800b202:	4b6a      	ldr	r3, [pc, #424]	; (800b3ac <_dtoa_r+0x5f4>)
 800b204:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b208:	ed93 7b00 	vldr	d7, [r3]
 800b20c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b20e:	2b00      	cmp	r3, #0
 800b210:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b214:	f280 80d8 	bge.w	800b3c8 <_dtoa_r+0x610>
 800b218:	f1b9 0f00 	cmp.w	r9, #0
 800b21c:	f300 80d4 	bgt.w	800b3c8 <_dtoa_r+0x610>
 800b220:	f040 825e 	bne.w	800b6e0 <_dtoa_r+0x928>
 800b224:	2200      	movs	r2, #0
 800b226:	4b66      	ldr	r3, [pc, #408]	; (800b3c0 <_dtoa_r+0x608>)
 800b228:	ec51 0b17 	vmov	r0, r1, d7
 800b22c:	f7f5 f9e4 	bl	80005f8 <__aeabi_dmul>
 800b230:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b234:	f7f5 fc66 	bl	8000b04 <__aeabi_dcmpge>
 800b238:	464f      	mov	r7, r9
 800b23a:	464e      	mov	r6, r9
 800b23c:	2800      	cmp	r0, #0
 800b23e:	f040 8234 	bne.w	800b6aa <_dtoa_r+0x8f2>
 800b242:	2331      	movs	r3, #49	; 0x31
 800b244:	f10b 0501 	add.w	r5, fp, #1
 800b248:	f88b 3000 	strb.w	r3, [fp]
 800b24c:	f10a 0a01 	add.w	sl, sl, #1
 800b250:	e22f      	b.n	800b6b2 <_dtoa_r+0x8fa>
 800b252:	07f2      	lsls	r2, r6, #31
 800b254:	d505      	bpl.n	800b262 <_dtoa_r+0x4aa>
 800b256:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b25a:	f7f5 f9cd 	bl	80005f8 <__aeabi_dmul>
 800b25e:	3501      	adds	r5, #1
 800b260:	2301      	movs	r3, #1
 800b262:	1076      	asrs	r6, r6, #1
 800b264:	3708      	adds	r7, #8
 800b266:	e772      	b.n	800b14e <_dtoa_r+0x396>
 800b268:	2502      	movs	r5, #2
 800b26a:	e774      	b.n	800b156 <_dtoa_r+0x39e>
 800b26c:	f8cd a020 	str.w	sl, [sp, #32]
 800b270:	464f      	mov	r7, r9
 800b272:	e791      	b.n	800b198 <_dtoa_r+0x3e0>
 800b274:	4b4d      	ldr	r3, [pc, #308]	; (800b3ac <_dtoa_r+0x5f4>)
 800b276:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b27a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800b27e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b280:	2b00      	cmp	r3, #0
 800b282:	d047      	beq.n	800b314 <_dtoa_r+0x55c>
 800b284:	4602      	mov	r2, r0
 800b286:	460b      	mov	r3, r1
 800b288:	2000      	movs	r0, #0
 800b28a:	494e      	ldr	r1, [pc, #312]	; (800b3c4 <_dtoa_r+0x60c>)
 800b28c:	f7f5 fade 	bl	800084c <__aeabi_ddiv>
 800b290:	462a      	mov	r2, r5
 800b292:	4633      	mov	r3, r6
 800b294:	f7f4 fff8 	bl	8000288 <__aeabi_dsub>
 800b298:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b29c:	465d      	mov	r5, fp
 800b29e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b2a2:	f7f5 fc59 	bl	8000b58 <__aeabi_d2iz>
 800b2a6:	4606      	mov	r6, r0
 800b2a8:	f7f5 f93c 	bl	8000524 <__aeabi_i2d>
 800b2ac:	4602      	mov	r2, r0
 800b2ae:	460b      	mov	r3, r1
 800b2b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b2b4:	f7f4 ffe8 	bl	8000288 <__aeabi_dsub>
 800b2b8:	3630      	adds	r6, #48	; 0x30
 800b2ba:	f805 6b01 	strb.w	r6, [r5], #1
 800b2be:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b2c2:	e9cd 0100 	strd	r0, r1, [sp]
 800b2c6:	f7f5 fc09 	bl	8000adc <__aeabi_dcmplt>
 800b2ca:	2800      	cmp	r0, #0
 800b2cc:	d163      	bne.n	800b396 <_dtoa_r+0x5de>
 800b2ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2d2:	2000      	movs	r0, #0
 800b2d4:	4937      	ldr	r1, [pc, #220]	; (800b3b4 <_dtoa_r+0x5fc>)
 800b2d6:	f7f4 ffd7 	bl	8000288 <__aeabi_dsub>
 800b2da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b2de:	f7f5 fbfd 	bl	8000adc <__aeabi_dcmplt>
 800b2e2:	2800      	cmp	r0, #0
 800b2e4:	f040 80b7 	bne.w	800b456 <_dtoa_r+0x69e>
 800b2e8:	eba5 030b 	sub.w	r3, r5, fp
 800b2ec:	429f      	cmp	r7, r3
 800b2ee:	f77f af7c 	ble.w	800b1ea <_dtoa_r+0x432>
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	4b30      	ldr	r3, [pc, #192]	; (800b3b8 <_dtoa_r+0x600>)
 800b2f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b2fa:	f7f5 f97d 	bl	80005f8 <__aeabi_dmul>
 800b2fe:	2200      	movs	r2, #0
 800b300:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b304:	4b2c      	ldr	r3, [pc, #176]	; (800b3b8 <_dtoa_r+0x600>)
 800b306:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b30a:	f7f5 f975 	bl	80005f8 <__aeabi_dmul>
 800b30e:	e9cd 0100 	strd	r0, r1, [sp]
 800b312:	e7c4      	b.n	800b29e <_dtoa_r+0x4e6>
 800b314:	462a      	mov	r2, r5
 800b316:	4633      	mov	r3, r6
 800b318:	f7f5 f96e 	bl	80005f8 <__aeabi_dmul>
 800b31c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b320:	eb0b 0507 	add.w	r5, fp, r7
 800b324:	465e      	mov	r6, fp
 800b326:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b32a:	f7f5 fc15 	bl	8000b58 <__aeabi_d2iz>
 800b32e:	4607      	mov	r7, r0
 800b330:	f7f5 f8f8 	bl	8000524 <__aeabi_i2d>
 800b334:	3730      	adds	r7, #48	; 0x30
 800b336:	4602      	mov	r2, r0
 800b338:	460b      	mov	r3, r1
 800b33a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b33e:	f7f4 ffa3 	bl	8000288 <__aeabi_dsub>
 800b342:	f806 7b01 	strb.w	r7, [r6], #1
 800b346:	42ae      	cmp	r6, r5
 800b348:	e9cd 0100 	strd	r0, r1, [sp]
 800b34c:	f04f 0200 	mov.w	r2, #0
 800b350:	d126      	bne.n	800b3a0 <_dtoa_r+0x5e8>
 800b352:	4b1c      	ldr	r3, [pc, #112]	; (800b3c4 <_dtoa_r+0x60c>)
 800b354:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b358:	f7f4 ff98 	bl	800028c <__adddf3>
 800b35c:	4602      	mov	r2, r0
 800b35e:	460b      	mov	r3, r1
 800b360:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b364:	f7f5 fbd8 	bl	8000b18 <__aeabi_dcmpgt>
 800b368:	2800      	cmp	r0, #0
 800b36a:	d174      	bne.n	800b456 <_dtoa_r+0x69e>
 800b36c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b370:	2000      	movs	r0, #0
 800b372:	4914      	ldr	r1, [pc, #80]	; (800b3c4 <_dtoa_r+0x60c>)
 800b374:	f7f4 ff88 	bl	8000288 <__aeabi_dsub>
 800b378:	4602      	mov	r2, r0
 800b37a:	460b      	mov	r3, r1
 800b37c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b380:	f7f5 fbac 	bl	8000adc <__aeabi_dcmplt>
 800b384:	2800      	cmp	r0, #0
 800b386:	f43f af30 	beq.w	800b1ea <_dtoa_r+0x432>
 800b38a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b38e:	2b30      	cmp	r3, #48	; 0x30
 800b390:	f105 32ff 	add.w	r2, r5, #4294967295
 800b394:	d002      	beq.n	800b39c <_dtoa_r+0x5e4>
 800b396:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b39a:	e04a      	b.n	800b432 <_dtoa_r+0x67a>
 800b39c:	4615      	mov	r5, r2
 800b39e:	e7f4      	b.n	800b38a <_dtoa_r+0x5d2>
 800b3a0:	4b05      	ldr	r3, [pc, #20]	; (800b3b8 <_dtoa_r+0x600>)
 800b3a2:	f7f5 f929 	bl	80005f8 <__aeabi_dmul>
 800b3a6:	e9cd 0100 	strd	r0, r1, [sp]
 800b3aa:	e7bc      	b.n	800b326 <_dtoa_r+0x56e>
 800b3ac:	0800e108 	.word	0x0800e108
 800b3b0:	0800e0e0 	.word	0x0800e0e0
 800b3b4:	3ff00000 	.word	0x3ff00000
 800b3b8:	40240000 	.word	0x40240000
 800b3bc:	401c0000 	.word	0x401c0000
 800b3c0:	40140000 	.word	0x40140000
 800b3c4:	3fe00000 	.word	0x3fe00000
 800b3c8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b3cc:	465d      	mov	r5, fp
 800b3ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b3d2:	4630      	mov	r0, r6
 800b3d4:	4639      	mov	r1, r7
 800b3d6:	f7f5 fa39 	bl	800084c <__aeabi_ddiv>
 800b3da:	f7f5 fbbd 	bl	8000b58 <__aeabi_d2iz>
 800b3de:	4680      	mov	r8, r0
 800b3e0:	f7f5 f8a0 	bl	8000524 <__aeabi_i2d>
 800b3e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b3e8:	f7f5 f906 	bl	80005f8 <__aeabi_dmul>
 800b3ec:	4602      	mov	r2, r0
 800b3ee:	460b      	mov	r3, r1
 800b3f0:	4630      	mov	r0, r6
 800b3f2:	4639      	mov	r1, r7
 800b3f4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800b3f8:	f7f4 ff46 	bl	8000288 <__aeabi_dsub>
 800b3fc:	f805 6b01 	strb.w	r6, [r5], #1
 800b400:	eba5 060b 	sub.w	r6, r5, fp
 800b404:	45b1      	cmp	r9, r6
 800b406:	4602      	mov	r2, r0
 800b408:	460b      	mov	r3, r1
 800b40a:	d139      	bne.n	800b480 <_dtoa_r+0x6c8>
 800b40c:	f7f4 ff3e 	bl	800028c <__adddf3>
 800b410:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b414:	4606      	mov	r6, r0
 800b416:	460f      	mov	r7, r1
 800b418:	f7f5 fb7e 	bl	8000b18 <__aeabi_dcmpgt>
 800b41c:	b9c8      	cbnz	r0, 800b452 <_dtoa_r+0x69a>
 800b41e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b422:	4630      	mov	r0, r6
 800b424:	4639      	mov	r1, r7
 800b426:	f7f5 fb4f 	bl	8000ac8 <__aeabi_dcmpeq>
 800b42a:	b110      	cbz	r0, 800b432 <_dtoa_r+0x67a>
 800b42c:	f018 0f01 	tst.w	r8, #1
 800b430:	d10f      	bne.n	800b452 <_dtoa_r+0x69a>
 800b432:	9904      	ldr	r1, [sp, #16]
 800b434:	4620      	mov	r0, r4
 800b436:	f000 fc99 	bl	800bd6c <_Bfree>
 800b43a:	2300      	movs	r3, #0
 800b43c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b43e:	702b      	strb	r3, [r5, #0]
 800b440:	f10a 0301 	add.w	r3, sl, #1
 800b444:	6013      	str	r3, [r2, #0]
 800b446:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b448:	2b00      	cmp	r3, #0
 800b44a:	f000 8241 	beq.w	800b8d0 <_dtoa_r+0xb18>
 800b44e:	601d      	str	r5, [r3, #0]
 800b450:	e23e      	b.n	800b8d0 <_dtoa_r+0xb18>
 800b452:	f8cd a020 	str.w	sl, [sp, #32]
 800b456:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b45a:	2a39      	cmp	r2, #57	; 0x39
 800b45c:	f105 33ff 	add.w	r3, r5, #4294967295
 800b460:	d108      	bne.n	800b474 <_dtoa_r+0x6bc>
 800b462:	459b      	cmp	fp, r3
 800b464:	d10a      	bne.n	800b47c <_dtoa_r+0x6c4>
 800b466:	9b08      	ldr	r3, [sp, #32]
 800b468:	3301      	adds	r3, #1
 800b46a:	9308      	str	r3, [sp, #32]
 800b46c:	2330      	movs	r3, #48	; 0x30
 800b46e:	f88b 3000 	strb.w	r3, [fp]
 800b472:	465b      	mov	r3, fp
 800b474:	781a      	ldrb	r2, [r3, #0]
 800b476:	3201      	adds	r2, #1
 800b478:	701a      	strb	r2, [r3, #0]
 800b47a:	e78c      	b.n	800b396 <_dtoa_r+0x5de>
 800b47c:	461d      	mov	r5, r3
 800b47e:	e7ea      	b.n	800b456 <_dtoa_r+0x69e>
 800b480:	2200      	movs	r2, #0
 800b482:	4b9b      	ldr	r3, [pc, #620]	; (800b6f0 <_dtoa_r+0x938>)
 800b484:	f7f5 f8b8 	bl	80005f8 <__aeabi_dmul>
 800b488:	2200      	movs	r2, #0
 800b48a:	2300      	movs	r3, #0
 800b48c:	4606      	mov	r6, r0
 800b48e:	460f      	mov	r7, r1
 800b490:	f7f5 fb1a 	bl	8000ac8 <__aeabi_dcmpeq>
 800b494:	2800      	cmp	r0, #0
 800b496:	d09a      	beq.n	800b3ce <_dtoa_r+0x616>
 800b498:	e7cb      	b.n	800b432 <_dtoa_r+0x67a>
 800b49a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b49c:	2a00      	cmp	r2, #0
 800b49e:	f000 808b 	beq.w	800b5b8 <_dtoa_r+0x800>
 800b4a2:	9a06      	ldr	r2, [sp, #24]
 800b4a4:	2a01      	cmp	r2, #1
 800b4a6:	dc6e      	bgt.n	800b586 <_dtoa_r+0x7ce>
 800b4a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b4aa:	2a00      	cmp	r2, #0
 800b4ac:	d067      	beq.n	800b57e <_dtoa_r+0x7c6>
 800b4ae:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b4b2:	9f07      	ldr	r7, [sp, #28]
 800b4b4:	9d05      	ldr	r5, [sp, #20]
 800b4b6:	9a05      	ldr	r2, [sp, #20]
 800b4b8:	2101      	movs	r1, #1
 800b4ba:	441a      	add	r2, r3
 800b4bc:	4620      	mov	r0, r4
 800b4be:	9205      	str	r2, [sp, #20]
 800b4c0:	4498      	add	r8, r3
 800b4c2:	f000 fcf3 	bl	800beac <__i2b>
 800b4c6:	4606      	mov	r6, r0
 800b4c8:	2d00      	cmp	r5, #0
 800b4ca:	dd0c      	ble.n	800b4e6 <_dtoa_r+0x72e>
 800b4cc:	f1b8 0f00 	cmp.w	r8, #0
 800b4d0:	dd09      	ble.n	800b4e6 <_dtoa_r+0x72e>
 800b4d2:	4545      	cmp	r5, r8
 800b4d4:	9a05      	ldr	r2, [sp, #20]
 800b4d6:	462b      	mov	r3, r5
 800b4d8:	bfa8      	it	ge
 800b4da:	4643      	movge	r3, r8
 800b4dc:	1ad2      	subs	r2, r2, r3
 800b4de:	9205      	str	r2, [sp, #20]
 800b4e0:	1aed      	subs	r5, r5, r3
 800b4e2:	eba8 0803 	sub.w	r8, r8, r3
 800b4e6:	9b07      	ldr	r3, [sp, #28]
 800b4e8:	b1eb      	cbz	r3, 800b526 <_dtoa_r+0x76e>
 800b4ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d067      	beq.n	800b5c0 <_dtoa_r+0x808>
 800b4f0:	b18f      	cbz	r7, 800b516 <_dtoa_r+0x75e>
 800b4f2:	4631      	mov	r1, r6
 800b4f4:	463a      	mov	r2, r7
 800b4f6:	4620      	mov	r0, r4
 800b4f8:	f000 fd78 	bl	800bfec <__pow5mult>
 800b4fc:	9a04      	ldr	r2, [sp, #16]
 800b4fe:	4601      	mov	r1, r0
 800b500:	4606      	mov	r6, r0
 800b502:	4620      	mov	r0, r4
 800b504:	f000 fcdb 	bl	800bebe <__multiply>
 800b508:	9904      	ldr	r1, [sp, #16]
 800b50a:	9008      	str	r0, [sp, #32]
 800b50c:	4620      	mov	r0, r4
 800b50e:	f000 fc2d 	bl	800bd6c <_Bfree>
 800b512:	9b08      	ldr	r3, [sp, #32]
 800b514:	9304      	str	r3, [sp, #16]
 800b516:	9b07      	ldr	r3, [sp, #28]
 800b518:	1bda      	subs	r2, r3, r7
 800b51a:	d004      	beq.n	800b526 <_dtoa_r+0x76e>
 800b51c:	9904      	ldr	r1, [sp, #16]
 800b51e:	4620      	mov	r0, r4
 800b520:	f000 fd64 	bl	800bfec <__pow5mult>
 800b524:	9004      	str	r0, [sp, #16]
 800b526:	2101      	movs	r1, #1
 800b528:	4620      	mov	r0, r4
 800b52a:	f000 fcbf 	bl	800beac <__i2b>
 800b52e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b530:	4607      	mov	r7, r0
 800b532:	2b00      	cmp	r3, #0
 800b534:	f000 81d0 	beq.w	800b8d8 <_dtoa_r+0xb20>
 800b538:	461a      	mov	r2, r3
 800b53a:	4601      	mov	r1, r0
 800b53c:	4620      	mov	r0, r4
 800b53e:	f000 fd55 	bl	800bfec <__pow5mult>
 800b542:	9b06      	ldr	r3, [sp, #24]
 800b544:	2b01      	cmp	r3, #1
 800b546:	4607      	mov	r7, r0
 800b548:	dc40      	bgt.n	800b5cc <_dtoa_r+0x814>
 800b54a:	9b00      	ldr	r3, [sp, #0]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d139      	bne.n	800b5c4 <_dtoa_r+0x80c>
 800b550:	9b01      	ldr	r3, [sp, #4]
 800b552:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b556:	2b00      	cmp	r3, #0
 800b558:	d136      	bne.n	800b5c8 <_dtoa_r+0x810>
 800b55a:	9b01      	ldr	r3, [sp, #4]
 800b55c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b560:	0d1b      	lsrs	r3, r3, #20
 800b562:	051b      	lsls	r3, r3, #20
 800b564:	b12b      	cbz	r3, 800b572 <_dtoa_r+0x7ba>
 800b566:	9b05      	ldr	r3, [sp, #20]
 800b568:	3301      	adds	r3, #1
 800b56a:	9305      	str	r3, [sp, #20]
 800b56c:	f108 0801 	add.w	r8, r8, #1
 800b570:	2301      	movs	r3, #1
 800b572:	9307      	str	r3, [sp, #28]
 800b574:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b576:	2b00      	cmp	r3, #0
 800b578:	d12a      	bne.n	800b5d0 <_dtoa_r+0x818>
 800b57a:	2001      	movs	r0, #1
 800b57c:	e030      	b.n	800b5e0 <_dtoa_r+0x828>
 800b57e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b580:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b584:	e795      	b.n	800b4b2 <_dtoa_r+0x6fa>
 800b586:	9b07      	ldr	r3, [sp, #28]
 800b588:	f109 37ff 	add.w	r7, r9, #4294967295
 800b58c:	42bb      	cmp	r3, r7
 800b58e:	bfbf      	itttt	lt
 800b590:	9b07      	ldrlt	r3, [sp, #28]
 800b592:	9707      	strlt	r7, [sp, #28]
 800b594:	1afa      	sublt	r2, r7, r3
 800b596:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b598:	bfbb      	ittet	lt
 800b59a:	189b      	addlt	r3, r3, r2
 800b59c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b59e:	1bdf      	subge	r7, r3, r7
 800b5a0:	2700      	movlt	r7, #0
 800b5a2:	f1b9 0f00 	cmp.w	r9, #0
 800b5a6:	bfb5      	itete	lt
 800b5a8:	9b05      	ldrlt	r3, [sp, #20]
 800b5aa:	9d05      	ldrge	r5, [sp, #20]
 800b5ac:	eba3 0509 	sublt.w	r5, r3, r9
 800b5b0:	464b      	movge	r3, r9
 800b5b2:	bfb8      	it	lt
 800b5b4:	2300      	movlt	r3, #0
 800b5b6:	e77e      	b.n	800b4b6 <_dtoa_r+0x6fe>
 800b5b8:	9f07      	ldr	r7, [sp, #28]
 800b5ba:	9d05      	ldr	r5, [sp, #20]
 800b5bc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800b5be:	e783      	b.n	800b4c8 <_dtoa_r+0x710>
 800b5c0:	9a07      	ldr	r2, [sp, #28]
 800b5c2:	e7ab      	b.n	800b51c <_dtoa_r+0x764>
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	e7d4      	b.n	800b572 <_dtoa_r+0x7ba>
 800b5c8:	9b00      	ldr	r3, [sp, #0]
 800b5ca:	e7d2      	b.n	800b572 <_dtoa_r+0x7ba>
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	9307      	str	r3, [sp, #28]
 800b5d0:	693b      	ldr	r3, [r7, #16]
 800b5d2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800b5d6:	6918      	ldr	r0, [r3, #16]
 800b5d8:	f000 fc1a 	bl	800be10 <__hi0bits>
 800b5dc:	f1c0 0020 	rsb	r0, r0, #32
 800b5e0:	4440      	add	r0, r8
 800b5e2:	f010 001f 	ands.w	r0, r0, #31
 800b5e6:	d047      	beq.n	800b678 <_dtoa_r+0x8c0>
 800b5e8:	f1c0 0320 	rsb	r3, r0, #32
 800b5ec:	2b04      	cmp	r3, #4
 800b5ee:	dd3b      	ble.n	800b668 <_dtoa_r+0x8b0>
 800b5f0:	9b05      	ldr	r3, [sp, #20]
 800b5f2:	f1c0 001c 	rsb	r0, r0, #28
 800b5f6:	4403      	add	r3, r0
 800b5f8:	9305      	str	r3, [sp, #20]
 800b5fa:	4405      	add	r5, r0
 800b5fc:	4480      	add	r8, r0
 800b5fe:	9b05      	ldr	r3, [sp, #20]
 800b600:	2b00      	cmp	r3, #0
 800b602:	dd05      	ble.n	800b610 <_dtoa_r+0x858>
 800b604:	461a      	mov	r2, r3
 800b606:	9904      	ldr	r1, [sp, #16]
 800b608:	4620      	mov	r0, r4
 800b60a:	f000 fd3d 	bl	800c088 <__lshift>
 800b60e:	9004      	str	r0, [sp, #16]
 800b610:	f1b8 0f00 	cmp.w	r8, #0
 800b614:	dd05      	ble.n	800b622 <_dtoa_r+0x86a>
 800b616:	4639      	mov	r1, r7
 800b618:	4642      	mov	r2, r8
 800b61a:	4620      	mov	r0, r4
 800b61c:	f000 fd34 	bl	800c088 <__lshift>
 800b620:	4607      	mov	r7, r0
 800b622:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b624:	b353      	cbz	r3, 800b67c <_dtoa_r+0x8c4>
 800b626:	4639      	mov	r1, r7
 800b628:	9804      	ldr	r0, [sp, #16]
 800b62a:	f000 fd81 	bl	800c130 <__mcmp>
 800b62e:	2800      	cmp	r0, #0
 800b630:	da24      	bge.n	800b67c <_dtoa_r+0x8c4>
 800b632:	2300      	movs	r3, #0
 800b634:	220a      	movs	r2, #10
 800b636:	9904      	ldr	r1, [sp, #16]
 800b638:	4620      	mov	r0, r4
 800b63a:	f000 fbae 	bl	800bd9a <__multadd>
 800b63e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b640:	9004      	str	r0, [sp, #16]
 800b642:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b646:	2b00      	cmp	r3, #0
 800b648:	f000 814d 	beq.w	800b8e6 <_dtoa_r+0xb2e>
 800b64c:	2300      	movs	r3, #0
 800b64e:	4631      	mov	r1, r6
 800b650:	220a      	movs	r2, #10
 800b652:	4620      	mov	r0, r4
 800b654:	f000 fba1 	bl	800bd9a <__multadd>
 800b658:	9b02      	ldr	r3, [sp, #8]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	4606      	mov	r6, r0
 800b65e:	dc4f      	bgt.n	800b700 <_dtoa_r+0x948>
 800b660:	9b06      	ldr	r3, [sp, #24]
 800b662:	2b02      	cmp	r3, #2
 800b664:	dd4c      	ble.n	800b700 <_dtoa_r+0x948>
 800b666:	e011      	b.n	800b68c <_dtoa_r+0x8d4>
 800b668:	d0c9      	beq.n	800b5fe <_dtoa_r+0x846>
 800b66a:	9a05      	ldr	r2, [sp, #20]
 800b66c:	331c      	adds	r3, #28
 800b66e:	441a      	add	r2, r3
 800b670:	9205      	str	r2, [sp, #20]
 800b672:	441d      	add	r5, r3
 800b674:	4498      	add	r8, r3
 800b676:	e7c2      	b.n	800b5fe <_dtoa_r+0x846>
 800b678:	4603      	mov	r3, r0
 800b67a:	e7f6      	b.n	800b66a <_dtoa_r+0x8b2>
 800b67c:	f1b9 0f00 	cmp.w	r9, #0
 800b680:	dc38      	bgt.n	800b6f4 <_dtoa_r+0x93c>
 800b682:	9b06      	ldr	r3, [sp, #24]
 800b684:	2b02      	cmp	r3, #2
 800b686:	dd35      	ble.n	800b6f4 <_dtoa_r+0x93c>
 800b688:	f8cd 9008 	str.w	r9, [sp, #8]
 800b68c:	9b02      	ldr	r3, [sp, #8]
 800b68e:	b963      	cbnz	r3, 800b6aa <_dtoa_r+0x8f2>
 800b690:	4639      	mov	r1, r7
 800b692:	2205      	movs	r2, #5
 800b694:	4620      	mov	r0, r4
 800b696:	f000 fb80 	bl	800bd9a <__multadd>
 800b69a:	4601      	mov	r1, r0
 800b69c:	4607      	mov	r7, r0
 800b69e:	9804      	ldr	r0, [sp, #16]
 800b6a0:	f000 fd46 	bl	800c130 <__mcmp>
 800b6a4:	2800      	cmp	r0, #0
 800b6a6:	f73f adcc 	bgt.w	800b242 <_dtoa_r+0x48a>
 800b6aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6ac:	465d      	mov	r5, fp
 800b6ae:	ea6f 0a03 	mvn.w	sl, r3
 800b6b2:	f04f 0900 	mov.w	r9, #0
 800b6b6:	4639      	mov	r1, r7
 800b6b8:	4620      	mov	r0, r4
 800b6ba:	f000 fb57 	bl	800bd6c <_Bfree>
 800b6be:	2e00      	cmp	r6, #0
 800b6c0:	f43f aeb7 	beq.w	800b432 <_dtoa_r+0x67a>
 800b6c4:	f1b9 0f00 	cmp.w	r9, #0
 800b6c8:	d005      	beq.n	800b6d6 <_dtoa_r+0x91e>
 800b6ca:	45b1      	cmp	r9, r6
 800b6cc:	d003      	beq.n	800b6d6 <_dtoa_r+0x91e>
 800b6ce:	4649      	mov	r1, r9
 800b6d0:	4620      	mov	r0, r4
 800b6d2:	f000 fb4b 	bl	800bd6c <_Bfree>
 800b6d6:	4631      	mov	r1, r6
 800b6d8:	4620      	mov	r0, r4
 800b6da:	f000 fb47 	bl	800bd6c <_Bfree>
 800b6de:	e6a8      	b.n	800b432 <_dtoa_r+0x67a>
 800b6e0:	2700      	movs	r7, #0
 800b6e2:	463e      	mov	r6, r7
 800b6e4:	e7e1      	b.n	800b6aa <_dtoa_r+0x8f2>
 800b6e6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b6ea:	463e      	mov	r6, r7
 800b6ec:	e5a9      	b.n	800b242 <_dtoa_r+0x48a>
 800b6ee:	bf00      	nop
 800b6f0:	40240000 	.word	0x40240000
 800b6f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6f6:	f8cd 9008 	str.w	r9, [sp, #8]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	f000 80fa 	beq.w	800b8f4 <_dtoa_r+0xb3c>
 800b700:	2d00      	cmp	r5, #0
 800b702:	dd05      	ble.n	800b710 <_dtoa_r+0x958>
 800b704:	4631      	mov	r1, r6
 800b706:	462a      	mov	r2, r5
 800b708:	4620      	mov	r0, r4
 800b70a:	f000 fcbd 	bl	800c088 <__lshift>
 800b70e:	4606      	mov	r6, r0
 800b710:	9b07      	ldr	r3, [sp, #28]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d04c      	beq.n	800b7b0 <_dtoa_r+0x9f8>
 800b716:	6871      	ldr	r1, [r6, #4]
 800b718:	4620      	mov	r0, r4
 800b71a:	f000 faf3 	bl	800bd04 <_Balloc>
 800b71e:	6932      	ldr	r2, [r6, #16]
 800b720:	3202      	adds	r2, #2
 800b722:	4605      	mov	r5, r0
 800b724:	0092      	lsls	r2, r2, #2
 800b726:	f106 010c 	add.w	r1, r6, #12
 800b72a:	300c      	adds	r0, #12
 800b72c:	f7fe fc52 	bl	8009fd4 <memcpy>
 800b730:	2201      	movs	r2, #1
 800b732:	4629      	mov	r1, r5
 800b734:	4620      	mov	r0, r4
 800b736:	f000 fca7 	bl	800c088 <__lshift>
 800b73a:	9b00      	ldr	r3, [sp, #0]
 800b73c:	f8cd b014 	str.w	fp, [sp, #20]
 800b740:	f003 0301 	and.w	r3, r3, #1
 800b744:	46b1      	mov	r9, r6
 800b746:	9307      	str	r3, [sp, #28]
 800b748:	4606      	mov	r6, r0
 800b74a:	4639      	mov	r1, r7
 800b74c:	9804      	ldr	r0, [sp, #16]
 800b74e:	f7ff faa5 	bl	800ac9c <quorem>
 800b752:	4649      	mov	r1, r9
 800b754:	4605      	mov	r5, r0
 800b756:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b75a:	9804      	ldr	r0, [sp, #16]
 800b75c:	f000 fce8 	bl	800c130 <__mcmp>
 800b760:	4632      	mov	r2, r6
 800b762:	9000      	str	r0, [sp, #0]
 800b764:	4639      	mov	r1, r7
 800b766:	4620      	mov	r0, r4
 800b768:	f000 fcfc 	bl	800c164 <__mdiff>
 800b76c:	68c3      	ldr	r3, [r0, #12]
 800b76e:	4602      	mov	r2, r0
 800b770:	bb03      	cbnz	r3, 800b7b4 <_dtoa_r+0x9fc>
 800b772:	4601      	mov	r1, r0
 800b774:	9008      	str	r0, [sp, #32]
 800b776:	9804      	ldr	r0, [sp, #16]
 800b778:	f000 fcda 	bl	800c130 <__mcmp>
 800b77c:	9a08      	ldr	r2, [sp, #32]
 800b77e:	4603      	mov	r3, r0
 800b780:	4611      	mov	r1, r2
 800b782:	4620      	mov	r0, r4
 800b784:	9308      	str	r3, [sp, #32]
 800b786:	f000 faf1 	bl	800bd6c <_Bfree>
 800b78a:	9b08      	ldr	r3, [sp, #32]
 800b78c:	b9a3      	cbnz	r3, 800b7b8 <_dtoa_r+0xa00>
 800b78e:	9a06      	ldr	r2, [sp, #24]
 800b790:	b992      	cbnz	r2, 800b7b8 <_dtoa_r+0xa00>
 800b792:	9a07      	ldr	r2, [sp, #28]
 800b794:	b982      	cbnz	r2, 800b7b8 <_dtoa_r+0xa00>
 800b796:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b79a:	d029      	beq.n	800b7f0 <_dtoa_r+0xa38>
 800b79c:	9b00      	ldr	r3, [sp, #0]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	dd01      	ble.n	800b7a6 <_dtoa_r+0x9ee>
 800b7a2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800b7a6:	9b05      	ldr	r3, [sp, #20]
 800b7a8:	1c5d      	adds	r5, r3, #1
 800b7aa:	f883 8000 	strb.w	r8, [r3]
 800b7ae:	e782      	b.n	800b6b6 <_dtoa_r+0x8fe>
 800b7b0:	4630      	mov	r0, r6
 800b7b2:	e7c2      	b.n	800b73a <_dtoa_r+0x982>
 800b7b4:	2301      	movs	r3, #1
 800b7b6:	e7e3      	b.n	800b780 <_dtoa_r+0x9c8>
 800b7b8:	9a00      	ldr	r2, [sp, #0]
 800b7ba:	2a00      	cmp	r2, #0
 800b7bc:	db04      	blt.n	800b7c8 <_dtoa_r+0xa10>
 800b7be:	d125      	bne.n	800b80c <_dtoa_r+0xa54>
 800b7c0:	9a06      	ldr	r2, [sp, #24]
 800b7c2:	bb1a      	cbnz	r2, 800b80c <_dtoa_r+0xa54>
 800b7c4:	9a07      	ldr	r2, [sp, #28]
 800b7c6:	bb0a      	cbnz	r2, 800b80c <_dtoa_r+0xa54>
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	ddec      	ble.n	800b7a6 <_dtoa_r+0x9ee>
 800b7cc:	2201      	movs	r2, #1
 800b7ce:	9904      	ldr	r1, [sp, #16]
 800b7d0:	4620      	mov	r0, r4
 800b7d2:	f000 fc59 	bl	800c088 <__lshift>
 800b7d6:	4639      	mov	r1, r7
 800b7d8:	9004      	str	r0, [sp, #16]
 800b7da:	f000 fca9 	bl	800c130 <__mcmp>
 800b7de:	2800      	cmp	r0, #0
 800b7e0:	dc03      	bgt.n	800b7ea <_dtoa_r+0xa32>
 800b7e2:	d1e0      	bne.n	800b7a6 <_dtoa_r+0x9ee>
 800b7e4:	f018 0f01 	tst.w	r8, #1
 800b7e8:	d0dd      	beq.n	800b7a6 <_dtoa_r+0x9ee>
 800b7ea:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b7ee:	d1d8      	bne.n	800b7a2 <_dtoa_r+0x9ea>
 800b7f0:	9b05      	ldr	r3, [sp, #20]
 800b7f2:	9a05      	ldr	r2, [sp, #20]
 800b7f4:	1c5d      	adds	r5, r3, #1
 800b7f6:	2339      	movs	r3, #57	; 0x39
 800b7f8:	7013      	strb	r3, [r2, #0]
 800b7fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b7fe:	2b39      	cmp	r3, #57	; 0x39
 800b800:	f105 32ff 	add.w	r2, r5, #4294967295
 800b804:	d04f      	beq.n	800b8a6 <_dtoa_r+0xaee>
 800b806:	3301      	adds	r3, #1
 800b808:	7013      	strb	r3, [r2, #0]
 800b80a:	e754      	b.n	800b6b6 <_dtoa_r+0x8fe>
 800b80c:	9a05      	ldr	r2, [sp, #20]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	f102 0501 	add.w	r5, r2, #1
 800b814:	dd06      	ble.n	800b824 <_dtoa_r+0xa6c>
 800b816:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b81a:	d0e9      	beq.n	800b7f0 <_dtoa_r+0xa38>
 800b81c:	f108 0801 	add.w	r8, r8, #1
 800b820:	9b05      	ldr	r3, [sp, #20]
 800b822:	e7c2      	b.n	800b7aa <_dtoa_r+0x9f2>
 800b824:	9a02      	ldr	r2, [sp, #8]
 800b826:	f805 8c01 	strb.w	r8, [r5, #-1]
 800b82a:	eba5 030b 	sub.w	r3, r5, fp
 800b82e:	4293      	cmp	r3, r2
 800b830:	d021      	beq.n	800b876 <_dtoa_r+0xabe>
 800b832:	2300      	movs	r3, #0
 800b834:	220a      	movs	r2, #10
 800b836:	9904      	ldr	r1, [sp, #16]
 800b838:	4620      	mov	r0, r4
 800b83a:	f000 faae 	bl	800bd9a <__multadd>
 800b83e:	45b1      	cmp	r9, r6
 800b840:	9004      	str	r0, [sp, #16]
 800b842:	f04f 0300 	mov.w	r3, #0
 800b846:	f04f 020a 	mov.w	r2, #10
 800b84a:	4649      	mov	r1, r9
 800b84c:	4620      	mov	r0, r4
 800b84e:	d105      	bne.n	800b85c <_dtoa_r+0xaa4>
 800b850:	f000 faa3 	bl	800bd9a <__multadd>
 800b854:	4681      	mov	r9, r0
 800b856:	4606      	mov	r6, r0
 800b858:	9505      	str	r5, [sp, #20]
 800b85a:	e776      	b.n	800b74a <_dtoa_r+0x992>
 800b85c:	f000 fa9d 	bl	800bd9a <__multadd>
 800b860:	4631      	mov	r1, r6
 800b862:	4681      	mov	r9, r0
 800b864:	2300      	movs	r3, #0
 800b866:	220a      	movs	r2, #10
 800b868:	4620      	mov	r0, r4
 800b86a:	f000 fa96 	bl	800bd9a <__multadd>
 800b86e:	4606      	mov	r6, r0
 800b870:	e7f2      	b.n	800b858 <_dtoa_r+0xaa0>
 800b872:	f04f 0900 	mov.w	r9, #0
 800b876:	2201      	movs	r2, #1
 800b878:	9904      	ldr	r1, [sp, #16]
 800b87a:	4620      	mov	r0, r4
 800b87c:	f000 fc04 	bl	800c088 <__lshift>
 800b880:	4639      	mov	r1, r7
 800b882:	9004      	str	r0, [sp, #16]
 800b884:	f000 fc54 	bl	800c130 <__mcmp>
 800b888:	2800      	cmp	r0, #0
 800b88a:	dcb6      	bgt.n	800b7fa <_dtoa_r+0xa42>
 800b88c:	d102      	bne.n	800b894 <_dtoa_r+0xadc>
 800b88e:	f018 0f01 	tst.w	r8, #1
 800b892:	d1b2      	bne.n	800b7fa <_dtoa_r+0xa42>
 800b894:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b898:	2b30      	cmp	r3, #48	; 0x30
 800b89a:	f105 32ff 	add.w	r2, r5, #4294967295
 800b89e:	f47f af0a 	bne.w	800b6b6 <_dtoa_r+0x8fe>
 800b8a2:	4615      	mov	r5, r2
 800b8a4:	e7f6      	b.n	800b894 <_dtoa_r+0xadc>
 800b8a6:	4593      	cmp	fp, r2
 800b8a8:	d105      	bne.n	800b8b6 <_dtoa_r+0xafe>
 800b8aa:	2331      	movs	r3, #49	; 0x31
 800b8ac:	f10a 0a01 	add.w	sl, sl, #1
 800b8b0:	f88b 3000 	strb.w	r3, [fp]
 800b8b4:	e6ff      	b.n	800b6b6 <_dtoa_r+0x8fe>
 800b8b6:	4615      	mov	r5, r2
 800b8b8:	e79f      	b.n	800b7fa <_dtoa_r+0xa42>
 800b8ba:	f8df b064 	ldr.w	fp, [pc, #100]	; 800b920 <_dtoa_r+0xb68>
 800b8be:	e007      	b.n	800b8d0 <_dtoa_r+0xb18>
 800b8c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b8c2:	f8df b060 	ldr.w	fp, [pc, #96]	; 800b924 <_dtoa_r+0xb6c>
 800b8c6:	b11b      	cbz	r3, 800b8d0 <_dtoa_r+0xb18>
 800b8c8:	f10b 0308 	add.w	r3, fp, #8
 800b8cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b8ce:	6013      	str	r3, [r2, #0]
 800b8d0:	4658      	mov	r0, fp
 800b8d2:	b017      	add	sp, #92	; 0x5c
 800b8d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8d8:	9b06      	ldr	r3, [sp, #24]
 800b8da:	2b01      	cmp	r3, #1
 800b8dc:	f77f ae35 	ble.w	800b54a <_dtoa_r+0x792>
 800b8e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b8e2:	9307      	str	r3, [sp, #28]
 800b8e4:	e649      	b.n	800b57a <_dtoa_r+0x7c2>
 800b8e6:	9b02      	ldr	r3, [sp, #8]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	dc03      	bgt.n	800b8f4 <_dtoa_r+0xb3c>
 800b8ec:	9b06      	ldr	r3, [sp, #24]
 800b8ee:	2b02      	cmp	r3, #2
 800b8f0:	f73f aecc 	bgt.w	800b68c <_dtoa_r+0x8d4>
 800b8f4:	465d      	mov	r5, fp
 800b8f6:	4639      	mov	r1, r7
 800b8f8:	9804      	ldr	r0, [sp, #16]
 800b8fa:	f7ff f9cf 	bl	800ac9c <quorem>
 800b8fe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b902:	f805 8b01 	strb.w	r8, [r5], #1
 800b906:	9a02      	ldr	r2, [sp, #8]
 800b908:	eba5 030b 	sub.w	r3, r5, fp
 800b90c:	429a      	cmp	r2, r3
 800b90e:	ddb0      	ble.n	800b872 <_dtoa_r+0xaba>
 800b910:	2300      	movs	r3, #0
 800b912:	220a      	movs	r2, #10
 800b914:	9904      	ldr	r1, [sp, #16]
 800b916:	4620      	mov	r0, r4
 800b918:	f000 fa3f 	bl	800bd9a <__multadd>
 800b91c:	9004      	str	r0, [sp, #16]
 800b91e:	e7ea      	b.n	800b8f6 <_dtoa_r+0xb3e>
 800b920:	0800e048 	.word	0x0800e048
 800b924:	0800e06c 	.word	0x0800e06c

0800b928 <__sflush_r>:
 800b928:	898a      	ldrh	r2, [r1, #12]
 800b92a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b92e:	4605      	mov	r5, r0
 800b930:	0710      	lsls	r0, r2, #28
 800b932:	460c      	mov	r4, r1
 800b934:	d458      	bmi.n	800b9e8 <__sflush_r+0xc0>
 800b936:	684b      	ldr	r3, [r1, #4]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	dc05      	bgt.n	800b948 <__sflush_r+0x20>
 800b93c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b93e:	2b00      	cmp	r3, #0
 800b940:	dc02      	bgt.n	800b948 <__sflush_r+0x20>
 800b942:	2000      	movs	r0, #0
 800b944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b948:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b94a:	2e00      	cmp	r6, #0
 800b94c:	d0f9      	beq.n	800b942 <__sflush_r+0x1a>
 800b94e:	2300      	movs	r3, #0
 800b950:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b954:	682f      	ldr	r7, [r5, #0]
 800b956:	6a21      	ldr	r1, [r4, #32]
 800b958:	602b      	str	r3, [r5, #0]
 800b95a:	d032      	beq.n	800b9c2 <__sflush_r+0x9a>
 800b95c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b95e:	89a3      	ldrh	r3, [r4, #12]
 800b960:	075a      	lsls	r2, r3, #29
 800b962:	d505      	bpl.n	800b970 <__sflush_r+0x48>
 800b964:	6863      	ldr	r3, [r4, #4]
 800b966:	1ac0      	subs	r0, r0, r3
 800b968:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b96a:	b10b      	cbz	r3, 800b970 <__sflush_r+0x48>
 800b96c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b96e:	1ac0      	subs	r0, r0, r3
 800b970:	2300      	movs	r3, #0
 800b972:	4602      	mov	r2, r0
 800b974:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b976:	6a21      	ldr	r1, [r4, #32]
 800b978:	4628      	mov	r0, r5
 800b97a:	47b0      	blx	r6
 800b97c:	1c43      	adds	r3, r0, #1
 800b97e:	89a3      	ldrh	r3, [r4, #12]
 800b980:	d106      	bne.n	800b990 <__sflush_r+0x68>
 800b982:	6829      	ldr	r1, [r5, #0]
 800b984:	291d      	cmp	r1, #29
 800b986:	d848      	bhi.n	800ba1a <__sflush_r+0xf2>
 800b988:	4a29      	ldr	r2, [pc, #164]	; (800ba30 <__sflush_r+0x108>)
 800b98a:	40ca      	lsrs	r2, r1
 800b98c:	07d6      	lsls	r6, r2, #31
 800b98e:	d544      	bpl.n	800ba1a <__sflush_r+0xf2>
 800b990:	2200      	movs	r2, #0
 800b992:	6062      	str	r2, [r4, #4]
 800b994:	04d9      	lsls	r1, r3, #19
 800b996:	6922      	ldr	r2, [r4, #16]
 800b998:	6022      	str	r2, [r4, #0]
 800b99a:	d504      	bpl.n	800b9a6 <__sflush_r+0x7e>
 800b99c:	1c42      	adds	r2, r0, #1
 800b99e:	d101      	bne.n	800b9a4 <__sflush_r+0x7c>
 800b9a0:	682b      	ldr	r3, [r5, #0]
 800b9a2:	b903      	cbnz	r3, 800b9a6 <__sflush_r+0x7e>
 800b9a4:	6560      	str	r0, [r4, #84]	; 0x54
 800b9a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b9a8:	602f      	str	r7, [r5, #0]
 800b9aa:	2900      	cmp	r1, #0
 800b9ac:	d0c9      	beq.n	800b942 <__sflush_r+0x1a>
 800b9ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b9b2:	4299      	cmp	r1, r3
 800b9b4:	d002      	beq.n	800b9bc <__sflush_r+0x94>
 800b9b6:	4628      	mov	r0, r5
 800b9b8:	f7fe fb20 	bl	8009ffc <_free_r>
 800b9bc:	2000      	movs	r0, #0
 800b9be:	6360      	str	r0, [r4, #52]	; 0x34
 800b9c0:	e7c0      	b.n	800b944 <__sflush_r+0x1c>
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	4628      	mov	r0, r5
 800b9c6:	47b0      	blx	r6
 800b9c8:	1c41      	adds	r1, r0, #1
 800b9ca:	d1c8      	bne.n	800b95e <__sflush_r+0x36>
 800b9cc:	682b      	ldr	r3, [r5, #0]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d0c5      	beq.n	800b95e <__sflush_r+0x36>
 800b9d2:	2b1d      	cmp	r3, #29
 800b9d4:	d001      	beq.n	800b9da <__sflush_r+0xb2>
 800b9d6:	2b16      	cmp	r3, #22
 800b9d8:	d101      	bne.n	800b9de <__sflush_r+0xb6>
 800b9da:	602f      	str	r7, [r5, #0]
 800b9dc:	e7b1      	b.n	800b942 <__sflush_r+0x1a>
 800b9de:	89a3      	ldrh	r3, [r4, #12]
 800b9e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9e4:	81a3      	strh	r3, [r4, #12]
 800b9e6:	e7ad      	b.n	800b944 <__sflush_r+0x1c>
 800b9e8:	690f      	ldr	r7, [r1, #16]
 800b9ea:	2f00      	cmp	r7, #0
 800b9ec:	d0a9      	beq.n	800b942 <__sflush_r+0x1a>
 800b9ee:	0793      	lsls	r3, r2, #30
 800b9f0:	680e      	ldr	r6, [r1, #0]
 800b9f2:	bf08      	it	eq
 800b9f4:	694b      	ldreq	r3, [r1, #20]
 800b9f6:	600f      	str	r7, [r1, #0]
 800b9f8:	bf18      	it	ne
 800b9fa:	2300      	movne	r3, #0
 800b9fc:	eba6 0807 	sub.w	r8, r6, r7
 800ba00:	608b      	str	r3, [r1, #8]
 800ba02:	f1b8 0f00 	cmp.w	r8, #0
 800ba06:	dd9c      	ble.n	800b942 <__sflush_r+0x1a>
 800ba08:	4643      	mov	r3, r8
 800ba0a:	463a      	mov	r2, r7
 800ba0c:	6a21      	ldr	r1, [r4, #32]
 800ba0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ba10:	4628      	mov	r0, r5
 800ba12:	47b0      	blx	r6
 800ba14:	2800      	cmp	r0, #0
 800ba16:	dc06      	bgt.n	800ba26 <__sflush_r+0xfe>
 800ba18:	89a3      	ldrh	r3, [r4, #12]
 800ba1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba1e:	81a3      	strh	r3, [r4, #12]
 800ba20:	f04f 30ff 	mov.w	r0, #4294967295
 800ba24:	e78e      	b.n	800b944 <__sflush_r+0x1c>
 800ba26:	4407      	add	r7, r0
 800ba28:	eba8 0800 	sub.w	r8, r8, r0
 800ba2c:	e7e9      	b.n	800ba02 <__sflush_r+0xda>
 800ba2e:	bf00      	nop
 800ba30:	20400001 	.word	0x20400001

0800ba34 <_fflush_r>:
 800ba34:	b538      	push	{r3, r4, r5, lr}
 800ba36:	690b      	ldr	r3, [r1, #16]
 800ba38:	4605      	mov	r5, r0
 800ba3a:	460c      	mov	r4, r1
 800ba3c:	b1db      	cbz	r3, 800ba76 <_fflush_r+0x42>
 800ba3e:	b118      	cbz	r0, 800ba48 <_fflush_r+0x14>
 800ba40:	6983      	ldr	r3, [r0, #24]
 800ba42:	b90b      	cbnz	r3, 800ba48 <_fflush_r+0x14>
 800ba44:	f000 f860 	bl	800bb08 <__sinit>
 800ba48:	4b0c      	ldr	r3, [pc, #48]	; (800ba7c <_fflush_r+0x48>)
 800ba4a:	429c      	cmp	r4, r3
 800ba4c:	d109      	bne.n	800ba62 <_fflush_r+0x2e>
 800ba4e:	686c      	ldr	r4, [r5, #4]
 800ba50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba54:	b17b      	cbz	r3, 800ba76 <_fflush_r+0x42>
 800ba56:	4621      	mov	r1, r4
 800ba58:	4628      	mov	r0, r5
 800ba5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba5e:	f7ff bf63 	b.w	800b928 <__sflush_r>
 800ba62:	4b07      	ldr	r3, [pc, #28]	; (800ba80 <_fflush_r+0x4c>)
 800ba64:	429c      	cmp	r4, r3
 800ba66:	d101      	bne.n	800ba6c <_fflush_r+0x38>
 800ba68:	68ac      	ldr	r4, [r5, #8]
 800ba6a:	e7f1      	b.n	800ba50 <_fflush_r+0x1c>
 800ba6c:	4b05      	ldr	r3, [pc, #20]	; (800ba84 <_fflush_r+0x50>)
 800ba6e:	429c      	cmp	r4, r3
 800ba70:	bf08      	it	eq
 800ba72:	68ec      	ldreq	r4, [r5, #12]
 800ba74:	e7ec      	b.n	800ba50 <_fflush_r+0x1c>
 800ba76:	2000      	movs	r0, #0
 800ba78:	bd38      	pop	{r3, r4, r5, pc}
 800ba7a:	bf00      	nop
 800ba7c:	0800e09c 	.word	0x0800e09c
 800ba80:	0800e0bc 	.word	0x0800e0bc
 800ba84:	0800e07c 	.word	0x0800e07c

0800ba88 <std>:
 800ba88:	2300      	movs	r3, #0
 800ba8a:	b510      	push	{r4, lr}
 800ba8c:	4604      	mov	r4, r0
 800ba8e:	e9c0 3300 	strd	r3, r3, [r0]
 800ba92:	6083      	str	r3, [r0, #8]
 800ba94:	8181      	strh	r1, [r0, #12]
 800ba96:	6643      	str	r3, [r0, #100]	; 0x64
 800ba98:	81c2      	strh	r2, [r0, #14]
 800ba9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ba9e:	6183      	str	r3, [r0, #24]
 800baa0:	4619      	mov	r1, r3
 800baa2:	2208      	movs	r2, #8
 800baa4:	305c      	adds	r0, #92	; 0x5c
 800baa6:	f7fe faa0 	bl	8009fea <memset>
 800baaa:	4b05      	ldr	r3, [pc, #20]	; (800bac0 <std+0x38>)
 800baac:	6263      	str	r3, [r4, #36]	; 0x24
 800baae:	4b05      	ldr	r3, [pc, #20]	; (800bac4 <std+0x3c>)
 800bab0:	62a3      	str	r3, [r4, #40]	; 0x28
 800bab2:	4b05      	ldr	r3, [pc, #20]	; (800bac8 <std+0x40>)
 800bab4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bab6:	4b05      	ldr	r3, [pc, #20]	; (800bacc <std+0x44>)
 800bab8:	6224      	str	r4, [r4, #32]
 800baba:	6323      	str	r3, [r4, #48]	; 0x30
 800babc:	bd10      	pop	{r4, pc}
 800babe:	bf00      	nop
 800bac0:	0800c559 	.word	0x0800c559
 800bac4:	0800c57b 	.word	0x0800c57b
 800bac8:	0800c5b3 	.word	0x0800c5b3
 800bacc:	0800c5d7 	.word	0x0800c5d7

0800bad0 <_cleanup_r>:
 800bad0:	4901      	ldr	r1, [pc, #4]	; (800bad8 <_cleanup_r+0x8>)
 800bad2:	f000 b885 	b.w	800bbe0 <_fwalk_reent>
 800bad6:	bf00      	nop
 800bad8:	0800ba35 	.word	0x0800ba35

0800badc <__sfmoreglue>:
 800badc:	b570      	push	{r4, r5, r6, lr}
 800bade:	1e4a      	subs	r2, r1, #1
 800bae0:	2568      	movs	r5, #104	; 0x68
 800bae2:	4355      	muls	r5, r2
 800bae4:	460e      	mov	r6, r1
 800bae6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800baea:	f7fe fad5 	bl	800a098 <_malloc_r>
 800baee:	4604      	mov	r4, r0
 800baf0:	b140      	cbz	r0, 800bb04 <__sfmoreglue+0x28>
 800baf2:	2100      	movs	r1, #0
 800baf4:	e9c0 1600 	strd	r1, r6, [r0]
 800baf8:	300c      	adds	r0, #12
 800bafa:	60a0      	str	r0, [r4, #8]
 800bafc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bb00:	f7fe fa73 	bl	8009fea <memset>
 800bb04:	4620      	mov	r0, r4
 800bb06:	bd70      	pop	{r4, r5, r6, pc}

0800bb08 <__sinit>:
 800bb08:	6983      	ldr	r3, [r0, #24]
 800bb0a:	b510      	push	{r4, lr}
 800bb0c:	4604      	mov	r4, r0
 800bb0e:	bb33      	cbnz	r3, 800bb5e <__sinit+0x56>
 800bb10:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800bb14:	6503      	str	r3, [r0, #80]	; 0x50
 800bb16:	4b12      	ldr	r3, [pc, #72]	; (800bb60 <__sinit+0x58>)
 800bb18:	4a12      	ldr	r2, [pc, #72]	; (800bb64 <__sinit+0x5c>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	6282      	str	r2, [r0, #40]	; 0x28
 800bb1e:	4298      	cmp	r0, r3
 800bb20:	bf04      	itt	eq
 800bb22:	2301      	moveq	r3, #1
 800bb24:	6183      	streq	r3, [r0, #24]
 800bb26:	f000 f81f 	bl	800bb68 <__sfp>
 800bb2a:	6060      	str	r0, [r4, #4]
 800bb2c:	4620      	mov	r0, r4
 800bb2e:	f000 f81b 	bl	800bb68 <__sfp>
 800bb32:	60a0      	str	r0, [r4, #8]
 800bb34:	4620      	mov	r0, r4
 800bb36:	f000 f817 	bl	800bb68 <__sfp>
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	60e0      	str	r0, [r4, #12]
 800bb3e:	2104      	movs	r1, #4
 800bb40:	6860      	ldr	r0, [r4, #4]
 800bb42:	f7ff ffa1 	bl	800ba88 <std>
 800bb46:	2201      	movs	r2, #1
 800bb48:	2109      	movs	r1, #9
 800bb4a:	68a0      	ldr	r0, [r4, #8]
 800bb4c:	f7ff ff9c 	bl	800ba88 <std>
 800bb50:	2202      	movs	r2, #2
 800bb52:	2112      	movs	r1, #18
 800bb54:	68e0      	ldr	r0, [r4, #12]
 800bb56:	f7ff ff97 	bl	800ba88 <std>
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	61a3      	str	r3, [r4, #24]
 800bb5e:	bd10      	pop	{r4, pc}
 800bb60:	0800e034 	.word	0x0800e034
 800bb64:	0800bad1 	.word	0x0800bad1

0800bb68 <__sfp>:
 800bb68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb6a:	4b1b      	ldr	r3, [pc, #108]	; (800bbd8 <__sfp+0x70>)
 800bb6c:	681e      	ldr	r6, [r3, #0]
 800bb6e:	69b3      	ldr	r3, [r6, #24]
 800bb70:	4607      	mov	r7, r0
 800bb72:	b913      	cbnz	r3, 800bb7a <__sfp+0x12>
 800bb74:	4630      	mov	r0, r6
 800bb76:	f7ff ffc7 	bl	800bb08 <__sinit>
 800bb7a:	3648      	adds	r6, #72	; 0x48
 800bb7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bb80:	3b01      	subs	r3, #1
 800bb82:	d503      	bpl.n	800bb8c <__sfp+0x24>
 800bb84:	6833      	ldr	r3, [r6, #0]
 800bb86:	b133      	cbz	r3, 800bb96 <__sfp+0x2e>
 800bb88:	6836      	ldr	r6, [r6, #0]
 800bb8a:	e7f7      	b.n	800bb7c <__sfp+0x14>
 800bb8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bb90:	b16d      	cbz	r5, 800bbae <__sfp+0x46>
 800bb92:	3468      	adds	r4, #104	; 0x68
 800bb94:	e7f4      	b.n	800bb80 <__sfp+0x18>
 800bb96:	2104      	movs	r1, #4
 800bb98:	4638      	mov	r0, r7
 800bb9a:	f7ff ff9f 	bl	800badc <__sfmoreglue>
 800bb9e:	6030      	str	r0, [r6, #0]
 800bba0:	2800      	cmp	r0, #0
 800bba2:	d1f1      	bne.n	800bb88 <__sfp+0x20>
 800bba4:	230c      	movs	r3, #12
 800bba6:	603b      	str	r3, [r7, #0]
 800bba8:	4604      	mov	r4, r0
 800bbaa:	4620      	mov	r0, r4
 800bbac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbae:	4b0b      	ldr	r3, [pc, #44]	; (800bbdc <__sfp+0x74>)
 800bbb0:	6665      	str	r5, [r4, #100]	; 0x64
 800bbb2:	e9c4 5500 	strd	r5, r5, [r4]
 800bbb6:	60a5      	str	r5, [r4, #8]
 800bbb8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800bbbc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800bbc0:	2208      	movs	r2, #8
 800bbc2:	4629      	mov	r1, r5
 800bbc4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bbc8:	f7fe fa0f 	bl	8009fea <memset>
 800bbcc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bbd0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bbd4:	e7e9      	b.n	800bbaa <__sfp+0x42>
 800bbd6:	bf00      	nop
 800bbd8:	0800e034 	.word	0x0800e034
 800bbdc:	ffff0001 	.word	0xffff0001

0800bbe0 <_fwalk_reent>:
 800bbe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbe4:	4680      	mov	r8, r0
 800bbe6:	4689      	mov	r9, r1
 800bbe8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bbec:	2600      	movs	r6, #0
 800bbee:	b914      	cbnz	r4, 800bbf6 <_fwalk_reent+0x16>
 800bbf0:	4630      	mov	r0, r6
 800bbf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbf6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800bbfa:	3f01      	subs	r7, #1
 800bbfc:	d501      	bpl.n	800bc02 <_fwalk_reent+0x22>
 800bbfe:	6824      	ldr	r4, [r4, #0]
 800bc00:	e7f5      	b.n	800bbee <_fwalk_reent+0xe>
 800bc02:	89ab      	ldrh	r3, [r5, #12]
 800bc04:	2b01      	cmp	r3, #1
 800bc06:	d907      	bls.n	800bc18 <_fwalk_reent+0x38>
 800bc08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bc0c:	3301      	adds	r3, #1
 800bc0e:	d003      	beq.n	800bc18 <_fwalk_reent+0x38>
 800bc10:	4629      	mov	r1, r5
 800bc12:	4640      	mov	r0, r8
 800bc14:	47c8      	blx	r9
 800bc16:	4306      	orrs	r6, r0
 800bc18:	3568      	adds	r5, #104	; 0x68
 800bc1a:	e7ee      	b.n	800bbfa <_fwalk_reent+0x1a>

0800bc1c <_localeconv_r>:
 800bc1c:	4b04      	ldr	r3, [pc, #16]	; (800bc30 <_localeconv_r+0x14>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	6a18      	ldr	r0, [r3, #32]
 800bc22:	4b04      	ldr	r3, [pc, #16]	; (800bc34 <_localeconv_r+0x18>)
 800bc24:	2800      	cmp	r0, #0
 800bc26:	bf08      	it	eq
 800bc28:	4618      	moveq	r0, r3
 800bc2a:	30f0      	adds	r0, #240	; 0xf0
 800bc2c:	4770      	bx	lr
 800bc2e:	bf00      	nop
 800bc30:	2000061c 	.word	0x2000061c
 800bc34:	20000680 	.word	0x20000680

0800bc38 <__swhatbuf_r>:
 800bc38:	b570      	push	{r4, r5, r6, lr}
 800bc3a:	460e      	mov	r6, r1
 800bc3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc40:	2900      	cmp	r1, #0
 800bc42:	b096      	sub	sp, #88	; 0x58
 800bc44:	4614      	mov	r4, r2
 800bc46:	461d      	mov	r5, r3
 800bc48:	da07      	bge.n	800bc5a <__swhatbuf_r+0x22>
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	602b      	str	r3, [r5, #0]
 800bc4e:	89b3      	ldrh	r3, [r6, #12]
 800bc50:	061a      	lsls	r2, r3, #24
 800bc52:	d410      	bmi.n	800bc76 <__swhatbuf_r+0x3e>
 800bc54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc58:	e00e      	b.n	800bc78 <__swhatbuf_r+0x40>
 800bc5a:	466a      	mov	r2, sp
 800bc5c:	f000 fce2 	bl	800c624 <_fstat_r>
 800bc60:	2800      	cmp	r0, #0
 800bc62:	dbf2      	blt.n	800bc4a <__swhatbuf_r+0x12>
 800bc64:	9a01      	ldr	r2, [sp, #4]
 800bc66:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bc6a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bc6e:	425a      	negs	r2, r3
 800bc70:	415a      	adcs	r2, r3
 800bc72:	602a      	str	r2, [r5, #0]
 800bc74:	e7ee      	b.n	800bc54 <__swhatbuf_r+0x1c>
 800bc76:	2340      	movs	r3, #64	; 0x40
 800bc78:	2000      	movs	r0, #0
 800bc7a:	6023      	str	r3, [r4, #0]
 800bc7c:	b016      	add	sp, #88	; 0x58
 800bc7e:	bd70      	pop	{r4, r5, r6, pc}

0800bc80 <__smakebuf_r>:
 800bc80:	898b      	ldrh	r3, [r1, #12]
 800bc82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bc84:	079d      	lsls	r5, r3, #30
 800bc86:	4606      	mov	r6, r0
 800bc88:	460c      	mov	r4, r1
 800bc8a:	d507      	bpl.n	800bc9c <__smakebuf_r+0x1c>
 800bc8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bc90:	6023      	str	r3, [r4, #0]
 800bc92:	6123      	str	r3, [r4, #16]
 800bc94:	2301      	movs	r3, #1
 800bc96:	6163      	str	r3, [r4, #20]
 800bc98:	b002      	add	sp, #8
 800bc9a:	bd70      	pop	{r4, r5, r6, pc}
 800bc9c:	ab01      	add	r3, sp, #4
 800bc9e:	466a      	mov	r2, sp
 800bca0:	f7ff ffca 	bl	800bc38 <__swhatbuf_r>
 800bca4:	9900      	ldr	r1, [sp, #0]
 800bca6:	4605      	mov	r5, r0
 800bca8:	4630      	mov	r0, r6
 800bcaa:	f7fe f9f5 	bl	800a098 <_malloc_r>
 800bcae:	b948      	cbnz	r0, 800bcc4 <__smakebuf_r+0x44>
 800bcb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcb4:	059a      	lsls	r2, r3, #22
 800bcb6:	d4ef      	bmi.n	800bc98 <__smakebuf_r+0x18>
 800bcb8:	f023 0303 	bic.w	r3, r3, #3
 800bcbc:	f043 0302 	orr.w	r3, r3, #2
 800bcc0:	81a3      	strh	r3, [r4, #12]
 800bcc2:	e7e3      	b.n	800bc8c <__smakebuf_r+0xc>
 800bcc4:	4b0d      	ldr	r3, [pc, #52]	; (800bcfc <__smakebuf_r+0x7c>)
 800bcc6:	62b3      	str	r3, [r6, #40]	; 0x28
 800bcc8:	89a3      	ldrh	r3, [r4, #12]
 800bcca:	6020      	str	r0, [r4, #0]
 800bccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcd0:	81a3      	strh	r3, [r4, #12]
 800bcd2:	9b00      	ldr	r3, [sp, #0]
 800bcd4:	6163      	str	r3, [r4, #20]
 800bcd6:	9b01      	ldr	r3, [sp, #4]
 800bcd8:	6120      	str	r0, [r4, #16]
 800bcda:	b15b      	cbz	r3, 800bcf4 <__smakebuf_r+0x74>
 800bcdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bce0:	4630      	mov	r0, r6
 800bce2:	f000 fcb1 	bl	800c648 <_isatty_r>
 800bce6:	b128      	cbz	r0, 800bcf4 <__smakebuf_r+0x74>
 800bce8:	89a3      	ldrh	r3, [r4, #12]
 800bcea:	f023 0303 	bic.w	r3, r3, #3
 800bcee:	f043 0301 	orr.w	r3, r3, #1
 800bcf2:	81a3      	strh	r3, [r4, #12]
 800bcf4:	89a3      	ldrh	r3, [r4, #12]
 800bcf6:	431d      	orrs	r5, r3
 800bcf8:	81a5      	strh	r5, [r4, #12]
 800bcfa:	e7cd      	b.n	800bc98 <__smakebuf_r+0x18>
 800bcfc:	0800bad1 	.word	0x0800bad1

0800bd00 <__malloc_lock>:
 800bd00:	4770      	bx	lr

0800bd02 <__malloc_unlock>:
 800bd02:	4770      	bx	lr

0800bd04 <_Balloc>:
 800bd04:	b570      	push	{r4, r5, r6, lr}
 800bd06:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bd08:	4604      	mov	r4, r0
 800bd0a:	460e      	mov	r6, r1
 800bd0c:	b93d      	cbnz	r5, 800bd1e <_Balloc+0x1a>
 800bd0e:	2010      	movs	r0, #16
 800bd10:	f7fe f958 	bl	8009fc4 <malloc>
 800bd14:	6260      	str	r0, [r4, #36]	; 0x24
 800bd16:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bd1a:	6005      	str	r5, [r0, #0]
 800bd1c:	60c5      	str	r5, [r0, #12]
 800bd1e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800bd20:	68eb      	ldr	r3, [r5, #12]
 800bd22:	b183      	cbz	r3, 800bd46 <_Balloc+0x42>
 800bd24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd26:	68db      	ldr	r3, [r3, #12]
 800bd28:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800bd2c:	b9b8      	cbnz	r0, 800bd5e <_Balloc+0x5a>
 800bd2e:	2101      	movs	r1, #1
 800bd30:	fa01 f506 	lsl.w	r5, r1, r6
 800bd34:	1d6a      	adds	r2, r5, #5
 800bd36:	0092      	lsls	r2, r2, #2
 800bd38:	4620      	mov	r0, r4
 800bd3a:	f000 fabf 	bl	800c2bc <_calloc_r>
 800bd3e:	b160      	cbz	r0, 800bd5a <_Balloc+0x56>
 800bd40:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800bd44:	e00e      	b.n	800bd64 <_Balloc+0x60>
 800bd46:	2221      	movs	r2, #33	; 0x21
 800bd48:	2104      	movs	r1, #4
 800bd4a:	4620      	mov	r0, r4
 800bd4c:	f000 fab6 	bl	800c2bc <_calloc_r>
 800bd50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd52:	60e8      	str	r0, [r5, #12]
 800bd54:	68db      	ldr	r3, [r3, #12]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d1e4      	bne.n	800bd24 <_Balloc+0x20>
 800bd5a:	2000      	movs	r0, #0
 800bd5c:	bd70      	pop	{r4, r5, r6, pc}
 800bd5e:	6802      	ldr	r2, [r0, #0]
 800bd60:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800bd64:	2300      	movs	r3, #0
 800bd66:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bd6a:	e7f7      	b.n	800bd5c <_Balloc+0x58>

0800bd6c <_Bfree>:
 800bd6c:	b570      	push	{r4, r5, r6, lr}
 800bd6e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800bd70:	4606      	mov	r6, r0
 800bd72:	460d      	mov	r5, r1
 800bd74:	b93c      	cbnz	r4, 800bd86 <_Bfree+0x1a>
 800bd76:	2010      	movs	r0, #16
 800bd78:	f7fe f924 	bl	8009fc4 <malloc>
 800bd7c:	6270      	str	r0, [r6, #36]	; 0x24
 800bd7e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bd82:	6004      	str	r4, [r0, #0]
 800bd84:	60c4      	str	r4, [r0, #12]
 800bd86:	b13d      	cbz	r5, 800bd98 <_Bfree+0x2c>
 800bd88:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800bd8a:	686a      	ldr	r2, [r5, #4]
 800bd8c:	68db      	ldr	r3, [r3, #12]
 800bd8e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bd92:	6029      	str	r1, [r5, #0]
 800bd94:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800bd98:	bd70      	pop	{r4, r5, r6, pc}

0800bd9a <__multadd>:
 800bd9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd9e:	690d      	ldr	r5, [r1, #16]
 800bda0:	461f      	mov	r7, r3
 800bda2:	4606      	mov	r6, r0
 800bda4:	460c      	mov	r4, r1
 800bda6:	f101 0c14 	add.w	ip, r1, #20
 800bdaa:	2300      	movs	r3, #0
 800bdac:	f8dc 0000 	ldr.w	r0, [ip]
 800bdb0:	b281      	uxth	r1, r0
 800bdb2:	fb02 7101 	mla	r1, r2, r1, r7
 800bdb6:	0c0f      	lsrs	r7, r1, #16
 800bdb8:	0c00      	lsrs	r0, r0, #16
 800bdba:	fb02 7000 	mla	r0, r2, r0, r7
 800bdbe:	b289      	uxth	r1, r1
 800bdc0:	3301      	adds	r3, #1
 800bdc2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800bdc6:	429d      	cmp	r5, r3
 800bdc8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800bdcc:	f84c 1b04 	str.w	r1, [ip], #4
 800bdd0:	dcec      	bgt.n	800bdac <__multadd+0x12>
 800bdd2:	b1d7      	cbz	r7, 800be0a <__multadd+0x70>
 800bdd4:	68a3      	ldr	r3, [r4, #8]
 800bdd6:	42ab      	cmp	r3, r5
 800bdd8:	dc12      	bgt.n	800be00 <__multadd+0x66>
 800bdda:	6861      	ldr	r1, [r4, #4]
 800bddc:	4630      	mov	r0, r6
 800bdde:	3101      	adds	r1, #1
 800bde0:	f7ff ff90 	bl	800bd04 <_Balloc>
 800bde4:	6922      	ldr	r2, [r4, #16]
 800bde6:	3202      	adds	r2, #2
 800bde8:	f104 010c 	add.w	r1, r4, #12
 800bdec:	4680      	mov	r8, r0
 800bdee:	0092      	lsls	r2, r2, #2
 800bdf0:	300c      	adds	r0, #12
 800bdf2:	f7fe f8ef 	bl	8009fd4 <memcpy>
 800bdf6:	4621      	mov	r1, r4
 800bdf8:	4630      	mov	r0, r6
 800bdfa:	f7ff ffb7 	bl	800bd6c <_Bfree>
 800bdfe:	4644      	mov	r4, r8
 800be00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800be04:	3501      	adds	r5, #1
 800be06:	615f      	str	r7, [r3, #20]
 800be08:	6125      	str	r5, [r4, #16]
 800be0a:	4620      	mov	r0, r4
 800be0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800be10 <__hi0bits>:
 800be10:	0c02      	lsrs	r2, r0, #16
 800be12:	0412      	lsls	r2, r2, #16
 800be14:	4603      	mov	r3, r0
 800be16:	b9b2      	cbnz	r2, 800be46 <__hi0bits+0x36>
 800be18:	0403      	lsls	r3, r0, #16
 800be1a:	2010      	movs	r0, #16
 800be1c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800be20:	bf04      	itt	eq
 800be22:	021b      	lsleq	r3, r3, #8
 800be24:	3008      	addeq	r0, #8
 800be26:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800be2a:	bf04      	itt	eq
 800be2c:	011b      	lsleq	r3, r3, #4
 800be2e:	3004      	addeq	r0, #4
 800be30:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800be34:	bf04      	itt	eq
 800be36:	009b      	lsleq	r3, r3, #2
 800be38:	3002      	addeq	r0, #2
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	db06      	blt.n	800be4c <__hi0bits+0x3c>
 800be3e:	005b      	lsls	r3, r3, #1
 800be40:	d503      	bpl.n	800be4a <__hi0bits+0x3a>
 800be42:	3001      	adds	r0, #1
 800be44:	4770      	bx	lr
 800be46:	2000      	movs	r0, #0
 800be48:	e7e8      	b.n	800be1c <__hi0bits+0xc>
 800be4a:	2020      	movs	r0, #32
 800be4c:	4770      	bx	lr

0800be4e <__lo0bits>:
 800be4e:	6803      	ldr	r3, [r0, #0]
 800be50:	f013 0207 	ands.w	r2, r3, #7
 800be54:	4601      	mov	r1, r0
 800be56:	d00b      	beq.n	800be70 <__lo0bits+0x22>
 800be58:	07da      	lsls	r2, r3, #31
 800be5a:	d423      	bmi.n	800bea4 <__lo0bits+0x56>
 800be5c:	0798      	lsls	r0, r3, #30
 800be5e:	bf49      	itett	mi
 800be60:	085b      	lsrmi	r3, r3, #1
 800be62:	089b      	lsrpl	r3, r3, #2
 800be64:	2001      	movmi	r0, #1
 800be66:	600b      	strmi	r3, [r1, #0]
 800be68:	bf5c      	itt	pl
 800be6a:	600b      	strpl	r3, [r1, #0]
 800be6c:	2002      	movpl	r0, #2
 800be6e:	4770      	bx	lr
 800be70:	b298      	uxth	r0, r3
 800be72:	b9a8      	cbnz	r0, 800bea0 <__lo0bits+0x52>
 800be74:	0c1b      	lsrs	r3, r3, #16
 800be76:	2010      	movs	r0, #16
 800be78:	f013 0fff 	tst.w	r3, #255	; 0xff
 800be7c:	bf04      	itt	eq
 800be7e:	0a1b      	lsreq	r3, r3, #8
 800be80:	3008      	addeq	r0, #8
 800be82:	071a      	lsls	r2, r3, #28
 800be84:	bf04      	itt	eq
 800be86:	091b      	lsreq	r3, r3, #4
 800be88:	3004      	addeq	r0, #4
 800be8a:	079a      	lsls	r2, r3, #30
 800be8c:	bf04      	itt	eq
 800be8e:	089b      	lsreq	r3, r3, #2
 800be90:	3002      	addeq	r0, #2
 800be92:	07da      	lsls	r2, r3, #31
 800be94:	d402      	bmi.n	800be9c <__lo0bits+0x4e>
 800be96:	085b      	lsrs	r3, r3, #1
 800be98:	d006      	beq.n	800bea8 <__lo0bits+0x5a>
 800be9a:	3001      	adds	r0, #1
 800be9c:	600b      	str	r3, [r1, #0]
 800be9e:	4770      	bx	lr
 800bea0:	4610      	mov	r0, r2
 800bea2:	e7e9      	b.n	800be78 <__lo0bits+0x2a>
 800bea4:	2000      	movs	r0, #0
 800bea6:	4770      	bx	lr
 800bea8:	2020      	movs	r0, #32
 800beaa:	4770      	bx	lr

0800beac <__i2b>:
 800beac:	b510      	push	{r4, lr}
 800beae:	460c      	mov	r4, r1
 800beb0:	2101      	movs	r1, #1
 800beb2:	f7ff ff27 	bl	800bd04 <_Balloc>
 800beb6:	2201      	movs	r2, #1
 800beb8:	6144      	str	r4, [r0, #20]
 800beba:	6102      	str	r2, [r0, #16]
 800bebc:	bd10      	pop	{r4, pc}

0800bebe <__multiply>:
 800bebe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bec2:	4614      	mov	r4, r2
 800bec4:	690a      	ldr	r2, [r1, #16]
 800bec6:	6923      	ldr	r3, [r4, #16]
 800bec8:	429a      	cmp	r2, r3
 800beca:	bfb8      	it	lt
 800becc:	460b      	movlt	r3, r1
 800bece:	4688      	mov	r8, r1
 800bed0:	bfbc      	itt	lt
 800bed2:	46a0      	movlt	r8, r4
 800bed4:	461c      	movlt	r4, r3
 800bed6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800beda:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bede:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bee2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bee6:	eb07 0609 	add.w	r6, r7, r9
 800beea:	42b3      	cmp	r3, r6
 800beec:	bfb8      	it	lt
 800beee:	3101      	addlt	r1, #1
 800bef0:	f7ff ff08 	bl	800bd04 <_Balloc>
 800bef4:	f100 0514 	add.w	r5, r0, #20
 800bef8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800befc:	462b      	mov	r3, r5
 800befe:	2200      	movs	r2, #0
 800bf00:	4573      	cmp	r3, lr
 800bf02:	d316      	bcc.n	800bf32 <__multiply+0x74>
 800bf04:	f104 0214 	add.w	r2, r4, #20
 800bf08:	f108 0114 	add.w	r1, r8, #20
 800bf0c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800bf10:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800bf14:	9300      	str	r3, [sp, #0]
 800bf16:	9b00      	ldr	r3, [sp, #0]
 800bf18:	9201      	str	r2, [sp, #4]
 800bf1a:	4293      	cmp	r3, r2
 800bf1c:	d80c      	bhi.n	800bf38 <__multiply+0x7a>
 800bf1e:	2e00      	cmp	r6, #0
 800bf20:	dd03      	ble.n	800bf2a <__multiply+0x6c>
 800bf22:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d05d      	beq.n	800bfe6 <__multiply+0x128>
 800bf2a:	6106      	str	r6, [r0, #16]
 800bf2c:	b003      	add	sp, #12
 800bf2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf32:	f843 2b04 	str.w	r2, [r3], #4
 800bf36:	e7e3      	b.n	800bf00 <__multiply+0x42>
 800bf38:	f8b2 b000 	ldrh.w	fp, [r2]
 800bf3c:	f1bb 0f00 	cmp.w	fp, #0
 800bf40:	d023      	beq.n	800bf8a <__multiply+0xcc>
 800bf42:	4689      	mov	r9, r1
 800bf44:	46ac      	mov	ip, r5
 800bf46:	f04f 0800 	mov.w	r8, #0
 800bf4a:	f859 4b04 	ldr.w	r4, [r9], #4
 800bf4e:	f8dc a000 	ldr.w	sl, [ip]
 800bf52:	b2a3      	uxth	r3, r4
 800bf54:	fa1f fa8a 	uxth.w	sl, sl
 800bf58:	fb0b a303 	mla	r3, fp, r3, sl
 800bf5c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800bf60:	f8dc 4000 	ldr.w	r4, [ip]
 800bf64:	4443      	add	r3, r8
 800bf66:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800bf6a:	fb0b 840a 	mla	r4, fp, sl, r8
 800bf6e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800bf72:	46e2      	mov	sl, ip
 800bf74:	b29b      	uxth	r3, r3
 800bf76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800bf7a:	454f      	cmp	r7, r9
 800bf7c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800bf80:	f84a 3b04 	str.w	r3, [sl], #4
 800bf84:	d82b      	bhi.n	800bfde <__multiply+0x120>
 800bf86:	f8cc 8004 	str.w	r8, [ip, #4]
 800bf8a:	9b01      	ldr	r3, [sp, #4]
 800bf8c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800bf90:	3204      	adds	r2, #4
 800bf92:	f1ba 0f00 	cmp.w	sl, #0
 800bf96:	d020      	beq.n	800bfda <__multiply+0x11c>
 800bf98:	682b      	ldr	r3, [r5, #0]
 800bf9a:	4689      	mov	r9, r1
 800bf9c:	46a8      	mov	r8, r5
 800bf9e:	f04f 0b00 	mov.w	fp, #0
 800bfa2:	f8b9 c000 	ldrh.w	ip, [r9]
 800bfa6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800bfaa:	fb0a 440c 	mla	r4, sl, ip, r4
 800bfae:	445c      	add	r4, fp
 800bfb0:	46c4      	mov	ip, r8
 800bfb2:	b29b      	uxth	r3, r3
 800bfb4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800bfb8:	f84c 3b04 	str.w	r3, [ip], #4
 800bfbc:	f859 3b04 	ldr.w	r3, [r9], #4
 800bfc0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800bfc4:	0c1b      	lsrs	r3, r3, #16
 800bfc6:	fb0a b303 	mla	r3, sl, r3, fp
 800bfca:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800bfce:	454f      	cmp	r7, r9
 800bfd0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800bfd4:	d805      	bhi.n	800bfe2 <__multiply+0x124>
 800bfd6:	f8c8 3004 	str.w	r3, [r8, #4]
 800bfda:	3504      	adds	r5, #4
 800bfdc:	e79b      	b.n	800bf16 <__multiply+0x58>
 800bfde:	46d4      	mov	ip, sl
 800bfe0:	e7b3      	b.n	800bf4a <__multiply+0x8c>
 800bfe2:	46e0      	mov	r8, ip
 800bfe4:	e7dd      	b.n	800bfa2 <__multiply+0xe4>
 800bfe6:	3e01      	subs	r6, #1
 800bfe8:	e799      	b.n	800bf1e <__multiply+0x60>
	...

0800bfec <__pow5mult>:
 800bfec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bff0:	4615      	mov	r5, r2
 800bff2:	f012 0203 	ands.w	r2, r2, #3
 800bff6:	4606      	mov	r6, r0
 800bff8:	460f      	mov	r7, r1
 800bffa:	d007      	beq.n	800c00c <__pow5mult+0x20>
 800bffc:	3a01      	subs	r2, #1
 800bffe:	4c21      	ldr	r4, [pc, #132]	; (800c084 <__pow5mult+0x98>)
 800c000:	2300      	movs	r3, #0
 800c002:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c006:	f7ff fec8 	bl	800bd9a <__multadd>
 800c00a:	4607      	mov	r7, r0
 800c00c:	10ad      	asrs	r5, r5, #2
 800c00e:	d035      	beq.n	800c07c <__pow5mult+0x90>
 800c010:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c012:	b93c      	cbnz	r4, 800c024 <__pow5mult+0x38>
 800c014:	2010      	movs	r0, #16
 800c016:	f7fd ffd5 	bl	8009fc4 <malloc>
 800c01a:	6270      	str	r0, [r6, #36]	; 0x24
 800c01c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c020:	6004      	str	r4, [r0, #0]
 800c022:	60c4      	str	r4, [r0, #12]
 800c024:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c028:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c02c:	b94c      	cbnz	r4, 800c042 <__pow5mult+0x56>
 800c02e:	f240 2171 	movw	r1, #625	; 0x271
 800c032:	4630      	mov	r0, r6
 800c034:	f7ff ff3a 	bl	800beac <__i2b>
 800c038:	2300      	movs	r3, #0
 800c03a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c03e:	4604      	mov	r4, r0
 800c040:	6003      	str	r3, [r0, #0]
 800c042:	f04f 0800 	mov.w	r8, #0
 800c046:	07eb      	lsls	r3, r5, #31
 800c048:	d50a      	bpl.n	800c060 <__pow5mult+0x74>
 800c04a:	4639      	mov	r1, r7
 800c04c:	4622      	mov	r2, r4
 800c04e:	4630      	mov	r0, r6
 800c050:	f7ff ff35 	bl	800bebe <__multiply>
 800c054:	4639      	mov	r1, r7
 800c056:	4681      	mov	r9, r0
 800c058:	4630      	mov	r0, r6
 800c05a:	f7ff fe87 	bl	800bd6c <_Bfree>
 800c05e:	464f      	mov	r7, r9
 800c060:	106d      	asrs	r5, r5, #1
 800c062:	d00b      	beq.n	800c07c <__pow5mult+0x90>
 800c064:	6820      	ldr	r0, [r4, #0]
 800c066:	b938      	cbnz	r0, 800c078 <__pow5mult+0x8c>
 800c068:	4622      	mov	r2, r4
 800c06a:	4621      	mov	r1, r4
 800c06c:	4630      	mov	r0, r6
 800c06e:	f7ff ff26 	bl	800bebe <__multiply>
 800c072:	6020      	str	r0, [r4, #0]
 800c074:	f8c0 8000 	str.w	r8, [r0]
 800c078:	4604      	mov	r4, r0
 800c07a:	e7e4      	b.n	800c046 <__pow5mult+0x5a>
 800c07c:	4638      	mov	r0, r7
 800c07e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c082:	bf00      	nop
 800c084:	0800e1d0 	.word	0x0800e1d0

0800c088 <__lshift>:
 800c088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c08c:	460c      	mov	r4, r1
 800c08e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c092:	6923      	ldr	r3, [r4, #16]
 800c094:	6849      	ldr	r1, [r1, #4]
 800c096:	eb0a 0903 	add.w	r9, sl, r3
 800c09a:	68a3      	ldr	r3, [r4, #8]
 800c09c:	4607      	mov	r7, r0
 800c09e:	4616      	mov	r6, r2
 800c0a0:	f109 0501 	add.w	r5, r9, #1
 800c0a4:	42ab      	cmp	r3, r5
 800c0a6:	db32      	blt.n	800c10e <__lshift+0x86>
 800c0a8:	4638      	mov	r0, r7
 800c0aa:	f7ff fe2b 	bl	800bd04 <_Balloc>
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	4680      	mov	r8, r0
 800c0b2:	f100 0114 	add.w	r1, r0, #20
 800c0b6:	461a      	mov	r2, r3
 800c0b8:	4553      	cmp	r3, sl
 800c0ba:	db2b      	blt.n	800c114 <__lshift+0x8c>
 800c0bc:	6920      	ldr	r0, [r4, #16]
 800c0be:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c0c2:	f104 0314 	add.w	r3, r4, #20
 800c0c6:	f016 021f 	ands.w	r2, r6, #31
 800c0ca:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c0ce:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c0d2:	d025      	beq.n	800c120 <__lshift+0x98>
 800c0d4:	f1c2 0e20 	rsb	lr, r2, #32
 800c0d8:	2000      	movs	r0, #0
 800c0da:	681e      	ldr	r6, [r3, #0]
 800c0dc:	468a      	mov	sl, r1
 800c0de:	4096      	lsls	r6, r2
 800c0e0:	4330      	orrs	r0, r6
 800c0e2:	f84a 0b04 	str.w	r0, [sl], #4
 800c0e6:	f853 0b04 	ldr.w	r0, [r3], #4
 800c0ea:	459c      	cmp	ip, r3
 800c0ec:	fa20 f00e 	lsr.w	r0, r0, lr
 800c0f0:	d814      	bhi.n	800c11c <__lshift+0x94>
 800c0f2:	6048      	str	r0, [r1, #4]
 800c0f4:	b108      	cbz	r0, 800c0fa <__lshift+0x72>
 800c0f6:	f109 0502 	add.w	r5, r9, #2
 800c0fa:	3d01      	subs	r5, #1
 800c0fc:	4638      	mov	r0, r7
 800c0fe:	f8c8 5010 	str.w	r5, [r8, #16]
 800c102:	4621      	mov	r1, r4
 800c104:	f7ff fe32 	bl	800bd6c <_Bfree>
 800c108:	4640      	mov	r0, r8
 800c10a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c10e:	3101      	adds	r1, #1
 800c110:	005b      	lsls	r3, r3, #1
 800c112:	e7c7      	b.n	800c0a4 <__lshift+0x1c>
 800c114:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c118:	3301      	adds	r3, #1
 800c11a:	e7cd      	b.n	800c0b8 <__lshift+0x30>
 800c11c:	4651      	mov	r1, sl
 800c11e:	e7dc      	b.n	800c0da <__lshift+0x52>
 800c120:	3904      	subs	r1, #4
 800c122:	f853 2b04 	ldr.w	r2, [r3], #4
 800c126:	f841 2f04 	str.w	r2, [r1, #4]!
 800c12a:	459c      	cmp	ip, r3
 800c12c:	d8f9      	bhi.n	800c122 <__lshift+0x9a>
 800c12e:	e7e4      	b.n	800c0fa <__lshift+0x72>

0800c130 <__mcmp>:
 800c130:	6903      	ldr	r3, [r0, #16]
 800c132:	690a      	ldr	r2, [r1, #16]
 800c134:	1a9b      	subs	r3, r3, r2
 800c136:	b530      	push	{r4, r5, lr}
 800c138:	d10c      	bne.n	800c154 <__mcmp+0x24>
 800c13a:	0092      	lsls	r2, r2, #2
 800c13c:	3014      	adds	r0, #20
 800c13e:	3114      	adds	r1, #20
 800c140:	1884      	adds	r4, r0, r2
 800c142:	4411      	add	r1, r2
 800c144:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c148:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c14c:	4295      	cmp	r5, r2
 800c14e:	d003      	beq.n	800c158 <__mcmp+0x28>
 800c150:	d305      	bcc.n	800c15e <__mcmp+0x2e>
 800c152:	2301      	movs	r3, #1
 800c154:	4618      	mov	r0, r3
 800c156:	bd30      	pop	{r4, r5, pc}
 800c158:	42a0      	cmp	r0, r4
 800c15a:	d3f3      	bcc.n	800c144 <__mcmp+0x14>
 800c15c:	e7fa      	b.n	800c154 <__mcmp+0x24>
 800c15e:	f04f 33ff 	mov.w	r3, #4294967295
 800c162:	e7f7      	b.n	800c154 <__mcmp+0x24>

0800c164 <__mdiff>:
 800c164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c168:	460d      	mov	r5, r1
 800c16a:	4607      	mov	r7, r0
 800c16c:	4611      	mov	r1, r2
 800c16e:	4628      	mov	r0, r5
 800c170:	4614      	mov	r4, r2
 800c172:	f7ff ffdd 	bl	800c130 <__mcmp>
 800c176:	1e06      	subs	r6, r0, #0
 800c178:	d108      	bne.n	800c18c <__mdiff+0x28>
 800c17a:	4631      	mov	r1, r6
 800c17c:	4638      	mov	r0, r7
 800c17e:	f7ff fdc1 	bl	800bd04 <_Balloc>
 800c182:	2301      	movs	r3, #1
 800c184:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c18c:	bfa4      	itt	ge
 800c18e:	4623      	movge	r3, r4
 800c190:	462c      	movge	r4, r5
 800c192:	4638      	mov	r0, r7
 800c194:	6861      	ldr	r1, [r4, #4]
 800c196:	bfa6      	itte	ge
 800c198:	461d      	movge	r5, r3
 800c19a:	2600      	movge	r6, #0
 800c19c:	2601      	movlt	r6, #1
 800c19e:	f7ff fdb1 	bl	800bd04 <_Balloc>
 800c1a2:	692b      	ldr	r3, [r5, #16]
 800c1a4:	60c6      	str	r6, [r0, #12]
 800c1a6:	6926      	ldr	r6, [r4, #16]
 800c1a8:	f105 0914 	add.w	r9, r5, #20
 800c1ac:	f104 0214 	add.w	r2, r4, #20
 800c1b0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800c1b4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800c1b8:	f100 0514 	add.w	r5, r0, #20
 800c1bc:	f04f 0e00 	mov.w	lr, #0
 800c1c0:	f852 ab04 	ldr.w	sl, [r2], #4
 800c1c4:	f859 4b04 	ldr.w	r4, [r9], #4
 800c1c8:	fa1e f18a 	uxtah	r1, lr, sl
 800c1cc:	b2a3      	uxth	r3, r4
 800c1ce:	1ac9      	subs	r1, r1, r3
 800c1d0:	0c23      	lsrs	r3, r4, #16
 800c1d2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800c1d6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c1da:	b289      	uxth	r1, r1
 800c1dc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800c1e0:	45c8      	cmp	r8, r9
 800c1e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c1e6:	4694      	mov	ip, r2
 800c1e8:	f845 3b04 	str.w	r3, [r5], #4
 800c1ec:	d8e8      	bhi.n	800c1c0 <__mdiff+0x5c>
 800c1ee:	45bc      	cmp	ip, r7
 800c1f0:	d304      	bcc.n	800c1fc <__mdiff+0x98>
 800c1f2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800c1f6:	b183      	cbz	r3, 800c21a <__mdiff+0xb6>
 800c1f8:	6106      	str	r6, [r0, #16]
 800c1fa:	e7c5      	b.n	800c188 <__mdiff+0x24>
 800c1fc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c200:	fa1e f381 	uxtah	r3, lr, r1
 800c204:	141a      	asrs	r2, r3, #16
 800c206:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c20a:	b29b      	uxth	r3, r3
 800c20c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c210:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800c214:	f845 3b04 	str.w	r3, [r5], #4
 800c218:	e7e9      	b.n	800c1ee <__mdiff+0x8a>
 800c21a:	3e01      	subs	r6, #1
 800c21c:	e7e9      	b.n	800c1f2 <__mdiff+0x8e>

0800c21e <__d2b>:
 800c21e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c222:	460e      	mov	r6, r1
 800c224:	2101      	movs	r1, #1
 800c226:	ec59 8b10 	vmov	r8, r9, d0
 800c22a:	4615      	mov	r5, r2
 800c22c:	f7ff fd6a 	bl	800bd04 <_Balloc>
 800c230:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800c234:	4607      	mov	r7, r0
 800c236:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c23a:	bb34      	cbnz	r4, 800c28a <__d2b+0x6c>
 800c23c:	9301      	str	r3, [sp, #4]
 800c23e:	f1b8 0300 	subs.w	r3, r8, #0
 800c242:	d027      	beq.n	800c294 <__d2b+0x76>
 800c244:	a802      	add	r0, sp, #8
 800c246:	f840 3d08 	str.w	r3, [r0, #-8]!
 800c24a:	f7ff fe00 	bl	800be4e <__lo0bits>
 800c24e:	9900      	ldr	r1, [sp, #0]
 800c250:	b1f0      	cbz	r0, 800c290 <__d2b+0x72>
 800c252:	9a01      	ldr	r2, [sp, #4]
 800c254:	f1c0 0320 	rsb	r3, r0, #32
 800c258:	fa02 f303 	lsl.w	r3, r2, r3
 800c25c:	430b      	orrs	r3, r1
 800c25e:	40c2      	lsrs	r2, r0
 800c260:	617b      	str	r3, [r7, #20]
 800c262:	9201      	str	r2, [sp, #4]
 800c264:	9b01      	ldr	r3, [sp, #4]
 800c266:	61bb      	str	r3, [r7, #24]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	bf14      	ite	ne
 800c26c:	2102      	movne	r1, #2
 800c26e:	2101      	moveq	r1, #1
 800c270:	6139      	str	r1, [r7, #16]
 800c272:	b1c4      	cbz	r4, 800c2a6 <__d2b+0x88>
 800c274:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800c278:	4404      	add	r4, r0
 800c27a:	6034      	str	r4, [r6, #0]
 800c27c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c280:	6028      	str	r0, [r5, #0]
 800c282:	4638      	mov	r0, r7
 800c284:	b003      	add	sp, #12
 800c286:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c28a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c28e:	e7d5      	b.n	800c23c <__d2b+0x1e>
 800c290:	6179      	str	r1, [r7, #20]
 800c292:	e7e7      	b.n	800c264 <__d2b+0x46>
 800c294:	a801      	add	r0, sp, #4
 800c296:	f7ff fdda 	bl	800be4e <__lo0bits>
 800c29a:	9b01      	ldr	r3, [sp, #4]
 800c29c:	617b      	str	r3, [r7, #20]
 800c29e:	2101      	movs	r1, #1
 800c2a0:	6139      	str	r1, [r7, #16]
 800c2a2:	3020      	adds	r0, #32
 800c2a4:	e7e5      	b.n	800c272 <__d2b+0x54>
 800c2a6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800c2aa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c2ae:	6030      	str	r0, [r6, #0]
 800c2b0:	6918      	ldr	r0, [r3, #16]
 800c2b2:	f7ff fdad 	bl	800be10 <__hi0bits>
 800c2b6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800c2ba:	e7e1      	b.n	800c280 <__d2b+0x62>

0800c2bc <_calloc_r>:
 800c2bc:	b538      	push	{r3, r4, r5, lr}
 800c2be:	fb02 f401 	mul.w	r4, r2, r1
 800c2c2:	4621      	mov	r1, r4
 800c2c4:	f7fd fee8 	bl	800a098 <_malloc_r>
 800c2c8:	4605      	mov	r5, r0
 800c2ca:	b118      	cbz	r0, 800c2d4 <_calloc_r+0x18>
 800c2cc:	4622      	mov	r2, r4
 800c2ce:	2100      	movs	r1, #0
 800c2d0:	f7fd fe8b 	bl	8009fea <memset>
 800c2d4:	4628      	mov	r0, r5
 800c2d6:	bd38      	pop	{r3, r4, r5, pc}

0800c2d8 <__sfputc_r>:
 800c2d8:	6893      	ldr	r3, [r2, #8]
 800c2da:	3b01      	subs	r3, #1
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	b410      	push	{r4}
 800c2e0:	6093      	str	r3, [r2, #8]
 800c2e2:	da08      	bge.n	800c2f6 <__sfputc_r+0x1e>
 800c2e4:	6994      	ldr	r4, [r2, #24]
 800c2e6:	42a3      	cmp	r3, r4
 800c2e8:	db01      	blt.n	800c2ee <__sfputc_r+0x16>
 800c2ea:	290a      	cmp	r1, #10
 800c2ec:	d103      	bne.n	800c2f6 <__sfputc_r+0x1e>
 800c2ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c2f2:	f7fe bc13 	b.w	800ab1c <__swbuf_r>
 800c2f6:	6813      	ldr	r3, [r2, #0]
 800c2f8:	1c58      	adds	r0, r3, #1
 800c2fa:	6010      	str	r0, [r2, #0]
 800c2fc:	7019      	strb	r1, [r3, #0]
 800c2fe:	4608      	mov	r0, r1
 800c300:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c304:	4770      	bx	lr

0800c306 <__sfputs_r>:
 800c306:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c308:	4606      	mov	r6, r0
 800c30a:	460f      	mov	r7, r1
 800c30c:	4614      	mov	r4, r2
 800c30e:	18d5      	adds	r5, r2, r3
 800c310:	42ac      	cmp	r4, r5
 800c312:	d101      	bne.n	800c318 <__sfputs_r+0x12>
 800c314:	2000      	movs	r0, #0
 800c316:	e007      	b.n	800c328 <__sfputs_r+0x22>
 800c318:	463a      	mov	r2, r7
 800c31a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c31e:	4630      	mov	r0, r6
 800c320:	f7ff ffda 	bl	800c2d8 <__sfputc_r>
 800c324:	1c43      	adds	r3, r0, #1
 800c326:	d1f3      	bne.n	800c310 <__sfputs_r+0xa>
 800c328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c32c <_vfiprintf_r>:
 800c32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c330:	460c      	mov	r4, r1
 800c332:	b09d      	sub	sp, #116	; 0x74
 800c334:	4617      	mov	r7, r2
 800c336:	461d      	mov	r5, r3
 800c338:	4606      	mov	r6, r0
 800c33a:	b118      	cbz	r0, 800c344 <_vfiprintf_r+0x18>
 800c33c:	6983      	ldr	r3, [r0, #24]
 800c33e:	b90b      	cbnz	r3, 800c344 <_vfiprintf_r+0x18>
 800c340:	f7ff fbe2 	bl	800bb08 <__sinit>
 800c344:	4b7c      	ldr	r3, [pc, #496]	; (800c538 <_vfiprintf_r+0x20c>)
 800c346:	429c      	cmp	r4, r3
 800c348:	d158      	bne.n	800c3fc <_vfiprintf_r+0xd0>
 800c34a:	6874      	ldr	r4, [r6, #4]
 800c34c:	89a3      	ldrh	r3, [r4, #12]
 800c34e:	0718      	lsls	r0, r3, #28
 800c350:	d55e      	bpl.n	800c410 <_vfiprintf_r+0xe4>
 800c352:	6923      	ldr	r3, [r4, #16]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d05b      	beq.n	800c410 <_vfiprintf_r+0xe4>
 800c358:	2300      	movs	r3, #0
 800c35a:	9309      	str	r3, [sp, #36]	; 0x24
 800c35c:	2320      	movs	r3, #32
 800c35e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c362:	2330      	movs	r3, #48	; 0x30
 800c364:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c368:	9503      	str	r5, [sp, #12]
 800c36a:	f04f 0b01 	mov.w	fp, #1
 800c36e:	46b8      	mov	r8, r7
 800c370:	4645      	mov	r5, r8
 800c372:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c376:	b10b      	cbz	r3, 800c37c <_vfiprintf_r+0x50>
 800c378:	2b25      	cmp	r3, #37	; 0x25
 800c37a:	d154      	bne.n	800c426 <_vfiprintf_r+0xfa>
 800c37c:	ebb8 0a07 	subs.w	sl, r8, r7
 800c380:	d00b      	beq.n	800c39a <_vfiprintf_r+0x6e>
 800c382:	4653      	mov	r3, sl
 800c384:	463a      	mov	r2, r7
 800c386:	4621      	mov	r1, r4
 800c388:	4630      	mov	r0, r6
 800c38a:	f7ff ffbc 	bl	800c306 <__sfputs_r>
 800c38e:	3001      	adds	r0, #1
 800c390:	f000 80c2 	beq.w	800c518 <_vfiprintf_r+0x1ec>
 800c394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c396:	4453      	add	r3, sl
 800c398:	9309      	str	r3, [sp, #36]	; 0x24
 800c39a:	f898 3000 	ldrb.w	r3, [r8]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	f000 80ba 	beq.w	800c518 <_vfiprintf_r+0x1ec>
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	f04f 32ff 	mov.w	r2, #4294967295
 800c3aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c3ae:	9304      	str	r3, [sp, #16]
 800c3b0:	9307      	str	r3, [sp, #28]
 800c3b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c3b6:	931a      	str	r3, [sp, #104]	; 0x68
 800c3b8:	46a8      	mov	r8, r5
 800c3ba:	2205      	movs	r2, #5
 800c3bc:	f818 1b01 	ldrb.w	r1, [r8], #1
 800c3c0:	485e      	ldr	r0, [pc, #376]	; (800c53c <_vfiprintf_r+0x210>)
 800c3c2:	f7f3 ff0d 	bl	80001e0 <memchr>
 800c3c6:	9b04      	ldr	r3, [sp, #16]
 800c3c8:	bb78      	cbnz	r0, 800c42a <_vfiprintf_r+0xfe>
 800c3ca:	06d9      	lsls	r1, r3, #27
 800c3cc:	bf44      	itt	mi
 800c3ce:	2220      	movmi	r2, #32
 800c3d0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c3d4:	071a      	lsls	r2, r3, #28
 800c3d6:	bf44      	itt	mi
 800c3d8:	222b      	movmi	r2, #43	; 0x2b
 800c3da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c3de:	782a      	ldrb	r2, [r5, #0]
 800c3e0:	2a2a      	cmp	r2, #42	; 0x2a
 800c3e2:	d02a      	beq.n	800c43a <_vfiprintf_r+0x10e>
 800c3e4:	9a07      	ldr	r2, [sp, #28]
 800c3e6:	46a8      	mov	r8, r5
 800c3e8:	2000      	movs	r0, #0
 800c3ea:	250a      	movs	r5, #10
 800c3ec:	4641      	mov	r1, r8
 800c3ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c3f2:	3b30      	subs	r3, #48	; 0x30
 800c3f4:	2b09      	cmp	r3, #9
 800c3f6:	d969      	bls.n	800c4cc <_vfiprintf_r+0x1a0>
 800c3f8:	b360      	cbz	r0, 800c454 <_vfiprintf_r+0x128>
 800c3fa:	e024      	b.n	800c446 <_vfiprintf_r+0x11a>
 800c3fc:	4b50      	ldr	r3, [pc, #320]	; (800c540 <_vfiprintf_r+0x214>)
 800c3fe:	429c      	cmp	r4, r3
 800c400:	d101      	bne.n	800c406 <_vfiprintf_r+0xda>
 800c402:	68b4      	ldr	r4, [r6, #8]
 800c404:	e7a2      	b.n	800c34c <_vfiprintf_r+0x20>
 800c406:	4b4f      	ldr	r3, [pc, #316]	; (800c544 <_vfiprintf_r+0x218>)
 800c408:	429c      	cmp	r4, r3
 800c40a:	bf08      	it	eq
 800c40c:	68f4      	ldreq	r4, [r6, #12]
 800c40e:	e79d      	b.n	800c34c <_vfiprintf_r+0x20>
 800c410:	4621      	mov	r1, r4
 800c412:	4630      	mov	r0, r6
 800c414:	f7fe fbd4 	bl	800abc0 <__swsetup_r>
 800c418:	2800      	cmp	r0, #0
 800c41a:	d09d      	beq.n	800c358 <_vfiprintf_r+0x2c>
 800c41c:	f04f 30ff 	mov.w	r0, #4294967295
 800c420:	b01d      	add	sp, #116	; 0x74
 800c422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c426:	46a8      	mov	r8, r5
 800c428:	e7a2      	b.n	800c370 <_vfiprintf_r+0x44>
 800c42a:	4a44      	ldr	r2, [pc, #272]	; (800c53c <_vfiprintf_r+0x210>)
 800c42c:	1a80      	subs	r0, r0, r2
 800c42e:	fa0b f000 	lsl.w	r0, fp, r0
 800c432:	4318      	orrs	r0, r3
 800c434:	9004      	str	r0, [sp, #16]
 800c436:	4645      	mov	r5, r8
 800c438:	e7be      	b.n	800c3b8 <_vfiprintf_r+0x8c>
 800c43a:	9a03      	ldr	r2, [sp, #12]
 800c43c:	1d11      	adds	r1, r2, #4
 800c43e:	6812      	ldr	r2, [r2, #0]
 800c440:	9103      	str	r1, [sp, #12]
 800c442:	2a00      	cmp	r2, #0
 800c444:	db01      	blt.n	800c44a <_vfiprintf_r+0x11e>
 800c446:	9207      	str	r2, [sp, #28]
 800c448:	e004      	b.n	800c454 <_vfiprintf_r+0x128>
 800c44a:	4252      	negs	r2, r2
 800c44c:	f043 0302 	orr.w	r3, r3, #2
 800c450:	9207      	str	r2, [sp, #28]
 800c452:	9304      	str	r3, [sp, #16]
 800c454:	f898 3000 	ldrb.w	r3, [r8]
 800c458:	2b2e      	cmp	r3, #46	; 0x2e
 800c45a:	d10e      	bne.n	800c47a <_vfiprintf_r+0x14e>
 800c45c:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c460:	2b2a      	cmp	r3, #42	; 0x2a
 800c462:	d138      	bne.n	800c4d6 <_vfiprintf_r+0x1aa>
 800c464:	9b03      	ldr	r3, [sp, #12]
 800c466:	1d1a      	adds	r2, r3, #4
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	9203      	str	r2, [sp, #12]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	bfb8      	it	lt
 800c470:	f04f 33ff 	movlt.w	r3, #4294967295
 800c474:	f108 0802 	add.w	r8, r8, #2
 800c478:	9305      	str	r3, [sp, #20]
 800c47a:	4d33      	ldr	r5, [pc, #204]	; (800c548 <_vfiprintf_r+0x21c>)
 800c47c:	f898 1000 	ldrb.w	r1, [r8]
 800c480:	2203      	movs	r2, #3
 800c482:	4628      	mov	r0, r5
 800c484:	f7f3 feac 	bl	80001e0 <memchr>
 800c488:	b140      	cbz	r0, 800c49c <_vfiprintf_r+0x170>
 800c48a:	2340      	movs	r3, #64	; 0x40
 800c48c:	1b40      	subs	r0, r0, r5
 800c48e:	fa03 f000 	lsl.w	r0, r3, r0
 800c492:	9b04      	ldr	r3, [sp, #16]
 800c494:	4303      	orrs	r3, r0
 800c496:	f108 0801 	add.w	r8, r8, #1
 800c49a:	9304      	str	r3, [sp, #16]
 800c49c:	f898 1000 	ldrb.w	r1, [r8]
 800c4a0:	482a      	ldr	r0, [pc, #168]	; (800c54c <_vfiprintf_r+0x220>)
 800c4a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c4a6:	2206      	movs	r2, #6
 800c4a8:	f108 0701 	add.w	r7, r8, #1
 800c4ac:	f7f3 fe98 	bl	80001e0 <memchr>
 800c4b0:	2800      	cmp	r0, #0
 800c4b2:	d037      	beq.n	800c524 <_vfiprintf_r+0x1f8>
 800c4b4:	4b26      	ldr	r3, [pc, #152]	; (800c550 <_vfiprintf_r+0x224>)
 800c4b6:	bb1b      	cbnz	r3, 800c500 <_vfiprintf_r+0x1d4>
 800c4b8:	9b03      	ldr	r3, [sp, #12]
 800c4ba:	3307      	adds	r3, #7
 800c4bc:	f023 0307 	bic.w	r3, r3, #7
 800c4c0:	3308      	adds	r3, #8
 800c4c2:	9303      	str	r3, [sp, #12]
 800c4c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4c6:	444b      	add	r3, r9
 800c4c8:	9309      	str	r3, [sp, #36]	; 0x24
 800c4ca:	e750      	b.n	800c36e <_vfiprintf_r+0x42>
 800c4cc:	fb05 3202 	mla	r2, r5, r2, r3
 800c4d0:	2001      	movs	r0, #1
 800c4d2:	4688      	mov	r8, r1
 800c4d4:	e78a      	b.n	800c3ec <_vfiprintf_r+0xc0>
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	f108 0801 	add.w	r8, r8, #1
 800c4dc:	9305      	str	r3, [sp, #20]
 800c4de:	4619      	mov	r1, r3
 800c4e0:	250a      	movs	r5, #10
 800c4e2:	4640      	mov	r0, r8
 800c4e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c4e8:	3a30      	subs	r2, #48	; 0x30
 800c4ea:	2a09      	cmp	r2, #9
 800c4ec:	d903      	bls.n	800c4f6 <_vfiprintf_r+0x1ca>
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d0c3      	beq.n	800c47a <_vfiprintf_r+0x14e>
 800c4f2:	9105      	str	r1, [sp, #20]
 800c4f4:	e7c1      	b.n	800c47a <_vfiprintf_r+0x14e>
 800c4f6:	fb05 2101 	mla	r1, r5, r1, r2
 800c4fa:	2301      	movs	r3, #1
 800c4fc:	4680      	mov	r8, r0
 800c4fe:	e7f0      	b.n	800c4e2 <_vfiprintf_r+0x1b6>
 800c500:	ab03      	add	r3, sp, #12
 800c502:	9300      	str	r3, [sp, #0]
 800c504:	4622      	mov	r2, r4
 800c506:	4b13      	ldr	r3, [pc, #76]	; (800c554 <_vfiprintf_r+0x228>)
 800c508:	a904      	add	r1, sp, #16
 800c50a:	4630      	mov	r0, r6
 800c50c:	f7fd feb2 	bl	800a274 <_printf_float>
 800c510:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c514:	4681      	mov	r9, r0
 800c516:	d1d5      	bne.n	800c4c4 <_vfiprintf_r+0x198>
 800c518:	89a3      	ldrh	r3, [r4, #12]
 800c51a:	065b      	lsls	r3, r3, #25
 800c51c:	f53f af7e 	bmi.w	800c41c <_vfiprintf_r+0xf0>
 800c520:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c522:	e77d      	b.n	800c420 <_vfiprintf_r+0xf4>
 800c524:	ab03      	add	r3, sp, #12
 800c526:	9300      	str	r3, [sp, #0]
 800c528:	4622      	mov	r2, r4
 800c52a:	4b0a      	ldr	r3, [pc, #40]	; (800c554 <_vfiprintf_r+0x228>)
 800c52c:	a904      	add	r1, sp, #16
 800c52e:	4630      	mov	r0, r6
 800c530:	f7fe f956 	bl	800a7e0 <_printf_i>
 800c534:	e7ec      	b.n	800c510 <_vfiprintf_r+0x1e4>
 800c536:	bf00      	nop
 800c538:	0800e09c 	.word	0x0800e09c
 800c53c:	0800e1dc 	.word	0x0800e1dc
 800c540:	0800e0bc 	.word	0x0800e0bc
 800c544:	0800e07c 	.word	0x0800e07c
 800c548:	0800e1e2 	.word	0x0800e1e2
 800c54c:	0800e1e6 	.word	0x0800e1e6
 800c550:	0800a275 	.word	0x0800a275
 800c554:	0800c307 	.word	0x0800c307

0800c558 <__sread>:
 800c558:	b510      	push	{r4, lr}
 800c55a:	460c      	mov	r4, r1
 800c55c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c560:	f000 f8a6 	bl	800c6b0 <_read_r>
 800c564:	2800      	cmp	r0, #0
 800c566:	bfab      	itete	ge
 800c568:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c56a:	89a3      	ldrhlt	r3, [r4, #12]
 800c56c:	181b      	addge	r3, r3, r0
 800c56e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c572:	bfac      	ite	ge
 800c574:	6563      	strge	r3, [r4, #84]	; 0x54
 800c576:	81a3      	strhlt	r3, [r4, #12]
 800c578:	bd10      	pop	{r4, pc}

0800c57a <__swrite>:
 800c57a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c57e:	461f      	mov	r7, r3
 800c580:	898b      	ldrh	r3, [r1, #12]
 800c582:	05db      	lsls	r3, r3, #23
 800c584:	4605      	mov	r5, r0
 800c586:	460c      	mov	r4, r1
 800c588:	4616      	mov	r6, r2
 800c58a:	d505      	bpl.n	800c598 <__swrite+0x1e>
 800c58c:	2302      	movs	r3, #2
 800c58e:	2200      	movs	r2, #0
 800c590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c594:	f000 f868 	bl	800c668 <_lseek_r>
 800c598:	89a3      	ldrh	r3, [r4, #12]
 800c59a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c59e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c5a2:	81a3      	strh	r3, [r4, #12]
 800c5a4:	4632      	mov	r2, r6
 800c5a6:	463b      	mov	r3, r7
 800c5a8:	4628      	mov	r0, r5
 800c5aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5ae:	f000 b817 	b.w	800c5e0 <_write_r>

0800c5b2 <__sseek>:
 800c5b2:	b510      	push	{r4, lr}
 800c5b4:	460c      	mov	r4, r1
 800c5b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5ba:	f000 f855 	bl	800c668 <_lseek_r>
 800c5be:	1c43      	adds	r3, r0, #1
 800c5c0:	89a3      	ldrh	r3, [r4, #12]
 800c5c2:	bf15      	itete	ne
 800c5c4:	6560      	strne	r0, [r4, #84]	; 0x54
 800c5c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c5ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c5ce:	81a3      	strheq	r3, [r4, #12]
 800c5d0:	bf18      	it	ne
 800c5d2:	81a3      	strhne	r3, [r4, #12]
 800c5d4:	bd10      	pop	{r4, pc}

0800c5d6 <__sclose>:
 800c5d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5da:	f000 b813 	b.w	800c604 <_close_r>
	...

0800c5e0 <_write_r>:
 800c5e0:	b538      	push	{r3, r4, r5, lr}
 800c5e2:	4c07      	ldr	r4, [pc, #28]	; (800c600 <_write_r+0x20>)
 800c5e4:	4605      	mov	r5, r0
 800c5e6:	4608      	mov	r0, r1
 800c5e8:	4611      	mov	r1, r2
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	6022      	str	r2, [r4, #0]
 800c5ee:	461a      	mov	r2, r3
 800c5f0:	f7f5 fb3e 	bl	8001c70 <_write>
 800c5f4:	1c43      	adds	r3, r0, #1
 800c5f6:	d102      	bne.n	800c5fe <_write_r+0x1e>
 800c5f8:	6823      	ldr	r3, [r4, #0]
 800c5fa:	b103      	cbz	r3, 800c5fe <_write_r+0x1e>
 800c5fc:	602b      	str	r3, [r5, #0]
 800c5fe:	bd38      	pop	{r3, r4, r5, pc}
 800c600:	20001750 	.word	0x20001750

0800c604 <_close_r>:
 800c604:	b538      	push	{r3, r4, r5, lr}
 800c606:	4c06      	ldr	r4, [pc, #24]	; (800c620 <_close_r+0x1c>)
 800c608:	2300      	movs	r3, #0
 800c60a:	4605      	mov	r5, r0
 800c60c:	4608      	mov	r0, r1
 800c60e:	6023      	str	r3, [r4, #0]
 800c610:	f7f5 fb4a 	bl	8001ca8 <_close>
 800c614:	1c43      	adds	r3, r0, #1
 800c616:	d102      	bne.n	800c61e <_close_r+0x1a>
 800c618:	6823      	ldr	r3, [r4, #0]
 800c61a:	b103      	cbz	r3, 800c61e <_close_r+0x1a>
 800c61c:	602b      	str	r3, [r5, #0]
 800c61e:	bd38      	pop	{r3, r4, r5, pc}
 800c620:	20001750 	.word	0x20001750

0800c624 <_fstat_r>:
 800c624:	b538      	push	{r3, r4, r5, lr}
 800c626:	4c07      	ldr	r4, [pc, #28]	; (800c644 <_fstat_r+0x20>)
 800c628:	2300      	movs	r3, #0
 800c62a:	4605      	mov	r5, r0
 800c62c:	4608      	mov	r0, r1
 800c62e:	4611      	mov	r1, r2
 800c630:	6023      	str	r3, [r4, #0]
 800c632:	f7f5 fb45 	bl	8001cc0 <_fstat>
 800c636:	1c43      	adds	r3, r0, #1
 800c638:	d102      	bne.n	800c640 <_fstat_r+0x1c>
 800c63a:	6823      	ldr	r3, [r4, #0]
 800c63c:	b103      	cbz	r3, 800c640 <_fstat_r+0x1c>
 800c63e:	602b      	str	r3, [r5, #0]
 800c640:	bd38      	pop	{r3, r4, r5, pc}
 800c642:	bf00      	nop
 800c644:	20001750 	.word	0x20001750

0800c648 <_isatty_r>:
 800c648:	b538      	push	{r3, r4, r5, lr}
 800c64a:	4c06      	ldr	r4, [pc, #24]	; (800c664 <_isatty_r+0x1c>)
 800c64c:	2300      	movs	r3, #0
 800c64e:	4605      	mov	r5, r0
 800c650:	4608      	mov	r0, r1
 800c652:	6023      	str	r3, [r4, #0]
 800c654:	f7f5 fb44 	bl	8001ce0 <_isatty>
 800c658:	1c43      	adds	r3, r0, #1
 800c65a:	d102      	bne.n	800c662 <_isatty_r+0x1a>
 800c65c:	6823      	ldr	r3, [r4, #0]
 800c65e:	b103      	cbz	r3, 800c662 <_isatty_r+0x1a>
 800c660:	602b      	str	r3, [r5, #0]
 800c662:	bd38      	pop	{r3, r4, r5, pc}
 800c664:	20001750 	.word	0x20001750

0800c668 <_lseek_r>:
 800c668:	b538      	push	{r3, r4, r5, lr}
 800c66a:	4c07      	ldr	r4, [pc, #28]	; (800c688 <_lseek_r+0x20>)
 800c66c:	4605      	mov	r5, r0
 800c66e:	4608      	mov	r0, r1
 800c670:	4611      	mov	r1, r2
 800c672:	2200      	movs	r2, #0
 800c674:	6022      	str	r2, [r4, #0]
 800c676:	461a      	mov	r2, r3
 800c678:	f7f5 fb3d 	bl	8001cf6 <_lseek>
 800c67c:	1c43      	adds	r3, r0, #1
 800c67e:	d102      	bne.n	800c686 <_lseek_r+0x1e>
 800c680:	6823      	ldr	r3, [r4, #0]
 800c682:	b103      	cbz	r3, 800c686 <_lseek_r+0x1e>
 800c684:	602b      	str	r3, [r5, #0]
 800c686:	bd38      	pop	{r3, r4, r5, pc}
 800c688:	20001750 	.word	0x20001750

0800c68c <__ascii_mbtowc>:
 800c68c:	b082      	sub	sp, #8
 800c68e:	b901      	cbnz	r1, 800c692 <__ascii_mbtowc+0x6>
 800c690:	a901      	add	r1, sp, #4
 800c692:	b142      	cbz	r2, 800c6a6 <__ascii_mbtowc+0x1a>
 800c694:	b14b      	cbz	r3, 800c6aa <__ascii_mbtowc+0x1e>
 800c696:	7813      	ldrb	r3, [r2, #0]
 800c698:	600b      	str	r3, [r1, #0]
 800c69a:	7812      	ldrb	r2, [r2, #0]
 800c69c:	1c10      	adds	r0, r2, #0
 800c69e:	bf18      	it	ne
 800c6a0:	2001      	movne	r0, #1
 800c6a2:	b002      	add	sp, #8
 800c6a4:	4770      	bx	lr
 800c6a6:	4610      	mov	r0, r2
 800c6a8:	e7fb      	b.n	800c6a2 <__ascii_mbtowc+0x16>
 800c6aa:	f06f 0001 	mvn.w	r0, #1
 800c6ae:	e7f8      	b.n	800c6a2 <__ascii_mbtowc+0x16>

0800c6b0 <_read_r>:
 800c6b0:	b538      	push	{r3, r4, r5, lr}
 800c6b2:	4c07      	ldr	r4, [pc, #28]	; (800c6d0 <_read_r+0x20>)
 800c6b4:	4605      	mov	r5, r0
 800c6b6:	4608      	mov	r0, r1
 800c6b8:	4611      	mov	r1, r2
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	6022      	str	r2, [r4, #0]
 800c6be:	461a      	mov	r2, r3
 800c6c0:	f7f5 fab9 	bl	8001c36 <_read>
 800c6c4:	1c43      	adds	r3, r0, #1
 800c6c6:	d102      	bne.n	800c6ce <_read_r+0x1e>
 800c6c8:	6823      	ldr	r3, [r4, #0]
 800c6ca:	b103      	cbz	r3, 800c6ce <_read_r+0x1e>
 800c6cc:	602b      	str	r3, [r5, #0]
 800c6ce:	bd38      	pop	{r3, r4, r5, pc}
 800c6d0:	20001750 	.word	0x20001750

0800c6d4 <__ascii_wctomb>:
 800c6d4:	b149      	cbz	r1, 800c6ea <__ascii_wctomb+0x16>
 800c6d6:	2aff      	cmp	r2, #255	; 0xff
 800c6d8:	bf85      	ittet	hi
 800c6da:	238a      	movhi	r3, #138	; 0x8a
 800c6dc:	6003      	strhi	r3, [r0, #0]
 800c6de:	700a      	strbls	r2, [r1, #0]
 800c6e0:	f04f 30ff 	movhi.w	r0, #4294967295
 800c6e4:	bf98      	it	ls
 800c6e6:	2001      	movls	r0, #1
 800c6e8:	4770      	bx	lr
 800c6ea:	4608      	mov	r0, r1
 800c6ec:	4770      	bx	lr
	...

0800c6f0 <expf>:
 800c6f0:	b530      	push	{r4, r5, lr}
 800c6f2:	ed2d 8b02 	vpush	{d8}
 800c6f6:	4d35      	ldr	r5, [pc, #212]	; (800c7cc <expf+0xdc>)
 800c6f8:	b08b      	sub	sp, #44	; 0x2c
 800c6fa:	eeb0 8a40 	vmov.f32	s16, s0
 800c6fe:	f000 f871 	bl	800c7e4 <__ieee754_expf>
 800c702:	f995 3000 	ldrsb.w	r3, [r5]
 800c706:	3301      	adds	r3, #1
 800c708:	ee10 4a10 	vmov	r4, s0
 800c70c:	d030      	beq.n	800c770 <expf+0x80>
 800c70e:	eeb0 0a48 	vmov.f32	s0, s16
 800c712:	f000 f93d 	bl	800c990 <finitef>
 800c716:	b358      	cbz	r0, 800c770 <expf+0x80>
 800c718:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800c7d0 <expf+0xe0>
 800c71c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800c720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c724:	dd35      	ble.n	800c792 <expf+0xa2>
 800c726:	2303      	movs	r3, #3
 800c728:	9300      	str	r3, [sp, #0]
 800c72a:	4b2a      	ldr	r3, [pc, #168]	; (800c7d4 <expf+0xe4>)
 800c72c:	9301      	str	r3, [sp, #4]
 800c72e:	ee18 0a10 	vmov	r0, s16
 800c732:	2300      	movs	r3, #0
 800c734:	9308      	str	r3, [sp, #32]
 800c736:	f7f3 ff07 	bl	8000548 <__aeabi_f2d>
 800c73a:	f995 3000 	ldrsb.w	r3, [r5]
 800c73e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c742:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c746:	b9cb      	cbnz	r3, 800c77c <expf+0x8c>
 800c748:	4b23      	ldr	r3, [pc, #140]	; (800c7d8 <expf+0xe8>)
 800c74a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800c74e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c752:	4668      	mov	r0, sp
 800c754:	f000 f91a 	bl	800c98c <matherr>
 800c758:	b1b0      	cbz	r0, 800c788 <expf+0x98>
 800c75a:	9b08      	ldr	r3, [sp, #32]
 800c75c:	b11b      	cbz	r3, 800c766 <expf+0x76>
 800c75e:	f7fd fc07 	bl	8009f70 <__errno>
 800c762:	9b08      	ldr	r3, [sp, #32]
 800c764:	6003      	str	r3, [r0, #0]
 800c766:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c76a:	f7f4 fa1d 	bl	8000ba8 <__aeabi_d2f>
 800c76e:	4604      	mov	r4, r0
 800c770:	ee00 4a10 	vmov	s0, r4
 800c774:	b00b      	add	sp, #44	; 0x2c
 800c776:	ecbd 8b02 	vpop	{d8}
 800c77a:	bd30      	pop	{r4, r5, pc}
 800c77c:	4917      	ldr	r1, [pc, #92]	; (800c7dc <expf+0xec>)
 800c77e:	2000      	movs	r0, #0
 800c780:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c784:	2b02      	cmp	r3, #2
 800c786:	d1e4      	bne.n	800c752 <expf+0x62>
 800c788:	f7fd fbf2 	bl	8009f70 <__errno>
 800c78c:	2322      	movs	r3, #34	; 0x22
 800c78e:	6003      	str	r3, [r0, #0]
 800c790:	e7e3      	b.n	800c75a <expf+0x6a>
 800c792:	eddf 7a13 	vldr	s15, [pc, #76]	; 800c7e0 <expf+0xf0>
 800c796:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800c79a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c79e:	d5e7      	bpl.n	800c770 <expf+0x80>
 800c7a0:	2304      	movs	r3, #4
 800c7a2:	9300      	str	r3, [sp, #0]
 800c7a4:	4b0b      	ldr	r3, [pc, #44]	; (800c7d4 <expf+0xe4>)
 800c7a6:	9301      	str	r3, [sp, #4]
 800c7a8:	ee18 0a10 	vmov	r0, s16
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	9308      	str	r3, [sp, #32]
 800c7b0:	f7f3 feca 	bl	8000548 <__aeabi_f2d>
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c7bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c7c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c7c4:	f995 3000 	ldrsb.w	r3, [r5]
 800c7c8:	e7dc      	b.n	800c784 <expf+0x94>
 800c7ca:	bf00      	nop
 800c7cc:	200007ec 	.word	0x200007ec
 800c7d0:	42b17180 	.word	0x42b17180
 800c7d4:	0800e2f8 	.word	0x0800e2f8
 800c7d8:	47efffff 	.word	0x47efffff
 800c7dc:	7ff00000 	.word	0x7ff00000
 800c7e0:	c2cff1b5 	.word	0xc2cff1b5

0800c7e4 <__ieee754_expf>:
 800c7e4:	ee10 2a10 	vmov	r2, s0
 800c7e8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800c7ec:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c7f0:	d902      	bls.n	800c7f8 <__ieee754_expf+0x14>
 800c7f2:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c7f6:	4770      	bx	lr
 800c7f8:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800c7fc:	d106      	bne.n	800c80c <__ieee754_expf+0x28>
 800c7fe:	eddf 7a51 	vldr	s15, [pc, #324]	; 800c944 <__ieee754_expf+0x160>
 800c802:	2b00      	cmp	r3, #0
 800c804:	bf18      	it	ne
 800c806:	eeb0 0a67 	vmovne.f32	s0, s15
 800c80a:	4770      	bx	lr
 800c80c:	484e      	ldr	r0, [pc, #312]	; (800c948 <__ieee754_expf+0x164>)
 800c80e:	4282      	cmp	r2, r0
 800c810:	dd04      	ble.n	800c81c <__ieee754_expf+0x38>
 800c812:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 800c94c <__ieee754_expf+0x168>
 800c816:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c81a:	4770      	bx	lr
 800c81c:	2a00      	cmp	r2, #0
 800c81e:	da03      	bge.n	800c828 <__ieee754_expf+0x44>
 800c820:	4a4b      	ldr	r2, [pc, #300]	; (800c950 <__ieee754_expf+0x16c>)
 800c822:	4291      	cmp	r1, r2
 800c824:	f200 808a 	bhi.w	800c93c <__ieee754_expf+0x158>
 800c828:	4a4a      	ldr	r2, [pc, #296]	; (800c954 <__ieee754_expf+0x170>)
 800c82a:	4291      	cmp	r1, r2
 800c82c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c830:	d954      	bls.n	800c8dc <__ieee754_expf+0xf8>
 800c832:	4a49      	ldr	r2, [pc, #292]	; (800c958 <__ieee754_expf+0x174>)
 800c834:	4291      	cmp	r1, r2
 800c836:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800c83a:	d836      	bhi.n	800c8aa <__ieee754_expf+0xc6>
 800c83c:	4947      	ldr	r1, [pc, #284]	; (800c95c <__ieee754_expf+0x178>)
 800c83e:	4411      	add	r1, r2
 800c840:	ed91 7a00 	vldr	s14, [r1]
 800c844:	4946      	ldr	r1, [pc, #280]	; (800c960 <__ieee754_expf+0x17c>)
 800c846:	440a      	add	r2, r1
 800c848:	edd2 7a00 	vldr	s15, [r2]
 800c84c:	ee30 7a47 	vsub.f32	s14, s0, s14
 800c850:	f1c3 0201 	rsb	r2, r3, #1
 800c854:	1ad2      	subs	r2, r2, r3
 800c856:	ee37 0a67 	vsub.f32	s0, s14, s15
 800c85a:	ee60 6a00 	vmul.f32	s13, s0, s0
 800c85e:	eddf 5a41 	vldr	s11, [pc, #260]	; 800c964 <__ieee754_expf+0x180>
 800c862:	ed9f 5a41 	vldr	s10, [pc, #260]	; 800c968 <__ieee754_expf+0x184>
 800c866:	eea6 5aa5 	vfma.f32	s10, s13, s11
 800c86a:	eddf 5a40 	vldr	s11, [pc, #256]	; 800c96c <__ieee754_expf+0x188>
 800c86e:	eee5 5a26 	vfma.f32	s11, s10, s13
 800c872:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 800c970 <__ieee754_expf+0x18c>
 800c876:	eea5 5aa6 	vfma.f32	s10, s11, s13
 800c87a:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800c974 <__ieee754_expf+0x190>
 800c87e:	eee5 5a26 	vfma.f32	s11, s10, s13
 800c882:	eeb0 5a40 	vmov.f32	s10, s0
 800c886:	eea5 5ae6 	vfms.f32	s10, s11, s13
 800c88a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c88e:	eef0 6a45 	vmov.f32	s13, s10
 800c892:	ee20 5a05 	vmul.f32	s10, s0, s10
 800c896:	bb92      	cbnz	r2, 800c8fe <__ieee754_expf+0x11a>
 800c898:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800c89c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800c8a0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800c8a4:	ee36 0a40 	vsub.f32	s0, s12, s0
 800c8a8:	4770      	bx	lr
 800c8aa:	4b33      	ldr	r3, [pc, #204]	; (800c978 <__ieee754_expf+0x194>)
 800c8ac:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800c97c <__ieee754_expf+0x198>
 800c8b0:	4413      	add	r3, r2
 800c8b2:	edd3 7a00 	vldr	s15, [r3]
 800c8b6:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c8ba:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800c980 <__ieee754_expf+0x19c>
 800c8be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c8c2:	ee17 2a90 	vmov	r2, s15
 800c8c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c8ca:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800c8ce:	eeb0 7a40 	vmov.f32	s14, s0
 800c8d2:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800c984 <__ieee754_expf+0x1a0>
 800c8d6:	ee67 7a80 	vmul.f32	s15, s15, s0
 800c8da:	e7bc      	b.n	800c856 <__ieee754_expf+0x72>
 800c8dc:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 800c8e0:	d20b      	bcs.n	800c8fa <__ieee754_expf+0x116>
 800c8e2:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800c94c <__ieee754_expf+0x168>
 800c8e6:	ee70 6a26 	vadd.f32	s13, s0, s13
 800c8ea:	eef4 6ac6 	vcmpe.f32	s13, s12
 800c8ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8f2:	dd02      	ble.n	800c8fa <__ieee754_expf+0x116>
 800c8f4:	ee30 0a06 	vadd.f32	s0, s0, s12
 800c8f8:	4770      	bx	lr
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	e7ad      	b.n	800c85a <__ieee754_expf+0x76>
 800c8fe:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800c902:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800c906:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800c90a:	bfb8      	it	lt
 800c90c:	3264      	addlt	r2, #100	; 0x64
 800c90e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c912:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800c916:	ee76 7a40 	vsub.f32	s15, s12, s0
 800c91a:	ee17 3a90 	vmov	r3, s15
 800c91e:	bfab      	itete	ge
 800c920:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800c924:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800c928:	ee00 3a10 	vmovge	s0, r3
 800c92c:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 800c988 <__ieee754_expf+0x1a4>
 800c930:	bfbc      	itt	lt
 800c932:	ee00 3a10 	vmovlt	s0, r3
 800c936:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800c93a:	4770      	bx	lr
 800c93c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c944 <__ieee754_expf+0x160>
 800c940:	4770      	bx	lr
 800c942:	bf00      	nop
 800c944:	00000000 	.word	0x00000000
 800c948:	42b17217 	.word	0x42b17217
 800c94c:	7149f2ca 	.word	0x7149f2ca
 800c950:	42cff1b5 	.word	0x42cff1b5
 800c954:	3eb17218 	.word	0x3eb17218
 800c958:	3f851591 	.word	0x3f851591
 800c95c:	0800e308 	.word	0x0800e308
 800c960:	0800e310 	.word	0x0800e310
 800c964:	3331bb4c 	.word	0x3331bb4c
 800c968:	b5ddea0e 	.word	0xb5ddea0e
 800c96c:	388ab355 	.word	0x388ab355
 800c970:	bb360b61 	.word	0xbb360b61
 800c974:	3e2aaaab 	.word	0x3e2aaaab
 800c978:	0800e300 	.word	0x0800e300
 800c97c:	3fb8aa3b 	.word	0x3fb8aa3b
 800c980:	3f317180 	.word	0x3f317180
 800c984:	3717f7d1 	.word	0x3717f7d1
 800c988:	0d800000 	.word	0x0d800000

0800c98c <matherr>:
 800c98c:	2000      	movs	r0, #0
 800c98e:	4770      	bx	lr

0800c990 <finitef>:
 800c990:	ee10 3a10 	vmov	r3, s0
 800c994:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800c998:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800c99c:	bfac      	ite	ge
 800c99e:	2000      	movge	r0, #0
 800c9a0:	2001      	movlt	r0, #1
 800c9a2:	4770      	bx	lr

0800c9a4 <_init>:
 800c9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9a6:	bf00      	nop
 800c9a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9aa:	bc08      	pop	{r3}
 800c9ac:	469e      	mov	lr, r3
 800c9ae:	4770      	bx	lr

0800c9b0 <_fini>:
 800c9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9b2:	bf00      	nop
 800c9b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9b6:	bc08      	pop	{r3}
 800c9b8:	469e      	mov	lr, r3
 800c9ba:	4770      	bx	lr
